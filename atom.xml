<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title></title>
	<link href="https://www.snoyman.com/atom.xml" rel="self" type="application/atom+xml"/>
	<link href="https://www.snoyman.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-01-10T00:00:00+00:00</updated>
	<id>https://www.snoyman.com/atom.xml</id>
	<entry xml:lang="en">
		<title>Securing internet communications: a layman&#x27;s guide (2021)</title>
		<published>2021-01-10T00:00:00+00:00</published>
		<updated>2021-01-10T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2021/01/securing-internet-communications-laymans-guide/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2021/01/securing-internet-communications-laymans-guide/</id>
		<content type="html">&lt;p&gt;There has been rising concern over the past number of years around security in personal communications. More recently, with censorship on social media platforms occurring on a grand scale, people are wondering about securing social media platforms. I wouldn&#x27;t call myself an expert on either topic, but I have good knowledge of the underlying technologies and principles, and have done some investigative work into the specific platforms for work. With many friends and family suddenly interested in this topic, I figured I would write up a layman&#x27;s guide.&lt;&#x2F;p&gt;
&lt;p&gt;One word of caveat, since everything is politically charged today. I definitely have my own political views, and I mostly elect to keep them separate from my discussions of technology. I&#x27;m going to do so here as well. I&#x27;m not endorsing or objecting to any recent actions or desires of people to communicate in certain ways. If I ever decided to publicly share my political views, I would do that separately. For now, I&#x27;m simply going through the technological implications.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt; I decided to make a video version of this information as well for those who prefer getting the content in that format. You can check it out &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=RT69LwB2Pyk&quot;&gt;on YouTube&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.bitchute.com&#x2F;video&#x2F;zuT7MMGdEX7c&#x2F;&quot;&gt;on BitChute&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;executive-summary&quot;&gt;Executive summary&lt;&#x2F;h2&gt;
&lt;p&gt;I know there are a lot of details below, but I strongly encourage people to read through it, or at least skim, to understand my recommendations here. But for the busy (or lazy), here are my recommendations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Private communication:
&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;www.signal.org&#x2F;&quot;&gt;Signal&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;wire.com&#x2F;en&#x2F;&quot;&gt;Wire&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;&quot;&gt;Matrix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Be careful about what you say in a group chat&lt;&#x2F;li&gt;
&lt;li&gt;Assume anything you say will last forever&lt;&#x2F;li&gt;
&lt;li&gt;If you want semi-secure email, use &lt;a href=&quot;https:&#x2F;&#x2F;protonmail.com&#x2F;&quot;&gt;ProtonMail&lt;&#x2F;a&gt;, but don&#x27;t rely on it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Social media
&lt;ul&gt;
&lt;li&gt;Your best bet for censorship freedom: host the content yourself, but that&#x27;s hard, and you have to find a place to host it&lt;&#x2F;li&gt;
&lt;li&gt;When you use &lt;em&gt;any&lt;&#x2F;em&gt; platform, you&#x27;re at their mercy regarding censorship&lt;&#x2F;li&gt;
&lt;li&gt;Each platform is pretty upfront at this point about what you&#x27;re getting. Facebook and Twitter will remove some voices, Gab and Parler claim they won&#x27;t&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;General security
&lt;ul&gt;
&lt;li&gt;Use a password manager!!!&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t install random executables and extensions&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t trust messages from people, confirm who they are, check URLs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;OK, with that out of the way: the analysis.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;security-doesn-t-mean-anything&quot;&gt;Security doesn&#x27;t mean anything&lt;&#x2F;h2&gt;
&lt;p&gt;This is the first major point to get across. People often use the term &amp;quot;security&amp;quot; for lots of different things. In a vacuum, the term doesn&#x27;t mean much. That&#x27;s because security only applies in the presence of a specific kind of attack, and we haven&#x27;t defined that attack. It could be a Denial of Service attack, where someone tries to prevent the service from working. It could be a physical attack, like stealing your phone.&lt;&#x2F;p&gt;
&lt;p&gt;What I hear people concerned about right now are two kinds of attacks. They think they&#x27;re related, but in reality they are not. Let me explain those attacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m worried that my private communications are being read by Big Tech or the government&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m worried that my social media posts are going to be censored by Big Tech&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Notice that, in many ways, these are &lt;em&gt;opposite&lt;&#x2F;em&gt; concerns. The former is about ensuring you can say something without anyone else knowing it. The latter is about ensuring you can say something loudly without anyone stopping it. The two different threats necessitate two different analyses, which I&#x27;ll provide below.&lt;&#x2F;p&gt;
&lt;p&gt;Also, let me address a threat I&#x27;m &lt;em&gt;not&lt;&#x2F;em&gt; addressing, since it&#x27;s an inherent contradiction. You can&#x27;t worry about privacy on social media, not in the &amp;quot;blast to the world&amp;quot; public concept it&#x27;s typically used in. If you want something to be private, don&#x27;t put it on social media. This may seem obvious, but many people seem to want to have their cake and eat it too. If you post on social media, you can always be held accountable for what you&#x27;ve said there. If you want privacy, use private communications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;metadata-versus-data&quot;&gt;Metadata versus data&lt;&#x2F;h2&gt;
&lt;p&gt;Metadata is a term like &amp;quot;algorithm&amp;quot; which has a real meaning, but is (ab)used in the media so much to make it seem like scary, unknowable information. It&#x27;s not. Metadata is just &amp;quot;data about data.&amp;quot; Let&#x27;s take a simple private communication example. My doctor wants to send me a message about my test results. Most people, and most governments in fact, recognize a right to privacy for this, and enforce this through law (e.g., HIPAA).&lt;&#x2F;p&gt;
&lt;p&gt;In this example, the &amp;quot;data&amp;quot; would be the results themselves: what test I took, who administered the test, when I took the test, and the results. The metadata would be information about sending the message: who the sender is, who the receiver is, the size of the message, the timestamp of when it was sent, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Many messaging protocols try to ensure two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The data is completely private to only the participants of the conversation&lt;&#x2F;li&gt;
&lt;li&gt;The metadata has as little useful information in it as possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The reason is that, often times, metadata can be read by intervening services. In our test result example, it would be best to assume that a nefarious party will be able to find out that my doctor sent me &lt;em&gt;some message&lt;&#x2F;em&gt; at 4:32pm on Tuesday, and that it was 5mb in size. Most messaging systems try to hide even that, but you don&#x27;t usually get the same guarantees as with the underlying data.&lt;&#x2F;p&gt;
&lt;p&gt;And that brings us to the first important point.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;email-is-busted&quot;&gt;Email is busted&lt;&#x2F;h2&gt;
&lt;p&gt;Don&#x27;t use email for private communications, full stop. It&#x27;s an antiquated, poorly designed system. There are a lot of tools out there to try to secure email, but they are all as holey (not holy) as swiss cheese. The primary issue: most of them have no ability to secure your metadata, and that will often include the subject. Imagine your nefarious character can read:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;From: Dr. Smith &lt;a href=&quot;mailto:drsmith@prostatecancer.org&quot;&gt;drsmith@prostatecancer.org&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
To: John Doe &lt;a href=&quot;mailto:john@doe.com&quot;&gt;john@doe.com&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Subject: Test results, not looking good&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sure, the rest of the message is secure, but does it matter?&lt;&#x2F;p&gt;
&lt;p&gt;Email is a necessary evil. Many services require it as some kind of identity provider. You&#x27;ll have to use it. But don&#x27;t consider anything you put in email safe.&lt;&#x2F;p&gt;
&lt;p&gt;With major providers like Gmail and Outlook, you can safely assume that the companies are spying on everything you&#x27;re saying. I use both, and assume nothing that goes on there is truly private. If you want to harden your email usage a bit, &lt;a href=&quot;https:&#x2F;&#x2F;protonmail.com&#x2F;&quot;&gt;ProtonMail&lt;&#x2F;a&gt; is a good choice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;messaging-apps&quot;&gt;Messaging apps&lt;&#x2F;h2&gt;
&lt;p&gt;Perhaps surprisingly, your best bet for privately communicating with others is messaging apps. These include options like WhatsApp, Telegram, and Signal, and I&#x27;ll get into the trade-offs. As with most things in security, there&#x27;s a major trade-off between &lt;em&gt;security&lt;&#x2F;em&gt; and &lt;em&gt;convenience&lt;&#x2F;em&gt;. Since I&#x27;m writing this for a general purpose audience, I&#x27;m not going to go into the intricacies of things like secure key transfer, since I don&#x27;t think most people will have the stomach for what&#x27;s involved here. Suffice it to say: these options are, in my opinion, the best options that I think most people will be comfortable using. And they&#x27;re secure enough for me to use, as you&#x27;ll see.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;&#x2F;h3&gt;
&lt;p&gt;The primary question for messaging apps is &lt;em&gt;encryption&lt;&#x2F;em&gt;, and specifically &lt;em&gt;public key cryptography&lt;&#x2F;em&gt;. With public key cryptography, I can send you a message that only you can read, and you can verify that I&#x27;m in fact the one who sent it. Done correctly, public key cryptography prevents many kinds of attacks.&lt;&#x2F;p&gt;
&lt;p&gt;But there&#x27;s a twist here. Let&#x27;s say Alice and Bob are trying to talk to each other using a messaging app called SecureTalk. Alice uses the SecureTalk app on her iPhone, and it sends messages to the SecureTalk server, which sends the messages on to Bob&#x27;s Samsung device. Alice encrypts her message, so only the recipient can read it. The question is: who is the recipient? This may seem obvious (Bob), but it&#x27;s not. There are two different possibilities here:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;In something called &lt;em&gt;end-to-end encryption&lt;&#x2F;em&gt;, Alice will encrypt the message so only Bob can read it. She&#x27;ll send the encrypted message and some metadata to the SecureTalk server. The server will be able to read the metadata, but won&#x27;t know what the message itself says. Then the SecureTalk server sends the metadata and encrypted message to Bob, who is the only person who can read the message itself.&lt;&#x2F;li&gt;
&lt;li&gt;The simpler approach is that Alice will encrypt the message so that the SecureTalk server can read it. This prevents random other people on the internet from reading the message, but doesn&#x27;t prevent SecureTalk from reading the message. SecureTalk then reencrypts the message for Bob and sends it to him.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You may think that (1) actually sounds simpler than (2), but for various technical reasons it isn&#x27;t. And therefore, a lot of systems out there still do not provide end-to-end encryption. The primary culprit I want to call out here is Telegram. Telegram is viewed as a secure messaging platform. And it &lt;em&gt;does&lt;&#x2F;em&gt; provide end-to-end encryption, but only if you use its &amp;quot;secret chat&amp;quot; feature. But you lose features with it, and most people don&#x27;t use it most of the time. In other words:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Telegram is not a good choice for security, despite its reputation to the contrary&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;identity&quot;&gt;Identity&lt;&#x2F;h3&gt;
&lt;p&gt;How do you identify yourself to the messaging service and your colleagues? Most apps use one of two methods: phone number (verified via SMS) and email address (verified via confirmation email). For the most part, the former is most popular, and is used exclusively by systems like WhatsApp, Telegram, and Signal. This is good from an ease of use standpoint. But there&#x27;s a major issue to be aware of:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your secure chat identity is tied to your phone number, and most countries track ownership of phones&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Maybe you can buy a burner phone without the number being tied to your identity, I&#x27;m not sure. I&#x27;ve never needed that level of privacy. But the other system, email address, is easier for creating a more anonymous identity. Most people can easily create a ProtonMail account and have an anonymous experience.&lt;&#x2F;p&gt;
&lt;p&gt;This is outside the bounds of security, but another advantage of email-based identity is that family members without their own cell phones (like my kids) can use those systems.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to use email as your identity, and make it easier for people to communicate fully anonymously, systems like &lt;a href=&quot;https:&#x2F;&#x2F;wire.com&#x2F;&quot;&gt;Wire&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&quot;&gt;Matrix&lt;&#x2F;a&gt; are your best bet. Wire honestly overall seems like the best system for secure communication to me, but it has the downside of not being as popular.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exploding-messages&quot;&gt;Exploding messages&lt;&#x2F;h3&gt;
&lt;p&gt;Many systems offer a feature called &amp;quot;exploding messages&amp;quot; or similar. It&#x27;s a nice idea: you can send a message, and the message will be deleted in a certain amount of time. I&#x27;ve used it at work for sending temporary passwords to people when signing into new accounts. It works great when you have full trust in the other side.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT RELY ON EXPLODING MESSAGES&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is no way at all to prevent a nefarious message receiver from screenshotting or otherwise capturing the contents of the message. We&#x27;ve probably all heard horror stories of highschool girls sending their boyfriends inappropriate Snapchat messages, and the boyfriend screenshotting and sharing those pictures with his friends.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;group-chats&quot;&gt;Group chats&lt;&#x2F;h3&gt;
&lt;p&gt;The easiest way to keep a secret among three people is to kill two of them. Group chats are the same. Security is always multilayered, and there are lots of ways of breaching it. In the case of secure messaging, group conversations are far easier to intercept, since:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you break into just one person&#x27;s device, you&#x27;ve won&lt;&#x2F;li&gt;
&lt;li&gt;If you can get just one bad actor included in the group, you&#x27;ve won&lt;&#x2F;li&gt;
&lt;li&gt;If you can spoof just one person (pretending that you are that person), you&#x27;ve won&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Treat as suspect any group chats, unless you absolutely know and trust every single person in the group. And maybe not even then. Like email, consider group chats semi-compromised at all times.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership&quot;&gt;Ownership&lt;&#x2F;h3&gt;
&lt;p&gt;WhatsApp ostensibly uses the same secure protocol as Signal. WhatsApp is widely used. In principle, it&#x27;s an ideal platform for secure communication, assuming you&#x27;re OK with phone number based identity. But there&#x27;s a huge elephant in the room: WhatsApp is owned by Facebook.&lt;&#x2F;p&gt;
&lt;p&gt;If you trust their claims, the messages in WhatsApp are fully end-to-end encrypted. WhatsApp cannot read what you&#x27;re sending to your friends and family. But they can definitely read the metadata. And their privacy policy is troubling at best.&lt;&#x2F;p&gt;
&lt;p&gt;I used to recommend WhatsApp, but I no longer feel comfortable doing so. It&#x27;s not the worst communication platform, not by far. But at this point, I would recommend that you move over to a different platform, and begin recommending the same to your friends and family.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;The top contenders in this category are WhatsApp, Telegram, and Signal. I&#x27;ve eliminated Telegram due to poor encryption, and WhatsApp due to privacy policy and corporate ownership. Signal wins by default. Additionally, if you&#x27;re looking for a platform that allows more anonymity, Wire lets you identify yourself via email, and is just as easy to use. The downside is that it&#x27;s less popular. Finally, Matrix is more sophisticated, and offers some really nice features I haven&#x27;t touched on (specifically, federation). But it&#x27;s not as easy to use as the others. Look to it if you&#x27;re trying to create a community, but it&#x27;s probably not the best choice.&lt;&#x2F;p&gt;
&lt;p&gt;Also, start considering using Signal&#x27;s voice chat as an alternative to normal phone calls, it&#x27;s also end-to-end encrypted.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-platform&quot;&gt;The platform&lt;&#x2F;h2&gt;
&lt;p&gt;As I said above, security is multilayered. You can have the most secure message protocol, with the best encryption, and the most well written application to communicate. But if your platform (your phone, tablet, or computer) are compromised, none of that will matter.&lt;&#x2F;p&gt;
&lt;p&gt;I honestly don&#x27;t know what to say about phones. Apple has a good reputation here. Android has a middling reputation here. There are concerns on spying from certain manufacturers, I don&#x27;t know if there&#x27;s validity. Windows and Mac computers presumably don&#x27;t spy on people, but they might.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I&#x27;m writing this for normal people, so I don&#x27;t want to go too deep on the options here. Experts in the field will start looking at hardened operating systems, and hardware vulnerabilities, and other such things. For the most part, for most people, I&#x27;d recommend making sure your devices are secured. That means good passwords, two factor authentication where relevant, and not losing the physical device.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;social-media&quot;&gt;Social media&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to share cat pictures with your family, probably any social media platform will allow you to do it. That is assuming, of course, that you don&#x27;t express the wrong ideas elsewhere. Ultimately the thing to keep in mind is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you use someone&#x27;s service, they control your voice&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There&#x27;s no value judgement in that statement, it&#x27;s a statement of fact. If you use Twitter, they currently have the full authority, with no legal impediments, to silence you at will, for any reason. Some people believe that they are judiciously exercising a necessary power to protect people from violence. Others believe that they are capriciously censoring people with WrongThink. Again, this post isn&#x27;t about the politics of it, just the facts.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m assuming here that your goal is to get your message out to the world without being stifled. The bad news is: you can&#x27;t do it. Any social media platform can ultimately exercise control over you, despite what they claim. And even if you trust the people running the company, the company may be purchased. Or the people running the computers that the social media platform is using may deny &lt;em&gt;them&lt;&#x2F;em&gt; usage. Or the government may shut them down.&lt;&#x2F;p&gt;
&lt;p&gt;If you want a message out there that no one can stop, your best bet is hosting it yourself. Even &lt;em&gt;that&lt;&#x2F;em&gt; is difficult. I run this website myself (snoyman.com). I bought a domain name. The government could decide I don&#x27;t have a right to have that domain name and take it away. That&#x27;s happened in the past with copyright claims and pirating. I use Amazon as a cloud provider. Amazon may decide I&#x27;m not entitled to use their services. So you have more control with your own hosting, but not total control.&lt;&#x2F;p&gt;
&lt;p&gt;There are more sophisticated censorship-resistant ideas in the world. These focus on decentralization, and leveraging technologies like blockchain to mathematically prevent removal of data. Those systems are not yet mainstream, and there are many practical things that may prevent them.&lt;&#x2F;p&gt;
&lt;p&gt;So if you want your message out there without censorship, here is my advice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Recognize the reality that if you say the wrong thing &lt;em&gt;anywhere&lt;&#x2F;em&gt; on the internet, some platforms my remove you.&lt;&#x2F;li&gt;
&lt;li&gt;Look for providers that espouse a speech policy that you agree with. If you like Twitter and Facebook&#x27;s policies on hate speech, awesome, use them! If you like Gab and Parler&#x27;s approach to free speech, use them!&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t be afraid to use multiple platforms simultaneously. I anticipate an uptick in tooling to automatically post to multiple platforms, though for now simply having a presence in multiple places is possible manually.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You may notice that we&#x27;re heading towards a world of bifurcated communication. Not passing a value judgement, but it&#x27;s likely that Twitter and Facebook will become more filled with people in favor of censoring hate speech, and Gab, Parler, and others will become more filled with people who believe there&#x27;s no such thing as hate speech.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;specific-options&quot;&gt;Specific options&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a short analysis of different platforms I&#x27;m aware of for different purposes. I don&#x27;t actually use all of these, and can&#x27;t really speak to how well they work, what kind of content they have, or what their censorship practices are. There are &lt;em&gt;many&lt;&#x2F;em&gt;, &lt;em&gt;many&lt;&#x2F;em&gt; other options out there too.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;text-based-microblogging&quot;&gt;Text based microblogging&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Twitter is the obvious king here, with the largest platform by far. It&#x27;s also clearly on the side of censoring some content.&lt;&#x2F;li&gt;
&lt;li&gt;Gab is one of the oldest free speech competitors to Twitter. It&#x27;s been labeled as &amp;quot;Nazi Twitter,&amp;quot; and so far has stood up to all attempts to censor it. It runs its own physical machines to avoid companies like Amazon, and has been banned from many payment processors. It has no mobile apps in the app stores, since Apple and Google have banned them. Without much experience with it, it&#x27;s probably the best &amp;quot;free speech microblogging&amp;quot; platform out there. It&#x27;s also developing additional features, like news aggregation, video hosting, and commenting.&lt;&#x2F;li&gt;
&lt;li&gt;Parler is recently becoming popular as a free speech competitor. Unlike Gab, it has (or, at least, had) mobile apps. And it hosts on Amazon. Unlike Gab, it seems to have a strong presence from major right-wing political figures, which has seemingly given in meteoric popularity. However, as I&#x27;m writing this, Parler is being banned from the Google PlayStore, may be banned by Apple, and Amazon is planning on kicking them off their servers. Ultimately, it looks like Parler may simply be relearning lessons Gab already learned.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You likely will be tarred and feathered as a Nazi for using Gab or Parler. I&#x27;ll admit that I&#x27;ve mostly avoided Gab because the content I discuss is purely technical and not at censorship risk, and I didn&#x27;t feel like bringing ire down upon myself. But I am starting to post my content to Gab and Parler as well. Getting ever so slightly political: I hope people start using these platforms for everyday posts so that we don&#x27;t have two raging political extremes yelling at each other from separate platforms.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video-hosting&quot;&gt;Video hosting&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;YouTube is the clear winner here. It&#x27;s owned by Google, and has been pretty much in line with Twitter and Facebook&#x27;s approaches to censorship.&lt;&#x2F;li&gt;
&lt;li&gt;Vimeo is one of the oldest alternatives to YouTube. I&#x27;ve used it in the past. I honestly have no idea what its take is on censorship.&lt;&#x2F;li&gt;
&lt;li&gt;BitChute and Rumble are two alternative video hosting platforms I&#x27;ve seen. I&#x27;ve barely used either one. I will admit that I was a little shocked one of the times I checked out BitChute to see some hardcore Nazi videos. Whether you see that statement as an indictment or endorsement of BitChute should give you an indication of whether you embrace anti-hate speech or free speech more.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;live-streaming&quot;&gt;Live streaming&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;YouTube and Twitch are the two most popular live streaming platforms, and both have embraced some level of censorship.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve heard of DLive as an alternative, and tested it out briefly when I was learning about live streaming myself, but haven&#x27;t investigated it further. I&#x27;ve also heard it referred to as &amp;quot;Nazi Twitch.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve heard that Rumble is going to be adding live streaming functionality.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;others&quot;&gt;Others&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I don&#x27;t know anything about photo sharing ala Instragram&lt;&#x2F;li&gt;
&lt;li&gt;I don&#x27;t know about podcast apps, I&#x27;ve recently given up on podcasts to spend more time on more useful activities&lt;&#x2F;li&gt;
&lt;li&gt;I don&#x27;t think there&#x27;s a real alternative to Facebook from a &amp;quot;stay in touch with family&amp;quot; standpoint&lt;&#x2F;li&gt;
&lt;li&gt;I can&#x27;t even begin to guess at what would be considered a &amp;quot;good&amp;quot; news aggregator.&lt;&#x2F;li&gt;
&lt;li&gt;Reddit is the largest forum&#x2F;discussion board. Famously, they blocked &lt;code&gt;r&#x2F;thedonald&lt;&#x2F;code&gt;, which created its own site TheDonald.win.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;network-effects&quot;&gt;Network effects&lt;&#x2F;h2&gt;
&lt;p&gt;With any of these systems, an important aspect is what&#x27;s known as &amp;quot;network effects.&amp;quot; That means that the system becomes more valuable the more people that use them. WhatsApp is dominant &lt;em&gt;because it&#x27;s dominant&lt;&#x2F;em&gt;. The more people using it, the more people want to use it. In economic terms, these might be termed &lt;em&gt;natural monopolies&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The fact that people who use alternative platforms can be attacked for this increases the network effects. &amp;quot;You&#x27;re using Signal? What are you, some tinfoil hat conspiracy theorist?&amp;quot; &amp;quot;You&#x27;re using Gab? What are you, a Nazi?&amp;quot; Again, not passing judgement, just an honest assessment. It&#x27;s mostly considered non-controversial to use Twitter, Facebook, YouTube, and WhatsApp. You must have some weird reason to use the others.&lt;&#x2F;p&gt;
&lt;p&gt;Keep that in mind when making your decisions. If you decide to ask your family to communicate on Signal, give them a reason for why you&#x27;re doing it. And if you can&#x27;t justify it, maybe the privacy and anti-censorship arguments don&#x27;t really resonate with you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blockchain&quot;&gt;Blockchain?&lt;&#x2F;h2&gt;
&lt;p&gt;No blog post in the past 5 years is complete without mentioning blockchain. I&#x27;ve worked extensively in blockchain for the past four years or so. My company has built blockchain systems, and we&#x27;ve audited a number of them as well. I can tell you a few things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are a &lt;em&gt;lot&lt;&#x2F;em&gt; of incorrect ideas out there about blockchain&lt;&#x2F;li&gt;
&lt;li&gt;Blockchain concepts could definitely be used to build private communications systems and anti-censorship social media&lt;&#x2F;li&gt;
&lt;li&gt;There is a majorly incorrect belief that systems like Bitcoin are &amp;quot;anonymous.&amp;quot; They are not. All transactions are publicly recorded. If anyone figures out what your address is, they know what you&#x27;ve done with your money. Caveat emptor.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are other blockchain systems that introduce true privacy through very sophisticated means. I personally don&#x27;t use cryptocurrencies in any meaningful way, and I&#x27;m not going to recommend them to everyday people. Maybe at some point in the future I&#x27;ll write more about them, but not today. For now: I don&#x27;t consider blockchain any kind of solution to the problems listed here, for most normal people, at today&#x27;s level of maturity of the technology.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-security-recommendations&quot;&gt;Other security recommendations&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;ve gotten this far, congratulations. I&#x27;ve covered everything I promised I&#x27;d cover. But since you&#x27;re here, let me lay out a few other security recommendations for laymen.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Install a password manager! Stop using the same password on every site. Password managers are secure and easy to use. I personally use &lt;a href=&quot;https:&#x2F;&#x2F;bitwarden.com&#x2F;&quot;&gt;BitWarden&lt;&#x2F;a&gt; and have gotten my family and company onto it. Others include LastPass, 1Password, and KeePass.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t install random software for the internet. You&#x27;re far more likely to lose privacy by installing some spyware than anything else.&lt;&#x2F;li&gt;
&lt;li&gt;Limit the number of browser extensions you use. Each extension is a potential intrusion into your online communications. I use the BitWarden extension, with some level of trepidation.&lt;&#x2F;li&gt;
&lt;li&gt;Look at URLs before clicking a link to avoid phishing. Phishing attacks, and social engineering attacks in general, are a primary way to be compromised online.&lt;&#x2F;li&gt;
&lt;li&gt;Secure your devices. Make sure you have a password or biometric lock on your devices. Don&#x27;t lose your devices. If you do lose your device, reset your passwords.&lt;&#x2F;li&gt;
&lt;li&gt;Use advanced credential management like two factor auth whenever possible. &lt;em&gt;Especially&lt;&#x2F;em&gt; if you use the same password everywhere. But seriously: use a password manager. Consider using a system with cloud backup like Authy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;OK, that&#x27;s it, I promise. Let me know in the comments below, or on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;Twitter&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;gab.com&#x2F;snoyberg&quot;&gt;Gab&lt;&#x2F;a&gt;, if you have additional questions that you&#x27;d like me to answer. And if people want, I may turn this blog post into a video as well.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A parents&#x27; guide to Minecraft</title>
		<published>2021-01-09T00:00:00+00:00</published>
		<updated>2021-01-09T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2021/01/parents-guide-minecraft/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2021/01/parents-guide-minecraft/</id>
		<content type="html">&lt;p&gt;With the COVID-19 lockdowns, our children started getting interested in Minecraft. It started with our eldest (12 years old), who wanted to play on a server with his friends. Later, our 10 and 8 year olds wanted to get involved too. This seems like it should have been a straightforward experience: buy the game, install it, walk away.&lt;&#x2F;p&gt;
&lt;p&gt;However, between the different platforms, accounts, editions, and servers, we ran into sufficient pain points that I decided it would be worth writing up a guide for other parents getting their kids started with things.&lt;&#x2F;p&gt;
&lt;p&gt;As a quick plug: among video games for kids, we put Minecraft towards the top of our recommended list. It requires thought, planning, and strategizing to play. Especially during lockdown, together with a good &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;&quot;&gt;Discord audio channel&lt;&#x2F;a&gt;, Minecraft can get a great way to keep the children semi-social with their peers. And as parents, even we have gotten into the game more recently.&lt;&#x2F;p&gt;
&lt;p&gt;OK, let&#x27;s get into it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;editions&quot;&gt;Editions&lt;&#x2F;h2&gt;
&lt;p&gt;If you look around the internet, there are a &lt;em&gt;lot&lt;&#x2F;em&gt; of different editions of Minecraft. Most of that is historical. These days, there are just two editions: Java and Bedrock. Pocket, Console, and &amp;quot;Nintendo Switch&amp;quot; editions (and I&#x27;m sure there are others) are now part of Bedrock.&lt;&#x2F;p&gt;
&lt;p&gt;This is the first major decision you&#x27;ll need to make for&#x2F;with the kids: which edition of Minecraft are you going to buy? My short recommendation is: if you don&#x27;t have a reason to do otherwise, go with Bedrock. But let&#x27;s dive into the reasons for Java first, and then come back to Bedrock.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;java-edition&quot;&gt;Java edition&lt;&#x2F;h3&gt;
&lt;p&gt;The Java edition of Minecraft is the original version of the game. It runs on Windows (including older Windows versions), Mac, and Linux. There are a lot of &amp;quot;mods&amp;quot; out there that allow you to change how the games work. There are various servers with interesting alternative versions of the game in place.&lt;&#x2F;p&gt;
&lt;p&gt;Each individual user of the Java edition will need their own license to play. You can definitely let multiple children all play on a single computer, but they won&#x27;t be able to play together.&lt;&#x2F;p&gt;
&lt;p&gt;And finally: the Java edition can only play multiplayer with other Java players. So if your kids have friends playing on Java (which ours did), you&#x27;ll need to use Java as well to play.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bedrock-edition&quot;&gt;Bedrock edition&lt;&#x2F;h3&gt;
&lt;p&gt;After Microsoft bought Mojang (the company behind Minecraft), they created a new version of the codebase in C++. I can only assume that they did this to make a more efficient and more compatible version of the game. That&#x27;s the first thing to point out: Bedrock runs a bit faster than Java, and runs on many more platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Bedrock is available for Windows 10 PCs, though no other computers. If you&#x27;re on older versions of Windows, or on Mac or Linux, Java is your only option. There are mobile versions of iOS and Android. And there are versions of Xbox, PlayStation, and Nintendo Switch. If you have any desire to play from a mobile or console, you&#x27;ll have to use Bedrock.&lt;&#x2F;p&gt;
&lt;p&gt;The ability to share the game across multiple users depends entirely on the platform. On the Switch, for instance, everyone in the family can play from their own account on our main Switch device. I believe family sharing for iOS and Android would let the whole family play with a single purchase, though we haven&#x27;t tried it.&lt;&#x2F;p&gt;
&lt;p&gt;The Windows 10 story is the most confusing. I&#x27;ve seen conflicting information on family sharing for the Microsoft Store. I &lt;em&gt;think&lt;&#x2F;em&gt; the intent is that you can make one purchase for the entire family, but I&#x27;m honestly not certain. Microsoft should improve their documentation on this. In any event, here&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;archive&#x2F;blogs&#x2F;henrikn&#x2F;sharing-windows-10-store-apps-with-your-family&quot;&gt;an article on microsoft.com from 2015&lt;&#x2F;a&gt; that seems to address this case. Given that I really don&#x27;t know Microsoft&#x27;s intent, I&#x27;m not going to give any concrete recommendations on how many licenses to purchase.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;our-decision&quot;&gt;Our decision&lt;&#x2F;h3&gt;
&lt;p&gt;We bought the Nintendo Switch edition a while ago (which ultimately changed to the Bedrock edition). We also bought the Java edition for our eldest, Bedrock next for the Windows 10 PCs in the house, and ultimately after a &lt;em&gt;lot&lt;&#x2F;em&gt; of nagging bought the other two kids the Java edition as well. On the one hand, the costs add up. On the other hand, this game has been a hit for about 9 months now, so amortized the cost is completely reasonable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accounts&quot;&gt;Accounts&lt;&#x2F;h2&gt;
&lt;p&gt;Microsoft jumps in yet again to confuse things! This one&#x27;s a bit easier to explain though, now that we know about editions. Java edition originally had its own user accounts, known as Mojang Accounts. Those are currently being converted into Microsoft accounts, which I&#x27;ll describe next. If you purchase a new Java license, just go ahead and use a Microsoft account. If you already have a Java license, you&#x27;ll need to move the Mojang account to a Microsoft account in the near future.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re not in the Microsoft world—and that describes me about 2 years ago—you may know nothing about Microsoft accounts. Microsoft accounts tie into many different services, such as Microsoft 365 (no surprise there), Skype, and Xbox Live. Minecraft is really leveraging that last bit. If you&#x27;re on Bedrock edition, Minecraft will use your Xbox Live profile, your Xbox Live friends, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;As a parent, you can create a family group and add your children to it, which will let you know how much time they spend playing games on Windows 10 and Xbox.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Microsoft &lt;em&gt;really&lt;&#x2F;em&gt; screwed up naming, and has both a &amp;quot;Microsoft Account&amp;quot; and a &amp;quot;Microsoft Work or School Account&amp;quot;. If you&#x27;re at a company that uses something like Microsoft Teams, you have one of the latter. Just be aware that these two kinds of accounts are &lt;em&gt;mostly&lt;&#x2F;em&gt; separate, except for a few websites (like Azure DevOps) that let you log in as both. All of this is stated as someone who pulled off a Google=&amp;gt;Microsoft migration for my company about a year ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiplayer&quot;&gt;Multiplayer&lt;&#x2F;h2&gt;
&lt;p&gt;Server based play, which we&#x27;ll get to next, is one way of doing multiplayer Minecraft. But it&#x27;s not the only one, and definitely not the easiest method. This point definitely confused me at first.&lt;&#x2F;p&gt;
&lt;p&gt;When you start a Minecraft game, you are creating a world. On the Java edition, you&#x27;ll do this from the &amp;quot;Single Player&amp;quot; menu. Despite that nomenclature, you are still able to play with other people in a world you created in single player. The same idea applies in Bedrock, though Bedrock fortunately doesn&#x27;t apply the confusing term &amp;quot;single player&amp;quot; to it.&lt;&#x2F;p&gt;
&lt;p&gt;On both Java and Bedrock, you can find games being played by others inside your local area network (LAN), meaning other people in the house. If you&#x27;re on Bedrock, you can join worlds of other Xbox Live friends. The latter is a much easier way to connect with friends.&lt;&#x2F;p&gt;
&lt;p&gt;The caveat to this is that you can only play this multiplayer game when the host—the person who created the world—is online. If you want to be able to play regardless of who&#x27;s online, you&#x27;ll need a server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;servers&quot;&gt;Servers&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to leave a world up for any of your family or friends to join, you&#x27;ll want a server. Both Java and Bedrock provide server software which you can freely run yourself. Personally, I decided that I spend enough time at work running servers for people, and I&#x27;d rather just pay someone else to do it for me.&lt;&#x2F;p&gt;
&lt;p&gt;Microsoft offers a feature called Realms, where you can pay them $8 a month (at time of writing) to host your realm. It&#x27;s basically just a server with membership controlled via Xbox Live accounts. It&#x27;s a nice, easy way to invite others to join you.&lt;&#x2F;p&gt;
&lt;p&gt;There are plenty of other companies out there offering free and paid hosting options. Keep in mind that, since it&#x27;s relatively new, there aren&#x27;t as many Bedrock hosting options out there. And the free options typically have some significant limitations, such as requiring that you watch an ad on their site every 90 minutes to keep the server running.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re like me, and don&#x27;t want to have to bother with maintaining this stuff, I&#x27;d recommend budgeting $5-$10 per month for a server, if that&#x27;s what your kids are going to enjoy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dns-madness&quot;&gt;DNS madness&lt;&#x2F;h3&gt;
&lt;p&gt;And one final note. The thing that finally got me to write this blog post was a &lt;em&gt;really&lt;&#x2F;em&gt; frustrating bug where my daughter&#x27;s computer couldn&#x27;t connect to servers. I still haven&#x27;t discovered exactly why that happened, but I learned more about how DNS resolution works:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Alright, I think I figured it out. I don&amp;#39;t know where exactly this is properly documented, but it seems you need an SRV record on:&lt;br&gt;&lt;br&gt; _minecraft._tcp.&amp;lt;HOSTNAME&amp;gt;&lt;br&gt;&lt;br&gt;I&amp;#39;ve been planning on writing a &amp;quot;Minecraft guide for parents&amp;quot; blog post... now I think I have to.&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1347946862008000516?ref_src=twsrc%5Etfw&quot;&gt;January 9, 2021&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;If, like me, you&#x27;re a tech person&#x2F;network guy who is stumped as to &amp;quot;where the hell is the DNS record,&amp;quot; you&#x27;re looking for an SRV record with &lt;code&gt;_minecraft._tcp&lt;&#x2F;code&gt; prepended. I have no idea where this is officially documented, but since I spend so much time pulling out my three remaining hairs on this, I figured I&#x27;d share it here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;encouragement&quot;&gt;Encouragement&lt;&#x2F;h2&gt;
&lt;p&gt;Our kids have absolutely fallen in love with Minecraft, and spend basically every waking moment talking about it. They play Minecraft music videos, have convinced the 4-year-old to play make-believe Minecraft, play with Minecraft foam swords and lego sets, etc. You get it, it&#x27;s an obsession. If you go down this path, prepare for the possibility that they will talk at you about Minecraft every chance they get.&lt;&#x2F;p&gt;
&lt;p&gt;For me, when I finally started playing the game, it was a major bonding experience with the kids. They got to teach me a lot, which was fun for them. I had better planning and organization skills, and for once they were willing to listen to me when I told them to organize their closets (i.e. chests).&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re looking for milestones and achievements to set, I&#x27;d recommend these. Keep in mind that I&#x27;m still quite a newb at the game, and there are likely much more exciting things to discover too.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build a base&lt;&#x2F;strong&gt; There are so many variations on bases you can build. We&#x27;re currently working with an underground base, but there are so many other styles you can make.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mine diamonds&lt;&#x2F;strong&gt; Diamonds are one of the best materials in the game, and proper mining of them requires quite a bit of patience. Read up on some tutorials about getting down to Y=12 (meaning, 12 layers from the bottom of the game) to maximize your mining potential.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explore the map&lt;&#x2F;strong&gt; Consider taking a locator map and a boat for this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explore the nether&lt;&#x2F;strong&gt; You will die.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Start enchanting items&lt;&#x2F;strong&gt; You&#x27;ll need diamonds, obsidian, and will want bookshelves to maximize your enchantments. That will require lots of leather (from cows) and paper (from sugar cane). The planning to make all of that work is a great exercise.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mix potions&lt;&#x2F;strong&gt; I haven&#x27;t done this yet, we still haven&#x27;t found Nether Wart.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Defeat the Ender Dragon&lt;&#x2F;strong&gt; We did this once, and it was &lt;em&gt;incredibly&lt;&#x2F;em&gt; exciting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Play with red stone&lt;&#x2F;strong&gt; I don&#x27;t know much about it yet, but from what I&#x27;ve heard it&#x27;s a lot like programming with transistors. Red stone conducts &amp;quot;red stone energy&amp;quot; (basically electricity), and then there are things you can create for gating that energy and other such things.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Be creative&lt;&#x2F;strong&gt; Survival mode, the default mode, will result in a lot of deaths from enemies, lava, falling, drowning, and more. Creative mode lets you explore your creative side, with no death, and an infinite supply of all of the materials. It can be a fun way to get started.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If I got anything wrong or left anything out, let me know! Happy Minecrafting!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Live Coding: Rust reverse proxy</title>
		<published>2020-12-27T00:00:00+00:00</published>
		<updated>2020-12-27T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/12/live-coding-rust-reverse-proxy/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/12/live-coding-rust-reverse-proxy/</id>
		<content type="html">&lt;p&gt;I&#x27;ve been doing quite a bit of experimenting recently with my video recording and streaming setup. As a combination of &amp;quot;let&#x27;s test it out&amp;quot; and &amp;quot;let&#x27;s see if anyone likes this kind of thing,&amp;quot; I&#x27;m going to be doing a live coding session this Tuesday, December 29, at 10am Eastern. If everything goes according to plan (which it may not), you can &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;ksKpx6MlMPw&quot;&gt;view the live stream and the recording on YouTube&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;&#x2F;style&gt;&lt;div class=&#x27;embed-container&#x27;&gt;&lt;iframe src=&#x27;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;FcHYQMRfGWw&#x27; frameborder=&#x27;0&#x27; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;
&lt;p&gt;I&#x27;m also planning on streaming simultaneously on Twitter via Periscope, so if you follow me on Twitter you may see it pop up there. The current plan is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Live code a reverse proxy using Rust and Hyper. I&#x27;m hoping to use the latest Hyper 0.14 and Tokio 1.0, which I haven&#x27;t tested out yet at all.&lt;&#x2F;li&gt;
&lt;li&gt;Make modifications in response to any chats I see (assuming I get chats to work).&lt;&#x2F;li&gt;
&lt;li&gt;Answer any Q&amp;amp;A that pops up.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This first go through will likely be rocky, so if you want to come and help me out, and&#x2F;or laugh at me fumbling through coding and fighting A&#x2F;V issues simultaneously, come check it out!&lt;&#x2F;p&gt;
&lt;p&gt;If anyone has requests for future live streaming sessions, or Q&amp;amp;A they&#x27;d like to queue up in advance, please let me know in the comments below or on Twitter. I&#x27;d definitely like to do some Haskell live coding too, so I&#x27;m curious what people would like to see on that front in particular.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell: The Bad Parts, part 3</title>
		<published>2020-12-09T00:00:00+00:00</published>
		<updated>2020-12-09T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/12/haskell-bad-parts-3/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/12/haskell-bad-parts-3/</id>
		<content type="html">&lt;p&gt;If you didn&#x27;t see it, please check out &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;10&#x2F;haskell-bad-parts-1&quot;&gt;part 1 of this series&lt;&#x2F;a&gt; to understand the purpose of this. You can also check out &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;11&#x2F;haskell-bad-parts-2&quot;&gt;part 2&lt;&#x2F;a&gt;. Now, for more bad parts!&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is the last blog post in this series where I had specific ideas queued up. So it&#x27;s likely that this will be the last post for a while until I get annoyed by something again. So if you really want to see a continuation, find some bit of Haskell code that will annoy me and share it with me!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pattern-matching&quot;&gt;Pattern matching&lt;&#x2F;h2&gt;
&lt;p&gt;OK, this section title is a complete troll. I don&#x27;t think pattern matching is a bad part of Haskell. I think pattern matching is one of the most powerful features in all of Haskell, especially when combined with sum types&#x2F;ADTs. If someone asked me for a singular reason to consider using Haskell, this is what I&#x27;d point to.&lt;&#x2F;p&gt;
&lt;p&gt;Which is why the bad parts of pattern matching in Haskell are so bad. My &amp;quot;Haskell elevator pitch&amp;quot; is almost immediately undermined by terrible defaults.&lt;&#x2F;p&gt;
&lt;p&gt;My elevator pitch goes something like this: with sum types, you get to define your data types far more explicitly than in languages with only product types. And then you can rely on the compiler to tell you when you&#x27;ve made a change to a data constructor, or added a new data constructor. I usually try to understand first what someone&#x27;s field of experience is and then build a real-ish example of sum types from that.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, that&#x27;s all a lie, at least by default. Some specific parts of pattern matching &lt;em&gt;do&lt;&#x2F;em&gt; in fact let the compiler tell you when you&#x27;ve screwed up. (And if it&#x27;s not clear: my favorite part of GHC is when it tells me I&#x27;ve screwed up.) If I delete a data constructor, or if I add a new field to a data constructor and I was pattern matching on positionally, the compiler will error.&lt;&#x2F;p&gt;
&lt;p&gt;But this code compiles just fine, and I wish it didn&#x27;t!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MySum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Baz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Baz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not only does it compile just fine, but &lt;em&gt;there are no warnings&lt;&#x2F;em&gt;! &amp;quot;OK Michael,&amp;quot; you say. &amp;quot;Who cares? &lt;em&gt;Everyone&lt;&#x2F;em&gt; knows that you should compile with &lt;code&gt;-Wall&lt;&#x2F;code&gt; turned on.&amp;quot; To that, I say three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;No, not everyone knows it&lt;&#x2F;li&gt;
&lt;li&gt;Because of spurious warnings in &lt;code&gt;-Wall&lt;&#x2F;code&gt;, like unused import warnings, important warnings like this often get drowned out. (Yes, it&#x27;s better to be warning-free for this reason...)&lt;&#x2F;li&gt;
&lt;li&gt;Yeah, but it gets worse&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s elaborate on (3). I&#x27;m a good programmer. So I turn on &lt;code&gt;-Wall&lt;&#x2F;code&gt;. Now I&#x27;m guaranteed a warning on incomplete pattern matches... right? Right?!? Right!!!!!!1111oneoneone&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;OPTIONS_GHC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; -Wall #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MySum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Baz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nope, denied! I get no warning here. Even though I have a &lt;em&gt;refutable pattern match&lt;&#x2F;em&gt; in my lambda, the compiler provides no warnings. &amp;quot;Didn&#x27;t you know you needed to turn on &lt;code&gt;incomplete-uni-patterns&lt;&#x2F;code&gt; for that?&amp;quot; Actually, no, for a long time I didn&#x27;t know that.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;OPTIONS_GHC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; -Wall -Wincomplete-uni-patterns #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MySum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Baz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately, there&#x27;s some &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.haskell.org&#x2F;ghc&#x2F;ghc&#x2F;-&#x2F;issues&#x2F;15656&quot;&gt;hope on the horizon&lt;&#x2F;a&gt; for this one.&lt;&#x2F;p&gt;
&lt;p&gt;One more annoyance, only tangentially related. GHC: please stop generating partial functions on my behalf!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Staff
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Principal
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Teacher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; { subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your subject is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Principal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I just discovered that this can be detected with &lt;code&gt;-Wpartial-fields&lt;&#x2F;code&gt;, which is nice, but not part of &lt;code&gt;-Wall&lt;&#x2F;code&gt;. I&#x27;ve been giving advice for a long time to not include any field labels in sum types, and I&#x27;ll continue to give that advice.&lt;&#x2F;p&gt;
&lt;p&gt;Note that some Haskellers won&#x27;t like: this topic came up for me recently while writing a blog post comparing pattern matching in Haskell and Rust (probably going live next week). And, yet again, Rust does this better than Haskell. Yes, Rust is strict and Haskell is lazy. But as far as I&#x27;m concerned, in this case, Rust is simply more type safe than Haskell.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slow-compilation&quot;&gt;Slow compilation&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s get an elephant in the room out in the open. Compiling is slow. Some of this is because of GHC. Some of this is because our libraries are trying to do overly complicated things (like stream fusion in &lt;code&gt;vector&lt;&#x2F;code&gt; and &lt;code&gt;text&lt;&#x2F;code&gt;). This is a bane for Haskell, constantly.&lt;&#x2F;p&gt;
&lt;p&gt;As a recent example, I needed to add a flag to &lt;code&gt;http-conduit&lt;&#x2F;code&gt; to disable the &lt;code&gt;aeson&lt;&#x2F;code&gt; dependency:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;.&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg?ref_src=twsrc%5Etfw&quot;&gt;@snoyberg&lt;&#x2F;a&gt; kindly provided &amp;quot;-aeson&amp;quot; flag to http-conduit which saves my time very much. Thanks.&lt;br&gt;BTW, why does building aeson take so much time?&lt;&#x2F;p&gt;&amp;mdash; 山本和彦 (@kazu_yamamoto) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kazu_yamamoto&#x2F;status&#x2F;1334988010434150401?ref_src=twsrc%5Etfw&quot;&gt;December 4, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;I&#x27;m not going to beat up on this too much, since GHC is a complicated project and people are trying hard to both improve the existing support &lt;em&gt;and&lt;&#x2F;em&gt; add new features. And library authors (myself included) are caught between providing features and speeding up compilation.&lt;&#x2F;p&gt;
&lt;p&gt;There is a part of me that wonders if part of the problem is that our standard library (&lt;code&gt;base&lt;&#x2F;code&gt;) doesn&#x27;t provide enough functionality out of the box, and leaves a lot of external libraries to implement and reimplement similar functionality. As more time goes on, I think Vincent Hanquez was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-foundation&quot;&gt;completely correct about how to improve Haskell&lt;&#x2F;a&gt; and I wish I&#x27;d embraced it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;text&quot;&gt;Text&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s so much wrong here. And I can&#x27;t even blame it all on the &lt;code&gt;text&lt;&#x2F;code&gt; package. But I can blame a lot of it on the &lt;code&gt;text&lt;&#x2F;code&gt; package. Consider this section incoherent rambling instead of well reasoned arguments. (Typically a fair assumption with anything I say to be honest.)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why oh why is it UTF-16 instead of UTF-8? This is terrible! Except...&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s completely irrelevant what encoding &lt;code&gt;text&lt;&#x2F;code&gt; uses under the surface, because &lt;em&gt;you can&#x27;t directly interact with its underlying representation&lt;&#x2F;em&gt;. And &lt;em&gt;that&#x27;s&lt;&#x2F;em&gt; because...&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;text&lt;&#x2F;code&gt; uses unpinned memory to avoid heap fragmentation, which is a Good Thing, but then &lt;code&gt;text&lt;&#x2F;code&gt; can&#x27;t be directly used in FFI calls. Which is probably a good thing, since it uses the wrong character encoding under the surface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;text&lt;&#x2F;code&gt; defines its own &lt;code&gt;Builder&lt;&#x2F;code&gt; type. It shouldn&#x27;t. We should be using the &lt;code&gt;ByteString&lt;&#x2F;code&gt; &lt;code&gt;Builder&lt;&#x2F;code&gt; everywhere, and have a &lt;code&gt;newtype&lt;&#x2F;code&gt; wrapper around it to encode the invariant &amp;quot;must be UTF-8 encoded.&amp;quot; &lt;code&gt;Builder&lt;&#x2F;code&gt; is a &lt;em&gt;wonderful&lt;&#x2F;em&gt; thing in Haskell, and it gets used far less than it should because it&#x27;s such a PITA to deal with all of this. (I tried to address that in &lt;code&gt;rio&lt;&#x2F;code&gt;.) This is exactly the same as how we don&#x27;t use &lt;code&gt;Vector&lt;&#x2F;code&gt; enough because of all the flaws with using it.&lt;&#x2F;li&gt;
&lt;li&gt;And, of course, &lt;code&gt;text&lt;&#x2F;code&gt; has stream fusion, which is shouldn&#x27;t. I&#x27;ll touch on this even more in the next section.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, Vincent got this all right. We need a singular packed data type. It should underly a &lt;code&gt;ByteString&lt;&#x2F;code&gt; and a &lt;code&gt;Text&lt;&#x2F;code&gt;. A &lt;code&gt;Text&lt;&#x2F;code&gt; should be a simple newtype around a &lt;code&gt;ByteString&lt;&#x2F;code&gt;. Users should never have to make a decision around pinned vs unpinned memory, that should be an implementation detail. (And sure, why not, give users a knob somewhere to control this when they know better than the defaults.) Have a single &lt;code&gt;Builder&lt;&#x2F;code&gt; type that builds up &lt;code&gt;Vector&lt;&#x2F;code&gt;s, and have it work for &lt;code&gt;ByteString&lt;&#x2F;code&gt; and &lt;code&gt;Text&lt;&#x2F;code&gt; too.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and just a side note...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MAKE TEXT UBIQUITOUS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We are now more than 10 years since the first release of &lt;code&gt;text&lt;&#x2F;code&gt; to Hackage. And people are still regularly using &lt;code&gt;String&lt;&#x2F;code&gt;. &lt;strong&gt;I&lt;&#x2F;strong&gt; regularly use &lt;code&gt;String&lt;&#x2F;code&gt; in examples. We really should be able to move our ecosystem over to better types.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve broken everyone&#x27;s code for far less important things many times in the past. Just to rile you all up: Foldable&#x2F;Traversable Proposal wasn&#x27;t important or interesting, this should have taken precedence.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lazy-data-structures&quot;&gt;Lazy data structures&lt;&#x2F;h2&gt;
&lt;p&gt;There should be no lazy &lt;code&gt;ByteString&lt;&#x2F;code&gt;. There should be no lazy &lt;code&gt;Text&lt;&#x2F;code&gt;. There isn&#x27;t a lazy &lt;code&gt;Vector&lt;&#x2F;code&gt;, and that&#x27;s a Good Thing.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But what if I want to read a 10GB file into memory lazily?&amp;quot; You&#x27;re using the wrong abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But what if I want to lazily generate a massive file?&amp;quot; You&#x27;re using the wrong abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the problem: we don&#x27;t have the right abstraction in &lt;code&gt;base&lt;&#x2F;code&gt;. We ended up at a local minimum.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lazy lists get used for &amp;quot;generators&amp;quot; and for data storage, when they&#x27;re only half good for the former&lt;&#x2F;li&gt;
&lt;li&gt;We don&#x27;t get a real generator type in &lt;code&gt;base&lt;&#x2F;code&gt;, because we have lazy lists&lt;&#x2F;li&gt;
&lt;li&gt;We don&#x27;t get a real data storage type in &lt;code&gt;base&lt;&#x2F;code&gt;, because &lt;code&gt;vector&lt;&#x2F;code&gt; exists and sucks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s what we need to do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Get rid of lazy lists from the language entirely&lt;&#x2F;li&gt;
&lt;li&gt;Add a streaming data interface to &lt;code&gt;base&lt;&#x2F;code&gt; that properly handles side-effects without hacks like lazy I&#x2F;O&lt;&#x2F;li&gt;
&lt;li&gt;Provide great tooling around that streaming data interface, like stream fusion&lt;&#x2F;li&gt;
&lt;li&gt;Add a &lt;code&gt;Vector&lt;&#x2F;code&gt;-like type to &lt;code&gt;base&lt;&#x2F;code&gt; that only handles storage, no fusion or generation, and have it work with the streaming data interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, I&#x27;ll say: Vincent got it right.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qualified-imports&quot;&gt;Qualified imports&lt;&#x2F;h2&gt;
&lt;p&gt;Since everyone loves to fixate on trivial syntactic issues, let me include one of those here at the end so everyone can ignore my other points. Qualified imports suck. Actually, modules suck. Actually, modules and packages suck. Actually, it all sucks.&lt;&#x2F;p&gt;
&lt;p&gt;The first problem? Our names are too verbose. &lt;code&gt;import qualified Control.Monad.Trans.Class as Trans&lt;&#x2F;code&gt;. I&#x27;ve actually typed that, many times. That&#x27;s too much typing. Why is it &lt;code&gt;Control.Monad&lt;&#x2F;code&gt;? How does it help me?&lt;&#x2F;p&gt;
&lt;p&gt;What package does that module live in? You can&#x27;t tell from the name. It&#x27;s &lt;code&gt;transformers&lt;&#x2F;code&gt;. I think. Oh wait, no, now it&#x27;s in &lt;code&gt;base&lt;&#x2F;code&gt;. My bad. Anyway, packages are able to just trample all over each others&#x27; namespaces like this. It&#x27;s annoying.&lt;&#x2F;p&gt;
&lt;p&gt;And because Haskell doesn&#x27;t have object syntax, importing identifiers directly, or qualified importing modules, is an absolute must for accessing most functionality on types. OOP kinda beat us here.&lt;&#x2F;p&gt;
&lt;p&gt;Yay, more incoherent rambling!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;should-we-fix-this&quot;&gt;Should we fix this?&lt;&#x2F;h2&gt;
&lt;p&gt;OK, serious talk here. I think the warnings issue I mentioned above should absolutely be fixed. For the last section: I don&#x27;t see a reality where a holistic change to Haskell syntax, module hierarchy, etc, could ever be possible. We&#x27;re stuck with what we&#x27;ve got, possibly with minor ergonomic improvements.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know what to say about the standard library stuff I&#x27;ve been raising. I really do believe that a combination of good streaming abstraction, built-in packed data, and more sensible &lt;code&gt;ByteString&lt;&#x2F;code&gt; and &lt;code&gt;Text&lt;&#x2F;code&gt; types in the standard library itself could be a huge improvement. It&#x27;s also the kind of thing that takes a huge amount of buy in and effort, and I don&#x27;t think it would happen easily.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest questions that pop up for me would be:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;What would the streaming abstraction be? Contrary to what I bet you&#x27;re thinking, I don&#x27;t think it should be based on &lt;code&gt;conduit&lt;&#x2F;code&gt; or anything like it. Instead, I&#x27;d base it on the stream fusion types directly. I think it&#x27;s a simpler abstraction, and fits the goals better.&lt;&#x2F;li&gt;
&lt;li&gt;Where do these types live? I think long term, if we want this kind of thing to succeed, we need them to be part of &lt;code&gt;base&lt;&#x2F;code&gt;. But we&#x27;d need to have a community-wide effort around building a separate library first, get huge buy-in, and then consider adding them to &lt;code&gt;base&lt;&#x2F;code&gt;. And &lt;code&gt;foundation&lt;&#x2F;code&gt; is probably already pretty close to what we&#x27;d end up building.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;My gut feeling is that no one has the stomach for this. I don&#x27;t think I do. It&#x27;s certainly tempting though.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Haskell Foundation</title>
		<published>2020-12-02T00:00:00+00:00</published>
		<updated>2020-12-02T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/12/haskell-foundation/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/12/haskell-foundation/</id>
		<content type="html">&lt;p&gt;My move to Haskell over a decade ago was the first time I truly engaged with an open source language community. When I realized how powerful a language Haskell is, and what kind of potential it had to improve programming productivity and software safety, I decided to invest a significant amount of my time and energy into promoting its adoption. That included open source library work, tooling work, documentation writing, and joining FP Complete.&lt;&#x2F;p&gt;
&lt;p&gt;I have not always seen eye to eye with everyone else in the Haskell community. I think that’s a Good Thing. We need diversity of opinion and thought, and representation of many different needs. I have decidedly taken a Bazaar approach to my work: let’s start a new idea, open it to the world, and see what sticks. I believe this has paid dividends. It has also often put me at odds with others in the community.&lt;&#x2F;p&gt;
&lt;p&gt;This post is not about past mistakes and regrets, though I have both. It’s about forging a path forward.&lt;&#x2F;p&gt;
&lt;p&gt;I believe open, transparent, respectful, and vigorous technical debate will improve any technical project. I believe clear signposting of goals and processes allows people to opt in and out of projects. I believe that the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Cathedral_and_the_Bazaar&quot;&gt;Bazaar&lt;&#x2F;a&gt; model is a good one, and we should continue to encourage ideas to flourish or fail on their merits. But I also think we would benefit from more communication frameworks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-foundation&quot;&gt;Haskell Foundation&lt;&#x2F;h2&gt;
&lt;p&gt;Several months ago, I was approached by some of the members of the nascent Haskell Foundation to get my feedback and gauge my interest in involvement. I have continued those discussions in private ever since. I raised many concerns along the way, many of which have been addressed as of the official public announcement. I want to first give a lot of credit to those at HF I’ve interacted with. It is not easy to receive such critiques without a clear path to success. Thank you for putting up with me.&lt;&#x2F;p&gt;
&lt;p&gt;I know my concerns have been heard. I similarly know that not all of my concerns have been fully addressed, but that is a process that will take time. Given that, I want to publicly state a few things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I support the overall goals of the Haskell Foundation, and believe fully that the founders are earnest in their commitment to them.&lt;&#x2F;li&gt;
&lt;li&gt;I will be participating in the Haskell Foundation going forward. My initial focus will be on process and transparency improvements (see below). I hope to be able to participate as well in improving the beginner and industrial adoption story.&lt;&#x2F;li&gt;
&lt;li&gt;I will be coordinating with the teams around Stack and Stackage to confirm that we will affiliate with the Haskell Foundation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I retain some healthy skepticism around all of these steps. In particular, I believe the vagueness of goals in HF may be hiding some deep disagreements yet to manifest. I believe at this point affiliation is a vague commitment. I’m not certain HF can adequately address some of the outstanding technical deficiencies and disagreements in the Haskell ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;However, the best way to address that skepticism is to dive right in. As I said, I believe the HF members are earnest in their stated goals. I will be just as earnest in my attempts to work with the HF and help improve both it and the Haskell ecosystem in general.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;To succeed, I believe the HF needs to provide clear outgoing communication on what it is doing and how it works. It needs to provide for a robust process of receiving and processing incoming communication. It needs to operate as transparently as possible. It needs to foster projects on a path to success. It needs to allow projects to experiment, explore, and exchange ideas.&lt;&#x2F;p&gt;
&lt;p&gt;The backbone to all of this is clarity. I have already written some of my aspirations in my &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;transparency&quot;&gt;transparency blog post&lt;&#x2F;a&gt;. I have been asked to help the HF adhere to these goals. And I look forward to participating.&lt;&#x2F;p&gt;
&lt;p&gt;I would provide more details here on how I will be proceeding, but I honestly don’t know. I have thoughts. We should have a central repository of documentation that clearly lays out how to get things done. There should be simple ways to interact with the group. There should be escalation points where issues are not being addressed. The Haskell Foundation interim board recently approved moving HF discussions to &lt;a href=&quot;https:&#x2F;&#x2F;discourse.haskell.org&#x2F;c&#x2F;haskell-foundation&#x2F;11&quot;&gt;a Discourse instance on haskell.org&lt;&#x2F;a&gt;. I&#x27;d encourage others interested in participating to sign up there.&lt;&#x2F;p&gt;
&lt;p&gt;As I work on this, I intend to update status here. I don’t know what the timeline will reasonably look like. Many people (myself included) have busy schedules and other responsibilities. I intend to find some way to foster open communication.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a pessimist by nature. I see the worst possible outcomes first. Those abound, and always will. But the HF is the first initiative in a long time in the Haskell community that is trying to bring everyone to the table, and improve the state of the Haskell ecosystem. I will do what I can to make that succeed. And I will communicate honestly on how I see that progressing.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell: The Bad Parts, part 2</title>
		<published>2020-11-09T00:00:00+00:00</published>
		<updated>2020-11-09T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/11/haskell-bad-parts-2/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/11/haskell-bad-parts-2/</id>
		<content type="html">&lt;p&gt;If you didn&#x27;t see it, please check out &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;10&#x2F;haskell-bad-parts-1&quot;&gt;part 1 of this series&lt;&#x2F;a&gt; to understand the purpose of this. Now, for more bad parts!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;partial-functions-in-general&quot;&gt;Partial functions (in general)&lt;&#x2F;h2&gt;
&lt;p&gt;Laziness very likely belongs in this list. My favorite part of criticizing laziness is how quickly people jump to defend it based on edge cases. So let&#x27;s be a bit more nuanced before I later get far &lt;em&gt;less&lt;&#x2F;em&gt; nuanced. Laziness is &lt;strong&gt;obviously&lt;&#x2F;strong&gt; a good thing. Strictness is &lt;strong&gt;obviously&lt;&#x2F;strong&gt; a good thing. They also both suck. It depends on context and purpose. Each of them introduce different kinds of issues. The real question is: what&#x27;s a more sensible default? We&#x27;ll get to that another time.&lt;&#x2F;p&gt;
&lt;p&gt;I called this section partial functions. Am I having a senior moment? Maybe, but I intentionally started with laziness. In a strict language, function calls can result in exceptions being thrown, segfaulting occurring, or panicking. (And if I write a &amp;quot;Rust: The Bad Parts&amp;quot;, believe me, I&#x27;ll be mentioning panicking.) The fact that a function &lt;em&gt;acts&lt;&#x2F;em&gt; like it can successfully perform something, but in fact fails in a predictable way (like failing a &lt;code&gt;HashMap&lt;&#x2F;code&gt; lookup), it should be reflected at the type level. If not, ya dun goofed.&lt;&#x2F;p&gt;
&lt;p&gt;Also, if you have a language that doesn&#x27;t let you reflect this information at the type level: ya dun goofed.&lt;&#x2F;p&gt;
&lt;p&gt;Partial functions are the antithesis of this concept. They allow you to say &amp;quot;yeah dude, I can &lt;em&gt;totally&lt;&#x2F;em&gt; give you the first value in an empty list.&amp;quot; Partial functions are like politicians: you can tell they&#x27;re lying because their lips are moving. (&amp;quot;But Michael,&amp;quot; you say. &amp;quot;Functions don&#x27;t have lips!&amp;quot; Whatever, I&#x27;m waxing poetical.)&lt;&#x2F;p&gt;
&lt;p&gt;Alright, so plenty of languages screw this up. Haskell tells those languages &amp;quot;hold my beer.&amp;quot;&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;holdmybeer.jpg&quot; style=&quot;max-width:90%&quot;&gt;
&lt;p&gt;Haskell screws up partial functions way, way worse than other languages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It promotes a whole bunch of them in the standard libraries and &lt;code&gt;Prelude&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Some libraries, like &lt;code&gt;vector&lt;&#x2F;code&gt; (I&#x27;m getting to you, don&#x27;t worry) make it &lt;em&gt;really&lt;&#x2F;em&gt; confusing by providing an &lt;code&gt;index&lt;&#x2F;code&gt; and &lt;code&gt;unsafeIndex&lt;&#x2F;code&gt; function. Hint: &lt;code&gt;index&lt;&#x2F;code&gt; isn&#x27;t really safe, it&#x27;s just less unsafe.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s no obvious way to search for usages of these partial functions.&lt;&#x2F;li&gt;
&lt;li&gt;And, by far, the worst...&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;values-are-partial-too&quot;&gt;Values are partial too!&lt;&#x2F;h3&gt;
&lt;p&gt;Only in a lazy language does this exist. You call a function. You get a result. You continue working. In any other non-lazy language, that means you have a value. If I have a &lt;code&gt;u32&lt;&#x2F;code&gt; in Rust, I actually have a &lt;code&gt;u32&lt;&#x2F;code&gt; in Rust. Null pointers in languages like C and Java somewhat muddy this situation, but at least primitive types are really there if they say they&#x27;re there.&lt;&#x2F;p&gt;
&lt;p&gt;No, not Haskell. &lt;code&gt;x :: Int&lt;&#x2F;code&gt; may in fact not exist. It&#x27;s a lie. &lt;code&gt;let x = head [] :: [Int]&lt;&#x2F;code&gt; is a box waiting to explode. And you find out &lt;em&gt;much&lt;&#x2F;em&gt; later. And it&#x27;s even worse than that. &lt;code&gt;let alice = Person { name = &amp;quot;Alice&amp;quot;, age = someAge }&lt;&#x2F;code&gt; may give you a valid &lt;code&gt;Person&lt;&#x2F;code&gt; value. You can evaluate it. But Cthulhu help you if you evaluate &lt;code&gt;age alice&lt;&#x2F;code&gt;. Maybe, just maybe, &lt;code&gt;someAge&lt;&#x2F;code&gt; is a bottom value. Boom! You&#x27;ve smuggled a dirty bomb out.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not advocating for removing laziness in Haskell. In fact I&#x27;m not really advocating for much of anything in this series. I&#x27;m just complaining, because I like complaining.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;em&gt;if&lt;&#x2F;em&gt; I was to advocate some changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Deprecate partial functions&lt;&#x2F;li&gt;
&lt;li&gt;Introduce a naming scheme for partial functions to be more obvious&lt;&#x2F;li&gt;
&lt;li&gt;Introduce a compiler warning to note partial function use (with a pragma to turn off specific usages)&lt;&#x2F;li&gt;
&lt;li&gt;Warn by default on partial pattern matches&lt;&#x2F;li&gt;
&lt;li&gt;Advocate strict data fields by default&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;but-ackshualllly-infinite-loops&quot;&gt;But ackshualllly, infinite loops&lt;&#x2F;h3&gt;
&lt;p&gt;Someone&#x27;s gonna say it. So I&#x27;ll say it. Yes, without major language changes, you can&#x27;t prevent partial functions. You can&#x27;t even detect them, unless Turing was wrong (and I have my suspicions.) But Haskell community, please, please learn this lesson:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DON&#x27;T LET THE PERFECT BE THE ENEMY OF THE GOOD&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can get rid of many of the most common partial functions trivially. We can detect many common cases by looking for partial pattern matches and usage of &lt;code&gt;throw&lt;&#x2F;code&gt; (again, horribly named function). &amp;quot;But we can&#x27;t get everything&amp;quot; doesn&#x27;t mean &amp;quot;don&#x27;t try to get something.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hubris&quot;&gt;Hubris&lt;&#x2F;h2&gt;
&lt;p&gt;Given what I just said, we Haskellers have a lot of hubris. Each time you say &amp;quot;if it compiles it works,&amp;quot; a thunk dies and collapses into a blackhole. We&#x27;ve got plenty of messes in Haskell that don&#x27;t sufficiently protect us from ourselves. The compiler can only do as good a job as our coding standards and our libraries allow.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But Haskell&#x27;s at least better than languages like PHP.&amp;quot; I mean, obviously I agree with this, or I&#x27;d be writing PHP. But since I&#x27;m being ridiculously hyperbolic here, let me make a ridiculous claim:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PHP is better than Haskell, since at least you don&#x27;t get a false sense of security&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;- Michael Snoyman, totally 100% what he actually believes, you should totally quote this out of context&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ve said this so many times. So I&#x27;ll say it again. Using a great language with safety features is one tiny piece of the puzzle.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Did you get the software requirements right?&lt;&#x2F;li&gt;
&lt;li&gt;Did you leverage the type system to prevent the bugs you&#x27;re trying to prevent?&lt;&#x2F;li&gt;
&lt;li&gt;Do your underlying libraries have bugs?&lt;&#x2F;li&gt;
&lt;li&gt;Did you find a way to implement a function with correct types but incorrect semantics?&lt;&#x2F;li&gt;
&lt;li&gt;Did you host the thing on a dinky server sitting under your desk and forget that you have power outages on a daily basis?&lt;&#x2F;li&gt;
&lt;li&gt;Did you forget to write a single test case?&lt;&#x2F;li&gt;
&lt;li&gt;Do your test cases actually test anything meaningful?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are &lt;em&gt;so many ways&lt;&#x2F;em&gt; for software to fail outside the purview of the type system. We&#x27;ve got to stop thinking that somehow Haskell (or, for that matter, Rust, Scala, and other strongly typed languages) are some kind of panacea. Seriously: the PHP people at least know their languages won&#x27;t protect them from anything. We should bring some of that humility back to Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;Haskell provides me tools to help prevent certain classes of bugs, so I can spend more of my time catching a bunch of other bugs that I&#x27;m absolutely going to write. Because I&#x27;m dumb. And we need to remember: we&#x27;re all dumb.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-partial-functions&quot;&gt;More partial functions!&lt;&#x2F;h2&gt;
&lt;p&gt;You know what&#x27;s worse than partial functions? Insidiously partial functions. We&#x27;ve all been screaming about &lt;code&gt;head&lt;&#x2F;code&gt; and &lt;code&gt;tail&lt;&#x2F;code&gt; for years. My hackles rise every time I see a &lt;code&gt;read&lt;&#x2F;code&gt; instead of &lt;code&gt;readMaybe&lt;&#x2F;code&gt;. I can&#x27;t remember the last time I saw the &lt;code&gt;!!&lt;&#x2F;code&gt; operator in production code.&lt;&#x2F;p&gt;
&lt;p&gt;But there are plenty of other functions that are just as dangerous, if not more so. More dangerous because they aren&#x27;t well known to be partial. They are commonly used. People don&#x27;t understand why they&#x27;re dangerous. And they fail only in edge cases that people aren&#x27;t thinking about.&lt;&#x2F;p&gt;
&lt;p&gt;Exhibit A: I present &lt;code&gt;decodeUtf8&lt;&#x2F;code&gt;. (Thanks &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kerckhove_ts&#x2F;status&#x2F;1321390954172063745?s=20&quot;&gt;Syd&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;Go ahead, search your codebase. Be dismayed that you&#x27;ve found it present.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s wrong with &lt;code&gt;decodeUtf8&lt;&#x2F;code&gt;? As we established last time, character encoding crap breaks stuff in production. UTF-8 works about 99% of the time, especially for people in Western countries. You&#x27;ll probably forget to even test for it. And that function looks so benign: &lt;code&gt;decodeUtf8 :: ByteString -&amp;gt; Text&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT BE FOOLED&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This function is a ticking time bomb. Use &lt;code&gt;decodeUtf8&#x27;&lt;&#x2F;code&gt; (yes, it&#x27;s named that badly, just like &lt;code&gt;foldl&#x27;&lt;&#x2F;code&gt;) and explicitly handle error cases. Or use I&#x2F;O functions that explicitly handle UTF-8 decoding errors and throw a runtime exception.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;I can&#x27;t believe Michael still thinks runtime exceptions are a good idea.&amp;quot; I&#x27;ll get to that another time. I don&#x27;t really believe they&#x27;re a good idea. I believe they are omnipresent, better than bottom values, and our least-bad-option.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;law-abiding-type-classes&quot;&gt;Law-abiding type classes&lt;&#x2F;h2&gt;
&lt;p&gt;Now I&#x27;ve truly lost it. What in tarnation could be wrong with law-abiding type classes? They&#x27;re good, right? Yes, they are! The section heading is complete clickbait. Haha, fooled you!&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a concept in the Haskell community that all type classes should be law-abiding. I&#x27;ve gone to the really bad extreme opposing this in the past with early versions of &lt;code&gt;classy-prelude&lt;&#x2F;code&gt;. In my defense: it was an experiment. But it was a bad idea. I&#x27;ve mostly come around to the idea of type classes being lawful. (Also, the original namespacing issues that led to &lt;code&gt;classy-prelude&lt;&#x2F;code&gt; really point out a much bigger bad part of Haskell, which I&#x27;ll get to later. Stay tuned! Hint: Rust beat us again.)&lt;&#x2F;p&gt;
&lt;p&gt;Oh, right. Speaking of Rust: they do &lt;em&gt;not&lt;&#x2F;em&gt; believe in law-abiding type classes. There are plenty of type classes over there (though they call them &lt;code&gt;trait&lt;&#x2F;code&gt;s) that are completely ad-hoc. I&#x27;m looking at you, &lt;code&gt;FromIterator&lt;&#x2F;code&gt;. This is Very, Very Bad of course. Or so my Haskell instincts tell me. And yet, it makes code Really, Really Good. So now I&#x27;m just confused.&lt;&#x2F;p&gt;
&lt;p&gt;Basically: I think we need much more nuanced on this in the Haskell community. I&#x27;m leaning towards my &lt;em&gt;very&lt;&#x2F;em&gt; original instincts having been spot on. So:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Law abiding type classes: great&lt;&#x2F;li&gt;
&lt;li&gt;Flippantly non-law-abiding type classes ala the original &lt;code&gt;classy-prelude&lt;&#x2F;code&gt;: bad&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;You know what I meant&amp;quot; typeclasses like &lt;code&gt;ToContent&lt;&#x2F;code&gt; in Yesod: also great&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This isn&#x27;t exactly in line with a &amp;quot;bad part&amp;quot; of Haskell. Up until now I&#x27;ve been giving a nuanced reflection on my journeys in Haskell. Let me try something better then. Ahem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DON&#x27;T LECTURE ME ON LAW ABIDING TYPE CLASSES AND FLAGRANTLY VIOLATE LAWS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m staring at you, &lt;code&gt;Eq Double&lt;&#x2F;code&gt;. No, you cannot do equality on a &lt;code&gt;Double&lt;&#x2F;code&gt;. (And thanks again to Syd for this idea.) Rust, again, Got It Right. See &lt;code&gt;PartialEq&lt;&#x2F;code&gt; vs &lt;code&gt;Eq&lt;&#x2F;code&gt;. Floating point values do not allow for total equality. This makes things like &lt;code&gt;Map Double x&lt;&#x2F;code&gt; dangerous. Like, super dangerous. Though maybe not as dangerous as &lt;code&gt;HashMap Double x&lt;&#x2F;code&gt;, which deserves its own rant later.&lt;&#x2F;p&gt;
&lt;p&gt;So come down from your high horses. We don&#x27;t have law abiding type classes. We have &amp;quot;if I close my eyes and pretend enough then maybe I have law abiding type classes.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unused-import-warnings&quot;&gt;Unused import warnings&lt;&#x2F;h2&gt;
&lt;p&gt;Haskell has a dumb set of default warnings enabled. (&amp;quot;I think you mean GHC, one implementation of Haskell, not Haskell the language itself.&amp;quot; Uh-huh.) How can we &lt;em&gt;not&lt;&#x2F;em&gt; generate a warning for a partial pattern match? Come on! ADTs and pattern matching is &lt;em&gt;the&lt;&#x2F;em&gt; killer feature to first expose people to. And it&#x27;s a total lie: the compiler by default doesn&#x27;t protect us from ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;So of course, we all turn on &lt;code&gt;-Wall&lt;&#x2F;code&gt;. Because we&#x27;re good kids. We want to do the right thing. And this, of course, turns on unused import warnings. And because each new release of GHC and every library on Hackage likes to mess with us, we are &lt;em&gt;constantly&lt;&#x2F;em&gt; exporting new identifiers from different modules.&lt;&#x2F;p&gt;
&lt;p&gt;The amount of time I have spent adding weird hacks to account for the fact that &lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt; is suddenly exposed from &lt;code&gt;Prelude&lt;&#x2F;code&gt;, and therefore my &lt;code&gt;import Data.Monoid ((&amp;lt;&amp;gt;))&lt;&#x2F;code&gt; isn&#x27;t necessary, is obscene. The introduction of fiddly CPP to work around this sucks. In fact, this all sucks. It&#x27;s horrible.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t realize how bad it was until I spent more time writing Rust. It reminded me that I never had these problems back as a Java developer. Or C++. This has been a Haskell-only problem for me. Maybe I&#x27;ll get into this later.&lt;&#x2F;p&gt;
&lt;p&gt;Side note: I&#x27;m trying to avoid turning this series into &amp;quot;Rust is better than Haskell.&amp;quot; But the fact is that many of the problems we face in Haskell &lt;em&gt;don&#x27;t&lt;&#x2F;em&gt; exist in Rust, for one reason or another. This specific issue is due to a better crate&#x2F;module system, and object syntax. As long as we&#x27;re getting our cards on the table, I also think Rust demonstrates what a good freeze&#x2F;unfreeze story would look like (I&#x27;m looking at you &lt;code&gt;Map&lt;&#x2F;code&gt; and &lt;code&gt;HashMap&lt;&#x2F;code&gt;), what a good standard library would be, and what a regular release schedule with backwards compat should look like. Oh, and of course good community processes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-vector-package&quot;&gt;The vector package&lt;&#x2F;h2&gt;
&lt;p&gt;Did I just mention that Rust can show us what a good standard library is? Yes I did! I&#x27;m only going to begin to scratch the surface on how bad &lt;code&gt;vector&lt;&#x2F;code&gt; is here. It&#x27;s really bad. &lt;code&gt;vector&lt;&#x2F;code&gt; is at the level of being &lt;em&gt;just bad enough&lt;&#x2F;em&gt; that no one wants to use it, but being &lt;em&gt;just barely serviceable enough&lt;&#x2F;em&gt; and &lt;em&gt;just wide spread enough&lt;&#x2F;em&gt; that no one wants to replace it. There are two Haskellers I deeply trust who have taken on efforts to do just that, and even I haven&#x27;t moved over.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, the &lt;code&gt;vector&lt;&#x2F;code&gt; package is a package. It shouldn&#x27;t be. Packed arrays should be in the standard library. Rust got this right. &lt;code&gt;Vec&lt;&#x2F;code&gt; is completely core to the language. And it ties in nicely with built-in syntax for arrays and slices, plus the &lt;code&gt;vec!&lt;&#x2F;code&gt; macro. Haskell&#x27;s got lists. You can turn on &lt;code&gt;OverloadedLists&lt;&#x2F;code&gt;, but I don&#x27;t know if anyone does. And besides, you&#x27;ve gotta reach outside of &lt;code&gt;base&lt;&#x2F;code&gt; to get a &lt;code&gt;Vector&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vector&lt;&#x2F;code&gt; is slow to compile. Dog slow. Sloth-recovery-from-Thanksgiving-dinner slow. I&#x27;m peeved by this right now because I had to compile it recently.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vector&lt;&#x2F;code&gt; seems to have a litany of runtime performance issues. I haven&#x27;t tested these myself. But people regularly complain to me about them. Enough people, with enough Haskell experience, that I believe them. (And &lt;code&gt;text&lt;&#x2F;code&gt;: you&#x27;re in this list too.)&lt;&#x2F;p&gt;
&lt;p&gt;Oh, right, &lt;code&gt;text&lt;&#x2F;code&gt;. &lt;code&gt;vector&lt;&#x2F;code&gt; is completely different from &lt;code&gt;bytestring&lt;&#x2F;code&gt; and &lt;code&gt;text&lt;&#x2F;code&gt;. And there&#x27;s the pinned-vs-unpinned memory issue that screws things up. I&#x27;m unaware of any other language needing to make that distinction. (If there &lt;em&gt;are&lt;&#x2F;em&gt; examples, please let me know. I&#x27;d love to read about it.)&lt;&#x2F;p&gt;
&lt;p&gt;Stream fusion is dumb. I mean, it&#x27;s not dumb, I love it. &amp;quot;Stream fusion should be a default when performing array operations so that you magically mostly fuse away intermediate buffers but sometimes it doesn&#x27;t work because rewrite rules are really fiddly and then my program consumes 8GB of memory whoopsie daisy&amp;quot; is dumb. Really, really dumb.&lt;&#x2F;p&gt;
&lt;p&gt;The API for &lt;code&gt;vector&lt;&#x2F;code&gt; is lacking. Sure, for what it does, it&#x27;s fine. But every time I use &lt;code&gt;.push()&lt;&#x2F;code&gt; in Rust, I&#x27;m reminded that it could and should be better. I don&#x27;t want to work with lists all the time. I want to have a mutable vector API that I&#x27;m happy to use. I want to sprinkle more &lt;code&gt;runST&lt;&#x2F;code&gt; throughout my code. I want phrases like &amp;quot;freeze&amp;quot; and &amp;quot;thaw&amp;quot; to be common place, much like &lt;code&gt;mut&lt;&#x2F;code&gt; is regularly used in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and there&#x27;s no such thing as a strict, boxed vector. Boo.&lt;&#x2F;p&gt;
&lt;p&gt;So in sum:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;&#x2F;code&gt; tries to do two things (streaming library and packed buffers)&lt;&#x2F;li&gt;
&lt;li&gt;It does neither particularly well&lt;&#x2F;li&gt;
&lt;li&gt;There are enough friction points that people don&#x27;t use it where it should be used, making lists overused&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s not core to the language and libraries, but it&#x27;s &amp;quot;kinda core,&amp;quot; preventing better options from succeeding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&amp;quot;Michael, you&#x27;re not being very nice to the maintainers of this library.&amp;quot; I mean these comments in complete respect. I&#x27;ve &lt;em&gt;advocated&lt;&#x2F;em&gt; for many of the things I&#x27;m now saying are bad. We learn new stuff and move on. If I had a vision for how to make &lt;code&gt;vector&lt;&#x2F;code&gt; better, I&#x27;d propose it. I&#x27;m just airing my concerns. I have a vague idea on a nicer library, where you have a typeclass and associated type determining the preferred storage format for each type that can be stored, growable storage, an easy-to-use freeze&#x2F;thaw, minimal dependencies, quick compile, and associated but separate stream fusion library. But I think working on it would be like &lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;927&#x2F;&quot;&gt;adding a new standard&lt;&#x2F;a&gt;, so I&#x27;m not jumping into the fray.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-time&quot;&gt;Next time...&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve dropped plenty of hints for future parts in this series. But I&#x27;d really love to hear ideas from others. Thanks to Syd for providing some of the fodder this round. And thanks to a number of people for mentioning partial functions.&lt;&#x2F;p&gt;
&lt;p&gt;I kind of think I owe some attacks on async exceptions. Stay tuned!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clarification&quot;&gt;Clarification&lt;&#x2F;h2&gt;
&lt;p&gt;Someone&#x27;s gonna get upset about my Turing comment above. No, I&#x27;m not challenging Turing on the halting problem. I only wanted to imply I was for poops and giggles.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Transparency</title>
		<published>2020-10-29T00:00:00+00:00</published>
		<updated>2020-10-29T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/10/transparency/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/10/transparency/</id>
		<content type="html">&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;haskell-bad-parts-1&quot;&gt;yesterday&#x27;s blog post&lt;&#x2F;a&gt;, I (lovingly) attacked a few things about Haskell. My goal was pretty explicit: I wanted to educate. I was hoping that by announcing some of these language warts loudly, people could avoid some footguns, and their Haskell experience would be more pleasant. This would lead to more Haskell success, which IMO is a Very Good Thing.&lt;&#x2F;p&gt;
&lt;p&gt;I can tell you all that not once did the thought cross my mind that I should try to get any of these issues resolved. Maybe that&#x27;s because I spend a lot more time educating these days. The reason doesn&#x27;t really matter.&lt;&#x2F;p&gt;
&lt;p&gt;The really exciting thing, though, is that I almost immediately found out that one of the warts I mentioned will hopefully soon be fixed:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;That&amp;#39;s the moment where I am pleased to announce that I have started a proposal to fix sum and product in base:&lt;br&gt;&lt;br&gt;-&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;oPTFobN7ab&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;oPTFobN7ab&lt;&#x2F;a&gt;&lt;br&gt;&lt;br&gt;And a merge request is in the works to implement it : &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;W7Ua4XfXwd&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;W7Ua4XfXwd&lt;&#x2F;a&gt;&lt;br&gt;&lt;br&gt;Hope this addresses some of your concerns, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg?ref_src=twsrc%5Etfw&quot;&gt;@snoyberg&lt;&#x2F;a&gt; :) &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;ujere27Bzi&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;ujere27Bzi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Ἑκάτη (@TechnoEmpress) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;TechnoEmpress&#x2F;status&#x2F;1321391161496489990?ref_src=twsrc%5Etfw&quot;&gt;October 28, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;This is wonderful news, and I&#x27;m happy to hear it. In the ensuing discussion, there were some comments directed at me indicating that there is some desire to make changes like this more approachable. This isn&#x27;t the first I&#x27;m hearing of this. Over the past few months, I&#x27;ve had a few discussions with Haskell community members. I wish these discussions were more public and accessible, but we&#x27;ll get to that.&lt;&#x2F;p&gt;
&lt;p&gt;I truly believe people are trying to improve Haskell community processes right now. I&#x27;ve shared some thoughts with people to help encourage them towards what I think are vital improvements to make Haskell a better language, a better ecosystem, and a better community. Now that these conversations are (thankfully) beginning to happen more openly, I&#x27;d like to put some of my thoughts down in writing here.&lt;&#x2F;p&gt;
&lt;p&gt;The notes below turned out to be something of a stream-of-consciousness brain dump. There&#x27;s no particular order or priority. Also, one final thing. I&#x27;m making aspirational statements below. I certainly try to achieve these goals. I don&#x27;t always succeed. My failings as an individual and a maintainer do not preclude that correctness of my points below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-transparency&quot;&gt;What is transparency?&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into my points, I want to clarify what I consider transparency. It&#x27;s not simply about an existence proof that a sufficiently dedicated person could discover information. It&#x27;s the property that a reasonably interested person can easily find out information about a project. But it&#x27;s more than that. Simply having introspection is the first step. Understanding how things work, how to contribute, how to influence, and how to disagree are vital too. A truly transparent project, in my definition, provides an easy onramp for new and interested parties to come up to speed on current status, see the inner workings of current members, volunteer to be &amp;quot;part of the team,&amp;quot; and constructively argue for a new direction.&lt;&#x2F;p&gt;
&lt;p&gt;OK, that&#x27;s it for my definition. You can disagree with that definition, but hopefully you can now understand better my concrete points below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiple-media&quot;&gt;Multiple media&lt;&#x2F;h2&gt;
&lt;p&gt;Do you like mailing lists? Twitter? Reddit? Blog posts? RSS feeds? Slack? Discourse? Discord? Gitter? Keybase? Zoom?&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m willing to bet no one in the world is going to answer yes to all of these.&lt;&#x2F;p&gt;
&lt;p&gt;An open, transparent community needs to advertise information. And it needs to do this in multiple media. A simple example of this is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write a blog post&lt;&#x2F;li&gt;
&lt;li&gt;In the blog post, reference a dedicated discussion point (comments section, a GitHub issue, a Slack channel, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Reference it from an index page on a Wiki or website
&lt;ul&gt;
&lt;li&gt;Personally, I think &lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;08&#x2F;thoughts-on-documentation&quot;&gt;wikis are a waste of time&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Publish an RSS feed from that blog&lt;&#x2F;li&gt;
&lt;li&gt;Provide a &amp;quot;subscribe via email&amp;quot; feature on that RSS feed&lt;&#x2F;li&gt;
&lt;li&gt;Post the blog on Twitter, LinkedIn, Facebook, and Reddit&lt;&#x2F;li&gt;
&lt;li&gt;Monitor feedback on multiple venues, and if worthy, write a follow up blog post to provide updates&#x2F;clarify points, since not everyone will see a Reddit comment you make
&lt;ul&gt;
&lt;li&gt;As an example: this blog post is &lt;em&gt;exactly&lt;&#x2F;em&gt; that&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It takes a bit more effort to do all of this. But it&#x27;s completely worth it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;centralize-information&quot;&gt;Centralize information&lt;&#x2F;h2&gt;
&lt;p&gt;Almost as a counterpoint to the above: information needs to be centralized too. It&#x27;s great to have a Reddit thread where 23 comments deep someone finally explained something. But having that comment&#x27;s content and permalink put on the project&#x27;s main website or the &lt;code&gt;README.md&lt;&#x2F;code&gt; of its GitHub repo is vital. Information discovery is difficult. If something is important, make it available centrally. And then, if relevant, advertise the presence of that information broadly, using the techniques above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appropriate-signal-to-noise-ratio&quot;&gt;Appropriate signal to noise ratio&lt;&#x2F;h2&gt;
&lt;p&gt;In the beginning of Hitchhiker&#x27;s Guide to the Galaxy, Arthur Dent discovers that, for months, there have been plans to demolish his house sitting in the basement of the planning office. He&#x27;s told he needs to take initiative to be involved in government to know about these kinds of things. Ultimately, some galactic aliens pull the same thing on us Earthlings and blow us up. (Oh, sorry, spoiler alert.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt; Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;jk6d2z&#x2F;transparency&#x2F;gah6ogj&#x2F;&quot;&gt;george_____t&lt;&#x2F;a&gt;, here are the &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;quotes&#x2F;40705-but-the-plans-were-on-display-on-display-i-eventually&quot;&gt;two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;quotes&#x2F;379100-there-s-no-point-in-acting-surprised-about-it-all-the&quot;&gt;quotes&lt;&#x2F;a&gt;. From Hitchhiker&#x27;s Guide. If you&#x27;ve never read it, or even if you have, you should check these out.&lt;&#x2F;p&gt;
&lt;p&gt;Being told &amp;quot;but there was a GitHub issue 5 months ago that proposed this&amp;quot; is the same thing. Burying high priority information in the middle of a highly active channel (issue tracker, active mailing list, etc.) obscures things.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not always obvious when a change is something that warrants a heavy signal. Mistakes will happen. Sometimes you&#x27;ll overshare. But much worse is undersharing. Examples:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;OVERSHARE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;BREAKING! Super super important! Everyone needs to know that &lt;strong&gt;we changed which hue of purple we used for our logo&lt;&#x2F;strong&gt;!!!!1111oneoneoneeleventyone&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UNDERSHARE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah, of course we removed the &lt;code&gt;+&lt;&#x2F;code&gt; operator from the language. We thought it wasn&#x27;t important. Didn&#x27;t you see the 17th comment on the issue discussing the new color scheme for the website?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Try to identify what people will consider a major change versus a minor change. If you&#x27;re not sure, &lt;strong&gt;ask&lt;&#x2F;strong&gt;. And if something will be a major change for some and minor for others: create multiple distribution channels. Not everyone in the Haskell community will consider a breaking change to Yesod a big deal. But Yesod users will. That&#x27;s why we have a dedicated Yesod blog and mailing list.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;canvass-people-directly&quot;&gt;Canvass people directly&lt;&#x2F;h2&gt;
&lt;p&gt;People are busy. People are lazy. People are socially awkward. People are unsure if their opinions are valuable. People are unsure if their opinions are welcome.&lt;&#x2F;p&gt;
&lt;p&gt;It is insufficient to put a message on a mailing list and ask for feedback. Even if you go through the steps above, you&#x27;re going to miss people.&lt;&#x2F;p&gt;
&lt;p&gt;When I&#x27;ve made major changes, I&#x27;ve tried (and sometimes failed) to reach out privately to affected parties and get their feedback. It&#x27;s vital.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notifications&quot;&gt;Notifications&lt;&#x2F;h2&gt;
&lt;p&gt;Somewhat redundant with the above, but worth pointing out. Use technology that &lt;em&gt;notifies&lt;&#x2F;em&gt; people instead of requiring people to seek out information. &amp;quot;We updated a Wiki page, didn&#x27;t you go and check it out again in the past three months?&amp;quot; isn&#x27;t great. People are busy, and they forget things. A push model, rather than pull, is preferable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;outsiders&quot;&gt;Outsiders&lt;&#x2F;h2&gt;
&lt;p&gt;Include outsiders. It&#x27;s too easy to reach for the input of the ingroup and your friends and end up creating a bubble. It&#x27;s almost impossible to detect that you&#x27;ve done this.&lt;&#x2F;p&gt;
&lt;p&gt;Strive to include people who think differently than you. Strive to include people who disagree with you. At least within reason. Which brings us to the next point...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h2&gt;
&lt;p&gt;Be upfront about your goals. Tying it back to the previous point: let&#x27;s say I&#x27;m trying to make Yesod a more open, transparent, and inclusive project. I personally am a strong believer in server-generated HTML for user interaction. But my &lt;em&gt;goal&lt;&#x2F;em&gt; for Yesod is to support Single Page Applications (SPAs) as well. Knowing this, it&#x27;s important for me to make sure that there are Yesod contributors and advisers who believe SPAs are important.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, continuing with outsiders: we don&#x27;t need to go beyond the goals of the project. I don&#x27;t need to find a Go developer to advise on how Yesod can be better. Go is not part of the goals of Yesod. It&#x27;s OK that Yesod fails to meet the goals of a Gopher. They can, and should, and have, create their own web framework. And the two can live in harmony, possibly with competition between the two projects trying to win the ideological and technical battle of &amp;quot;which set of goals is better.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;My go-to example for this is Stackage. Stackage is incredibly clear about its goals. We want to build Haskell packages. Haskell packages are defined as using the Cabal format. We want to build snapshots of packages that build together. We want to make the process of contribution as lightweight as possible. We want to make it possible for end users to consume these snapshots and get more reliable builds.&lt;&#x2F;p&gt;
&lt;p&gt;There are other details, but that basically sums it up. Based on that, you can decide if this is a project you want to be a part of, contribute to, and use. Are you a Rubyist? This probably isn&#x27;t for you. Do you want to exclusively use dependency solving and provide no support for snapshots? More power to you, you do you. Do you write Haskell code, publish it on Hackage, and want to get notified if your package stops compiling with new dependencies or has restrictive upper bounds? Bingo.&lt;&#x2F;p&gt;
&lt;p&gt;Poorly defined goals have, in my opinion, been one of the central problems in the Haskell community. Furthermore, &lt;strong&gt;evolving&lt;&#x2F;strong&gt; goals have been worse. Goals of course need to evolve over time. But the fact that goals change implicitly instead of explicitly is a huge problem.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re going to make a fundamental shift to the goals of a project, especially a project in massive use by many people, and especially if you know those people &lt;em&gt;disagree&lt;&#x2F;em&gt; with the new goals: you need to have a very open conversation about this. I&#x27;d probably go further and say that you basically &lt;em&gt;can&#x27;t&lt;&#x2F;em&gt; change the goals in this way. Rather, a subproject would make more sense.&lt;&#x2F;p&gt;
&lt;p&gt;And if you&#x27;re paying attention: that&#x27;s basically what Stackage is. Hackage&#x27;s starting goal was about an open source repository of Haskell code. It said nothing about snapshots. Forcing people uploading to Hackage to suddenly adopt a new goal would be inappropriate. Instead, a second project—clearly deriving from and depending upon the original project—was the right move here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;&#x2F;h2&gt;
&lt;p&gt;Be clear about what the various parts of the project are. Be clear about how decisions are made. Be clear about how members are chosen. Be clear about what responsibilities and authorities those members have. Be clear about how someone goes about trying to make changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ask-for-help&quot;&gt;Ask for help&lt;&#x2F;h2&gt;
&lt;p&gt;People want projects to succeed. I can all but guarantee you that anyone who calls themselves a &amp;quot;Haskeller&amp;quot; wants the Haskell language to be successful (however they define success). People are also busy, and lazy, and distracted, and lack confidence, and lots of other things that will prevent them from participating. You won&#x27;t be able to overcome all of that. But there are some blockers you &lt;em&gt;can&lt;&#x2F;em&gt; fix:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want the project to succeed, but I don&#x27;t know what needs to be done&lt;&#x2F;li&gt;
&lt;li&gt;I know what we overall need to do, but I don&#x27;t know how to do it&lt;&#x2F;li&gt;
&lt;li&gt;I don&#x27;t know who I should speak with to volunteer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Reach out to people for help! Put out blog posts (and advertise them) calling for contributors. Give information on what needs to be done. Reach out to people individually that you think would be a good fit.&lt;&#x2F;p&gt;
&lt;p&gt;People may ignore the posts. People may say no to a direct invite. But you won&#x27;t know if you don&#x27;t ask. And even if someone says no, knowing that they were wanted in a project is wonderfully inclusive.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell: The Bad Parts, part 1</title>
		<published>2020-10-28T00:00:00+00:00</published>
		<updated>2020-10-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/10/haskell-bad-parts-1/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/10/haskell-bad-parts-1/</id>
		<content type="html">&lt;p&gt;There&#x27;s a popular book called &lt;em&gt;JavaScript: The Good Parts&lt;&#x2F;em&gt;. And there&#x27;s a common meme around the relative size of that book versus &lt;em&gt;JavaScript: The Definitive Guide&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;wIf3EJh.jpg&quot; style=&quot;max-width:80%&quot;&gt; 
&lt;p&gt;Haskell is, in my opinion, a far more well designed and coherent language than JavaScript. However, it&#x27;s also an old language with some historical baggage. In many ways, it&#x27;s a bleeding edge research language that sometimes includes...half-baked features. Due to an inconsistent set of rules around backwards compatibility, it will sometimes break code every six months, and sometimes keep strange decisions around for decades.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;True mastery of Haskell comes down to knowing which things in core libraries should be avoided like the plague.&lt;br&gt;&lt;br&gt;* foldl&lt;br&gt;* sum&#x2F;product&lt;br&gt;* Data.Text.IO&lt;br&gt;* Control.Exception.bracket (use unliftio instead, handles interruptible correctly)&lt;br&gt;&lt;br&gt;Just as some examples&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1321049221697544193?ref_src=twsrc%5Etfw&quot;&gt;October 27, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;After a request and some tongue-in-cheek comments under that tweet, I decided a long-form blog post was in order. I&#x27;m going to start off by expanding on the four examples I gave in that tweet. But there are many, many more examples out there. If there&#x27;s more interest in seeing a continuation of this series, please let me know. And if you have pet peeves you&#x27;d like me to address, your input will be very welcome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-bad-part&quot;&gt;What is a &amp;quot;bad part&amp;quot;?&lt;&#x2F;h2&gt;
&lt;p&gt;Very rarely is there such a thing: a language feature, function, type, or library—that is so egregiously bad that it should never, ever be used. Null is of course the billion dollar mistake, but it&#x27;s still incredibly useful in some cases. So when I say that something is a &amp;quot;bad part&amp;quot; of Haskell, I mean something along these lines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A rarely useful feature has been promoted to a position of prominence&lt;&#x2F;li&gt;
&lt;li&gt;A function has major downsides that are not documented&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s an unexpected performance implication&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s a large tendency in the Haskell community to be overly literal in responding to blog posts. Feel free to do that to your heart&#x27;s content. But this caveat serves as a word of warning: I&#x27;m not going to caveat each one of these with an explanation of &amp;quot;Yes, but there&#x27;s this one corner case where it&#x27;s actually useful.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-attack-haskell&quot;&gt;Why attack Haskell?&lt;&#x2F;h2&gt;
&lt;p&gt;Since I&#x27;m a Haskeller and an advocate of the language, you may be wondering: &amp;quot;Why are you attacking Haskell?&amp;quot; I don&#x27;t see this as an attack. I &lt;em&gt;do&lt;&#x2F;em&gt; wish we could fix these issues. I think it&#x27;s a fair thing to say that the problems I&#x27;m listing are warts on the language. And every language has warts. I&#x27;m writing this because I&#x27;ve seen these kinds of things break real world projects. I&#x27;ve seen these failures manifest at runtime, defeating yet again the false claim: &amp;quot;If it compiles, it works.&amp;quot; I&#x27;ve seen these become nefarious time bombs that disincentivize people from ever working with Haskell in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I hope by calling these out publicly, I can help raise awareness of these problems. Then either we fix the problems at their source or, more likely, get more widespread awareness of the issue.&lt;&#x2F;p&gt;
&lt;p&gt;Also, because it feels appropriate, I&#x27;m going to take a more jovial tone below. I find it easier to beat up on a language I love like that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;foldl&quot;&gt;foldl&lt;&#x2F;h2&gt;
&lt;p&gt;Duncan Coutts &lt;a href=&quot;https:&#x2F;&#x2F;www.well-typed.com&#x2F;blog&#x2F;2014&#x2F;04&#x2F;fixing-foldl&#x2F;&quot;&gt;already did this one&lt;&#x2F;a&gt;. &lt;code&gt;foldl&lt;&#x2F;code&gt; is broken. It&#x27;s a bad function. Left folds are supposed to be strict, not lazy. End of story. Goodbye. This function have caused too many space leaks. We should gut it out entirely.&lt;&#x2F;p&gt;
&lt;p&gt;But wait! A lazy left fold makes perfect sense for a &lt;code&gt;Vector&lt;&#x2F;code&gt;! Yeah, no one ever meant that. And the problem isn&#x27;t the fact that this function exists. It&#x27;s the &lt;strong&gt;name&lt;&#x2F;strong&gt;. It has taken the hallowed spot of the One True Left Fold. I&#x27;m sorry, the One True Left Fold is strict.&lt;&#x2F;p&gt;
&lt;p&gt;Also, side note: we can&#x27;t raise linked lists to a position of supreme power within our ecosystem and then pretend like we actually care about vectors. We don&#x27;t; we just pay lip service to them. Until we fix the wart that is overuse of lists, &lt;code&gt;foldl&lt;&#x2F;code&gt; is only ever used on lists.&lt;&#x2F;p&gt;
&lt;p&gt;OK, back to this bad left fold. This is all made worse by the fact that the true left fold, &lt;code&gt;foldl&#x27;&lt;&#x2F;code&gt;, is not even exported by the &lt;code&gt;Prelude&lt;&#x2F;code&gt;. We Haskellers are a lazy bunch. And if you make me type in &lt;code&gt;import Data.List (foldl&#x27;)&lt;&#x2F;code&gt;, I just won&#x27;t. I&#x27;d rather have a space leak than waste precious time typing in those characters.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, so what should you do? Use an alternative prelude that doesn&#x27;t export a bad function, but does export a good function. If you really, really want a lazy left fold: add a comment, or use a function named &lt;code&gt;foldlButLazyIReallyMeanIt&lt;&#x2F;code&gt;. Otherwise I&#x27;m going to fix your code during my code review.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sum-product&quot;&gt;sum&#x2F;product&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;sum&lt;&#x2F;code&gt; and &lt;code&gt;product&lt;&#x2F;code&gt; functions are implemented in terms of &lt;code&gt;foldr&lt;&#x2F;code&gt;. Well, actually &lt;code&gt;foldMap&lt;&#x2F;code&gt;, but list&#x27;s &lt;code&gt;foldMap&lt;&#x2F;code&gt; is implemented in terms of &lt;code&gt;foldr&lt;&#x2F;code&gt;, and lists are the only data structure that exist in Haskell. &amp;quot;Oh, but &lt;code&gt;foldr&lt;&#x2F;code&gt; is the good function, right?&amp;quot; Only if you&#x27;re folding a function which is lazy in its second argument. &lt;code&gt;+&lt;&#x2F;code&gt; and &lt;code&gt;*&lt;&#x2F;code&gt; are both strict in both of their arguments.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re not aware of that terminology: &amp;quot;strict in both arguments&amp;quot; means &amp;quot;in order to evaluate the result of this function&#x2F;operator, I need to evaluate both of its arguments.&amp;quot; I can&#x27;t evaluate &lt;code&gt;x + y&lt;&#x2F;code&gt; without knowing what &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; are. On the other hand, &lt;code&gt;:&lt;&#x2F;code&gt; (list cons) is lazy in its second argument. Evaluating &lt;code&gt;x : y&lt;&#x2F;code&gt; doesn&#x27;t require evaluating &lt;code&gt;y&lt;&#x2F;code&gt; (or, for that matter, &lt;code&gt;x&lt;&#x2F;code&gt;). (For more information, see &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;haskell&#x2F;tutorial&#x2F;all-about-strictness&#x2F;&quot;&gt;all about strictness&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But wait!&amp;quot; you say. &amp;quot;What if I have a custom data type with a custom typeclass instance of &lt;code&gt;Num&lt;&#x2F;code&gt; that has a custom &lt;code&gt;+&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;*&lt;&#x2F;code&gt; that is in fact lazy in the second argument! Then &lt;code&gt;sum&lt;&#x2F;code&gt; and &lt;code&gt;product&lt;&#x2F;code&gt; are perfect as they are!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s true. Now go off and write your own &lt;code&gt;lazySum&lt;&#x2F;code&gt; and &lt;code&gt;lazyProduct&lt;&#x2F;code&gt;. 99 times out of 100, or more likely 999,999 times out of 1,000,000, we want the fully strict version.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But it doesn&#x27;t matter, GHC will optimize this away.&amp;quot; Maybe. Maybe not. Stop relying on GHC&#x27;s optimizer to convert horribly inefficient code into not efficient code. (But I digress, we&#x27;ll talk about why the &lt;code&gt;vector&lt;&#x2F;code&gt; package is bad another time.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-text-io&quot;&gt;Data.Text.IO&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve already covered this one once before when I told everyone to &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;12&#x2F;beware-of-readfile&quot;&gt;beware of &lt;code&gt;readFile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. In that blog post, I talked about a bunch of &lt;code&gt;String&lt;&#x2F;code&gt; based I&#x2F;O functions, especially the titular &lt;code&gt;readFile&lt;&#x2F;code&gt;, which is obnoxiously exported by &lt;code&gt;Prelude&lt;&#x2F;code&gt;. Those are bad. But &lt;code&gt;Data.Text.IO&lt;&#x2F;code&gt; is arguably far worse, and I&#x27;ll reiterate why in a second. The reason is that there&#x27;s pretty good awareness in the community that &lt;code&gt;String&lt;&#x2F;code&gt;-based I&#x2F;O is bad. Even though the &lt;code&gt;String&lt;&#x2F;code&gt; part is the least of our worries, it does a good job of scaring away the uninitiated.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;code&gt;Data.Text.IO&lt;&#x2F;code&gt; is a wolf in sheep&#x27;s clothing. We&#x27;re all told by people who think they can tell people how to write their Haskell code (&lt;em&gt;cough&lt;&#x2F;em&gt; me &lt;em&gt;cough&lt;&#x2F;em&gt;) that we should exorcise &lt;code&gt;String&lt;&#x2F;code&gt; from our codebases and replace it in all cases with &lt;code&gt;Text&lt;&#x2F;code&gt;. Attacking the &lt;code&gt;Text&lt;&#x2F;code&gt; type is a topic for another time. But the problem is that by cloaking itself in the warm embrace of &lt;code&gt;Text&lt;&#x2F;code&gt;, this module claims more legitimacy than it deserves.&lt;&#x2F;p&gt;
&lt;p&gt;The only module worse in this regard is &lt;code&gt;Data.Text.Lazy.IO&lt;&#x2F;code&gt;, which should be buried even deeper.&lt;&#x2F;p&gt;
&lt;p&gt;OK, what exactly am I on about? Locale sensitive file decoding. It&#x27;s possible that this has been the number one example of a Haskell bug in the wild I&#x27;ve encountered in my entire career. Not the spooky memory leak. Partial functions like &lt;code&gt;head&lt;&#x2F;code&gt; randomly throwing exceptions are up there, but don&#x27;t quite rise to prominence.&lt;&#x2F;p&gt;
&lt;p&gt;You see, when you are dealing with file formats, there is typically an actual, defined format. YAML, XML, JSON, and many others give a lot of information about how to serialize data, including character data, into raw bytes. We want to be consistent. We want to write a file in one run of the program, and have it read in a separate run. We want to write the file on a Windows machine and read it on a Linux machine. Or we want to interact with programs in other languages that read or write data in a consistent format.&lt;&#x2F;p&gt;
&lt;p&gt;Locale sensitive file encoding and decoding laughs in our face. When you use &lt;code&gt;Data.Text.IO.readFile&lt;&#x2F;code&gt;, it plays a mind reading game of trying to deduce from clues you don&#x27;t care about which character encoding to use. These days, on the vast majority of systems used by native English speakers, this turns out to be UTF-8. So using &lt;code&gt;readFile&lt;&#x2F;code&gt; and &lt;code&gt;writeFile&lt;&#x2F;code&gt; typically &amp;quot;just works.&amp;quot; Using functions from &lt;code&gt;Data.Text.IO&lt;&#x2F;code&gt; looks safe, and can easily get hidden in a large PR or a library dependency.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when all hell breaks loose. You ship this code. You run it in a Docker container. &amp;quot;Oops, you forgot to set the &lt;code&gt;LANG&lt;&#x2F;code&gt; env var, Imma crash.&amp;quot; But it&#x27;s worse than that. Typically things will work well for weeks or months, because it can often be a long time before someone tries to encode a non-ASCII character.&lt;&#x2F;p&gt;
&lt;p&gt;The same kind of thing happens regularly to Stack. Someone adds a new feature that writes and reads a file. The code passes all integration tests. And then someone in Russia with a weird Windows code page set and a Cyrillic character in their name files a bug report 2 years later about how they can&#x27;t build anything, and we sheepishly tell them to run &lt;code&gt;chcp 65001&lt;&#x2F;code&gt; or build in &lt;code&gt;c:\&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Friends don&#x27;t let friends use &lt;code&gt;Data.Text.IO&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Oh, but &lt;code&gt;putStrLn&lt;&#x2F;code&gt; is fine!&amp;quot; Yeah, maybe. It&#x27;s also potentially slow. And it will throw a runtime exception due to character encoding mismatches. Just use a good logging library. That&#x27;s why we have one in &lt;code&gt;rio&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt; Since so many people have asked: instead of &lt;code&gt;readFile&lt;&#x2F;code&gt;, I recommend using &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-16.20&#x2F;rio-0.1.19.0&#x2F;RIO.html#v:readFileUtf8&quot;&gt;&lt;code&gt;readFileUtf8&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is available from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;rio&quot;&gt;&lt;code&gt;rio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;control-exception-bracket&quot;&gt;Control.Exception.bracket&lt;&#x2F;h2&gt;
&lt;p&gt;This is by far the least objectionable of the bad things in this list. I included it because the entire original tweet was inspired by a coworker telling me about a bug he ran into because of this function.&lt;&#x2F;p&gt;
&lt;p&gt;Async exceptions are subtle. Very, very subtle. Like, super duper subtle. I&#x27;ve devoted a large percentage to my Haskell teaching career towards them. Async exceptions are a concept that don&#x27;t truly exist in most other languages. They require rewiring the way your brain works for proper handling. Helper functions help alleviate some of the pain. But the pain is there.&lt;&#x2F;p&gt;
&lt;p&gt;Then someone said, &amp;quot;You know what? Async exceptions aren&#x27;t subtle enough. Let&#x27;s invent two different ways of masking them!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Wait, what does masking mean? Well, of course it means temporarily blocking the ability to receive an async exception. Totally, 100% blocks it. It&#x27;s like async exceptions don&#x27;t exist at all. So you&#x27;re totally 100% safe, right?&lt;&#x2F;p&gt;
&lt;p&gt;Wrong. Masking isn&#x27;t really masking. Masking is kinda-sorta masking. No, if you really want protection, you have to use &lt;code&gt;uninterruptibleMask&lt;&#x2F;code&gt;. You knew that, right? Of course you did, because it&#x27;s so incredibly obvious. And of course it&#x27;s painfully obvious to every single Haskeller on the planet just how important it is to choose normal &lt;code&gt;mask&lt;&#x2F;code&gt; versus &lt;code&gt;uninterruptibleMask&lt;&#x2F;code&gt;. And there&#x27;d never be a disagreement about these cases.&lt;&#x2F;p&gt;
&lt;p&gt;In case the tone isn&#x27;t clear: this is sarcasm. Interruptible vs uninterruptible masking is confusing. Incredibly confusing. And nowhere is that more blatant than in the &lt;code&gt;Control.Exception.bracket&lt;&#x2F;code&gt; function. Interruptible masking means &amp;quot;Hey, I don&#x27;t want to receive any async exceptions, unless I&#x27;m doing a blocking call, then I totally don&#x27;t want to be masked.&amp;quot; And &lt;code&gt;Control.Exception.bracket&lt;&#x2F;code&gt; uses interruptible masking for it&#x27;s cleanup handler. So if you need to perform some kind of blocking action in your cleanup, and you want to make sure that you don&#x27;t get interrupted by an async exception, you have to remember to use &lt;code&gt;uninterruptibleMask&lt;&#x2F;code&gt; yourself. Otherwise, your cleanup action may not complete, which is Bad News Bears.&lt;&#x2F;p&gt;
&lt;p&gt;This is all too confusing. I get the allure of interruptible masking. It means that you get super-cool-looking deadlock detection. It&#x27;s nifty. It&#x27;s also misleading because you can&#x27;t rely on it. Really good Haskellers have released completely broken libraries based on the false idea that deadlock detection reliably works. It doesn&#x27;t. This is a false sense of hope, much like rewrite rules for stream fusion.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not putting &lt;code&gt;mask&lt;&#x2F;code&gt; on the &amp;quot;bad parts&amp;quot; list right now, but I&#x27;m tempted to do so, and claim that &lt;code&gt;uninterruptibleMask&lt;&#x2F;code&gt; should have been the default, and perhaps the only way of masking. (Reminder for later: &lt;code&gt;throw&lt;&#x2F;code&gt; is a horribly named function too.) But I &lt;em&gt;am&lt;&#x2F;em&gt; saying that &lt;code&gt;bracket&lt;&#x2F;code&gt; defaulting to interruptible masking is a mistake. It&#x27;s unexpected, and basically undocumented.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;unliftio&lt;&#x2F;code&gt; (and therefore in &lt;code&gt;rio&lt;&#x2F;code&gt;) we provide an alternative &lt;code&gt;bracket&lt;&#x2F;code&gt; that uses uninterruptible masking. I debated this internally quite a bit, since I don&#x27;t generally like throwing new behavior into an old function name. I eventually agreed with the idea that the current &lt;code&gt;bracket&lt;&#x2F;code&gt; implementation is just buggy and should be fixed. I still feel a bit uneasy about the decision though. (Note that I made the opposite decision regarding &lt;code&gt;sum&lt;&#x2F;code&gt; and &lt;code&gt;product&lt;&#x2F;code&gt; and included the broken versions, which I &lt;em&gt;also&lt;&#x2F;em&gt; feel uneasy about.)&lt;&#x2F;p&gt;
&lt;p&gt;Credits for this one go to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yuras&quot;&gt;Yuras&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Peaker&quot;&gt;Eyal&lt;&#x2F;a&gt;, check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;safe-exceptions&#x2F;issues&#x2F;3&quot;&gt;this Github issue for details&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll reiterate: Haskell is a great language with some warts. Ideally, we&#x27;d get rid of the warts. Second to that: let&#x27;s be honest about the warts and warn people away from them.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;d like to see more posts in this series, or have other ideas of bad parts I should cover, please let me know in the comments below or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;on Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Force your code to break</title>
		<published>2020-10-08T00:00:00+00:00</published>
		<updated>2020-10-08T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/10/force-code-to-break/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/10/force-code-to-break/</id>
		<content type="html">&lt;p&gt;I&#x27;m assuming most people reading this post like static types, given my typical audience. I love both static types and strong typing. (I&#x27;ll define the difference in a second.) I&#x27;ve been in the functional programming community for a long time via Haskell. But in all honesty, as much as I like many of the ideas of functional programming (immutability, declarative programming, higher order functions, etc.), all of them pale in comparison to just one feature of Haskell: strong, static typing. That&#x27;s part of the reason I&#x27;ve been so happy to add Rust to my toolchain: it&#x27;s not as functional as Haskell, and requires me to think at a lower level of abstraction than I&#x27;m accustomed to, but it gives me basically all of the type safety that I want.&lt;&#x2F;p&gt;
&lt;p&gt;Static typing is easy to understand. All languages, even Javascript or Python, have some level of notion of types. Static typing means whether the types are checked at compile time or runtime. There are some more nuanced points around gradual typing, optional typing, and add-on type systems, but the basic idea stands: static typing is a binary. Since I don&#x27;t believe in it and never have, I won&#x27;t try to make an argument for the dynamic typing side. But I can definitely make an argument for static typing:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to find out, as early as possible, that my code is broken&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If I&#x27;m in my editor working on a feature, and a red line pops up saying &amp;quot;hey, this argument is supposed to be a &lt;code&gt;Person&lt;&#x2F;code&gt;, not a &lt;code&gt;String&lt;&#x2F;code&gt;,&amp;quot; I&#x27;m &lt;em&gt;happy&lt;&#x2F;em&gt;. Sure, it&#x27;s annoying having to break my flow right then and fix that. But (1) I can batch up those errors to address at the end of my current workflow and (2) spending five minutes fixing that now can possibly save hours of frantic repairs to a production system.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;But wait!&amp;quot; you say. &amp;quot;Testing can address that too!&amp;quot; Absolutely, and you should write tests! I won&#x27;t go quite this far, but a coworker of mine says that if the test doesn&#x27;t exist, the feature doesn&#x27;t exist. Tests are necessary, and they can and do prevent many bugs from going to production. Never, ever listen to someone who says &amp;quot;if it compiles it works.&amp;quot; That&#x27;s a lie. The point here is: use as many layers of protection as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Strong typing is more nuanced than static typing. I don&#x27;t think there&#x27;s such a thing as a &amp;quot;strong typing language.&amp;quot; I don&#x27;t think there&#x27;s an easy test for &amp;quot;this is strong typing.&amp;quot; Strong typing is a spectrum of how a code base is set up. Stronger typing means that more things are enforced at the type level, and therefore caught by the type checker at compiler time. My go-to example for this would be replacing usage of a plain &lt;code&gt;String&lt;&#x2F;code&gt;, which could be &lt;em&gt;anything&lt;&#x2F;em&gt;, with appropriate newtype wrappers like &lt;code&gt;Name&lt;&#x2F;code&gt; or &lt;code&gt;EmailAddress&lt;&#x2F;code&gt;. This allows the type system to prevent you from accidentally using the wrong value in the wrong place.&lt;&#x2F;p&gt;
&lt;p&gt;In this world, no language is &amp;quot;strongly typed.&amp;quot; Nothing in Haskell or Rust, for example, forces you to define such newtype wrappers. And on the other hand, languages like Java or C that most would think of as &lt;em&gt;not&lt;&#x2F;em&gt; strongly typed still allow you to create newtype wrappers. I judge languages as being &amp;quot;strong typing friendly&amp;quot; by how easy they make it to do these things. Both Haskell and Rust make newtype wrapper definitions easy, and provide robust deriving mechanisms so that you can easily do things like create a &lt;code&gt;HashMap&lt;&#x2F;code&gt; with a &lt;code&gt;Name&lt;&#x2F;code&gt; newtype as a key. In my book, that&#x27;s what makes these languages great.&lt;&#x2F;p&gt;
&lt;p&gt;That last paragraph buried an important concept, and really the heart of this blog post. My phrase was &amp;quot;how easy they make it to do these things.&amp;quot; I have a philosophy around software, and the philosophy is simple. Software is written by humans. Humans make mistakes. And humans will take shortcuts, especially when under pressure of a deadline (like virtually all commercial software is).&lt;&#x2F;p&gt;
&lt;p&gt;Once when working on Java code, I mocked sum types via church encoding. If you don&#x27;t know what that means, don&#x27;t worry. The important point is that, what would have been 5 lines of Haskell became 5 20-line Java files. And it didn&#x27;t work as elegantly as Haskell. I wrote that because I was stubborn, and honestly because I was a little curious if it would work. From a cost&#x2F;benefit trade-off, it&#x27;s unclear that this effort was worth the added stability in the code. In fact, if the me of today was my manager back then, I would have rejected that code as &amp;quot;too much effort to maintain, and not idiomatic Java.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Alright, to summarize my points up to here, the idea is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Catching mistakes early is a good thing&lt;&#x2F;li&gt;
&lt;li&gt;Static types is one way to do that&lt;&#x2F;li&gt;
&lt;li&gt;Tests are another way to do that&lt;&#x2F;li&gt;
&lt;li&gt;The more strongly typed your code, the most mistakes you&#x27;ll catch early on with static types&lt;&#x2F;li&gt;
&lt;li&gt;Humans &lt;em&gt;will&lt;&#x2F;em&gt; make mistakes, so we need tools that protect us&lt;&#x2F;li&gt;
&lt;li&gt;Humans &lt;em&gt;will&lt;&#x2F;em&gt; take shortcuts, so we should make it as easy as possible to do the right thing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One more simple example to throw in, and then I&#x27;ll get into my final point. External analysis tools are &lt;em&gt;wonderful&lt;&#x2F;em&gt;. &lt;code&gt;cargo clippy&lt;&#x2F;code&gt; is so trivially easy to run on a Rust codebase that people actually do it. Linters, memory tools, and so on, are awesome. Include them in your CI process, and they&#x27;ll have even more power, because everyone will pay attention to them. Humans may take shortcuts, but machines do not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-from-clojure&quot;&gt;Learning from Clojure&lt;&#x2F;h2&gt;
&lt;p&gt;Funnily enough, while searching for the original quotes for this section, I landed on a &lt;a href=&quot;http:&#x2F;&#x2F;blog.ezyang.com&#x2F;2016&#x2F;12&#x2F;thoughts-about-spec-ulation-rich-hickey&#x2F;&quot;&gt;blog post by Edward Yang&lt;&#x2F;a&gt;, so apparently I&#x27;m not the only Haskeller to take these ideas to heart.&lt;&#x2F;p&gt;
&lt;p&gt;Clojure is not a statically typed language. Rich Hickey is perhaps famous to the rest of the FP world for being opposed to static typing. (I haven&#x27;t heard comments from him directly in a while, so if I&#x27;m misrepresenting him, I apologize, and please correct me.) I disagree with this premise, which should be obvious from the comments above. However, this line of thinking is vital, because even in a dynamically typed world, no one wants bugs to appear at production. Rich has approaches to mitigating these in the absence of static typing. And I think it behooves us in the statically typed world to adopt these practices, adjusted accordingly for the power of static types.&lt;&#x2F;p&gt;
&lt;p&gt;Leveraging Edward&#x27;s breakdown of Rich&#x27;s points, there are two different ideas I want to focus on:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Never remove a function&lt;&#x2F;li&gt;
&lt;li&gt;Never mutate a function&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Edward&#x27;s post is great, and I agree with a lot of what he says there, so I won&#x27;t repeat too much. I agree in principle that removing a function puts a burden onto users of a library. And taking such actions should be weighed carefully, and only undertaken if there&#x27;s strong motivation. Many Haskellers, including myself, have a tendency too strongly in favor of &amp;quot;clean up the APIs&amp;quot; instead of &amp;quot;don&#x27;t break people&#x27;s code.&amp;quot; Therefore, I think we can learn a lot from Rich&#x27;s opposing point.&lt;&#x2F;p&gt;
&lt;p&gt;However, I strongly disagree with &lt;em&gt;never&lt;&#x2F;em&gt; removing a function. I think the word &amp;quot;never&amp;quot; may apply correctly in a dynamically typed world, where removing a function may break things silently in a way that is only discovered in production. Yes, tests can help mitigate that. But as I said: humans will take shortcuts, humans will make mistakes, and I want multiple layers of protection. I see where Rich&#x27;s approach comes from. I&#x27;m glad we don&#x27;t need to take such an approach in statically typed languages. Instead, here&#x27;s my viewpoint:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When deciding whether to remove a function, weight the benefits of cleaning up the API&#x2F;reducing maintenance burden&#x2F;preventing usage of a bad function against the costs of all users of that function needing to update their codebase.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For economics afficiandos, you may be thinking about negative externalities now and the tragedy of the commons.&lt;&#x2F;p&gt;
&lt;p&gt;The second point is far more interesting. With static types, mutating a function to take an extra argument, but behave the same way, acts just like removing the function. Everyone using your API incurs a cost. You have to weigh that. That&#x27;s why I&#x27;ve been moving many of my libraries gradually towards using settings types, since it&#x27;s easier to extend parameters without causing any breakage.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, mutating a function in a semantic way is really dangerous. If you change the API in some way, and you have static typing, the damage is &lt;em&gt;mostly&lt;&#x2F;em&gt; mitigated, since a user of the function will be forced to do something. However, even in that case, they may blindly apply some changes until the code compiles, not noticing line 243 in the ChangeLog noting the important semantic change that goes along with it. Testing, again, can help. But (1) see my repeated points above about human behavior, and (2) unfortunately types give us a false sense of security, and statically typed code bases are often lacking in necessary testing. (Yes, point (2) is really an extension of point (1), this is all about lazy humans.)&lt;&#x2F;p&gt;
&lt;p&gt;So I&#x27;ll pull in a &lt;em&gt;never&lt;&#x2F;em&gt; from Rich, slightly modified: never semantically mutate functionality under the same name. If your new version of a function does something different, give it a new name. If you can, keep the old version under the original name as a compatibility shim. Add a &lt;code&gt;DEPRECATED&lt;&#x2F;code&gt; if you feel you must.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;typeclass-instances&quot;&gt;Typeclass instances&lt;&#x2F;h2&gt;
&lt;p&gt;The most painful example of all of this is typeclass instances. Let&#x27;s say you have two law abiding versions of a typeclass instance. As a crazy example, consider &lt;code&gt;Semigroup&lt;&#x2F;code&gt; for &lt;code&gt;Int&lt;&#x2F;code&gt;. Both addition and multiplication form a semigroup. Let&#x27;s say that in one version of base, we introduce an instance that uses addition. And then a consensus is reached that, for some reason, multiplication is clearly better.&lt;&#x2F;p&gt;
&lt;p&gt;You have basically four options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Leave the original addition instance&lt;&#x2F;li&gt;
&lt;li&gt;Immediately move to the multiplication instance, noting it in the changelog&lt;&#x2F;li&gt;
&lt;li&gt;Remove the addition instance completely, never adding a new instance&lt;&#x2F;li&gt;
&lt;li&gt;Remove the addition instance completely, then later add a new multiplication instance&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Of these options, using my framework of thinking above, (2) is by far the worst. It all but guarantees that code will break. And it will break in horribly surprising ways. I would place a large sum of money down that no one, in the entire history of software development, has ever gone through every single line of code in their codebase when upgrading major versions, and compared each of those lines of code against every comment in a changelog. Maybe in some regulated industry where it&#x27;s contractually required. But I bet even there they took shortcuts.&lt;&#x2F;p&gt;
&lt;p&gt;The reason why (2) is so bad is that it&#x27;s a complete betrayal of the ethos of static typing. We know we&#x27;re breaking code. We know people are using a language like Haskell because they want things to fail at compile time. We know that this change will &lt;em&gt;never&lt;&#x2F;em&gt; break code at compile time. We know this change will almost certain cause incorrect behavior at runtime. And we&#x27;re including it anyway.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;So, to tie all of this together:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No one wants errors in production&lt;&#x2F;li&gt;
&lt;li&gt;Catching errors early is therefore a Good Thing&lt;&#x2F;li&gt;
&lt;li&gt;Static typing helps catch some errors early, so it&#x27;s also a Good Thing&lt;&#x2F;li&gt;
&lt;li&gt;Following strong typing principles strengthens static typing, so it&#x27;s also a Good Thing&lt;&#x2F;li&gt;
&lt;li&gt;Adding more layers of protection via tests, linters, and static analysis is also a Good Thing&lt;&#x2F;li&gt;
&lt;li&gt;Languages without static types need to find other ways to avoid errors in production, and we can learn from them&lt;&#x2F;li&gt;
&lt;li&gt;Learning from them: avoid silent, semantic API changes like the plague&lt;&#x2F;li&gt;
&lt;li&gt;Weigh the impact on your users of changes that will be caught by the compiler&lt;&#x2F;li&gt;
&lt;li&gt;Do as much as you can to make the Good Things easy and the Bad Things awkward and difficult&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Homeschool on PowerPoint</title>
		<published>2020-09-11T00:00:00+00:00</published>
		<updated>2020-09-11T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/09/homeschool-on-powerpoint/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/09/homeschool-on-powerpoint/</id>
		<content type="html">&lt;p&gt;I&#x27;ve been really disappointed in the lack of computer literacy in my children&#x27;s education. I could bemoan this, but there&#x27;s no point. Instead, Miriam and I have been making a concerted effort to try and teach the kids computer literacy ourselves. When the entire country (and basically entire world) went into Coronavirus lockdown back in March, we started our own curriculum at home that included things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Todo list management&lt;&#x2F;li&gt;
&lt;li&gt;Email management&lt;&#x2F;li&gt;
&lt;li&gt;Typing practice&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We encouraged the kids to play games on the computer instead of their tablets. (Minecraft was a big hit here.) And we &lt;a href=&quot;https:&#x2F;&#x2F;www.beginrust.com&#x2F;&quot;&gt;started teaching them Rust&lt;&#x2F;a&gt;. These things all worked, but the kids don&#x27;t really enjoy this stuff. We wanted to find something more fun and engaging.&lt;&#x2F;p&gt;
&lt;p&gt;With the new school year, the kids have some days home for remote learning with larger gaps in their schedules. So we decided to try something new, and it seems to be a success.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;powerpoint-presentations&quot;&gt;PowerPoint presentations&lt;&#x2F;h2&gt;
&lt;p&gt;The kids are really into Minecraft right now. Earlier this week, before they went to school, we had about 30 minutes free. I brought out my computer, sat the kids down, and started asking them questions about Minecraft. As they answered, I typed it into bullets on slides. Then I showed them how to apply design ideas to make it more colorful. Then we recorded a voiceover, exported a video, and were able to upload to YouTube (unlisted of course).&lt;&#x2F;p&gt;
&lt;p&gt;This whole project took 20 minutes. It ended with the kids being on YouTube. This was enough to get them interested and hooked. Later this week, when two of the kids were home from school, I gave them a slower introduction to how PowerPoint works, and then gave them a task of making their own presentations on whatever topics they wanted. And then they happily worked on it for an hour.&lt;&#x2F;p&gt;
&lt;p&gt;From a learning standpoint, what we&#x27;d achieved was excitement about a topic and reduced resistance, while honing multiple technical and communicative skills:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More typing practice&lt;&#x2F;li&gt;
&lt;li&gt;How to organize a narrative&lt;&#x2F;li&gt;
&lt;li&gt;Basics of word processing (bullets, headings, etc)&lt;&#x2F;li&gt;
&lt;li&gt;More familiarity in general with using a computer (in place of a tablet)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These may sound modest, but the advantage of having the kids motivated to try this out makes it worth it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-libreoffice-google-slides-reveal-js&quot;&gt;Why not LibreOffice&#x2F;Google Slides&#x2F;reveal.js?&lt;&#x2F;h2&gt;
&lt;p&gt;When I said PowerPoint above, I meant the actual desktop version of Microsoft PowerPoint. This feels a bit funny. When I was in middle school, PowerPoint was the cool technology. Then I didn&#x27;t touch PowerPoint for about 20 years, and have used things like reveal.js since.&lt;&#x2F;p&gt;
&lt;p&gt;I initially thought that we should keep the kids more agnostic on which tools they use, and not marry them immediately to one platform. Miriam and I discussed this in more depth, and realized at this point it&#x27;s more important for us to get them productive as quickly as possible, with a single tool, to keep their motivation high.&lt;&#x2F;p&gt;
&lt;p&gt;Recently at work, I&#x27;ve been on the Microsoft Office suite quite a bit. We made a move to Microsoft 365, and I&#x27;ve been making my own presentations and documents in PowerPoint and Word again. My familiarity, the maturity of the tools, the really nice features (like built in recording and design ideas), and the general adoption makes me think we made the right decision in focusing on this toolchain.&lt;&#x2F;p&gt;
&lt;p&gt;I still hope to make the kids more computer literate going forward, and hope that they don&#x27;t end up dependent on just one vendor&#x27;s tools. But I don&#x27;t want the perfect to be the enemy of the good, and I&#x27;d rather they be competent with 1 technology than 0.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;worth-it&quot;&gt;Worth it?&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re looking for a new way to engage your kids with computer literacy, I would definitely recommend trying this out. I wouldn&#x27;t change anything of how I rolled this out. Summarized below, here&#x27;s my formula:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First presentation: you&#x27;re at the keyboard
&lt;ul&gt;
&lt;li&gt;Choose a topic you know your kids are excited about&lt;&#x2F;li&gt;
&lt;li&gt;Ask them questions about it (they love talking about this topic, right?)&lt;&#x2F;li&gt;
&lt;li&gt;Put the notes into a note taking app (e.g. OneNote&#x2F;Keep), a document (e.g. Word), or just a piece of paper&lt;&#x2F;li&gt;
&lt;li&gt;Show them how you convert those notes into a PowerPoint deck&lt;&#x2F;li&gt;
&lt;li&gt;Ask them for input on choosing a theme, design ideas, inserting graphics, etc&lt;&#x2F;li&gt;
&lt;li&gt;Let them record a voiceover for each slide. Don&#x27;t worry if they just read out each slide verbatim&lt;&#x2F;li&gt;
&lt;li&gt;Export to a video and let them see that they made a cool presentation!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Second presentation: more instructive
&lt;ul&gt;
&lt;li&gt;Choose a simple topic you know a lot about&lt;&#x2F;li&gt;
&lt;li&gt;Put together the notes with the kids, but do it more slowly, and explain how to structure thoughts cohesively&lt;&#x2F;li&gt;
&lt;li&gt;Convert to slides, but do it much more slowly, and explain all the details (different slide formats, how to indent tabs, etc)&lt;&#x2F;li&gt;
&lt;li&gt;Do the same thing with theme, design ideas, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Third presentation: they&#x27;re in control
&lt;ul&gt;
&lt;li&gt;Help them choose a topic they care about&lt;&#x2F;li&gt;
&lt;li&gt;Tell them to use a piece of paper to jot down all their ideas (they can use an app if they really want)&lt;&#x2F;li&gt;
&lt;li&gt;Help them structure these notes into a narrative&lt;&#x2F;li&gt;
&lt;li&gt;Let them convert that into slides. They&#x27;re at the computer this time, but be nearby to answer questions&lt;&#x2F;li&gt;
&lt;li&gt;Do not inhibit their creativity here. Let them use every gaudy color scheme, crazy transition, obnoxious audio clip, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I hope this is helpful for others. If you have success (or failure) with this with your kids, please let us know, we&#x27;re really interested in how other people are approaching computer literacy for their kids!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stackage for Rust?</title>
		<published>2020-08-17T00:00:00+00:00</published>
		<updated>2020-08-17T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/08/stackage-for-rust/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/08/stackage-for-rust/</id>
		<content type="html">&lt;p&gt;Every once in a while, a friend will share a comment from social media discussing in broad terms &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage#readme&quot;&gt;Stackage&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;. As the original founder of the Stackage project, it&#x27;s of course fun to see other languages discussing Stackage. And as a Rustacean myself, it&#x27;s great to see it in the context of Rust.&lt;&#x2F;p&gt;
&lt;p&gt;This topic has popped up enough times now, and I&#x27;ve thought about it off-and-on for long enough now, that I thought a quick blog post on the topic would make sense.&lt;&#x2F;p&gt;
&lt;p&gt;Before diving in, I want to make something very clear. I know exactly what drove me to create Stackage for Haskell (and I&#x27;ll describe it below). And I&#x27;ve come to some conclusions about Stackage for Rust, which I&#x27;ll also describe below. But I want to acknowledge that while I do write Rust, and I have Rust code running in production, it&#x27;s nowhere near the level of Haskell code I have in production. I am well aware of the fact that my opinions on Rust may not match up with others in the Rust community.&lt;&#x2F;p&gt;
&lt;p&gt;I would be more than happy to engage with any Rustaceans who are interested in discussing this topic more, especially if you think I&#x27;m wrong in what I say below. Not only do I love the Rust language, but I find these kinds of package coordination topics fascinating, and would love to interact with others on them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-stackage&quot;&gt;What is Stackage?&lt;&#x2F;h2&gt;
&lt;p&gt;Stackage&#x27;s two word slogan is &amp;quot;Stable Hackage.&amp;quot; Hackage is the de facto standard repository for open source Haskell libraries and tools. It would easily be described as Haskell&#x27;s version of Crates. Stackage is a project which produces versioned snapshots of packages, together with underlying compiler versions, which are guaranteed to meet a basic buildability standard. That essentially comes down to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On a Linux system, using a Docker container we&#x27;ve configured with a number of helper system libraries, the package compiles&lt;&#x2F;li&gt;
&lt;li&gt;Unless told otherwise, the docs build successful, the tests build and run successfully, and the benchmarks build successfully&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are plenty of holes in this. Packages may not build on Windows. There may be semantic bugs that aren&#x27;t picked up by the test suite. It&#x27;s far from saying &amp;quot;we guarantee this package is perfect.&amp;quot; It&#x27;s saying &amp;quot;we&#x27;ve defined an objective standard of quality and are testing for it.&amp;quot; I&#x27;m a strong believer that having clearly defined specifications like that is a Very Good Thing.&lt;&#x2F;p&gt;
&lt;p&gt;There are plenty of other details about how Stackage operates. We produce nightly snapshots that always try to grab the latest versions of packages, unless specifically overridden. We produce Long Term Support (LTS) versions that avoid new major versions of packages during a series. We manually add and remove packages from the &amp;quot;skipped tests&amp;quot; based on whether the tests will run correctly in our environment. But most of those kinds of details can be ignored for our discussion today. To summarize, if you want to understand this discussion, think of it this way:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stackage defines snapshots where open source libraries and tools are tested to build together and pass (most of) their test suites&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;why-i-created-stackage&quot;&gt;Why I created Stackage&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s vital to understand this part to understand my position on a Stackage for Rust. Stackage has an interesting history going through a few previous projects, in particular Haskell Platform and Yesod Platform. Ignoring those for the moment, and pretending that Stackage emerged fully formed as it is today, let&#x27;s look at the situation before Stackage.&lt;&#x2F;p&gt;
&lt;p&gt;The Haskell community has always embraced breakage more than other communities. We rely heavily on strong types to flag major changes. The idea of a build time failure with a clear compiler error message is much less intimidating from a silent behavior change or a type error that only appears at runtime. In our pursuit of elegance, we will typically break APIs left, right, and center. I, more than most, have been historically guilty of that attitude. (I&#x27;m now of a very different opinion though.)&lt;&#x2F;p&gt;
&lt;p&gt;This attitude goes up the tree to GHC (the de facto standard Haskell compiler), which regularly breaks large swaths of the open source code base with new versions. This kind of activity typically leads to a large cascade effect of releases of userland packages, which ultimately leads to a lot of churn in the ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;At the time I created Stackage, my primary focus was the Yesod Web Framework. I had made a decision to design Yesod around a large collection of smaller libraries to allow for easier modularity. There are certainly arguments to be made for and against this decision, but for now, the important point is: Yesod relied on 100-150 packages. And I ran into many cases where end users simply could not build Yesod.&lt;&#x2F;p&gt;
&lt;p&gt;At the time, the only real Haskell build tool was &lt;code&gt;cabal&lt;&#x2F;code&gt;. It featured a dependency solver, and respected version bounds for dependencies. In principle, this would mean that &lt;code&gt;cabal&lt;&#x2F;code&gt; should solve the problem for Yesod just fine. In practice, it didn&#x27;t, for two important reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;At the time, there were some fundamental flaws in &lt;code&gt;cabal&lt;&#x2F;code&gt;&#x27;s depedency solver. Even when a valid build plan was available, it would on a regular basis take more than an hour to run without finding it.&lt;&#x2F;li&gt;
&lt;li&gt;Many packages did not include any information on dependency versions in their metadata files, instead simply depending on any version of a dependency.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For those familiar with it: point (2) is definitely the infamous PVP debates, which I&#x27;ve been involved with a lot. Again, I&#x27;m not discussing the trade-offs of the PVP, simply stating historical facts that led to the creation of Stackage.&lt;&#x2F;p&gt;
&lt;p&gt;So, as someone who believed (and still believes) Yesod is a good thing, Haskell is a good thing, and we should make it as easy as possible to get started with Haskell, solving these &amp;quot;dependency hell&amp;quot; issues was worthwhile. Stackage did this for me, and I believe a large percentage of the Haskell community.&lt;&#x2F;p&gt;
&lt;p&gt;Later, we also created the Stack build tool as an alternative to &lt;code&gt;cabal&lt;&#x2F;code&gt;, which defaulted to this snapshot-based approach instead of dependency solving. But that topic is also outside the scope of this blog post, so I won&#x27;t be addressing it further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advantages-of-stackage&quot;&gt;Advantages of Stackage&lt;&#x2F;h2&gt;
&lt;p&gt;There are some great advantages of to Stackage, and it&#x27;s worth getting them out there right now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Virtually no dependency hell problems. If you specify a Stackage snapshot and only use packages within that snapshot, you&#x27;re all but guaranteed that your dependencies will all build correctly, no futzing required. Depending on how well maintained the libraries and their metadata is in your language of choice, this may either be a minor convenience, or a massive life changing impact.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s possible to create &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;lts-15.3&quot;&gt;documentation sites&lt;&#x2F;a&gt; providing a coherent set of docs for a single package, where links in between packages always end up with compatible versions of packages.&lt;&#x2F;li&gt;
&lt;li&gt;For training purposes (which I do quite a bit of), it&#x27;s an amazing thing to say &amp;quot;we&#x27;re using LTS version 15.3&amp;quot; and know everyone is using the same compiler version and library versions.&lt;&#x2F;li&gt;
&lt;li&gt;Similarly, for bug reports, it&#x27;s great to say &amp;quot;please provide a repo and specify your Stackage snapshot.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s possible to write &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;haskell&#x2F;tutorial&#x2F;stack-script&#x2F;&quot;&gt;Haskell scripts&lt;&#x2F;a&gt; that depend on extra library dependencies and have a good guarantee that they&#x27;ll continue to work identically far into the future.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That sounds great, but let&#x27;s not forget the downsides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disadvantages-of-stackage&quot;&gt;Disadvantages of Stackage&lt;&#x2F;h2&gt;
&lt;p&gt;Not everything is perfect in Stackage land. Here are some of the downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s a maintenance burden, like anything else. I think we&#x27;ve done a decent job of automating it, and with the wonderful team of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;CURATORS.md&quot;&gt;Stackage Curators&lt;&#x2F;a&gt; the burden is spread across multiple people. But like any project, it does require time, investment, and upkeep.&lt;&#x2F;li&gt;
&lt;li&gt;Stackage doesn&#x27;t nicely handle the case of using a package outside of the snapshot.&lt;&#x2F;li&gt;
&lt;li&gt;It introduces some level of &amp;quot;community wide mutex&amp;quot; where you need to either wait for dependent libraries to update to support newer dependencies, or drop those libraries. It&#x27;s rarely a big fight these days, since we try to stick to some kind of defined timetables, but it can be frustrating for people, and it has sometimes led to arguments.
&lt;ul&gt;
&lt;li&gt;This brings up one of my guiding principles: avoid these kinds of shared resources whenever possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;OK, so now we understand the pluses and minuses of Stackage. And in the context of Haskell, I believe it was at the time absolutely the right thing to do. And today, I would not want to stop using Stackage in Haskell at all.&lt;&#x2F;p&gt;
&lt;p&gt;But the story is different in Rust. Let me step through some of the motivators in Haskell and how they differ in Rust. Again, keep in mind that my experience in Haskell far outstrips my experience in Rust, and I very much welcome others to weigh in differently than me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-semver-vs-pvp&quot;&gt;Cargo&#x2F;SemVer vs PVP&lt;&#x2F;h2&gt;
&lt;p&gt;What&#x27;s wrong with this line from a Haskell Cabal file?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;build-depends: base, bytestring, text
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unless you&#x27;re a hard core Haskeller, probably nothing obvious jumps out at you. Now look at this snippet of a perfectly valid &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file and tell me what&#x27;s wrong:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even a non-Rustacean will probably come up with the question &amp;quot;what&#x27;s with the empty strings?&amp;quot; Both of thse snippets mean &amp;quot;take whatever version of these libraries you feel like.&amp;quot; But the syntax for Haskell encourages this. The syntax for Rust discourages it. Instead, the following &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; snippet looks far more natural:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.12.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.2.22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I first started writing Haskell, I had no idea about the &amp;quot;correct&amp;quot; way to write dependency bounds. Many other people didn&#x27;t either. Ultimately, years into my Haskell experience, I found out that the recommended approach was the PVP, which is essentially Haskell&#x27;s version of SemVer. (To be clear: the PVP predates SemVer, this was not a case of Not Invented Here syndrome.)&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the PVP is quite a complicated beast to get right. I&#x27;ve heard from multiple Haskellers, with a wide range of experience, that they don&#x27;t know how to properly version their packages. To this day, the most common response I&#x27;m likely to give on a Haskell pull request is &amp;quot;please change the version number, this doesn&#x27;t comply with the PVP.&amp;quot; As a result, we have a situation where the easy, obvious thing to do is to include no version information at all, and the &amp;quot;correct&amp;quot; thing to do is really, really hard to get right.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, in Rust, the simple thing to do is mostly correct: just stick the current version of the package in the double quotes. The format of the file basically begs you to do it. It feels weird &lt;em&gt;not&lt;&#x2F;em&gt; to do it. And even though it&#x27;s not perfect, it&#x27;s pretty darn good.&lt;&#x2F;p&gt;
&lt;p&gt;So first point against a Stackage for Rust: &lt;strong&gt;Cargo&#x27;s format encourages proper dependency information to be maintained&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependency-solver-works&quot;&gt;Dependency solver works&lt;&#x2F;h2&gt;
&lt;p&gt;This is where my larger Haskell experience may be skewing my vision. As I mentioned, I&#x27;ve had huge problems historically with &lt;code&gt;cabal&lt;&#x2F;code&gt;&#x27;s dependency solver. It has improved massively since then. But between the dependency solver itself having historic bugs, and the lack of good dependency information across Hackage (yes, in large part because of people like me and the presence of Stackage), I don&#x27;t like to rely on dependency solving at all anymore.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, in Rust, I&#x27;ve rarely run into problems with the dependency solver. I have gotten build plans that have failed to build. I have had to manually modify &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; files to specify different versions. I have been bitten by libraries accidentally breaking compatibility within a major version. But relative to my pains with Haskell, it&#x27;s small potatoes.&lt;&#x2F;p&gt;
&lt;p&gt;So next point: &lt;strong&gt;Dependency solving emperically works pretty well in Rust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;culture-of-compatibility&quot;&gt;Culture of compatibility&lt;&#x2F;h2&gt;
&lt;p&gt;In contrast to Haskell, Rust has much more of a culture around keeping backwards and forwards compatibility. The compiler team tries very hard to avoid breaking existing code. And when they do, they try to make it possible to rewrite the broken code in a way that&#x27;s compatible with both the old and new version of the compiler. I&#x27;ve seen a lot of the same attitude from Rust userland packages.&lt;&#x2F;p&gt;
&lt;p&gt;This may sound surprising to Rustaceans, who probably view the Rust library ecosystem as a fast-changing landscape. I&#x27;m just speaking in relative terms to Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;As a result, the level of churn in Rust isn&#x27;t nearly as high as in Haskell, and therefore even with imperfect dependency information a dependency solving approach is likely to work out pretty well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Less library churn means code builds more reliably&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lock-files&quot;&gt;Lock files&lt;&#x2F;h2&gt;
&lt;p&gt;A minor point, but Cargo creates a &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; file that pins the exact versions of your dependencies. It&#x27;s up to you whether you check that file into your code repo, but it&#x27;s trivially easy to do so. Paired together with &lt;code&gt;rust-toolchain&lt;&#x2F;code&gt; files, you can get pretty close to reproducible build plans.&lt;&#x2F;p&gt;
&lt;p&gt;I can&#x27;t speak to the latest versions of &lt;code&gt;cabal&lt;&#x2F;code&gt;, but historically this has not been the default mode of operation for &lt;code&gt;cabal&lt;&#x2F;code&gt;. And I don&#x27;t want to get into the details of Hackage revisions and timestamp-based development, but suffice it to say I have no real expectations that you can fully rely on &lt;code&gt;cabal&lt;&#x2F;code&gt; freeze files. Stack &lt;em&gt;does&lt;&#x2F;em&gt; support fully reproducible build plans and lock files, but that&#x27;s essentially via the same snapshot mechanism as Stackage itself.&lt;&#x2F;p&gt;
&lt;p&gt;In other words: &lt;strong&gt;In the presence of proper lock files, you regain reproducible builds without snapshots&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope this post frames my thoughts around Stackage, Haskell, and Rust pretty well. My basic conclusion is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Snapshots are good thing in general&lt;&#x2F;li&gt;
&lt;li&gt;Snapshots are less vital when you get other things right&lt;&#x2F;li&gt;
&lt;li&gt;Rust has gotten a lot of things right that Haskell didn&#x27;t&lt;&#x2F;li&gt;
&lt;li&gt;As a result, the marginal benefit of snapshots in Rust are nowhere near the marginal benefits in Haskell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To restate: my calculations here are biased by having much more experience with Haskell than Rust codebases. If I was running the same number of lines of Rust code as Haskell, or teaching the same number of courses, or maintaining as many open source projects, I may not come to this conclusion. But based on what I see right now, the benefits of a snapshot system in Rust do not outweigh the costs of setting up and maintaining one.&lt;&#x2F;p&gt;
&lt;p&gt;All that said: I&#x27;m still very interested to hear others&#x27; takes on this, both if you agree with my conclusion, and even more if you don&#x27;t. Please feel free to ping me on social media discussions, the Disqus comments below, or my personal email (michael at snoyman dot com).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Book review: Loserthink</title>
		<published>2020-08-10T00:00:00+00:00</published>
		<updated>2020-08-10T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/08/book-review-loserthink/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/08/book-review-loserthink/</id>
		<content type="html">&lt;p&gt;I don&#x27;t typically write book reviews. But I felt like doing one in this case, since the topic hit close to home for me (more on that soon). I&#x27;ll start off with: I really enjoyed this book, it helped me understand some things I didn&#x27;t before, it was a humorous read, and I think it will have an ongoing impact for me. Highly recommended.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Loserthink-Untrained-Brains-Ruining-America&#x2F;dp&#x2F;0593083520&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.gr-assets.com&#x2F;images&#x2F;S&#x2F;compressed.photo.goodreads.com&#x2F;books&#x2F;1562003093l&#x2F;44525766.jpg&quot; alt=&quot;Loserthink&quot;&gt;&lt;br&gt;Loserthink by Scott Adams&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Loserthink is a book by Scott Adams, with the interesting subtitle &amp;quot;How untrained brains are ruining America.&amp;quot; The book definitely references many American concepts, and refers to US politics quite a bit (I&#x27;ll get to that below). For me, those are useful illustrations, but not at all the core of the book.&lt;&#x2F;p&gt;
&lt;p&gt;The first half of the book covers a number of different disciplines in the world, such as engineering, psychology, and economics. This first part is what &amp;quot;hit close to home&amp;quot; for me, and encouraged me to write this book review. In these chapters, Adams walks through how the specialized thought processes in these disciplines encourage helpful ways of thinking about problems.&lt;&#x2F;p&gt;
&lt;p&gt;This topic has been on my mind a &lt;strong&gt;lot&lt;&#x2F;strong&gt; for the past six months or so. Earlier this year, I gave a talk for LambdaConf titled &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=n7QETok5hYI&quot;&gt;Economic Argument for Functional Programming&lt;&#x2F;a&gt;. In that talk, I established my credentials (former actuary, now programmer, lots of experience with economics and statistics courses), and then proceeded to explain some economics concepts for making engineering and business decisions. I wasn&#x27;t certain how the talk would go over, given that I&#x27;ve never known normal people to sign up for an hour long stuffy economics lecture. But people seem to have liked the exposure to a different way of thinking. (Or at least people are really polite to me, or I&#x27;m experiencing strong selection bias of only those who like the talk reach out to me.)&lt;&#x2F;p&gt;
&lt;p&gt;I realized quickly when reading Loserthink that the first number of chapters all follow a similar kind of pattern as my talk: present a discipline&#x27;s way of thinking, and show how it would approach real-world problems in a better way than &amp;quot;Loserthink&amp;quot; would. For each of these, I had one of three different kinds of responses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wow, I never thought of it that way before, I&#x27;m glad I learned something new&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve intuitively been thinking about it this way, but now I have a clear method to follow, and to use for helping others&lt;&#x2F;li&gt;
&lt;li&gt;I know this solidly, and already use these techniques regularly, and I&#x27;m surprised to see how big the gap is from the way most people see things&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This last one was strongest in the engineering and economics chapters. I anticipate readers of this blog would be somewhat horrified to see how non-engineers think through problems. I also anticipate many readers here to be shocked at their own &amp;quot;mental prisons&amp;quot; (as Adams puts it) for topics like psychology.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve read a number of Adams&#x27;s previous works, including &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00COOFBA4&#x2F;ref=dbs_a_def_rwt_bibl_vppi_i0&quot;&gt;How to fail at almost everything and still win big&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B06X1DWK4Q&#x2F;ref=dbs_a_def_rwt_bibl_vppi_i2&quot;&gt;Win Bigly&lt;&#x2F;a&gt;. In fact, some of my comments on persuasion in the aforementioned LambdaConf talk were inspired by Adams&#x27;s &amp;quot;persuasion filter&amp;quot; concept and Robert Cialdini&#x27;s books &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Influence-Psychology-Persuasion-Business-Essentials-ebook&#x2F;dp&#x2F;B002BD2UUC&#x2F;ref=sr_1_1?dchild=1&amp;amp;keywords=cialdini&amp;amp;qid=1597032592&amp;amp;s=digital-text&amp;amp;sr=1-1&quot;&gt;Influence&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Pre-Suasion-Revolutionary-Way-Influence-Persuade-ebook&#x2F;dp&#x2F;B01C36E2YS&#x2F;ref=sr_1_2?dchild=1&amp;amp;keywords=cialdini&amp;amp;qid=1597032592&amp;amp;s=digital-text&amp;amp;sr=1-2&quot;&gt;Pre-suasion&lt;&#x2F;a&gt; (a book title many people think I&#x27;m regularly misspelling and mispronouncing).&lt;&#x2F;p&gt;
&lt;p&gt;Before reading these books, I probably had a typical engineer&#x27;s world view on things: I&#x27;m a smart, rational person, well grounded in facts and logic, and I follow a straightline path from data to decisions. I&#x27;m now firmly a believer that I am nothing of the sort, and this world view shift is deeply pervasive. If people express interest, I may write up some follow up reviews on those other books.&lt;&#x2F;p&gt;
&lt;p&gt;Continuing with Loserthink, the book moves on to point out some real-world examples. As I mentioned above, Adams does have a heavy focus on US politics. This is a double-edged sword, and potentially my only critique of the book. While highly illustrative to those both familiar with US politics and open minded enough to consider both sides of an issue, it may be offputting to others. Adams points out &amp;quot;Loserthink&amp;quot; fairly evenly on both sides of the aisle, and in my opinion all accurately. Without getting into details, I can say that there were arguments he made that made me realize shortcomings in some of my own political views.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, Adams provides guidance on how to escape mental prisons. In many ways, this is a summary of the rest of the book. Which is good, because even given the relative brevity of the book (just a few hundred pages), it packs a punch.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;&#x2F;strong&gt; If you&#x27;re interested in expanding how you think things through, check out Loserthink.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>New book available: Begin Rust</title>
		<published>2020-06-08T00:00:00+00:00</published>
		<updated>2020-06-08T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/06/new-book-begin-rust/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/06/new-book-begin-rust/</id>
		<content type="html">&lt;p&gt;Miriam (aka &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LambdaMom&quot;&gt;@LambdaMom&lt;&#x2F;a&gt;) and I are very happy to announce the release of &lt;a href=&quot;https:&#x2F;&#x2F;www.beginrust.com&#x2F;&quot;&gt;Begin Rust&lt;&#x2F;a&gt;. We&#x27;ve been working on this book since the end of last year, and we&#x27;re very excited to release it to the world.&lt;&#x2F;p&gt;
&lt;p&gt;Begin Rust is a complete guide to programming with the Rust programming language, targeted at new and experienced programmers alike.&lt;&#x2F;p&gt;
&lt;p&gt;We started working on the content in this book when trying to teach our children some programming. We eventually decided to expand it to a full introduction. We&#x27;ve strived to make the content accessible to younger audiences who have less experience with computers. We hope it can also be useful for experienced programmers looking to learn about the Rust programming language.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.beginrust.com&#x2F;sample&#x2F;beginrust.html&quot;&gt;first three chapters are available online&lt;&#x2F;a&gt; if you&#x27;d like to see them. We also have a &lt;a href=&quot;https:&#x2F;&#x2F;chat.beginrust.com&#x2F;&quot;&gt;Discourse instance for discussion&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;beginrust&quot;&gt;a @beginrust Twitter account&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>There are no mutable parameters in Rust</title>
		<published>2020-05-10T00:00:00+00:00</published>
		<updated>2020-05-10T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/05/no-mutable-parameters-in-rust/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/05/no-mutable-parameters-in-rust/</id>
		<content type="html">&lt;p&gt;While reviewing the second-to-last chapter in the &lt;a href=&quot;https:&#x2F;&#x2F;www.beginrust.com&#x2F;&quot;&gt;Begin Rust&lt;&#x2F;a&gt; book, a slightly more advanced topic came up. This is a topic that has intrigued me for a while, in particular because it demonstrates some fundamental differences in how Rust and Haskell approach mutability. The topic is too advanced for the book, but I wanted to provide an external source to reference for people who are curious. So here it is!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s build this up bit by bit. Does the following program compile?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Answer: no! &lt;code&gt;x&lt;&#x2F;code&gt; is an immutable variable, and therefore you can&#x27;t use &lt;code&gt;+= 1&lt;&#x2F;code&gt; on it. Fixing this is easy: add &lt;code&gt;mut&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But since adding 1 and printing is such an important operation in my application (yes, that&#x27;s sarcasm), I&#x27;ve decided to extract it to its own function. Tell me, does &lt;em&gt;this&lt;&#x2F;em&gt; code compile?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No, and for the same reason as the first example: &lt;code&gt;x&lt;&#x2F;code&gt; is immutable. Fixing that is easy enough here too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have &lt;code&gt;x&lt;&#x2F;code&gt; as the only parameter to &lt;code&gt;add_and_print&lt;&#x2F;code&gt;. Its type is &lt;code&gt;i32&lt;&#x2F;code&gt;, and it is mutable. OK, cool. Finally we&#x27;re in a position to use this function from &lt;code&gt;main&lt;&#x2F;code&gt;. Tell me, will this program compile and run? And as some really great foreshadowing, will the program generate any warnings?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Answer: it compiles, runs, and generates the output &lt;code&gt;x == 6&lt;&#x2F;code&gt;. However, it &lt;em&gt;does&lt;&#x2F;em&gt; have a warning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: variable does not need to be mutable
 --&amp;gt; src&#x2F;main.rs:2:9
  |
2 |     let mut x = 5;
  |         ----^
  |         |
  |         help: remove this `mut`
  |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Initially, at least for me, this was really surprising. &lt;code&gt;add_and_print&lt;&#x2F;code&gt; needs to receive a mutable &lt;code&gt;i32&lt;&#x2F;code&gt; as its first parameter. We provide it with a mutable &lt;code&gt;i32&lt;&#x2F;code&gt;. And then the compiler says that the &lt;code&gt;mut&lt;&#x2F;code&gt; in &lt;code&gt;main&lt;&#x2F;code&gt; is unnecessary. What gives?!?&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a mistake in my explanation above. The function &lt;code&gt;add_and_print&lt;&#x2F;code&gt;, perhaps very confusingly, does &lt;em&gt;not&lt;&#x2F;em&gt; take a mutable &lt;code&gt;i32&lt;&#x2F;code&gt; as a parameter. &amp;quot;But it says &lt;code&gt;mut&lt;&#x2F;code&gt;!!!&amp;quot; you argue. That&#x27;s true. However, that detail is &lt;em&gt;internal to the function&lt;&#x2F;em&gt;, not part of its type signature. That sounds confusing, so let me explain.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a pattern that appears all over Rust which I call the &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;11&#x2F;rust-crash-course-05-rule-of-three&quot;&gt;rule of three&lt;&#x2F;a&gt;. This covers the fact that in many cases, we end up having three &amp;quot;versions&amp;quot; of things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An immutable borrow&lt;&#x2F;li&gt;
&lt;li&gt;A mutable borrow&lt;&#x2F;li&gt;
&lt;li&gt;A move&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That can apply to function parameters, for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;immutable_borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mutable_borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the difference is entirely &lt;em&gt;after&lt;&#x2F;em&gt; the colon. These three things are different types, and the types are what make up the signature of the function.&lt;&#x2F;p&gt;
&lt;p&gt;However, the stuff before the colon, in this case the &lt;code&gt;x&lt;&#x2F;code&gt;, does &lt;em&gt;not&lt;&#x2F;em&gt; affect the signature of the function. What name you choose for the variable that captures the parameter is irrelevant to the signature of the function. Once you pass in a value of the right type to the function, the function gets to decide what to call it.&lt;&#x2F;p&gt;
&lt;p&gt;But this rule applies to more than just the variable name. It applies to the variable &lt;em&gt;mutability&lt;&#x2F;em&gt; as well. You see, mutability in Rust is a feature of the &lt;em&gt;variable&lt;&#x2F;em&gt;, not the value. When I say &lt;code&gt;let mut x = 5&lt;&#x2F;code&gt;, I&#x27;m saying &amp;quot;I&#x27;m creating a variable called &lt;code&gt;x&lt;&#x2F;code&gt;, it&#x27;s pointing a value &lt;code&gt;5&lt;&#x2F;code&gt;, and I&#x27;m allowed to use &lt;code&gt;x&lt;&#x2F;code&gt; to mutate that value.&amp;quot; If I drop the &lt;code&gt;mut&lt;&#x2F;code&gt;, I&#x27;m no longer allowed to mutate that value via the variable &lt;code&gt;x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A gut reaction you might have is, if you can&#x27;t mutate the variable, the only thing you can do is read it. This is where my Haskeller spidey-senses lead me to at least. But it&#x27;s not true in Rust. There&#x27;s one other thing you&#x27;re allowed to do: move the value into another scope. &lt;code&gt;add_and_print&lt;&#x2F;code&gt; accepts the value by move, and even if &lt;code&gt;x&lt;&#x2F;code&gt; is an immutable variable, I&#x27;m still allowed to move the value that it references.&lt;&#x2F;p&gt;
&lt;p&gt;Once I&#x27;ve moved the value, it&#x27;s entirely up to &lt;code&gt;add_and_print&lt;&#x2F;code&gt; to decide what to do with it. And it&#x27;s allowed to call it mutable, even though the original variable was immutable. That&#x27;s because the &lt;em&gt;value itself&lt;&#x2F;em&gt; is passed in, not the variable. And the value is perfectly comfortable being mutated.&lt;&#x2F;p&gt;
&lt;p&gt;So a warning-free version of the program is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add_and_print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In fact, moving-into-mutable is something that can happen even without a function call. For example, you can &amp;quot;upgrade&amp;quot; from an immutable variable to a mutable one inside a single function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y = x;
    y += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;y == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;quot;But wait,&amp;quot; you complain, &amp;quot;you can&#x27;t just &#x27;upgrade&#x27; an immutable reference to a mutable reference!&amp;quot; Or maybe a dozen other similar complaints about my explanation. What I&#x27;m slightly glossing over here is that, when it comes to references, the mutability &lt;em&gt;is&lt;&#x2F;em&gt; baked into the value. That&#x27;s because with something like &lt;code&gt;x: &amp;amp;i32&lt;&#x2F;code&gt;, &lt;code&gt;x&lt;&#x2F;code&gt; doesn&#x27;t have a number, it has a &lt;em&gt;reference&lt;&#x2F;em&gt; to a number. And references themselves are types that do in fact enforce mutable vs immutable rules. Therefore, you can&#x27;t simply upgrade an immutable reference to a mutable one. This code is broken:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; z: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; b0rken!

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*z += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, pulling it back together:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can have values, immutable references to values, and mutable references to values&lt;&#x2F;li&gt;
&lt;li&gt;Values are neither immutable or mutable&lt;&#x2F;li&gt;
&lt;li&gt;Instead, variables are immutable or mutable&lt;&#x2F;li&gt;
&lt;li&gt;When you move a value into a new variable (via a &lt;code&gt;let&lt;&#x2F;code&gt; or a function call), you can change the mutability of the variable&lt;&#x2F;li&gt;
&lt;li&gt;The mutability and names of variables in function signatures do not affect the signature of the function&lt;&#x2F;li&gt;
&lt;li&gt;The mutability of a reference is built into the type itself, so you can&#x27;t &amp;quot;upgrade&amp;quot; an immutable reference to a mutable one&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Lazy Rust Compiler</title>
		<published>2020-04-01T00:00:00+00:00</published>
		<updated>2020-04-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/04/lazy-rust-compiler/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/04/lazy-rust-compiler/</id>
		<content type="html">&lt;p&gt;Let’s face it: we all know that Rust is the best language on the market today, hands down. It has stolen all of the good features from all other languages out there, added some of its own, and is just cranking on awesomeness. The handwriting is on the wall: Rust wins, and all software in the next five years will be rewritten in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;But there’s one prominent language feature that the Rust authors forgot about: laziness. Laziness is arguably the defining feature of Haskell, and despite all of Haskell’s many other limitations (strong typing, Software Transactional Memory, etc), laziness stands apart as a feature universally accepted as good.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a true shame that the Rust language authors were so short sighted as to include unimportant features like enums and pattern matching in their language, yet leave out laziness. And so I’m happy to announce a new project: Lazy Rust, aka Lust.&lt;&#x2F;p&gt;
&lt;p&gt;Lust is going to be a source-compatible version of the Rust language. It has the capability to compile all existing Rust code without modification. However, it will automatically, transparently, and quickly perform laziness rewrites. This will give massive performance speedups in many common cases, be no less efficient in others, and introduce zero differences in runtime behavior otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve written an extensive proof for these claims, but there’s no room in this already overly long blog post to include it.&lt;&#x2F;p&gt;
&lt;p&gt;The question of course is: how will we get Lust out into the world? And this is the cool thing: we get it for free by rewriting the Rust compiler in Haskell. You see, Haskell provides laziness using a really simple feature, called thunks. We could try to implement thunks directly in Rust today, but that’s a lot of work. Instead, rewriting a parser, type checker, code generator, and other tooling in Haskell is far easier.&lt;&#x2F;p&gt;
&lt;p&gt;There’s only one downside to this implementation strategy: all Lust programs will have a runtime dependency on Haskell’s premier compiler, GHC. However, this is a small price to pay for the massive benefits that laziness will bring in practice.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basics of Carbohydrates</title>
		<published>2020-03-27T00:00:00+00:00</published>
		<updated>2020-03-27T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/03/carbs/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/03/carbs/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Context&lt;&#x2F;strong&gt; I originally wrote this content years ago for teaching my children. I happened to stumble across it today when cleaning up some repos, and thought with the current &amp;quot;everyone is home schooling&amp;quot; situation around COVID-19, it would be a good time to publish it.&lt;&#x2F;p&gt;
&lt;p&gt;Everything your body does needs to be powered. In your computer, the
power is electricity. In your body, the power comes from food. In
plants, the power (usually) comes from the sun. We have three main
kinds of energy in food: carbohydrates (carbs), lipids (fats), and
proteins. This is about carbs.&lt;&#x2F;p&gt;
&lt;p&gt;Your body is made up of lots of different cells: brain cells, heart
cells, muscle cells, skin cells. Every cell in your body can use
&lt;strong&gt;glucose&lt;&#x2F;strong&gt; for energy. Let&#x27;s start off by understanding what glucose
is made up of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structure-of-glucose&quot;&gt;Structure of glucose&lt;&#x2F;h2&gt;
&lt;p&gt;Glucose is a &lt;em&gt;molecule&lt;&#x2F;em&gt;, which is made up of other &lt;em&gt;atoms&lt;&#x2F;em&gt;. In fact,
it&#x27;s made up of 6 carbons &lt;strong&gt;C&lt;&#x2F;strong&gt;, 12 hydrogens &lt;strong&gt;H&lt;&#x2F;strong&gt;, and 6 oxygens
&lt;strong&gt;O&lt;&#x2F;strong&gt;. Hydrogen and oxygen together make water (H2O), which in greek
is &lt;em&gt;hydro&lt;&#x2F;em&gt;. That&#x27;s where the word carbohydrate comes from: carbon +
hydro = carbohydrate.&lt;&#x2F;p&gt;
&lt;p&gt;Here are two different pictures of what the glucose molecule look
like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;3dglucose.png&quot; alt=&quot;3D glucose&quot; style=&quot;width: 250px&quot;&gt; &lt;img src=&quot;&#x2F;static&#x2F;images&#x2F;2dglucose.png&quot; alt=&quot;2D glucose&quot; style=&quot;width: 250px&quot;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;energy-in-glucose&quot;&gt;Energy in glucose&lt;&#x2F;h3&gt;
&lt;p&gt;Each time two atoms are connected to each other, it&#x27;s called a
&lt;em&gt;covalent bond&lt;&#x2F;em&gt;. Each bond has some energy in it. This is called
&lt;em&gt;chemical energy&lt;&#x2F;em&gt;. Your body needs to convert that chemical energy to
energy it can use to move your muscles, let your brain think, and
everything else. It does this by something called &lt;em&gt;cellular
respiration&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The next bit is like a math formula. Remember that glucose has 6
carbons, 12 hydrogens, and 6 oxygens. From now on, we&#x27;ll write that as
C6H12O6. Cellular respiration combines the glucose with oxygen (O2) to
make carbon dioxide (CO2) and water (H2O). We&#x27;ll play with the exact
math later in the first exercise. The cool thing is: when you do this
conversion, there are less covalent bonds at the end, so you free up
energy.&lt;&#x2F;p&gt;
&lt;p&gt;Plants do the opposite: they take carbon dioxide and water, and
combine it with energy from the sun using &lt;em&gt;photosynthesis&lt;&#x2F;em&gt; to make
glucose and oxygen. That&#x27;s why animals breathe in oxygen and breathe
out carbon dioxide, and plants do the opposite.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sugars&quot;&gt;Sugars&lt;&#x2F;h2&gt;
&lt;p&gt;Glucose is one kind of a &lt;em&gt;sugar&lt;&#x2F;em&gt;. It&#x27;s actually a &lt;em&gt;simple sugar&lt;&#x2F;em&gt;, or a
&lt;em&gt;monosaccharide&lt;&#x2F;em&gt;. &lt;em&gt;Mono&lt;&#x2F;em&gt; is greek for &amp;quot;one&amp;quot;, and &lt;em&gt;saccharide&lt;&#x2F;em&gt; is Latin
for sugar. There are three different kinds of &lt;em&gt;monosaccharides&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Glucose&lt;&#x2F;li&gt;
&lt;li&gt;Fructose&lt;&#x2F;li&gt;
&lt;li&gt;Galactose&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;They all have the same number of carbons, hydrogens, and oxygens, but
they have slightly different shapes. This is important, because it
means that glucose can be used by &lt;em&gt;any&lt;&#x2F;em&gt; part of the body. However,
fructose and galactose can only be used in the liver for producing
energy.&lt;&#x2F;p&gt;
&lt;p&gt;There are also &lt;em&gt;disaccharides&lt;&#x2F;em&gt;. &lt;em&gt;Di&lt;&#x2F;em&gt; is Greek for &amp;quot;two,&amp;quot; and these are
combinations of two simple sugars. Some common examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sucrose is a glucose and a fructose together&lt;&#x2F;li&gt;
&lt;li&gt;Lactose is a glucose and a galactose together&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When you hear of &amp;quot;sugar,&amp;quot; or see a package with sugar in it, it&#x27;s
usually sucrose. It&#x27;s also called &amp;quot;table sugar.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Lactose is also known as milk sugar, and is made by mother animals
(mammals) for their babies. Fructose is sometimes called &amp;quot;fruit
sugar,&amp;quot; because fruit has a lot of it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;polysaccharides&quot;&gt;Polysaccharides&lt;&#x2F;h2&gt;
&lt;p&gt;We can have more than just two sugars together. &lt;em&gt;Poly&lt;&#x2F;em&gt; is the Greek
word for &amp;quot;many.&amp;quot; One kind of polysaccharide is &lt;em&gt;starch&lt;&#x2F;em&gt;, which is a
long chain of glucose molecules. There are lots of foods that we eat
that have a lot of starch in them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grains, like wheat, oats, and rice&lt;&#x2F;li&gt;
&lt;li&gt;Potatoes&lt;&#x2F;li&gt;
&lt;li&gt;Sweet potatoes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When you eat starch (or, for that matter, disaccharides), your stomach
and intenstines will break it down into the individual simple sugars,
which then get absorbed into your blood. Because starch takes longer
to break down to simple sugars, it gets absorbed more slowly into your
blood stream.&lt;&#x2F;p&gt;
&lt;p&gt;Another kind of polysaccharide is something animals make, called
&lt;em&gt;glycogen&lt;&#x2F;em&gt;. Glycogen is something your muscles and liver store for
energy. It&#x27;s easy to turn into glucose, and can be used for quick
energy. It&#x27;s really useful, for example, if you need to run really
fast for a short time, or lift heavy weights. That&#x27;s why eating lots
of carbs before lifting weights helps so much.&lt;&#x2F;p&gt;
&lt;p&gt;Our bodies are very good at digesting (breaking down and absorbing)
starch. But there are other kinds of polysaccharides that our body
can&#x27;t break down. These are known as cellulose, or fiber. Two
different things can happen with these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We poop them out. This is why eating lots of fiber makes us go to
the bathroom more.&lt;&#x2F;li&gt;
&lt;li&gt;The bacteria in our intestines (gut microbiome) breaks it down and
turns it into fatty acids that we can absorb. This gives us some
energy from fat, and gives our microbiome some food so it can grow.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is why eating fiber is good for you: it helps you go to the
bathroom regularly, and have a healthy gut biome.&lt;&#x2F;p&gt;
&lt;p&gt;When we turn raw food, like wheat, into food we can eat, it&#x27;s called
&lt;em&gt;processing&lt;&#x2F;em&gt; it, or &lt;em&gt;refining&lt;&#x2F;em&gt; it. &lt;em&gt;Highly refined&lt;&#x2F;em&gt; foods are
processed a lot, and look less like the original raw food. For
example, wheat has lots of fiber in it, and whole wheat bread keeps
that fiber. But white bread is more processed, and has had the fiber
taken out. Highly processed carbs, like white bread, crackers, and
pretzels, are not very good for you: they have most of the fiber
stripped out!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;good-and-bad-of-fructose&quot;&gt;Good and bad of fructose&lt;&#x2F;h2&gt;
&lt;p&gt;Fruit has lots of fiber, micronutrients (vitamins and minerals), and
water. It also has fructose, but mixed in with all of these other
things. Fruit is good for you, and you should eat it.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s another cool thing about fructose: our tongues think that it
tastes sweeter than glucose. Lots of companies will use fructose to
make food taste better. And this is the bad side. With a little bit of
fructose in your fruit, your body is fine.&lt;&#x2F;p&gt;
&lt;p&gt;However, when you eat &lt;em&gt;lots&lt;&#x2F;em&gt; of fructose, without the water and fiber
that comes in the fruit, your liver has to do lots of extra work. The
liver works very hard converting the fructose into other energy, like
fat, that your body can use. This makes your liver tired, and takes
away time from doing other things your body needs it to do.&lt;&#x2F;p&gt;
&lt;p&gt;Also, when you have too much fat stuck in your liver, your body can
develop something very dangerous, called &lt;em&gt;fatty liver disease&lt;&#x2F;em&gt;. This
can lead to insulin resistance, which can leads to lots of bad
diseases, like diabetes, cancer, and heart disease.&lt;&#x2F;p&gt;
&lt;p&gt;Lesson: don&#x27;t eat too much extra sugar in your food, the extra
fructose can make you very sick over time!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When you have cellular respiration, your body takes one gluclose
(C6H12O6) and 6 oxygen molecules (O2) and makes some number of
carbon dioxide (CO2) and water (H2O) molecules.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Figure out how many total carbon, hydrogen, and oxygen atoms
are in the glucose and 6 oxygen molecules.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How many carbon dioxide molecules can you make out of that?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How much stuff is left? How much water can you make out of that?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Do you have any atoms left over?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What are the three monosaccharides?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Which sugar can be used in your whole body?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Where can the other two sugars be used in your body?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Which sugar do you find a lot of in fruit?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What is starch?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Which gets absorbed faster into your blood, glucose or starch?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BONUS QUESTION: What are some good and bad things you can think
of from getting absorbed faster?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What&#x27;s the name for the way animals store glucose in your livers
and muscles?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What kind of carbohydrates are we bad at digesting? What kinds of
good things do these do for us?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Name one of the bad diseases you can get from having too much
fructose.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Making nutrition decisions</title>
		<published>2020-02-25T00:00:00+00:00</published>
		<updated>2020-02-25T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/02/making-nutrition-decisions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/02/making-nutrition-decisions/</id>
		<content type="html">&lt;p&gt;For various reasons, maybe not great ones, I&#x27;ve been experimenting with a &lt;a href=&quot;https:&#x2F;&#x2F;fireinabottle.net&#x2F;introducing-the-croissant-diet&#x2F;&quot;&gt;new diet plan&lt;&#x2F;a&gt;. I&#x27;m not advocating this diet generally, and not even sure if I like it for myself. I&#x27;m taking notes on how this goes, and intend to share more information later.&lt;&#x2F;p&gt;
&lt;p&gt;This diet plan is radically different from what I normally eat. Getting together with family, this has led to some real confusion. So I wanted to put together a blog post covering two related topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How do I make decisions about how I&#x27;m going to eat?&lt;&#x2F;li&gt;
&lt;li&gt;What principles do I follow in my eating strategy, regardless of the specific diet plan I&#x27;m following?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This post is a bit less structured than some of the others in this series, take it as a bit of a brain dump.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-authorities&quot;&gt;The authorities&lt;&#x2F;h2&gt;
&lt;p&gt;The core about how I make decisions comes down to this: I don&#x27;t trust the mainstream authorities to tell me what to eat. As crazy or egotistical as that may sound in a vacuum, this is far from a radical position. I&#x27;d argue it&#x27;s the only sensible decision given the data: the correlation between health guidelines and modern diseases. Specifically, since the nutrition authorities have started inserting themselves into our food recommendations, the diseases they purport to prevent have become only worse.&lt;&#x2F;p&gt;
&lt;p&gt;This kind of decision leads to a few immediate questions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I&#x27;m feeling better and losing weight, but how do I know if I&#x27;m doing long term harm?&lt;&#x2F;strong&gt; This is a concern raised often about non-standard diets, and perhaps rightfully so. There&#x27;s no long term data on the large scale health effects of a carnivore diet, for instance. That said, there is plenty of data on the long term effects of a standard diet, all bad. My approach: if you&#x27;re feeling better, go for it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s working for me, but how do I know if it works for everyone? I&#x27;m just one person!&lt;&#x2F;strong&gt; Right, you&#x27;re just one person. And that&#x27;s the only person you need to worry about. If your diet is working for you, follow it. You don&#x27;t need something that will work for all members of a population. If you give advice to friends and family, make them responsible for reviewing their own results.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;observations&quot;&gt;Observations&lt;&#x2F;h2&gt;
&lt;p&gt;Many populations across the planet have had a wide variety of diets over the past hundreds and thousands of years. Most of those populations avoided the major degenerative diseases which plague us today (heart disease, cancer, etc). You may argue that this is because they died of other causes before they could die of those diseases. I encourage you to research the topic more fully; I don&#x27;t believe the data says that.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, these observations introduce what initially appear to be paradoxes: how can you have healthy populations that consume such varied diets as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Massively high animal products&lt;&#x2F;li&gt;
&lt;li&gt;Mostly grains&lt;&#x2F;li&gt;
&lt;li&gt;Mostly other starch sources&lt;&#x2F;li&gt;
&lt;li&gt;Combinations of fat and starch&lt;&#x2F;li&gt;
&lt;li&gt;Hunter gatherers consuming copious amounts of honey&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two potential answers, both of which I think are true:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The lifestyles of these groups may have been different&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s nothing inherently wrong with any of these diets, and our health issues stem from a different source&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Personally, I tend towards believing that the second answer is the stronger one, and mostly true. There are certainly some lifestyle factors we have today that differ meaningfully from other groups. Two strongly touted ones are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hunter-gatherers who consumed large amounts of honey did so during specific times of the year, had periods of famine as well, and were highly physically active. That&#x27;s quite a difference from a modern human guzzling Coca Cola in an air conditioned office.&lt;&#x2F;li&gt;
&lt;li&gt;We may be metabolically damaged from our existing eating patterns, leading to what would have been a healthy diet turning into an unhealthy one&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In other words, my gut feeling is that you&#x27;re probably safe following any historically accurate diet. But to account for possible lifestyle issues, you may want to hedge a bit and follow diets more well proven to work well in the modern age.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;paleo-primal&quot;&gt;Paleo&#x2F;primal&lt;&#x2F;h2&gt;
&lt;p&gt;The paleo&#x2F;primal approach to eating fits in well here. I&#x27;ll start by saying that, overall, I&#x27;ve had my best successes with health and weight loss on a primal approach, and I strongly encourage it. However, I don&#x27;t really buy into the idea that everything introduced since the agricultural revolution is toxic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-i-experiment&quot;&gt;Why I experiment&lt;&#x2F;h2&gt;
&lt;p&gt;Based on all that: I think there are lots of healthy eating patterns. My default&#x2F;baseline diet is mostly a primal, low carb diet, veering towards carnivore. However, I still like to experiment with alternatives. Some reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Variety is the spice of life. Trying out different food again is fun.&lt;&#x2F;li&gt;
&lt;li&gt;I like to tinker and see if I can optimize things, such as improving my weight lifting.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m curious from a scientific standpoint as to how different theories work out in practice.&lt;&#x2F;li&gt;
&lt;li&gt;Finding eating styles that are healthy and easier to adopt than something like keto could be a boon for people&#x27;s health in general.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;constants&quot;&gt;Constants&lt;&#x2F;h2&gt;
&lt;p&gt;That said, I do try to stick to a few constants in any diet that I experiment with. This is based on the principles above and the information I&#x27;ve read. I evolve this list over time, but this represents where I&#x27;m at right now.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Seed oils (soybean, corn oil, etc) should be avoided at almost all costs. They are a relatively brand new addition to our diets. Their addition correlates closely to many disease epidemics, and there are plausible mechanistic explanations for how they cause these diseases (see references below).&lt;&#x2F;li&gt;
&lt;li&gt;Avoid trans fats as well. I put this as second to seed oils only because it&#x27;s already well understood. If you see &amp;quot;partially hydrogenated&amp;quot; in an ingredient list, avoid it.&lt;&#x2F;li&gt;
&lt;li&gt;Added sugar should either be avoided entirely, or at the very least limited. Sugar has been part of the human diet in one form or another for a long while, but the current levels regularly consumed far outpace what we&#x27;ve had historically.&lt;&#x2F;li&gt;
&lt;li&gt;Focus on getting enough protein. It&#x27;s necessary, it&#x27;s satiating (so helps you avoid overeating), and outside of specific disease states like existing kidney disease, the claims of danger are in my reading without merit.&lt;&#x2F;li&gt;
&lt;li&gt;Grains have been part of the human diet for a long time, so I find it hard to say that they&#x27;re evil. There are some arguments about it, like new strains of wheat having different properties or the refinement process being different these days. But overall, I can&#x27;t justify &amp;quot;wheat is evil.&amp;quot; That said, in my experience it&#x27;s much easier to overeat on empty calories with grains than without them.&lt;&#x2F;li&gt;
&lt;li&gt;Even more strongly, I don&#x27;t see carbs as inherently evil either. However, I think focusing on fat tends to make more sense in a modern diet.&lt;&#x2F;li&gt;
&lt;li&gt;Saturated fat isn&#x27;t evil. The demonization of coconut oil by the American Heart Association is hard to see as anything but a paid hit job by the seed oil industry.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some videos talking about the seed oil and sugar concerns that I&#x27;m sticking to the most:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;pHnPinYI2Yc&quot;&gt;Omega 6 Apocalypse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=f_4Q9Iv7_Ao&quot;&gt;Why sugar is as bad as alcohol&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Q2UnOryQiIY&quot;&gt;Vegetable oils: the unknown story&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;I_j-tBJ3Kss&quot;&gt;Coconut Oil Kills&lt;&#x2F;a&gt; (fair warning: it&#x27;s a parody)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Warp Executable</title>
		<published>2020-01-20T00:00:00+00:00</published>
		<updated>2020-01-20T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2020/01/the-warp-executable/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2020/01/the-warp-executable/</id>
		<content type="html">&lt;p&gt;I recently reinstalled the OS on my laptop and very quickly ran into:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ warp
-bash: warp: command not found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This made me realize just how frequently I use the &lt;code&gt;warp&lt;&#x2F;code&gt; executable in my day-to-day life, and decided to write a quick post about it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-install-it&quot;&gt;How to install it&lt;&#x2F;h2&gt;
&lt;p&gt;The executable may be available in your package manager. However, I recommend building&#x2F;installing it with &lt;a href=&quot;https:&#x2F;&#x2F;docs.haskellstack.org&quot;&gt;Stack&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;haskell&#x2F;get-started&quot;&gt;Install Stack&lt;&#x2F;a&gt;, with &lt;code&gt;curl -sSL https:&#x2F;&#x2F;get.haskellstack.org&#x2F; | sh&lt;&#x2F;code&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;stack&#x2F;windows-x86_64-installer&quot;&gt;the Windows installer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;stack install wai-app-static&lt;&#x2F;code&gt;, or &lt;code&gt;stack install wai-app-static --resolver lts-14.20&lt;&#x2F;code&gt; to be a bit more pedantic&lt;&#x2F;li&gt;
&lt;li&gt;There is no step 3&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you don&#x27;t have a Haskell toolchain set up, this will download a bunch of stuff and may take a bit. Sorry.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-it-does&quot;&gt;What it does&lt;&#x2F;h2&gt;
&lt;p&gt;The Warp executable provides a simple file server. My most usually way of calling it is without any arguments, where it will serve the files in the current directory on port 3000. The two most common options I&#x27;ll pass it are:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ warp -d some-directory # serve from that directory
$ warp -p 8080 # serve on a different port
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use &lt;code&gt;warp --help&lt;&#x2F;code&gt; for a full listing of options, though there aren&#x27;t many.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-it-s-useful&quot;&gt;Why it&#x27;s useful&lt;&#x2F;h2&gt;
&lt;p&gt;Simply: no config file. You can set up a dedicated file server using &lt;code&gt;nginx&lt;&#x2F;code&gt; or others, but that takes much more effort. Often times, I want to simply generate some HTML and then view it on my phone, for example. This works out perfectly.&lt;&#x2F;p&gt;
&lt;p&gt;Along those lines, I highly recommend checking out &lt;a href=&quot;https:&#x2F;&#x2F;ngrok.com&#x2F;&quot;&gt;ngrok&lt;&#x2F;a&gt;, which will provide a temporary public URL to a locally running service. This can be a great way to share a locally running site with someone else. It&#x27;s pretty common for me to have &lt;code&gt;warp&lt;&#x2F;code&gt; running in one terminal and &lt;code&gt;ngrok http 3000&lt;&#x2F;code&gt; in another.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;also-servius&quot;&gt;Also: Servius&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve considered writing a blog post about &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;servius&quot;&gt;Servius&lt;&#x2F;a&gt; many times before, but there&#x27;s never enough info to warrant a dedicated post. So now&#x27;s a good time to mention it. Servius is a souped-up version of the Warp executable. In addition to serving static files, it has support for rendering Markdown (using Github-flavored CommonMark). I&#x27;ll often use Servius instead of Warp when I&#x27;m drafting a blog post like this and want to check it out quickly.&lt;&#x2F;p&gt;
&lt;p&gt;Want to install Servius? Just run &lt;code&gt;stack install servius&lt;&#x2F;code&gt; or &lt;code&gt;stack install servius --resolver lts-14.20&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-tools&quot;&gt;Other tools?&lt;&#x2F;h2&gt;
&lt;p&gt;One more shout-out: I really like the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;bat#readme&quot;&gt;&lt;code&gt;bat&lt;&#x2F;code&gt; tool&lt;&#x2F;a&gt;, aka &amp;quot;a cat clone with wings.&amp;quot; To get it, &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot;&gt;install Rust&lt;&#x2F;a&gt; and run &lt;code&gt;cargo install bat&lt;&#x2F;code&gt;, or check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;bat#installation&quot;&gt;many other installation options&lt;&#x2F;a&gt;. I enjoy getting syntax highlighting and paging when I want to look at files, without having to pop them open in &lt;code&gt;vim&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I may expand this list over time :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Tokio 0.2 - Rust Crash Course lesson 9</title>
		<published>2019-12-05T00:00:00+00:00</published>
		<updated>2019-12-05T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/12/rust-crash-course-09-tokio-0-2/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/12/rust-crash-course-09-tokio-0-2/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;2019&#x2F;12&#x2F;rust-crash-course-08-down-dirty-future&quot;&gt;previous lesson in the crash course&lt;&#x2F;a&gt;, we covered the new &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax stabilized in Rust 1.39, and the &lt;code&gt;Future&lt;&#x2F;code&gt; trait which lives underneath it. This information greatly supercedes the now-defunct lesson 7 from last year, which covered the older &lt;code&gt;Future&lt;&#x2F;code&gt; approach.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to update the second half of lesson 7, and teach the hot-off-the-presses Tokio 0.2 release. For those not familiar with it, let me quote the project&#x27;s overview:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tokio is an event-driven, non-blocking I&#x2F;O platform for writing asynchronous applications with the Rust programming language.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you want to write an efficient, concurrent network service in Rust, you&#x27;ll want to use something like Tokio. That&#x27;s not to say that this is the only use case for Tokio; you can do lots of great things with an event driven scheduler outside of network services. It&#x27;s also not to say that Tokio is the only solution; the &lt;a href=&quot;https:&#x2F;&#x2F;async.rs&#x2F;&quot;&gt;&lt;code&gt;async-std&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; library provides similar functionality.&lt;&#x2F;p&gt;
&lt;p&gt;However, network services are likely the most common domain agitating for a non-blocking I&#x2F;O system. And Tokio is the most popular and established of these systems today. So this combination is where we&#x27;re going to get started.&lt;&#x2F;p&gt;
&lt;p&gt;And as a side note, if you have some other topic you&#x27;d like me to cover around this, please &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;let me know on Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Exercise solutions will be included at the end of the blog post. Yes, I keep changing the rules, sue me.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-tokio&quot;&gt;Hello Tokio!&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s kick this off. Go ahead and create a new Rust project for experimenting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new --bin usetokio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to make sure you&#x27;re using the same compiler version as me, set up your &lt;code&gt;rust-toolchain&lt;&#x2F;code&gt; correctly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ echo 1.39.0 &amp;gt; rust-toolchain
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then set up Tokio as a dependency. For simplicity, we&#x27;ll install all the bells and whistles. In your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;PROTIP&lt;&#x2F;strong&gt; You can run &lt;code&gt;cargo build&lt;&#x2F;code&gt; now to kick off the download and build of crates while you keep reading...&lt;&#x2F;p&gt;
&lt;p&gt;And now we&#x27;re going to write an asynchronous hello world application. Type this into your &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hello: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I specifically said &amp;quot;type this in&amp;quot; instead of &amp;quot;copy and paste.&amp;quot; For getting comfortable with this stuff, I recommend manually typing in the code.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of this should look familiar from our previous lesson. To recap:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Since we&#x27;ll be &lt;code&gt;await&lt;&#x2F;code&gt;ing something and generating a &lt;code&gt;Future&lt;&#x2F;code&gt;, our &lt;code&gt;main&lt;&#x2F;code&gt; function is &lt;code&gt;async&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Since &lt;code&gt;main&lt;&#x2F;code&gt; is &lt;code&gt;async&lt;&#x2F;code&gt;, we need to use an executor to run it. That&#x27;s why we use the &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; attribute.&lt;&#x2F;li&gt;
&lt;li&gt;Since performing I&#x2F;O can fail, we return a &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first really new thing since last lesson is this little bit of syntax:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I mentioned it last time, but now we&#x27;re seeing it in real life. This is just the combination of our two pieces of prior art: &lt;code&gt;.await&lt;&#x2F;code&gt; for chaining together &lt;code&gt;Future&lt;&#x2F;code&gt;s, and &lt;code&gt;?&lt;&#x2F;code&gt; for error handling. The fact that these work together so nicely is really awesome. I&#x27;ll probably mention this a few more times, because I love it that much.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing to note is that we use &lt;code&gt;tokio::io::stdout()&lt;&#x2F;code&gt; to get access to some value that lets us interact with standard output. If you&#x27;re familiar with it, this looks really similar to &lt;code&gt;std::io::stdout()&lt;&#x2F;code&gt;. That&#x27;s by design: a large part of the &lt;code&gt;tokio&lt;&#x2F;code&gt; API is simply async-ifying things from &lt;code&gt;std&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And finally, we can look at the actual &lt;code&gt;tokio::io::copy&lt;&#x2F;code&gt; call. As you may have guessed, and as stated in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;io&#x2F;fn.copy.html&quot;&gt;API docs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is an asynchronous version of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;io&#x2F;fn.copy.html&quot;&gt;&lt;code&gt;std::io::copy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However, instead of working with the &lt;code&gt;Read&lt;&#x2F;code&gt; and &lt;code&gt;Write&lt;&#x2F;code&gt; traits, this works with their async cousins: &lt;code&gt;AsyncRead&lt;&#x2F;code&gt; and &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt;. A byte slice (&lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;) is a valid &lt;code&gt;AsyncRead&lt;&#x2F;code&gt;, so we&#x27;re able to store our input there. And as you may have guessed, &lt;code&gt;Stdout&lt;&#x2F;code&gt; is an &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 1&lt;&#x2F;strong&gt; Modify this application so that instead of printing &amp;quot;Hello, world!&amp;quot;, it copies the entire contents of standard input to standard output.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You can simplify this code using &lt;code&gt;stdout.write_all&lt;&#x2F;code&gt; after &lt;code&gt;use&lt;&#x2F;code&gt;ing &lt;code&gt;tokio::io::AsyncWriteExt&lt;&#x2F;code&gt;, but we&#x27;ll stick to &lt;code&gt;tokio::io::copy&lt;&#x2F;code&gt;, since we&#x27;ll be using it throughout. But if you&#x27;re curious:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, AsyncWriteExt};

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();
    stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;spawning-processes&quot;&gt;Spawning processes&lt;&#x2F;h2&gt;
&lt;p&gt;Tokio provides a &lt;code&gt;tokio::process&lt;&#x2F;code&gt; module which resembles the &lt;code&gt;std::process&lt;&#x2F;code&gt; module. We can use this to implement Hello World once again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the &lt;code&gt;?&lt;&#x2F;code&gt; and &lt;code&gt;.await&lt;&#x2F;code&gt; bits can go in whatever order they are needed. You can read this line as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new &lt;code&gt;Command&lt;&#x2F;code&gt; to run &lt;code&gt;echo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Give it the argument &lt;code&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Spawn this, which may fail&lt;&#x2F;li&gt;
&lt;li&gt;Using the first &lt;code&gt;?&lt;&#x2F;code&gt;: if it fails, return the error. Otherwise, return a &lt;code&gt;Future&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Using the &lt;code&gt;.await&lt;&#x2F;code&gt;: wait until that &lt;code&gt;Future&lt;&#x2F;code&gt; completes, and capture its &lt;code&gt;Result&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Using the second &lt;code&gt;?&lt;&#x2F;code&gt;: if that &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;code&gt;Err&lt;&#x2F;code&gt;, return that error.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Pretty nice for a single line!&lt;&#x2F;p&gt;
&lt;p&gt;One of the great advantages of &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.await&lt;&#x2F;code&gt; versus the previous way of doing async with callbacks is how easily it works with looping.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 2&lt;&#x2F;strong&gt; Extend this example so that it prints &lt;code&gt;Hello, world!&lt;&#x2F;code&gt; 10 times.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;take-a-break&quot;&gt;Take a break&lt;&#x2F;h2&gt;
&lt;p&gt;So far we&#x27;ve only really done a single bit of &lt;code&gt;.await&lt;&#x2F;code&gt;ing. But it&#x27;s easy enough to &lt;code&gt;.await&lt;&#x2F;code&gt; on multiple things. Let&#x27;s use &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;time&#x2F;fn.delay_for.html&quot;&gt;&lt;code&gt;delay_for&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to pause for a bit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    time::delay_for(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
    Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    time::delay_for(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
    Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also use the &lt;code&gt;tokio::time::interval&lt;&#x2F;code&gt; function to create a stream of &amp;quot;ticks&amp;quot; for each time a certain amount of time has passed. For example, this program will keep calling &lt;code&gt;date&lt;&#x2F;code&gt; once per second until it is killed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = time::interval(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
        Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 3&lt;&#x2F;strong&gt; Why isn&#x27;t there a &lt;code&gt;Ok(())&lt;&#x2F;code&gt; after the &lt;code&gt;loop&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;time-to-spawn&quot;&gt;Time to spawn&lt;&#x2F;h2&gt;
&lt;p&gt;This is all well and good, but we&#x27;re not really taking advantage of asynchronous programming at all. Let&#x27;s fix that! We&#x27;ve seen two different interesting programs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Infinitely pausing 1 seconds and calling &lt;code&gt;date&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Copying all input from &lt;code&gt;stdin&lt;&#x2F;code&gt; to &lt;code&gt;stdout&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s time to introduce &lt;code&gt;spawn&lt;&#x2F;code&gt; so that we can combine these two into one program. First, let&#x27;s demonstrate a trivial usage of &lt;code&gt;spawn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::task;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::time;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    task::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = time::interval(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
        Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may be wondering: what&#x27;s up with that &lt;code&gt;??&lt;&#x2F;code&gt; operator? Is that some special super-error handler? No, it&#x27;s just the normal error handling &lt;code&gt;?&lt;&#x2F;code&gt; applied twice. Let&#x27;s look at some type signatures to help us out here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: T) -&amp;gt; JoinHandle&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;T::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Output&amp;gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;JoinHandle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T, JoinError&amp;gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Calling &lt;code&gt;spawn&lt;&#x2F;code&gt; gives us back a &lt;code&gt;JoinHandle&amp;lt;T::Output&amp;gt;&lt;&#x2F;code&gt;. In our case, the &lt;code&gt;Future&lt;&#x2F;code&gt; we provide as input is &lt;code&gt;dating()&lt;&#x2F;code&gt;, which has an output of type &lt;code&gt;Result&amp;lt;(), std::io::Error&amp;gt;&lt;&#x2F;code&gt;. So that means the type of &lt;code&gt;task::spawn(dating())&lt;&#x2F;code&gt; is &lt;code&gt;JoinHandle&amp;lt;Result&amp;lt;(), std::io::Error&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We also see that &lt;code&gt;JoinHandle&lt;&#x2F;code&gt; implements &lt;code&gt;Future&lt;&#x2F;code&gt;. So when we apply &lt;code&gt;.await&lt;&#x2F;code&gt; to this value, we end up with whatever that &lt;code&gt;type Output = Result&amp;lt;T, JoinError&amp;gt;&lt;&#x2F;code&gt; thing is. Since we know that &lt;code&gt;T&lt;&#x2F;code&gt; is &lt;code&gt;Result&amp;lt;(), std::io::Error&amp;gt;&lt;&#x2F;code&gt;, this means we end up with &lt;code&gt;Result&amp;lt;Result&amp;lt;(), std::io::Error&amp;gt;, JoinError&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The first &lt;code&gt;?&lt;&#x2F;code&gt; deals with the outer &lt;code&gt;Result&lt;&#x2F;code&gt;, exiting with the &lt;code&gt;JoinError&lt;&#x2F;code&gt; on an &lt;code&gt;Err&lt;&#x2F;code&gt;, and giving us a &lt;code&gt;Result&amp;lt;(), std::io::Error&amp;gt;&lt;&#x2F;code&gt; value on &lt;code&gt;Ok&lt;&#x2F;code&gt;. The second &lt;code&gt;?&lt;&#x2F;code&gt; deals with the &lt;code&gt;std::io::Error&lt;&#x2F;code&gt;, giving us a &lt;code&gt;()&lt;&#x2F;code&gt; on &lt;code&gt;Ok&lt;&#x2F;code&gt;. Whew!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 4&lt;&#x2F;strong&gt; Now that we&#x27;ve seen &lt;code&gt;spawn&lt;&#x2F;code&gt;, you should modify the program so that it calls both &lt;code&gt;date&lt;&#x2F;code&gt; in a loop, and copies &lt;code&gt;stdin&lt;&#x2F;code&gt; to &lt;code&gt;stdout&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;synchronous-code&quot;&gt;Synchronous code&lt;&#x2F;h2&gt;
&lt;p&gt;You may not have the luxury of interacting exclusively with &lt;code&gt;async&lt;&#x2F;code&gt;-friendly code. Maybe you have some really nice library you want to leverage, but it performs blocking calls internally. Fortunately, Tokio&#x27;s got you covered with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;task&#x2F;fn.spawn_blocking.html&quot;&gt;&lt;code&gt;spawn_blocking&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function. Since the docs are so perfect, let me quote them:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;task::spawn_blocking&lt;&#x2F;code&gt; function is similar to the &lt;code&gt;task::spawn&lt;&#x2F;code&gt; function discussed in the previous section, but rather than spawning an &lt;code&gt;non-blocking&lt;&#x2F;code&gt; future on the Tokio runtime, it instead spawns a &lt;code&gt;blocking&lt;&#x2F;code&gt; function on a dedicated thread pool for blocking tasks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 5&lt;&#x2F;strong&gt; Rewrite the &lt;code&gt;dating()&lt;&#x2F;code&gt; function to use &lt;code&gt;spawn_blocking&lt;&#x2F;code&gt; and &lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt; so that it calls &lt;code&gt;date&lt;&#x2F;code&gt; approximately once per second.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-network&quot;&gt;Let&#x27;s network!&lt;&#x2F;h2&gt;
&lt;p&gt;I could keep stepping through the other cools functions in the Tokio library. I encourage you to poke around at them yourself. But I promised some networking, and by golly, I&#x27;m gonna deliver!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to slightly extend the example from the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;net&#x2F;struct.TcpListener.html#examples&quot;&gt;&lt;code&gt;TcpListener&lt;&#x2F;code&gt; docs&lt;&#x2F;a&gt; to (1) make it compile and (2) implement an echo server. This program has a pretty major flaw in it though, I recommend trying to find it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::{TcpListener, TcpStream};

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; io::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: TcpStream) -&amp;gt; io::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send) = io::split(socket);
    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use &lt;code&gt;TcpListener&lt;&#x2F;code&gt; to bind a socket. The binding itself is asynchronous, so we use &lt;code&gt;.await&lt;&#x2F;code&gt; to wait for the listening socket to be available. And we use &lt;code&gt;?&lt;&#x2F;code&gt; to deal with any errors while binding the listening socket.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we loop forever. Inside the loop, we accept new connections, using &lt;code&gt;.await?&lt;&#x2F;code&gt; like before. We capture the &lt;code&gt;socket&lt;&#x2F;code&gt; (ignoring the address as the second part of the tuple). Then we call our &lt;code&gt;echo&lt;&#x2F;code&gt; function and &lt;code&gt;.await&lt;&#x2F;code&gt; it.&lt;&#x2F;p&gt;
&lt;p&gt;Within &lt;code&gt;echo&lt;&#x2F;code&gt;, we use &lt;code&gt;tokio::io::split&lt;&#x2F;code&gt; to split up our &lt;code&gt;TcpStream&lt;&#x2F;code&gt; into its constituent read and write halves, and then pass those into &lt;code&gt;tokio::io::copy&lt;&#x2F;code&gt;, as we&#x27;ve done before.&lt;&#x2F;p&gt;
&lt;p&gt;Awesome! Where&#x27;s the bug? Let me ask you a question: what &lt;em&gt;should&lt;&#x2F;em&gt; the behavior be if a second connection comes in while the first connection is still active? Ideally, it would be handled. However, our program has just one task. And that task &lt;code&gt;.await&lt;&#x2F;code&gt;s on each call to &lt;code&gt;echo&lt;&#x2F;code&gt;. So our second connection won&#x27;t be serviced until the first one closes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 6&lt;&#x2F;strong&gt; Modify the program above so that it handles concurrent connections correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcp-client-and-ownership&quot;&gt;TCP client and ownership&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s write a poor man&#x27;s HTTP client. It will establish a connection to a hard-coded server, copy all of &lt;code&gt;stdin&lt;&#x2F;code&gt; to the server, and then copy all data from the server to &lt;code&gt;stdout&lt;&#x2F;code&gt;. To use this, you&#x27;ll manually type in the HTTP request and then hit &lt;code&gt;Ctrl-D&lt;&#x2F;code&gt; for end-of-file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; io::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stream = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send) = io::split(stream);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::stdin();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();

    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all well and good, but it&#x27;s limited. It only handles half-duplex protocols like HTTP, and doesn&#x27;t actually support keep-alive in any way. We&#x27;d like to use &lt;code&gt;spawn&lt;&#x2F;code&gt; to run the two &lt;code&gt;copy&lt;&#x2F;code&gt;s in different tasks. Seems easy enough:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout));

send.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
recv.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, this doesn&#x27;t compile. We get four nearly-identical error messages. Let&#x27;s look at the first:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0597]: `stdin` does not live long enough
  --&amp;gt; src&#x2F;main.rs:12:31
   |
12 |     let send = spawn(io::copy(&amp;amp;mut stdin, &amp;amp;mut send));
   |                      ---------^^^^^^^^^^------------
   |                      |        |
   |                      |        borrowed value does not live long enough
   |                      argument requires that `stdin` is borrowed for `&amp;#39;static`
...
19 | }
   | - `stdin` dropped here while still borrowed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the issue: our &lt;code&gt;copy&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt; does not &lt;em&gt;own&lt;&#x2F;em&gt; the &lt;code&gt;stdin&lt;&#x2F;code&gt; value (or the &lt;code&gt;send&lt;&#x2F;code&gt; value, for that matter). Instead, it has a (mutable) reference to it. That value remains in the &lt;code&gt;main&lt;&#x2F;code&gt; function&#x27;s &lt;code&gt;Future&lt;&#x2F;code&gt;. Ignoring error cases, we know that the &lt;code&gt;main&lt;&#x2F;code&gt; function will wait for &lt;code&gt;send&lt;&#x2F;code&gt; to complete (thanks to &lt;code&gt;send.await&lt;&#x2F;code&gt;), and therefore the lifetimes appear to be correct. However, Rust doesn&#x27;t recognize this lifetime information. (Also, and I haven&#x27;t thought this through completely, I&#x27;m fairly certain that &lt;code&gt;send&lt;&#x2F;code&gt; may be dropped earlier than the &lt;code&gt;Future&lt;&#x2F;code&gt; using it in the case of &lt;code&gt;panic&lt;&#x2F;code&gt;s.)&lt;&#x2F;p&gt;
&lt;p&gt;In order to fix this, we need to convince the compiler to make a &lt;code&gt;Future&lt;&#x2F;code&gt; that owns &lt;code&gt;stdin&lt;&#x2F;code&gt;. And the easiest way to do that here is to use an &lt;code&gt;async move&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 7&lt;&#x2F;strong&gt; Make the code above compile using two &lt;code&gt;async move&lt;&#x2F;code&gt; blocks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playing-with-lines&quot;&gt;Playing with &lt;code&gt;lines&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section will have a series of modifications to a program. I recommend you solve each challenge before looking at the solution. However, unlike the other exercises, I&#x27;m going to show the solutions inline since they build on each other.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s build an async program that counts the number of lines on standard input. You&#x27;ll want to use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;io&#x2F;trait.AsyncBufReadExt.html#method.lines&quot;&gt;&lt;code&gt;lines&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; method for this. Read the docs and try to figure out what &lt;code&gt;use&lt;&#x2F;code&gt;s and wrappers will be necessary to make the types line up.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::stdin();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::BufReader::new(stdin);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = stdin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lines on stdin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, bumping this up one more level. Instead of standard input, let&#x27;s take a list of file names as command line arguments, and count up the total number of lines in all the files. Initially, it&#x27;s OK to read the files one at a time. In other words: don&#x27;t bother calling &lt;code&gt;spawn&lt;&#x2F;code&gt;. Give it a shot, and then come back here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _me = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; ignore command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = tokio::fs::File::open(filename).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = io::BufReader::new(file);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Total lines: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But now it&#x27;s time to make this properly asynchronous, and process the files in separate &lt;code&gt;spawn&lt;&#x2F;code&gt;ed tasks. In order to make this work, we need to spawn all of the tasks, and then &lt;code&gt;.await&lt;&#x2F;code&gt; each of them. I used a &lt;code&gt;Vec&lt;&#x2F;code&gt; of &lt;code&gt;Future&amp;lt;Output=Result&amp;lt;u32, std::io::Error&amp;gt;&amp;gt;&lt;&#x2F;code&gt;s for this. Give it a shot!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _me = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; ignore command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        tasks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(tokio::spawn(async {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = tokio::fs::File::open(filename).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = io::BufReader::new(file);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(count) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, std::io::Error&amp;gt;
        }));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks {
        count += task.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Total lines: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally in this progression: let&#x27;s change how we handle the &lt;code&gt;count&lt;&#x2F;code&gt;. Instead of &lt;code&gt;.await&lt;&#x2F;code&gt;ing the count in the second &lt;code&gt;for&lt;&#x2F;code&gt; loop, let&#x27;s have each individual task update a shared mutable variable. You should use an &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;u32&amp;gt;&amp;gt;&lt;&#x2F;code&gt; for that. You&#x27;ll still need to keep a &lt;code&gt;Vec&lt;&#x2F;code&gt; of the tasks though to ensure you wait for all files to be read.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::sync::Arc;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; avoid thread blocking by using Tokio&amp;#39;s mutex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::sync::Mutex;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _me = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; ignore command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        tasks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = tokio::fs::File::open(filename).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = io::BufReader::new(file);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; local_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                local_count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            }

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
            *count += local_count;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt;
        }));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks {
        task.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Total lines: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, *count);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;localset-and-send&quot;&gt;LocalSet and &lt;code&gt;!Send&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;xudesheng&#x2F;status&#x2F;1201382514415325185?s=20&quot;&gt;@xudehseng&lt;&#x2F;a&gt; for the inspiration on this section.&lt;&#x2F;p&gt;
&lt;p&gt;OK, did that last exercise seem a bit contrived? It was! In my opinion, the previous approach of &lt;code&gt;.await&lt;&#x2F;code&gt;ing the counts and summing in the &lt;code&gt;main&lt;&#x2F;code&gt; function itself was superior. However, I wanted to teach you something else.&lt;&#x2F;p&gt;
&lt;p&gt;What happens if you replace the &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;u32&amp;gt;&amp;gt;&lt;&#x2F;code&gt; with a &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;u32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;? With this code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::cell::RefCell;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _me = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; ignore command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = Rc::new(RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        tasks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(tokio::spawn(async {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = tokio::fs::File::open(filename).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = io::BufReader::new(file);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; local_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                local_count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            }

            *count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() += local_count;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt;
        }));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks {
        task.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Total lines: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You get an error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: `std::rc::Rc&amp;lt;std::cell::RefCell&amp;lt;u32&amp;gt;&amp;gt;` cannot be shared between threads safely
  --&amp;gt; src&#x2F;main.rs:15:20
   |
15 |         tasks.push(tokio::spawn(async {
   |                    ^^^^^^^^^^^^ `std::rc::Rc&amp;lt;std::cell::RefCell&amp;lt;u32&amp;gt;&amp;gt;` cannot be shared between threads safely
   |
  ::: &#x2F;Users&#x2F;michael&#x2F;.cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;tokio-0.2.2&#x2F;src&#x2F;task&#x2F;spawn.rs:49:17
   |
49 |     T: Future + Send + &amp;#39;static,
   |                 ---- required by this bound in `tokio::task::spawn::spawn`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tasks can be scheduled to multiple different threads. Therefore, your &lt;code&gt;Future&lt;&#x2F;code&gt; must be &lt;code&gt;Send&lt;&#x2F;code&gt;. And &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;u32&amp;gt;&amp;gt;&lt;&#x2F;code&gt; is definitely &lt;code&gt;!Send&lt;&#x2F;code&gt;. However, in our use case, using multiple OS threads is unlikely to speed up our program; we&#x27;re going to be doing lots of blocking I&#x2F;O. It would be nice if we could insist on spawning all our tasks on the same OS thread and avoid the need for &lt;code&gt;Send&lt;&#x2F;code&gt;. And sure enough, Tokio provides such a function: &lt;code&gt;tokio::task::spawn_local&lt;&#x2F;code&gt;. Using it (and adding back in &lt;code&gt;async move&lt;&#x2F;code&gt; instead of &lt;code&gt;async&lt;&#x2F;code&gt;), our program compiles, but breaks at runtime:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;`spawn_local` called from outside of a local::LocalSet!&amp;#39;, src&#x2F;libcore&#x2F;option.rs:1190:5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh-oh! Now I&#x27;m personally not a big fan of this detect-it-at-runtime stuff, but the concept is simple enough: if you want to spawn onto the current thread, you need to set up your runtime to support that. And the way we do that is with &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.2&#x2F;tokio&#x2F;task&#x2F;struct.LocalSet.html&quot;&gt;&lt;code&gt;LocalSet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. In order to use this, you&#x27;ll need to ditch the &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; attribute.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE 8&lt;&#x2F;strong&gt; Follow the documentation for &lt;code&gt;LocalSet&lt;&#x2F;code&gt; to make the program above work with &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;u32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That lesson felt short. Definitely compared to the previous Tokio lesson which seemed to go on forever. I think this is a testament to how easy to use the new &lt;code&gt;async&#x2F;&lt;&#x2F;code&gt;.await` syntax is.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s obviously a lot more that can be covered in asynchronous programming, but hopefully this establishes the largest foundations you need to understand to work with the &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.await&lt;&#x2F;code&gt; syntax and the Tokio library itself.&lt;&#x2F;p&gt;
&lt;p&gt;If we have future lessons, I believe they&#x27;ll cover additional libraries like Hyper as they move over to Tokio 0.2, as well as specific use cases people raise. If you want something covered, mention it to me on Twitter or in the comments below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solutions&quot;&gt;Solutions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;solution-1&quot;&gt;Solution 1&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::stdin();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();
    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;solution-2&quot;&gt;Solution 2&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;solution-3&quot;&gt;Solution 3&lt;&#x2F;h3&gt;
&lt;p&gt;Since the &lt;code&gt;loop&lt;&#x2F;code&gt; will either run forever or be short circuited by an error, any code following &lt;code&gt;loop&lt;&#x2F;code&gt; will never actually be called. Therefore, code placed there will generate a warning.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution-4&quot;&gt;Solution 4&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::process::Command;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::{io, task, time};

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dating = task::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;dating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; copying = task::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;copying&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());

    dating.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    copying.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = time::interval(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
        Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;copying&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::stdin();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();
    io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;solution-5&quot;&gt;Solution 5&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dating&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        task::spawn_blocking(|| { std::thread::sleep(Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) }).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        Command::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;solution-6&quot;&gt;Solution 6&lt;&#x2F;h3&gt;
&lt;p&gt;The simplest tweak is to wrap the &lt;code&gt;echo&lt;&#x2F;code&gt; call with &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a downside to this worth noting, however: we&#x27;re ignoring the errors produced by the spawned tasks. Likely the best behavior in this case is to handle the errors inside the spawned task:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; io::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; counter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Accepted connection #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, counter);
        tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket).await {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; completed successfully&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, counter),
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; errored: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, counter, e),
            }
        });
        counter += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;exericse-7&quot;&gt;Exericse 7&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::spawn;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; io::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stream = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send) = io::split(stream);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin = io::stdin();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout = io::stdout();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; send).await
    });
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        io::copy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; recv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stdout).await
    });

    send.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    recv.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;solution-8&quot;&gt;Solution 8&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::AsyncBufReadExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::cell::RefCell;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; rt = tokio::runtime::Runtime::new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; local = tokio::task::LocalSet::new();
    local.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; rt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;main_inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main_inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _me = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; ignore command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = Rc::new(RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        tasks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(tokio::task::spawn_local(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = tokio::fs::File::open(filename).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = io::BufReader::new(file);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; local_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = lines.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next_line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                local_count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            }

            *count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() += local_count;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::io::Error&amp;gt;
        }));
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tasks {
        task.await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;??&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Total lines: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Down and dirty with Future - Rust Crash Course lesson 8</title>
		<published>2019-12-02T00:00:00+00:00</published>
		<updated>2019-12-02T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/12/rust-crash-course-08-down-dirty-future/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/12/rust-crash-course-08-down-dirty-future/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s about a year since I wrote the &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;12&#x2F;rust-crash-course-07-async-futures-tokio&quot;&gt;last installment&lt;&#x2F;a&gt; in the Rust Crash Course series. That last post was a doozy, diving into async, futures, and tokio. All in one post. That was a bit sadistic, and I&#x27;m a bit proud of myself on that front.&lt;&#x2F;p&gt;
&lt;p&gt;Much has happened since then, however. Importantly: the &lt;code&gt;Future&lt;&#x2F;code&gt; trait has moved into the standard library itself and absorbed a few modifications. And then to tie that up in a nicer bow, there&#x27;s a new &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax. It&#x27;s hard for me to overstate just how big a quality of life difference this is when writing asynchronous code in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;I recently &lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;rust&#x2F;pid1&quot;&gt;wrote an article on the FP Complete tech site&lt;&#x2F;a&gt; that demonstrates the &lt;code&gt;Future&lt;&#x2F;code&gt; and &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; stuff in practice. But here, I want to give a more thorough analysis of what&#x27;s going on under the surface. Unlike lesson 7, I&#x27;m going to skip the motivation for why we want to write asynchronous code, and break this up into more digestible chunks. Like lesson 7, I&#x27;m going to include the exercise solutions inline, instead of a separate post.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I&#x27;m going to use the &lt;code&gt;async-std&lt;&#x2F;code&gt; library in this example instead of &lt;code&gt;tokio&lt;&#x2F;code&gt;. My only real reason for this is that I started using &lt;code&gt;async-std&lt;&#x2F;code&gt; before &lt;code&gt;tokio&lt;&#x2F;code&gt; released support for the new &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax. I&#x27;m not ready to weigh in on, in general, which of the libraries I prefer.&lt;&#x2F;p&gt;
&lt;p&gt;You should start a Cargo project to play along. Try &lt;code&gt;cargo new --bin sleepus-interruptus&lt;&#x2F;code&gt;. If you want to ensure you&#x27;re on the same compiler version, add a &lt;code&gt;rust-toolchain&lt;&#x2F;code&gt; file with the string &lt;code&gt;1.39.0&lt;&#x2F;code&gt; in it. Run &lt;code&gt;cargo run&lt;&#x2F;code&gt; to make sure you&#x27;re all good to go.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sleepus-interruptus&quot;&gt;Sleepus Interruptus&lt;&#x2F;h2&gt;
&lt;p&gt;I want to write a program which will print the message &lt;code&gt;Sleepus&lt;&#x2F;code&gt; 10 times, with a delay of 0.5 seconds. And it should print the message &lt;code&gt;Interruptus&lt;&#x2F;code&gt; 5 times, with a delay of 1 second. This is some fairly easy Rust code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Interruptus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, as my clever naming implies, this isn&#x27;t my real goal. This program runs the two operations &lt;em&gt;synchronously&lt;&#x2F;em&gt;, first printing &lt;code&gt;Sleepus&lt;&#x2F;code&gt;, then &lt;code&gt;Interruptus&lt;&#x2F;code&gt;. Instead, we would want to have these two sets of statements printed in an interleaved way. That way, the interruptus actually does some interrupting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Use the &lt;code&gt;std::thread::spawn&lt;&#x2F;code&gt; function to spawn an operating system thread to make these printed statements interleave.&lt;&#x2F;p&gt;
&lt;p&gt;There are two basic approaches to this. One—maybe the more obvious—is to spawn a separate thread for each function, and then wait for each of them to complete:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleepus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(sleepus);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interruptus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(interruptus);

    sleepus.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    interruptus.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Two things to notice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We call &lt;code&gt;spawn&lt;&#x2F;code&gt; with &lt;code&gt;spawn(sleepus)&lt;&#x2F;code&gt;, &lt;em&gt;not&lt;&#x2F;em&gt; &lt;code&gt;spawn(sleepus())&lt;&#x2F;code&gt;. The former passes in the function &lt;code&gt;sleepus&lt;&#x2F;code&gt; to &lt;code&gt;spawn&lt;&#x2F;code&gt; to be run. The latter would immediately run &lt;code&gt;sleepus()&lt;&#x2F;code&gt; and pass its result to &lt;code&gt;spawn&lt;&#x2F;code&gt;, which is not what we want.&lt;&#x2F;li&gt;
&lt;li&gt;I use &lt;code&gt;join()&lt;&#x2F;code&gt; in the main function&#x2F;thread to wait for the child thread to end. And I use &lt;code&gt;unwrap&lt;&#x2F;code&gt; to deal with any errors that may occur, because I&#x27;m being lazy.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Another approach would be to spawn one helper thread instead, and call one of the functions in the main thread:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleepus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(sleepus);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

    sleepus.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is more efficient (less time spawning threads and less memory used for holding them), and doesn&#x27;t really have a downside. I&#x27;d recommend going this way.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;QUESTION&lt;&#x2F;strong&gt; What would be the behavior of this program if we didn&#x27;t call &lt;code&gt;join&lt;&#x2F;code&gt; in the two-spawn version? What if we didn&#x27;t call &lt;code&gt;join&lt;&#x2F;code&gt; in the one-spawn version?&lt;&#x2F;p&gt;
&lt;p&gt;But this isn&#x27;t an asynchronous approach to the problem at all! We have two threads being handled by the operating system which are both acting synchronously and making blocking calls to &lt;code&gt;sleep&lt;&#x2F;code&gt;. Let&#x27;s build up a bit of intuition towards how we could have our two tasks (printing &lt;code&gt;Sleepus&lt;&#x2F;code&gt; and printing &lt;code&gt;Interruptus&lt;&#x2F;code&gt;) behave more cooperatively in a single thread.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-async&quot;&gt;Introducing &lt;code&gt;async&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to start at the highest level of abstraction, and work our way down to understand the details. Let&#x27;s rewrite our application in an &lt;code&gt;async&lt;&#x2F;code&gt; style. Add the following to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;async-std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;1.2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we can rewrite our application as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;async_std::task::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
    }
}

async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Interruptus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
    }
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;async_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleepus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;

    sleepus.await;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s hit the changes from top to bottom:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of getting &lt;code&gt;sleep&lt;&#x2F;code&gt; and &lt;code&gt;spawn&lt;&#x2F;code&gt; from &lt;code&gt;std::thread&lt;&#x2F;code&gt;, we&#x27;re getting them from &lt;code&gt;async_std::task&lt;&#x2F;code&gt;. That probably makes sense.&lt;&#x2F;li&gt;
&lt;li&gt;Both &lt;code&gt;sleepus&lt;&#x2F;code&gt; and &lt;code&gt;interruptus&lt;&#x2F;code&gt; now say &lt;code&gt;async&lt;&#x2F;code&gt; in front of &lt;code&gt;fn&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;After the calls to &lt;code&gt;sleep&lt;&#x2F;code&gt;, we have a &lt;code&gt;.await&lt;&#x2F;code&gt;. Note that this is &lt;em&gt;not&lt;&#x2F;em&gt; a &lt;code&gt;.await()&lt;&#x2F;code&gt; method call, but instead a new syntax.&lt;&#x2F;li&gt;
&lt;li&gt;We have a new attribute &lt;code&gt;#[async_std::main]&lt;&#x2F;code&gt; on the &lt;code&gt;main&lt;&#x2F;code&gt; function.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;main&lt;&#x2F;code&gt; function also has &lt;code&gt;async&lt;&#x2F;code&gt; before &lt;code&gt;fn&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of &lt;code&gt;spawn(sleepus)&lt;&#x2F;code&gt;, passing in the function itself, we&#x27;re now calling &lt;code&gt;spawn(sleepus())&lt;&#x2F;code&gt;, immediately running the function and passing its result to &lt;code&gt;spawn&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The call to &lt;code&gt;interruptus()&lt;&#x2F;code&gt; is now followed by &lt;code&gt;.await&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of &lt;code&gt;join()&lt;&#x2F;code&gt;ing on the &lt;code&gt;sleepus&lt;&#x2F;code&gt; &lt;code&gt;JoinHandle&lt;&#x2F;code&gt;, we use the &lt;code&gt;.await&lt;&#x2F;code&gt; syntax.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Run this code on your own machine and make sure everything compiles and runs as expected. Then try undoing some of the changes listed above and see what generates a compiler error, and what generates incorrect runtime behavior.&lt;&#x2F;p&gt;
&lt;p&gt;That may look like a large list of changes. But in reality, our code is almost identical structural to the previous version, which is a real testament to the &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax. And now everything works under the surface the way we want: a single operating system thread making non-blocking calls.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s analyze what each of these changes actually means.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-functions&quot;&gt;&lt;code&gt;async&lt;&#x2F;code&gt; functions&lt;&#x2F;h2&gt;
&lt;p&gt;Adding &lt;code&gt;async&lt;&#x2F;code&gt; to the beginning of a function definition does three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It allows you to use &lt;code&gt;.await&lt;&#x2F;code&gt; syntax inside. We&#x27;ll get to the meaning of that in a bit.&lt;&#x2F;li&gt;
&lt;li&gt;It modified the return type of the function. &lt;code&gt;async fn foo() -&amp;gt; Bar&lt;&#x2F;code&gt; actually returns &lt;code&gt;impl std::future::Future&amp;lt;Output=Bar&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Automatically wraps up the result value in a new &lt;code&gt;Future&lt;&#x2F;code&gt;. We&#x27;ll demonstrate that better later.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s unpack that second point a bit. There&#x27;s a trait called &lt;code&gt;Future&lt;&#x2F;code&gt; defined in the standard library. It has an associated type &lt;code&gt;Output&lt;&#x2F;code&gt;. What this trait means is: I promise that, when I complete, I will give you a value of type &lt;code&gt;Output&lt;&#x2F;code&gt;. You could imagine, for instance, an asynchronous HTTP client that looks something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HttpRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;perform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; impl Future&amp;lt;Output=HttpResponse&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There will be some non-blocking I&#x2F;O that needs to occur to make that request. We don&#x27;t want to block the calling thread while those things happen. But we do want to somehow eventually get the resulting response.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll play around with &lt;code&gt;Future&lt;&#x2F;code&gt; values more directly later. For now, we&#x27;ll continue sticking with the high-level &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Rewrite the signature of &lt;code&gt;sleepus&lt;&#x2F;code&gt; to not use the &lt;code&gt;async&lt;&#x2F;code&gt; keyword by modifying its result type. Note that the code will not compile when you get the type right. Pay attention to the error message you get.&lt;&#x2F;p&gt;
&lt;p&gt;The result type of &lt;code&gt;async fn sleepus()&lt;&#x2F;code&gt; is the implied unit value &lt;code&gt;()&lt;&#x2F;code&gt;. Therefore, the &lt;code&gt;Output&lt;&#x2F;code&gt; of our &lt;code&gt;Future&lt;&#x2F;code&gt; should be unit. This means we need to write our signature as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, with only that change in place, we get the following error messages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0728]: `await` is only allowed inside `async` functions and blocks
 --&amp;gt; src&#x2F;main.rs:7:9
  |
4 | fn sleepus() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
  |    ------- this is not `async`
...
7 |         sleep(Duration::from_millis(500)).await;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks

error[E0277]: the trait bound `(): std::future::Future` is not satisfied
 --&amp;gt; src&#x2F;main.rs:4:17
  |
4 | fn sleepus() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `()`
  |
  = note: the return type of a function must have a statically known size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first message is pretty direct: you can only use the &lt;code&gt;.await&lt;&#x2F;code&gt; syntax inside an &lt;code&gt;async&lt;&#x2F;code&gt; function or block. We haven&#x27;t seen an &lt;code&gt;async&lt;&#x2F;code&gt; block yet, but it&#x27;s exactly what it sounds like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;async {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; async noises intensify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second error message is a result of the first: the &lt;code&gt;async&lt;&#x2F;code&gt; keyword causes the return type to be an &lt;code&gt;impl Future&lt;&#x2F;code&gt;. Without that keyword, our &lt;code&gt;for&lt;&#x2F;code&gt; loop evaluates to &lt;code&gt;()&lt;&#x2F;code&gt;, which isn&#x27;t an &lt;code&gt;impl Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Fix the compiler errors by introducing an &lt;code&gt;async&lt;&#x2F;code&gt; block inside the &lt;code&gt;sleepus&lt;&#x2F;code&gt; function. Do &lt;em&gt;not&lt;&#x2F;em&gt; add &lt;code&gt;async&lt;&#x2F;code&gt; to the function signature, keep using &lt;code&gt;impl Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Wrapping the entire function body with an &lt;code&gt;async&lt;&#x2F;code&gt; block solves the problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
    async {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;await-a-minute&quot;&gt;&lt;code&gt;.await&lt;&#x2F;code&gt; a minute&lt;&#x2F;h2&gt;
&lt;p&gt;Maybe we don&#x27;t need all this &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; garbage though. What if we remove the calls to &lt;code&gt;.await&lt;&#x2F;code&gt; usage in &lt;code&gt;sleepus&lt;&#x2F;code&gt;? Perhaps surprisingly, it compiles, though it does give us an ominous warning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: unused implementer of `std::future::Future` that must be used
 --&amp;gt; src&#x2F;main.rs:8:13
  |
8 |             sleep(Duration::from_millis(500));
  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_must_use)]` on by default
  = note: futures do nothing unless you `.await` or poll them
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re generating a &lt;code&gt;Future&lt;&#x2F;code&gt; value but not using it. And sure enough, if you look at the output of our program, you can see what the compiler means:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Interruptus 1
Sleepus 1
Sleepus 2
Sleepus 3
Sleepus 4
Sleepus 5
Sleepus 6
Sleepus 7
Sleepus 8
Sleepus 9
Sleepus 10
Interruptus 2
Interruptus 3
Interruptus 4
Interruptus 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All of our &lt;code&gt;Sleepus&lt;&#x2F;code&gt; messages print without delay. Intriguing! The issue is that the call to &lt;code&gt;sleep&lt;&#x2F;code&gt; no longer actually puts our current thread to sleep. Instead, it generates a value which implements &lt;code&gt;Future&lt;&#x2F;code&gt;. And when that promise is eventually fulfilled, we know that the delay has occurred. But in our case, we&#x27;re simply ignoring the &lt;code&gt;Future&lt;&#x2F;code&gt;, and therefore never actually delaying.&lt;&#x2F;p&gt;
&lt;p&gt;To understand what the &lt;code&gt;.await&lt;&#x2F;code&gt; syntax is doing, we&#x27;re going to implement our function with much more direct usage of the &lt;code&gt;Future&lt;&#x2F;code&gt; values. Let&#x27;s start by getting rid of the &lt;code&gt;async&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dropping-async-block&quot;&gt;Dropping &lt;code&gt;async&lt;&#x2F;code&gt; block&lt;&#x2F;h2&gt;
&lt;p&gt;If we drop the &lt;code&gt;async&lt;&#x2F;code&gt; block, we end up with this code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us an error message we saw before:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: the trait bound `(): std::future::Future` is not satisfied
 --&amp;gt; src&#x2F;main.rs:4:17
  |
4 | fn sleepus() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `()`
  |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes sense: the &lt;code&gt;for&lt;&#x2F;code&gt; loop evaluates to &lt;code&gt;()&lt;&#x2F;code&gt;, and unit does not implement &lt;code&gt;Future&lt;&#x2F;code&gt;. One way to fix this is to add an expression after the &lt;code&gt;for&lt;&#x2F;code&gt; loop that evaluates to something that implements &lt;code&gt;Future&lt;&#x2F;code&gt;. And we already know one such thing: &lt;code&gt;sleep&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Tweak the &lt;code&gt;sleepus&lt;&#x2F;code&gt; function so that it compiles.&lt;&#x2F;p&gt;
&lt;p&gt;One implementation is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We still get a warning about the unused &lt;code&gt;Future&lt;&#x2F;code&gt; value inside the &lt;code&gt;for&lt;&#x2F;code&gt; loop, but not the one afterwards: that one is getting returned from the function. But of course, sleeping for 0 milliseconds is just a wordy way to do nothing. It would be nice if there was a &amp;quot;dummy&amp;quot; &lt;code&gt;Future&lt;&#x2F;code&gt; that more explicitly did nothing. And fortunately, &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;async-std&#x2F;1.2.0&#x2F;async_std&#x2F;future&#x2F;fn.ready.html&quot;&gt;there is&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Replace the &lt;code&gt;sleep&lt;&#x2F;code&gt; call after the &lt;code&gt;for&lt;&#x2F;code&gt; loop with a call to &lt;code&gt;ready&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl std::future::Future&amp;lt;Output=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
    async_std::future::ready(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;implement-our-own-future&quot;&gt;Implement our own &lt;code&gt;Future&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To unpeel this onion a bit more, let&#x27;s make our life harder, and &lt;em&gt;not&lt;&#x2F;em&gt; use the &lt;code&gt;ready&lt;&#x2F;code&gt; function. Instead, we&#x27;re going to define our own &lt;code&gt;struct&lt;&#x2F;code&gt; which implements &lt;code&gt;Future&lt;&#x2F;code&gt;. I&#x27;m going to call it &lt;code&gt;DoNothing&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::future::Future;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;DoNothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl Future&amp;lt;Output=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
    DoNothing
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; This code won&#x27;t compile. Without looking below or asking the compiler, what do you think it&#x27;s going to complain about?&lt;&#x2F;p&gt;
&lt;p&gt;The problem here is that &lt;code&gt;DoNothing&lt;&#x2F;code&gt; does not provide a &lt;code&gt;Future&lt;&#x2F;code&gt; implementation. We&#x27;re going to do some Compiler Driven Development and let &lt;code&gt;rustc&lt;&#x2F;code&gt; tell us how to fix our program. Our first error message is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;the trait bound `DoNothing: std::future::Future` is not satisfied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So let&#x27;s add in a trait implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;DoNothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which fails with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0046]: not all trait items implemented, missing: `Output`, `poll`
 --&amp;gt; src&#x2F;main.rs:7:1
  |
7 | impl Future for DoNothing {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output`, `poll` in implementation
  |
  = note: `Output` from trait: `type Output;`
  = note: `poll` from trait: `fn(std::pin::Pin&amp;lt;&amp;amp;mut Self&amp;gt;, &amp;amp;mut std::task::Context&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; std::task::Poll&amp;lt;&amp;lt;Self as std::future::Future&amp;gt;::Output&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We don&#x27;t really know about the &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;Context&lt;&#x2F;code&gt; thing yet, but we do know about &lt;code&gt;Output&lt;&#x2F;code&gt;. And since we were previously returning a &lt;code&gt;()&lt;&#x2F;code&gt; from our &lt;code&gt;ready&lt;&#x2F;code&gt; call, let&#x27;s do the same thing here.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::pin::Pin;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::task::{Context, Poll};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;DoNothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Context) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Output&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Woohoo, that compiles! Of course, it fails at runtime due to the &lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; call:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;thread &amp;#39;async-std&#x2F;executor&amp;#39; panicked at &amp;#39;not yet implemented&amp;#39;, src&#x2F;main.rs:13:9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s try to implement &lt;code&gt;poll&lt;&#x2F;code&gt;. We need to return a value of type &lt;code&gt;Poll&amp;lt;Self::Output&amp;gt;&lt;&#x2F;code&gt;, or &lt;code&gt;Poll&amp;lt;()&amp;gt;&lt;&#x2F;code&gt;. Let&#x27;s look at the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;task&#x2F;enum.Poll.html&quot;&gt;definition of &lt;code&gt;Poll&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    Ready(T),
    Pending,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using some basic deduction, we can see that &lt;code&gt;Ready&lt;&#x2F;code&gt; means &amp;quot;our &lt;code&gt;Future&lt;&#x2F;code&gt; is complete, and here&#x27;s the output&amp;quot; while &lt;code&gt;Pending&lt;&#x2F;code&gt; means &amp;quot;it&#x27;s not done yet.&amp;quot; Given that our &lt;code&gt;DoNothing&lt;&#x2F;code&gt; wants to return the output of &lt;code&gt;()&lt;&#x2F;code&gt; immediately, we can just use the &lt;code&gt;Ready&lt;&#x2F;code&gt; variant here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Implement a working version of &lt;code&gt;poll&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Context) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Output&amp;gt; {
    Poll::Ready(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Congratulations, you&#x27;ve just implemented your first &lt;code&gt;Future&lt;&#x2F;code&gt; struct!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-third-async-difference&quot;&gt;The third &lt;code&gt;async&lt;&#x2F;code&gt; difference&lt;&#x2F;h2&gt;
&lt;p&gt;Remember above we said that making a function &lt;code&gt;async&lt;&#x2F;code&gt; does a third thing:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automatically wraps up the result value in a new &lt;code&gt;Future&lt;&#x2F;code&gt;. We&#x27;ll demonstrate that better later.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now is later. Let&#x27;s demonstrate that better.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s simplify the definition of &lt;code&gt;sleepus&lt;&#x2F;code&gt; to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl Future&amp;lt;Output=()&amp;gt; {
    DoNothing
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiles and runs just fine. Let&#x27;s try switching back to the &lt;code&gt;async&lt;&#x2F;code&gt; way of writing the signature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    DoNothing
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This now gives us an error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0271]: type mismatch resolving `&amp;lt;impl std::future::Future as std::future::Future&amp;gt;::Output == ()`
  --&amp;gt; src&#x2F;main.rs:17:20
   |
17 | async fn sleepus() {
   |                    ^ expected struct `DoNothing`, found ()
   |
   = note: expected type `DoNothing`
              found type `()`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You see, when you have an &lt;code&gt;async&lt;&#x2F;code&gt; function or block, the result is automatically wrapped up in a &lt;code&gt;Future&lt;&#x2F;code&gt;. So instead of returning a &lt;code&gt;DoNothing&lt;&#x2F;code&gt;, we&#x27;re returning a &lt;code&gt;impl Future&amp;lt;Output=DoNothing&amp;gt;&lt;&#x2F;code&gt;. And our type wants &lt;code&gt;Output=()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Try to guess what you need to add to this function to make it compile.&lt;&#x2F;p&gt;
&lt;p&gt;Working around this is pretty easy: you simply append &lt;code&gt;.await&lt;&#x2F;code&gt; to &lt;code&gt;DoNothing&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    DoNothing.await
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us a little more intuition for what &lt;code&gt;.await&lt;&#x2F;code&gt; is doing: it&#x27;s extracting the &lt;code&gt;()&lt;&#x2F;code&gt; &lt;code&gt;Output&lt;&#x2F;code&gt; from the &lt;code&gt;DoNothing&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt;... somehow. However, we still don&#x27;t really know how it&#x27;s achieving that. Let&#x27;s build up a more complicated &lt;code&gt;Future&lt;&#x2F;code&gt; to get closer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sleepprint&quot;&gt;SleepPrint&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to build a new &lt;code&gt;Future&lt;&#x2F;code&gt; implementation which:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sleeps for a certain amount of time&lt;&#x2F;li&gt;
&lt;li&gt;Then prints a message&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is going to involve using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;pin&#x2F;index.html&quot;&gt;pinned pointers&lt;&#x2F;a&gt;. I&#x27;m not going to describe those here. The specifics of what&#x27;s happening with the pinning isn&#x27;t terribly enlightening to the topic of &lt;code&gt;Future&lt;&#x2F;code&gt;s. If you want to let your eyes glaze over at that part of the code, you won&#x27;t be missing much.&lt;&#x2F;p&gt;
&lt;p&gt;Our implementation strategy for &lt;code&gt;SleepPrint&lt;&#x2F;code&gt; will be to wrap an existing &lt;code&gt;sleep&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt; with our own implementation of &lt;code&gt;Future&lt;&#x2F;code&gt;. Since we don&#x27;t know the exact type of the result of a &lt;code&gt;sleep&lt;&#x2F;code&gt; call (it&#x27;s just an &lt;code&gt;impl Future&lt;&#x2F;code&gt;), we&#x27;ll use a parameter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SleepPrint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Fut,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can call this in our &lt;code&gt;sleepus&lt;&#x2F;code&gt; function with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl Future&amp;lt;Output=()&amp;gt; {
    SleepPrint {
        sleep: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, we now get a compiler error about a missing &lt;code&gt;Future&lt;&#x2F;code&gt; implementation. So let&#x27;s work on that. Our &lt;code&gt;impl&lt;&#x2F;code&gt; starts with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut: Future&amp;lt;Output=()&amp;gt;&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SleepPrint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This says that &lt;code&gt;SleepPrint&lt;&#x2F;code&gt; is a &lt;code&gt;Future&lt;&#x2F;code&gt; if the &lt;code&gt;sleep&lt;&#x2F;code&gt; value it contains is a &lt;code&gt;Future&lt;&#x2F;code&gt; with an &lt;code&gt;Output&lt;&#x2F;code&gt; of type &lt;code&gt;()&lt;&#x2F;code&gt;. Which, of course, is true in the case of the &lt;code&gt;sleep&lt;&#x2F;code&gt; function, so we&#x27;re good. We need to define &lt;code&gt;Output&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then we need a &lt;code&gt;poll&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Context) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Output&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next bit is the eyes-glazing part around pinned pointers. We need to &lt;em&gt;project&lt;&#x2F;em&gt; the &lt;code&gt;Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;&#x2F;code&gt; into a &lt;code&gt;Pin&amp;lt;&amp;amp;mut Fut&amp;gt;&lt;&#x2F;code&gt; so that we can work on the underlying sleep &lt;code&gt;Future&lt;&#x2F;code&gt;. We could use a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pin-project-lite&quot;&gt;helper crate&lt;&#x2F;a&gt; to make this a bit prettier, but we&#x27;ll just do some &lt;code&gt;unsafe&lt;&#x2F;code&gt; mapping:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Fut&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_unchecked_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s.sleep) };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, now the important bit. We&#x27;ve got our underlying &lt;code&gt;Future&lt;&#x2F;code&gt;, and we need to do something with it. The only thing we &lt;em&gt;can&lt;&#x2F;em&gt; do with it is call &lt;code&gt;poll&lt;&#x2F;code&gt;. &lt;code&gt;poll&lt;&#x2F;code&gt; requires a &lt;code&gt;&amp;amp;mut Context&lt;&#x2F;code&gt;, which fortunately we&#x27;ve been provided. That &lt;code&gt;Context&lt;&#x2F;code&gt; contains information about the currently running task, so it can be woken up (via a &lt;code&gt;Waker&lt;&#x2F;code&gt;) when the task is ready.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; We&#x27;re not going to get deeper into how &lt;code&gt;Waker&lt;&#x2F;code&gt; works in this post. If you want a real life example of how to call &lt;code&gt;Waker&lt;&#x2F;code&gt; yourself, I recommend reading my &lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;rust&#x2F;pid1&quot;&gt;pid1 in Rust&lt;&#x2F;a&gt; post.&lt;&#x2F;p&gt;
&lt;p&gt;For now, let&#x27;s do the only thing we can reasonably do:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ctx) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve got two possibilities. If &lt;code&gt;poll&lt;&#x2F;code&gt; returns a &lt;code&gt;Pending&lt;&#x2F;code&gt;, it means that the &lt;code&gt;sleep&lt;&#x2F;code&gt; hasn&#x27;t completed yet. In that case, we want our &lt;code&gt;Future&lt;&#x2F;code&gt; to also indicate that it&#x27;s not done. To make that work, we just propagate the &lt;code&gt;Pending&lt;&#x2F;code&gt; value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Poll::Pending &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Poll::Pending,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, if the &lt;code&gt;sleep&lt;&#x2F;code&gt; is already complete, we&#x27;ll receive a &lt;code&gt;Ready(())&lt;&#x2F;code&gt; variant. In that case, it&#x27;s finally time to print our message and then propagate the &lt;code&gt;Ready&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Poll::Ready(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Inside SleepPrint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    Poll::Ready(())
},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that, we&#x27;ve built a more complex &lt;code&gt;Future&lt;&#x2F;code&gt; from a simpler one. But that was pretty ad-hoc.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;twofutures&quot;&gt;TwoFutures&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;SleepPrint&lt;&#x2F;code&gt; is pretty ad-hoc: it hard codes a specific action to run after the &lt;code&gt;sleep&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt; completes. Let&#x27;s up our game, and sequence the actions of two different &lt;code&gt;Future&lt;&#x2F;code&gt;s. We&#x27;re going to define a new &lt;code&gt;struct&lt;&#x2F;code&gt; that has three fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The first &lt;code&gt;Future&lt;&#x2F;code&gt; to run&lt;&#x2F;li&gt;
&lt;li&gt;The second &lt;code&gt;Future&lt;&#x2F;code&gt; to run&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;bool&lt;&#x2F;code&gt; to tell us if we&#x27;ve finished running the first &lt;code&gt;Future&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since the &lt;code&gt;Pin&lt;&#x2F;code&gt; stuff is going to get a bit more complicated, it&#x27;s time to reach for that helper crate to ease our implementation and avoid &lt;code&gt;unsafe&lt;&#x2F;code&gt; blocks ourself. So add the following to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pin-project-lite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we can define a &lt;code&gt;TwoFutures&lt;&#x2F;code&gt; struct that allows us to project the first and second &lt;code&gt;Future&lt;&#x2F;code&gt;s into pinned pointers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pin_project_lite::pin_project;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pin_project! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TwoFutures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut1, Fut2&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first_done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Fut1,
        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Fut2,
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this in &lt;code&gt;sleepus&lt;&#x2F;code&gt; is easy enough:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl Future&amp;lt;Output=()&amp;gt; {
    TwoFutures {
        first_done: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        first: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)),
        second: async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello TwoFutures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); },
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we just need to define our &lt;code&gt;Future&lt;&#x2F;code&gt; implementation. Easy, right? We want to make sure both &lt;code&gt;Fut1&lt;&#x2F;code&gt; and &lt;code&gt;Fut2&lt;&#x2F;code&gt; are &lt;code&gt;Future&lt;&#x2F;code&gt;s. And our &lt;code&gt;Output&lt;&#x2F;code&gt; will be the output from the &lt;code&gt;Fut2&lt;&#x2F;code&gt;. (You could also return both the first and second output if you wanted.) To make all that work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut1: Future, Fut2: Future&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TwoFutures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Fut1, Fut2&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= Fut2::Output;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Context) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Output&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to work with the pinned pointer, we&#x27;re going to get a new value, &lt;code&gt;this&lt;&#x2F;code&gt;, which projects all of the pointers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; this = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that out of the way, we can interact with our three fields directly in &lt;code&gt;this&lt;&#x2F;code&gt;. The first thing we do is check if the first &lt;code&gt;Future&lt;&#x2F;code&gt; has already completed. If not, we&#x27;re going to poll it. If the poll is &lt;code&gt;Ready&lt;&#x2F;code&gt;, then we&#x27;ll ignore the output and indicate that the first &lt;code&gt;Future&lt;&#x2F;code&gt; is done:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*this.first_done {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Poll::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = this.first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ctx) {
        *this.first_done = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, if the first &lt;code&gt;Future&lt;&#x2F;code&gt; is done, we want to poll the second. And if the first &lt;code&gt;Future&lt;&#x2F;code&gt; is &lt;em&gt;not&lt;&#x2F;em&gt; done, then we say that we&#x27;re pending:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*this.first_done {
    this.second.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ctx)
} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    Poll::Pending
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that, we&#x27;ve composed two &lt;code&gt;Future&lt;&#x2F;code&gt;s together into a bigger, grander, brighter &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Get rid of the usage of an &lt;code&gt;async&lt;&#x2F;code&gt; block in &lt;code&gt;second&lt;&#x2F;code&gt;. Let the compiler errors guide you.&lt;&#x2F;p&gt;
&lt;p&gt;The error message you get says that &lt;code&gt;()&lt;&#x2F;code&gt; is not a &lt;code&gt;Future&lt;&#x2F;code&gt;. Instead, you need to return a &lt;code&gt;Future&lt;&#x2F;code&gt; value after the call to &lt;code&gt;println!&lt;&#x2F;code&gt;. We can use our handy &lt;code&gt;async_std::future::ready&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;second: {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello TwoFutures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    async_std::future::ready(())
},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;andthen&quot;&gt;AndThen&lt;&#x2F;h2&gt;
&lt;p&gt;Sticking together two arbitrary &lt;code&gt;Future&lt;&#x2F;code&gt;s like this is nice. But it&#x27;s even nicer to have the second &lt;code&gt;Future&lt;&#x2F;code&gt;s depend on the result of the first &lt;code&gt;Future&lt;&#x2F;code&gt;. To do this, we&#x27;d want a function like &lt;code&gt;and_then&lt;&#x2F;code&gt;. (Monads FTW to my Haskell buddies.) I&#x27;m not going to bore you with the gory details of an implementation here, but feel free to &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;7eeb5e330d9b5db9806d82c83c9d3e56&quot;&gt;read the Gist if you&#x27;re interested&lt;&#x2F;a&gt;. Assuming you have this method available, we can begin to write the &lt;code&gt;sleepus&lt;&#x2F;code&gt; function ourselves as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; impl Future&amp;lt;Output = ()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|()| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|()| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|()| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
                async_std::future::ready(())
            })
        })
    })
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And before Rust 1.39 and the &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax, this is basically how async code worked. This is far from perfect. Besides the obvious right-stepping of the code, it&#x27;s not actually a loop. You &lt;em&gt;could&lt;&#x2F;em&gt; recursively call &lt;code&gt;sleepus&lt;&#x2F;code&gt;, except that creates an infinite type which the compiler isn&#x27;t too fond of.&lt;&#x2F;p&gt;
&lt;p&gt;But fortunately, we&#x27;ve now finally established enough background to easily explain what the &lt;code&gt;.await&lt;&#x2F;code&gt; syntax is doing: exactly what &lt;code&gt;and_then&lt;&#x2F;code&gt; is doing, but without the fuss!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Rewrite the &lt;code&gt;sleepus&lt;&#x2F;code&gt; function above to use &lt;code&gt;.await&lt;&#x2F;code&gt; instead of &lt;code&gt;and_then&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The rewrite is really easy. The body of the function becomes the non-right-stepping, super flat:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)).await;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sleepus 4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then we also need to change the signature of our function to use &lt;code&gt;async&lt;&#x2F;code&gt;, or wrap everything in an &lt;code&gt;async&lt;&#x2F;code&gt; block. Your call.&lt;&#x2F;p&gt;
&lt;p&gt;Besides the obvious readability improvements here, there are some massive usability improvements with &lt;code&gt;.await&lt;&#x2F;code&gt; as well. One that sticks out here is how easily it ties in with loops. This was a real pain with the older &lt;code&gt;futures&lt;&#x2F;code&gt; stuff. Also, chaining together multiple &lt;code&gt;await&lt;&#x2F;code&gt; calls is really easy, e.g.:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; body = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;make_http_request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And not only that, but it plays in with the &lt;code&gt;?&lt;&#x2F;code&gt; operator for error handling perfectly. The above example would more likely be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; body = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;make_http_request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;main-attribute&quot;&gt;&lt;code&gt;main&lt;&#x2F;code&gt; attribute&lt;&#x2F;h2&gt;
&lt;p&gt;One final mystery remains. What exactly is going on with that weird attribute on &lt;code&gt;main&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;async_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;sleepus&lt;&#x2F;code&gt; and &lt;code&gt;interruptus&lt;&#x2F;code&gt; functions do not actually do anything. They return &lt;code&gt;Future&lt;&#x2F;code&gt;s which provide instructions on how to do work. Something has to actually perform those actions. The thing that runs those actions is an &lt;strong&gt;executor&lt;&#x2F;strong&gt;. The &lt;code&gt;async-std&lt;&#x2F;code&gt; library provides an executor, as does &lt;code&gt;tokio&lt;&#x2F;code&gt;. In order to run any &lt;code&gt;Future&lt;&#x2F;code&gt;, you need an executor.&lt;&#x2F;p&gt;
&lt;p&gt;The attribute above automatically wraps the &lt;code&gt;main&lt;&#x2F;code&gt; function with &lt;code&gt;async-std&lt;&#x2F;code&gt;&#x27;s executor. The attribute approach, however, is totally optional. Instead, you can use &lt;code&gt;async_std::task::block_on&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EXERCISE&lt;&#x2F;strong&gt; Rewrite &lt;code&gt;main&lt;&#x2F;code&gt; to not use the attribute. You&#x27;ll need to rewrite it from &lt;code&gt;async fn main&lt;&#x2F;code&gt; to &lt;code&gt;fn main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Since we use &lt;code&gt;.await&lt;&#x2F;code&gt; inside the body of &lt;code&gt;main&lt;&#x2F;code&gt;, we get an error when we simply remove the &lt;code&gt;async&lt;&#x2F;code&gt; qualifier. Therefore, we need to use an &lt;code&gt;async&lt;&#x2F;code&gt; block inside &lt;code&gt;main&lt;&#x2F;code&gt; (or define a separate helper &lt;code&gt;async&lt;&#x2F;code&gt; function). Putting it all together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    async_std::task::block_on(async {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleepus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleepus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;interruptus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().await;

        sleepus.await;
    })
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each executor is capable of managing multiple tasks. Each task is working on producing the output of a single &lt;code&gt;Future&lt;&#x2F;code&gt;. And just like with threads, you can &lt;code&gt;spawn&lt;&#x2F;code&gt; additional tasks to get concurrent running. Which is exactly how we achieve the interleaving we wanted!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cooperative-concurrency&quot;&gt;Cooperative concurrency&lt;&#x2F;h2&gt;
&lt;p&gt;One word of warning. &lt;code&gt;Future&lt;&#x2F;code&gt;s and &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.await&lt;&#x2F;code&gt; implement a form of cooperative concurrency. By contrast, operating system threads provide preemptive concurrency. The important different is that in cooperative concurrency, you have to cooperate. If one of your tasks causes a delay, such as by using &lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt; or by performing significant CPU computation, it will not be interrupted.&lt;&#x2F;p&gt;
&lt;p&gt;The upshot of this is that you should ensure you do not perform blocking calls inside your tasks. And if you have a CPU-intensive task to perform, it&#x27;s probably worth spawning an OS thread for it, or at least ensuring your executor will not starve your other tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t think the behavior under the surface of &lt;code&gt;.await&lt;&#x2F;code&gt; is too big a reveal, but I think it&#x27;s useful to understand exactly what&#x27;s happening here. In particular, understanding the difference between a value of &lt;code&gt;Future&lt;&#x2F;code&gt; and actually chaining together the outputs of &lt;code&gt;Future&lt;&#x2F;code&gt; values is core to using &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; correctly. Fortunately, the compiler errors and warnings do a great job of guiding you in the right direction.&lt;&#x2F;p&gt;
&lt;p&gt;In the next lesson, we can start using our newfound knowledge of &lt;code&gt;Future&lt;&#x2F;code&gt; and the &lt;code&gt;async&#x2F;.await&lt;&#x2F;code&gt; syntax to build some asynchronous applications. We&#x27;ll be diving into writing some async I&#x2F;O, including networking code, using Tokio 0.2.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some take-home exercises to play with. You can base them on &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;f5fea804f2b6fb69ae6d1f75c8004fc5&quot;&gt;the code in this Gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Modify the &lt;code&gt;main&lt;&#x2F;code&gt; function to call &lt;code&gt;spawn&lt;&#x2F;code&gt; twice instead of just once.&lt;&#x2F;li&gt;
&lt;li&gt;Modify the &lt;code&gt;main&lt;&#x2F;code&gt; function to not call &lt;code&gt;spawn&lt;&#x2F;code&gt; at all. Instead, use &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;async-std&#x2F;1.2.0&#x2F;async_std&#x2F;future&#x2F;trait.Future.html#method.join&quot;&gt;&lt;code&gt;join&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. You&#x27;ll need to add a &lt;code&gt;use async_std::prelude::*;&lt;&#x2F;code&gt; and add the &lt;code&gt;&amp;quot;unstable&amp;quot;&lt;&#x2F;code&gt; feature to the &lt;code&gt;async-std&lt;&#x2F;code&gt; dependency in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Modify the &lt;code&gt;main&lt;&#x2F;code&gt; function to get the non-interleaved behavior, where the program prints &lt;code&gt;Sleepus&lt;&#x2F;code&gt; multiple times before &lt;code&gt;Interruptus&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re still performing blocking I&#x2F;O with &lt;code&gt;println!&lt;&#x2F;code&gt;. Turn on the &lt;code&gt;&amp;quot;unstable&amp;quot;&lt;&#x2F;code&gt; feature again, and try using &lt;code&gt;async_std::println&lt;&#x2F;code&gt;. You&#x27;ll get an ugly error message until you get rid of &lt;code&gt;spawn&lt;&#x2F;code&gt;. Try to understand why that happens.&lt;&#x2F;li&gt;
&lt;li&gt;Write a function &lt;code&gt;foo&lt;&#x2F;code&gt; such that the following assertion passes: &lt;code&gt;assert_eq!(42, async_std::task::block_on(async { foo().await.await }));&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Boring Haskell Manifesto</title>
		<published>2019-11-21T00:00:00+00:00</published>
		<updated>2019-11-21T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/11/boring-haskell-manifesto/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/11/boring-haskell-manifesto/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Goal&lt;&#x2F;strong&gt;: how to get Haskell into your organization, and how to make your organization more productive and profitable with better engineering.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote this content 1.5 years ago after conversations with people at LambdaConf 2018. I discussed it offline with some people (at least... I think I did). Then I promptly did nothing else with it. After having some conversations with people at Functional Conf 2019, I decided it was time to resurrect and post this.&lt;&#x2F;p&gt;
&lt;p&gt;If the ideas I&#x27;m sharing here resonate with you, and you&#x27;re interested in getting involved with spreading this further, please reach out to me (privately is great, &lt;code&gt;michael at snoyman dot com&lt;&#x2F;code&gt;). I have additional, more concrete ideas on how to make some of this a reality, which I&#x27;ll be sharing with people offline.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to everyone at Functional Conf for the inspiration and motivation to move ahead with this!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Haskell is in many ways a revolutionary language. Many languages in widespread use today are incremental changes on previous languages. However, Haskell doesn&#x27;t fit this model. Concepts like referential transparency, purely functional programming, laziness, and immutability are a stark departure from common programming approaches today.&lt;&#x2F;p&gt;
&lt;p&gt;Most any Haskeller would argue that these radical changes are well justified, and deliver great benefit. At the same time, this inherent culture of making revolutionary changes attracts a certain mindset to the language. As a result, we end up in a situation where Haskell has essentially two distinct (and overlapping) subcultures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Explore interesting and revolutionary concepts in computer science, software engineering, and mathematics&lt;&#x2F;li&gt;
&lt;li&gt;Make better software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, these are overlapping subcultures. The entire history of Haskell is cases of esoteric, academic, intellectual, and &amp;quot;useless&amp;quot; concepts becoming an elegant solution to challenging problems. Monads are probably the most prominent example of this, and we&#x27;re seeing a reality where many other languages are slowly adopting the concept to solve problems in concurrency and error handling.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, not every new concept turns into one of these fundamental and useful techniques. And even for those that do: finding the most practical way to leverage the technique is an arduous, time-consuming process.&lt;&#x2F;p&gt;
&lt;p&gt;Exploring these concepts can be fun, rewarding, and—long term—a huge benefit for productivity. Short and medium term, however, this exploration can lead to slower and less reliable results. As a company or project manager assessing Haskell for a project, this uncertainty can thwart the possibility of adopting Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re now faced with a situation where Haskell is often eliminated for usage, representing a massive loss for two parties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Companies, projects, and managers who could have realized great benefits in productivity, reliability, and performance from the less revolutionary pieces of Haskell. Instead, they&#x27;re losing this competitive advantage.&lt;&#x2F;li&gt;
&lt;li&gt;Engineers who would much prefer working in Haskell—even its less revolutionary subset—are unable to do so because of employer fears of choosing it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;d like to improve the situation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-boring-haskell-manifesto&quot;&gt;The Boring Haskell Manifesto&lt;&#x2F;h2&gt;
&lt;p&gt;Our claim is simple: for many cases of software engineering, a simple, well-defined subset of Haskell&#x27;s language and ecosystem will deliver large value for a project, while introducing little to no risk compared to alternative options. We call this subset, somewhat tongue-in-cheek, &amp;quot;boring Haskell.&amp;quot; Our goal is to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Define such a subset&lt;&#x2F;li&gt;
&lt;li&gt;Provide straightforward documentation, tutorials, cookbooks, and libraries that encourage this subset&lt;&#x2F;li&gt;
&lt;li&gt;Continue to evolve the subset to optimize its best practices&lt;&#x2F;li&gt;
&lt;li&gt;Help interested engineers to learn how to use boring Haskell, and get it adopted in their companies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most concrete step in this direction was creating the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;rio#readme&quot;&gt;rio library&lt;&#x2F;a&gt;, which is intended to capture these principles. If you want to embrace Boring Haskell today, we recommend using that library. The rest of this document discusses what we believe counts as &amp;quot;Boring Haskell,&amp;quot; and motivates these choices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;power-to-weight-ratio&quot;&gt;Power-to-weight ratio&lt;&#x2F;h2&gt;
&lt;p&gt;We want to analyze the features of Haskell that we recommend based on its power-to-weight ratio, also known as a cost-benefit analysis. Put more directly: we want to choose features which provide lots of benefits while minimizing costs. Let&#x27;s give some examples of these two sides:&lt;&#x2F;p&gt;
&lt;p&gt;Power&#x2F;benefit&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More maintainable code&lt;&#x2F;li&gt;
&lt;li&gt;Fewer bugs in production&lt;&#x2F;li&gt;
&lt;li&gt;Higher performance&lt;&#x2F;li&gt;
&lt;li&gt;Higher productivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Weight&#x2F;cost&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Learning curve&lt;&#x2F;li&gt;
&lt;li&gt;Ongoing cognitive overhead&lt;&#x2F;li&gt;
&lt;li&gt;Ongoing tweaking&lt;&#x2F;li&gt;
&lt;li&gt;Slower compile time&lt;&#x2F;li&gt;
&lt;li&gt;Poor performance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A concrete example of something with a great power to weight ratio are sum types. Sum types are a relatively simple concept to explain. Most people can grok the concept almost immediately. Pattern matching feels natural fairly quickly. And sum types solve large classes of problems people regularly encounter in programming tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reducing-risk&quot;&gt;Reducing risk&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;This section is draft quality at best, feel free to stop reading here :)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A recurring theme I hear from people in industry is the risk of adopting Haskell. Let me address some of the common concerns directly:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If I&#x27;m stuck, there&#x27;s no support available.&lt;&#x2F;strong&gt; Haskell has a number of companies specializing in consulting services who are able to help. I &lt;a href=&quot;https:&#x2F;&#x2F;tech.fpcomplete.com&#x2F;haskell&quot;&gt;work for one of them&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;We can&#x27;t find people to hire.&lt;&#x2F;strong&gt; This is a valid concern; there are fewer total Haskell engineers. However, you&#x27;ve got some great advantages in Haskell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s less competition on the hiring side versus larger languages.&lt;&#x2F;li&gt;
&lt;li&gt;People who like Haskell are very motivated to find a job with it.&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;re willing to hire remotely, there&#x27;s a large pool of candidates.&lt;&#x2F;li&gt;
&lt;li&gt;Training people to work with Haskell is a real option. (This is an area that I intend to talk about more in the future.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;I don&#x27;t want to invest in learning Haskell if we&#x27;re just going to keep writing Javascript.&lt;&#x2F;strong&gt; Functional programming principles are powerful, and are being adopted into many languages today. The best way to get good at using them is to learn a language like Haskell that forces you to learn FP.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I&#x27;m afraid that I&#x27;m going to hit a wall and Haskell won&#x27;t work anymore.&lt;&#x2F;strong&gt; This isn&#x27;t a major issue in practice; most common code people will write is absolutely fine in pure Haskell. However:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you need to use some other language because of library availability or something similar, you can always connect with other languages. Microservices architectures—even if I&#x27;m not a huge fan—come into play here.&lt;&#x2F;li&gt;
&lt;li&gt;If you hit a performance concern, you can usually solve it in Haskell itself by going lower level. However, the FFI in Haskell is really easy to use, so calling out to something like C or Rust is pretty easy.&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;re having trouble finding a way to solve things in a functional style, you can always drop down to imperative Haskell. Writing in a full-on imperative style in Haskell, such as all code living in &lt;code&gt;IO&lt;&#x2F;code&gt;, may not be idiomatic, but it works. As SPJ has said (quote may not be exact), Haskell is the world&#x27;s finest imperative language.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;For now, I&#x27;m just sniffing out interest in this general topic. I have some follow up ideas, but I&#x27;d rather get feedback on this idea before going further. Be in touch, and stay tuned!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell kata: withTryFileLock</title>
		<published>2019-08-18T00:00:00+00:00</published>
		<updated>2019-08-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/08/haskell-kata-with-try-file-lock/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/08/haskell-kata-with-try-file-lock/</id>
		<content type="html">&lt;p&gt;This is the first Haskell code kata I&#x27;ve put on this blog (to my knowledge). The idea is to present a self contained, relatively small coding challenge to solidify some skills with Haskell. If people like this and would like to see more, let me know. Caveat: these will almost certainly be supply driven. As I notice examples like this in my code, I&#x27;ll try to extract them like this blog post.&lt;&#x2F;p&gt;
&lt;p&gt;OK, here&#x27;s the story. The &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;filelock&quot;&gt;&lt;code&gt;filelock&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; library provides a set of functions for working with locked files. Some of these will block until a file lock is available. However, some will instead return a &lt;code&gt;Maybe&lt;&#x2F;code&gt; value and use &lt;code&gt;Nothing&lt;&#x2F;code&gt; to represent the case where a lock is not available.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s interesting about this is the &lt;code&gt;withTryFileLock&lt;&#x2F;code&gt; function, which is a rare combination of the &lt;code&gt;bracket&lt;&#x2F;code&gt; pattern and potential failure. Its signature is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withTryFileLock
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SharedExclusive
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FileLock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;FilePath&lt;&#x2F;code&gt; parameter says which file to try and lock. &lt;code&gt;SharedExclusive&lt;&#x2F;code&gt; says the type of lock to take. The third parameter is the action to perform with the file lock. That action will return an &lt;code&gt;IO a&lt;&#x2F;code&gt; action. Then, if the lock is taken, that &lt;code&gt;a&lt;&#x2F;code&gt; value ends up wrapped in a &lt;code&gt;Just&lt;&#x2F;code&gt; constructor and returned from &lt;code&gt;withTryFileLock&lt;&#x2F;code&gt;. If the lock failed, then &lt;code&gt;Nothing&lt;&#x2F;code&gt; is returned.&lt;&#x2F;p&gt;
&lt;p&gt;The thing is, there&#x27;s an alternative function signature we could have instead, which would provide a &lt;code&gt;Maybe FileLock&lt;&#x2F;code&gt; to the inner action. It looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withTryFileLock
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SharedExclusive
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe FileLock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why would you want one versus the other? It&#x27;s not the topic I&#x27;m focusing on today, and it honestly doesn&#x27;t matter that much. Here&#x27;s the code kata:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Implement the second version in terms of the first, and the first version in terms of the second.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To complete these code kata:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Copy&#x2F;paste the code snippet below into a file called &lt;code&gt;Main.hs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you have &lt;a href=&quot;https:&#x2F;&#x2F;haskell.fpcomplete.com&#x2F;get-started&quot;&gt;Stack installed&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Make tweaks to &lt;code&gt;Main.hs&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;stack Main.hs&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If you get an error in step 4, go back to 3.&lt;&#x2F;li&gt;
&lt;li&gt;Congratulations, you&#x27;ve successfully fixed the program &lt;em&gt;and&lt;&#x2F;em&gt; parsed my BASIC-esque goto statement!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Bonus points: generalize &lt;code&gt;version1&lt;&#x2F;code&gt; and &lt;code&gt;version2&lt;&#x2F;code&gt; to work in any &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;unliftio-core&quot;&gt;&lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-14.1 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.FileLock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FileLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SharedExclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(..)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withTryFileLock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- We&amp;#39;ve imported this function:
--
-- withTryFileLock
--   :: FilePath
--   -&amp;gt; SharedExclusive
--   -&amp;gt; (FileLock -&amp;gt; IO a)
--   -&amp;gt; IO (Maybe a)

-- | Implement this function by using the &amp;#39;withTryFileLock&amp;#39; imported above.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;version1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SharedExclusive
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe FileLock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;version1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- | And now turn it back into the original type signature. Use the
-- &amp;#39;version1&amp;#39; function we just defined above.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;version2
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SharedExclusive
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FileLock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
version2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- | Just a simple test harness
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  version1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;version1.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Exclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _lock) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    version1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;version1.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Exclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Yay, it worked!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; version2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;version2.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Exclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_lock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; version2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;version2.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Exclusive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
      error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Should not be called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    pure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Yay, it worked!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>How to lose weight</title>
		<published>2019-07-15T00:00:00+00:00</published>
		<updated>2019-07-15T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/07/how-to-lose-weight/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/07/how-to-lose-weight/</id>
		<content type="html">&lt;p&gt;This is a guide for losing weight for health reasons. This assumes a few things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You already know that you need to lose weight&lt;&#x2F;li&gt;
&lt;li&gt;When you say “lose weight,” what you mean is “I have too much fat, and I want to lose that fat, even if I lose some muscle”&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For most people in western countries, both of these will be true. There are four basic ways to approach losing weight. They can be approached simultaneously, but it’s important to distinguish starting points:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Exercise of some form (cardio, resistance training)&lt;&#x2F;li&gt;
&lt;li&gt;Change how much you eat (reduce calories)&lt;&#x2F;li&gt;
&lt;li&gt;Change what you eat (e.g. keto diet, vegan diet)&lt;&#x2F;li&gt;
&lt;li&gt;Change when you eat (e.g. intermittent fasting)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;&#x2F;h2&gt;
&lt;p&gt;Overall, if your goal is to lose weight, exercise is not where you should start. I strongly recommend exercise, and it’s a good thing to do. In particular, resistance training can help you build muscle which can improve overall health and assist in long term weight loss. But assuming you have limited time, energy, and will power, this is not going to give the best result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-much-you-eat&quot;&gt;How much you eat&lt;&#x2F;h2&gt;
&lt;p&gt;This is in line with standard diet advice: eat less, move more! This advice has failed for decades. 95% of people who “diet” end up gaining back all the weight within a year. It’s for a simple reason: eating the same foods in the same way, but just eating less of it, requires a huge amount of willpower. You spend every minute of every day fighting hunger and cravings. You sit down to a meal, try to eat a small amount, and eventually give in, consume everything in sight, and gain the weight back.&lt;&#x2F;p&gt;
&lt;p&gt;There are lots of hormonal issues at play that make this happen, but the most important thing most people need to hear is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Standard dieting advice is almost always doomed to fail&lt;&#x2F;li&gt;
&lt;li&gt;It is rarely, if ever, the fault of the dieter&lt;&#x2F;li&gt;
&lt;li&gt;Do not let medical professionals make you feel bad about this; they’re the ones providing bad advice!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-you-eat&quot;&gt;What you eat&lt;&#x2F;h2&gt;
&lt;p&gt;The first rule of thermodynamics says that energy can’t be created or destroyed. Some people take this law of physics to say that “it doesn’t matter what you eat, it’s all about calories.” This is wrong, shortsighted, and idiotic. The type of food you eat affects you hormonally, mentally, and even emotionally. What you choose to eat can increase or decrease your appetite, change how much you want to exercise, and alter your body’s metabolic rate.&lt;&#x2F;p&gt;
&lt;p&gt;There are a few simple rules for “what to eat” that are fairly universal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid sugar and refined grains&lt;&#x2F;li&gt;
&lt;li&gt;Try to eat “real foods”. If someone in the 1800s would recognize it, it’s real food. If it’s produced in a factory, it’s a food-like product.
From there is gets much more nuanced, and this is where people lose hope. Should I be vegan? Should I eat keto? Is fat going to kill me? Are carbs?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My personal recommendation is low carb. It helps fight cravings the best in my opinion. That said, any diet that sticks to real foods, and doesn’t overwhelm you with too much of the combination of both carbs and fat will be successful. You can lose weight on both a carnivore and vegan diet. Just choose one and stick with it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-you-eat&quot;&gt;When you eat&lt;&#x2F;h2&gt;
&lt;p&gt;Modern medical advice includes insanity like “eat 6 small meals a day.” This is dumb. “Eat more often so you eat less.” No, that’s dumb. I’ll prove it to you. I know a method that every person on the planet agrees will result in weight loss. You know what that is: stop eating for a few days. Therefore: you don’t need to eat 6 small meals a day to lose weight.&lt;&#x2F;p&gt;
&lt;p&gt;There are lots of points in favor of restricted eating windows, where you have certain times of the day or the week when you don’t eat at all. It affects you hormonally, letting insulin levels drop, for instance. Will you eat more at the next meal? Probably. But it’s OK, because overall you’re eating less and losing weight.&lt;&#x2F;p&gt;
&lt;p&gt;I find that a 12pm-8pm eating window is really easy to incorporate. Start the morning with a cup of coffee or tea if you like, with a small amount of cream if desired, and then don’t eat until noon. Then try to keep your eating to two meals (lunch and dinner), finishing before 8pm. Add in 1 snack if you need to, ideally something like nuts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recommendation&quot;&gt;Recommendation&lt;&#x2F;h2&gt;
&lt;p&gt;You want to get started, and just get told what to do? OK, follow these steps, which are optimized to avoid demanding a lot of willpower:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the junk food you binge on, and remove it from your house. Give it away, throw it away, burn it and dance around the bonfire. It requires 0 willpower to eat food that isn’t there.&lt;&#x2F;li&gt;
&lt;li&gt;Introduce a 12pm-8pm eating window. Allow yourself 1 day a week to be flexible on it, but otherwise stick to it solidly. You’ll be hungry the first few days, and then you’ll get used to it. Very little willpower necessary.&lt;&#x2F;li&gt;
&lt;li&gt;Reduce carb intake. Sugary beverages should be the first to go. Do not make any meals based around breads, pastas, etc. This one is more complex, but low carb food is really delicious. It takes effort to pull this off, but you’re not fighting hunger and cravings on a daily basis.&lt;&#x2F;li&gt;
&lt;li&gt;If you’re adventurous, try out a multiday fast. It’s best to spend some time eating a low carb diet first, but you can jump right in. The first time you do this will be hard, don’t expect otherwise. But I believe the mental freedom you get from realizing that you are not dependent on a constant food drip is worth the effort.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;&#x2F;h2&gt;
&lt;p&gt;There are lots of more advanced topics. I mean, a lot. “How do I improve my lipids?” “How do I gain muscle while losing fat?” And so on. Don’t think about those now! Prove to yourself you can lose some weight, keep the weight off, and not suffer in the process. Don’t worry about the long term effects of what you’re doing. If you’re overweight or obese, and you bring down your body fat levels, you’re almost certainly making yourself healthier in the long term.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My new home network setup</title>
		<published>2019-06-26T00:00:00+00:00</published>
		<updated>2019-06-26T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/06/my-new-home-network-setup/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/06/my-new-home-network-setup/</id>
		<content type="html">&lt;p&gt;I didn&#x27;t mention it on this blog, and I think not even on Twitter. But
back in October of 2018, we started a major renovation project on our
house. The project ended up taking seven months, and we just moved back in two weeks ago. Two special thanks are in order:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A big thank you to Miriam, who moved us back home while I was off at
LambdaConf for a week&lt;&#x2F;li&gt;
&lt;li&gt;A big thank you to my parents for letting Miriam and me, plus four
children, invade their house for seven months straight&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Anyway, most of the changes we were attempting are fairly
straightforward, non-technical, and (besides to those of us living in
the house) uninteresting. Things like replacing leaking pipes, adding
insulation to the walls so we don&#x27;t freeze in the winter, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;But this work also include a major change to how our home network
works. I&#x27;m far from an expert on anything hardware related, including
wired networking and wireless devices. This process involved a lot of
investigation on my part, and trying to plan out choices many months
in advance. I consulted with friends, especially coworkers at FP Complete who are more knowledgeable about this stuff than me. So far, I&#x27;m very happy with the end result.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m writing up this blog post for people who are curious about how
this setup ended up looking, and in case it may help others make some
decisions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;Something about my house: it&#x27;s tall. We live on the side of a
mountain, and so we have 4 split levels. This makes it difficult to
get a good WiFi signal across the whole house. Originally, before the
renovation, I bought a D-Link COVR 1203 set of devices (1 router, 2
access points). These devices work with a wireless backhaul, meaning
they communicate with each other over a wireless as opposed to a wired
connection. This worked, but we always had deadspots in the top level,
and much degraded speed. So we wanted something better. (Those devices
are now living happily at my parents&#x27; house, and were a lifesaver for
surviving there for the past seven months.)&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, here&#x27;s a breakdown of what we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First and foremost, the majority of my work revolves around voice
and video calls. I need a 100% reliable connection for that,
otherwise I have major disruptions in my ability to do my job. I
have an office on the second floor, but also sometimes need to work
from our bedroom on the fourth floor when we have guests staying
with us. For me, both wired and wireless connections are an option.&lt;&#x2F;li&gt;
&lt;li&gt;We have a TV in the living room on the first floor, previously
connected to a Chromecast, now connected to a Roku. (I strongly
recommend Roku devices, we&#x27;ve been really happy with this one.) We
stream on this Roku, and it needs a solid signal. We had a lot of
frustration with flaky wireless to the Chromecast before.&lt;&#x2F;li&gt;
&lt;li&gt;Beyond those key points, we overall want solid wireless throughout
the house, which probably isn&#x27;t too much of a surprise. It&#x27;s not a
hard requirement to be able to use WiFi everywhere in the house, but
it&#x27;s nice to have.&lt;&#x2F;li&gt;
&lt;li&gt;Finally, as a nice to have, we&#x27;d like to have the option in the
future of getting our kids desktops in their bedrooms and setting up
wired connections.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That all sounds pretty standard I&#x27;m guessing. Some things that aren&#x27;t
required:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t have any special router requirements. All devices are OK
with a standard IPv4 NAT setup. No special firewall rules are
necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;OK, let&#x27;s talk about what we did.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modem-and-router&quot;&gt;Modem and router&lt;&#x2F;h2&gt;
&lt;p&gt;We set up both phone line and cable line jacks in the living room
right by the TV. This area is our entertainment center, with the TV,
Roku, and Nintendo Switch. So adding in a modem was natural. We went
with the cable company HOT. I really dislike the company... but what
can you do, every company in this space seems to suck.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Living room entertainment center&quot; src=&quot;&#x2F;static&#x2F;images&#x2F;network&#x2F;entertainment-center.jpg&quot; style=&quot;max-width:100%&quot;&gt;
&lt;p&gt;They gave us what they call a Hot Box (heh), which is a pretty
standard modem + router + WiFi access point combo. For those not
familiar with the distinction between these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A modem converts an analog signal (like a television cable line) to
a network signal. It allows a single device on each end of the line
to talk to each other.&lt;&#x2F;li&gt;
&lt;li&gt;A router allows multiple devices on a local area network to connect
to a wide area network (usually the internet). It performs tasks
like a DHCP server, network address translation (NAT), and
firewalling.&lt;&#x2F;li&gt;
&lt;li&gt;A wireless access point allows devices to connect to a network over
WiFi instead of over a wired connection.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The wireless access point in the Hot Box was terrible: it was slow to
connect and used an old wireless standard (more on that later). I
disabled that feature. However, since I didn&#x27;t have advanced rotuer
needs, we&#x27;re using the router capabilities of the Hot Box.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cables-in-the-walls&quot;&gt;Cables in the walls&lt;&#x2F;h2&gt;
&lt;p&gt;The magic of all of this is, now that we were doing construction, we
had a chance to run network cables through all of the walls of the
house. Our electrician ran three CAT6 cables through the house: one to
my office on the second floor, one to one of the kids&#x27; bedrooms on the
third floor, and one to our bedroom on the fourth floor. All of the
cables originate in the same cabinet holding the Hot Box.&lt;&#x2F;p&gt;
&lt;p&gt;The Hot Box provides four network jacks. As you&#x27;ll see, we have more
than four devices in the house that want a wired connection. So the
next addition to this show is...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;network-switches&quot;&gt;Network switches&lt;&#x2F;h2&gt;
&lt;p&gt;A network switch is a device which allows multiple devices to connect,
and will route packets between them intelligently. For our purposes, a
switch allows us to make one connection to the Hot Box, and then plug
in multiple devices to its other ports, resulting all connected
devices having an internet connection.&lt;&#x2F;p&gt;
&lt;p&gt;We purchased TP-Link 5-port switches. The reason for this choice was a combination of reading reviews, price, and availability of the product in Israel. I&#x27;m happy with them, and have no complaints at all, but have no reason to believe them to be qualitatively better than other devices on the market.&lt;&#x2F;p&gt;
&lt;img alt=&quot;TP-Link Switches&quot; src=&quot;&#x2F;static&#x2F;images&#x2F;network&#x2F;network-switch.jpg&quot; style=&quot;max-width:100%&quot;&gt;
&lt;p&gt;By adding a switch next to the Hot Box itself, we ended up with 4 + 5
= 9 ports. However, connecting the two devices uses a port on each
device, so we had seven usable ports. Each of the CAT6 cables to the
other three floors got their own port. The Roku gets a port. The
Nintendo Switch (naming here is really confusing) will ultimately get
a port, once we buy an ethernet adapter for it. And as we&#x27;ll see in
the next section, the wireless access point gets one too.&lt;&#x2F;p&gt;
&lt;p&gt;In my office, I put in a network switch as well, since I&#x27;ll be
connecting more than one device on a wired connection in
here. Similarly, in the kids room, I put in another network
switch. From the one bedroom, we have a network cable running into a second
bedroom, so that both rooms end up with a wired connection without
having to run two cables through the walls of the house.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m honestly not convinced I made a great decision on this, and
perhaps running extra cables and buying a single, larger switch for
the living room would have been smarter. But this definitely works.&lt;&#x2F;p&gt;
&lt;p&gt;With this much of the setup, we now have the ability to have a wired,
stable, fast connection for my laptop in our bedroom, for a proper
workstation in my office, for the kids&#x27; computers in the future, for
streaming videos on our Roku, and for playing Nintendo Switch games
online. (I still have to have my brother over to test out Fortnite at
some point.) But there&#x27;s no wireless connection yet, so...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wireless-access-points&quot;&gt;Wireless access points&lt;&#x2F;h2&gt;
&lt;p&gt;This is the area I least understood before starting this project. I
still won&#x27;t claim to be an expert, and I&#x27;ll be happy to modify this
section if people have corrections (or just send a PR using the link
above). But here&#x27;s what I&#x27;ve learned.&lt;&#x2F;p&gt;
&lt;p&gt;The basics of a wireless access point (WAP) are simple. They provide
wireless devices with something to talk to wirelessly. They then route
packets from those devices to others. Arguably the simplest kind of
WAP will have a wired connection to a router or switch, and provides a
bridge between the wired and wireless connections. Other kinds of
access points work differently, such as by connecting to some other
WAP for the internet signal. (This is what my COVR devices with
wireless backhaul did, for instance.)&lt;&#x2F;p&gt;
&lt;p&gt;I did not want to deal with a wireless backhaul, since it has multiple
limitations. Firstly, the effective speed is cut in half, since half
the wireless bandwidth needs to be used to talk to the source
signal. Also, The devices need to be close enough together to talk,
which is a problem with our house. And as you&#x27;ll see shortly, with the
distances in my house, this would drastically degrade the speed.&lt;&#x2F;p&gt;
&lt;p&gt;So instead, the goal with this renovation was to have a WAP with a
wired connection on each floor, which would provide complete house
coverage and no issues with degraded signal due to distance between
the devices. Having determined the kind of device to look for, I
started researching the topic.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing I learned—which I&#x27;m sure many readers already
knew—was about the difference between the 2.4Ghz and 5Ghz
bands. Successive wireless standards, like 802.11n vs 802.11ac, have
added the ability to communicate over 5Ghz instead of 2.4Ghz. 2.4Ghz
is advantageous in that it can work over longer distances and more
easily penetrate obstacles like walls. By contrast, 5Ghz offers faster
speeds. Given that distance was hopefully no longer going to be an
issue, getting devices with support for 802.11ac was advantageous.&lt;&#x2F;p&gt;
&lt;p&gt;With the same review process and criterion as I used for the network
switches, I ended up choosing the TP-Link EAP245. This is a business
class solution, and likely overpowered for our needs, but I&#x27;d rather
get this set up once and not have to think about it again for
years. This requires more tweaking than the network switches, but the
interface was pleasant to use and the mobile application intuitive.&lt;&#x2F;p&gt;
&lt;img alt=&quot;TP-Link EAP245&quot; src=&quot;&#x2F;static&#x2F;images&#x2F;network&#x2F;wireless-access-point.jpg&quot; style=&quot;max-width:100%&quot;&gt;
&lt;p&gt;So far, everything&#x27;s been great with these devices. I&#x27;ve done signal
checks throughout the house, and everywhere I&#x27;ve checked we have well
above 80% signal (usually closer to 95%) on the 5Ghz band. A speed
test in my bedroom topped out at 195Mbps, over a cable line providing
a maximum of 200Mbps. So I think it&#x27;s fair to say that the wireless
signal is no longer the bottleneck in the house. In fact, I also
tested the network speed using a cheap WiFi dongle I bought years
back, and it was significantly slower than the wireless connection.&lt;&#x2F;p&gt;
&lt;p&gt;These devices include some features that are either really great or
awesome snake oil. &amp;quot;Fast roaming&amp;quot; means that, for client devices that
support it, there will be a seamless transition between two of the
access points when moving through the house. This can be great in
theory, but I haven&#x27;t tested it in practice yet.&lt;&#x2F;p&gt;
&lt;p&gt;I set up the devices to use the same SSID for both the 2.4Ghz and 5Ghz
bands. I read conflicting information on whether this was a good idea
or not. The advantage for me is simpler configuration of devices (no
need to tell guests which network to use), and in theory devices will
automatically switch between 2.4Ghz and 5Ghz depending on how far they
are from the respective signals.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been a complete pleasure having reliable WiFi on all our devices
throughout the house.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;power-over-ethernet&quot;&gt;Power over Ethernet&lt;&#x2F;h3&gt;
&lt;p&gt;As a side note, the WAPs do not have a power port. They have two
network ports only: an incoming port for the internet signal and
power, and an outgoing port for sharing a signal with another device
if desired. I was unfamiliar with Power over Ethernet (PoE) before
this project, but it&#x27;s pretty nifty. In our bedroom, it means the WAP
has just a single cable going into it from the wall, with the PoE
injector living downstairs next to the Hot Box itself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;network-attached-storage&quot;&gt;Network attached storage&lt;&#x2F;h2&gt;
&lt;p&gt;This was a nice little perk I hadn&#x27;t expected. We have a portable USB
hard drive with movies and music, which we connect to our Roku. Any
time we want to transfer files, we unplug it, bring it to one of our
computers, plug it in, do the transfers, and then reconnect it to the
Roku. I feel like an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;First_World_problem&quot;&gt;absolute
caveman&lt;&#x2F;a&gt; doing
this!&lt;&#x2F;p&gt;
&lt;p&gt;Now that our in-house bandwidth is so high, we started playing with
the idea of buying a Network Attached Storage (NAS) device so that the
Roku could stream off of it over the network, and we could transfer
files to it from our computers. However, to my surprise, the Hot Box
itself has such capabilities: I plugged the USB hard drive into the
Hot Box&#x27;s USB port, and was immediately able to access the drive from
both the Roku and our laptops. This was a great little perk, and being
able to watch movies or listen to music from multiple devices at once
is awesome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cost&quot;&gt;Cost&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t have all the figures at my disposal, but overall, the costs
involved in this setup were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Network switches and WAPs: about $612. I ended up buying extra
devices due to a sale at the company I purchased from, and ended up
with 5 of each, even though I only needed 3 switches and 4
WAPs. Happy to have the backups.&lt;&#x2F;li&gt;
&lt;li&gt;Since we were already doing renovations and fixing lots of
electrical work in the house, running the three CAT6 cables wasn&#x27;t a
major expense. I think it was order-of-magnitude less than $200
total.&lt;&#x2F;li&gt;
&lt;li&gt;Additional network cables for connecting the switches to each other,
the PoE injectors to the switches, and the WAPs to the PoE
injectors, cost me around $60. This turned out to be many more
cables than I was expecting, and I cleaned out the local hardware
store of their 1 meter cables. Twice.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Considering how vital all of this is to my job, that&#x27;s an easily
absorbable cost. And the joy of never fighting with a flaky Chromecast
again are well worth it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;&#x2F;h2&gt;
&lt;p&gt;Most everything went off without a hitch. Ultimately, I think I asked
the electrician to put the network jack in our bedroom in the wrong
location. Now that we&#x27;re using it just for the WAP, having it higher
on the wall would have been less intrusive. I&#x27;m also pretty terrible
at making jumbles of cables look nice, so there&#x27;s still some cleanup
in my office and the kids&#x27; rooms to make it presentable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I planned out all of this towards the beginning of our construction. I
then got to wait around for seven months to see if the plans were
going to work out in practice correctly. It&#x27;s a huge relief to find
out that it did.&lt;&#x2F;p&gt;
&lt;p&gt;I would strongly recommend that anyone doing serious renovations
consider running network cables through their walls at the same
time. And certainly, for any new construction, make sure you include
network cables along with power lines.&lt;&#x2F;p&gt;
&lt;p&gt;If I discover any problems or improvements, I&#x27;ll try to blog about
them too.&lt;&#x2F;p&gt;
&lt;p&gt;I hope people found this useful, or at least interesting.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Gym Etiquette Test</title>
		<published>2019-04-01T00:00:00+00:00</published>
		<updated>2019-04-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/04/gym-etiquette-test/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/04/gym-etiquette-test/</id>
		<content type="html">&lt;p&gt;Miriam (aka &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;lambdamom&quot;&gt;@LambdaMom&lt;&#x2F;a&gt;) and I are
writing this blog post as a public service announcement, to address a
true scourge in modern society. All too often, gymgoers do not know
basic gym etiquette:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Me: spends ten minutes finding a complete set of matching plates and set them up on the squat rack where I&amp;#39;m working.&lt;br&gt;&lt;br&gt;Some guy: comes over, takes some plates, and THEN DOESN&amp;#39;T PUT THEM BACK WHEN HE&amp;#39;S DONE.&lt;br&gt;&lt;br&gt;Dude. I&amp;#39;m still here. 2 feet away from you. You can see I&amp;#39;m still here.&lt;&#x2F;p&gt;&amp;mdash; Miriam Snoyman (@LambdaMom) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LambdaMom&#x2F;status&#x2F;1110429427329126401?ref_src=twsrc%5Etfw&quot;&gt;March 26, 2019&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;In response to this pandemic, we move that all gyms institute,
immediately, a required exam for gym membership. There shall be no
&amp;quot;grandfathering&amp;quot; of existing members; all existing members must submit
to the test. Anyone scoring below a 90% should be forbidden from
entering the gym until they have taken a &amp;quot;basic human decency in the
gym&amp;quot; course.&lt;&#x2F;p&gt;
&lt;p&gt;Gyms: for your convenience, we have provided a set of twenty questions
below. This is a multiple choice exam, where each statement can be
answered with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Required- you must behave this way in the gym&lt;&#x2F;li&gt;
&lt;li&gt;Recommended- this is good behavior&lt;&#x2F;li&gt;
&lt;li&gt;Frowned upon- try to avoid doing this&lt;&#x2F;li&gt;
&lt;li&gt;Forbidden- you will be ejected immediately from the gym&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I&#x27;m done chewing this piece of gum, let me put it on this plate&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;955681808368226304?s=20&quot;&gt;Forbidden&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;I&#x27;m done using the bench, I&#x27;m going to put all of my weights away&lt;&#x2F;strong&gt; Required&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Oh look, the weights are all jumbled up, let me spend 2 minutes and sort them&lt;&#x2F;strong&gt; Recommended&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;That person is attractive, I&#x27;m gonna snap a photo&lt;&#x2F;strong&gt; Forbidden&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;I just finished a set of tricep extensions, let me lift my shirt and check out how my abs look&lt;&#x2F;strong&gt; Frowned upon&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Curling in the squat rack&lt;&#x2F;strong&gt; Frowned upon, unless someone&#x27;s waiting to use the squat rack, then your life is in your own hands&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Telling someone lifting heavy weights to put them down more quietly&lt;&#x2F;strong&gt; Frowned upon&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Yelling like a moron for no reason&lt;&#x2F;strong&gt; Frowned upon (we&#x27;ll also accept forbidden)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Running backwards on the treadmill&lt;&#x2F;strong&gt; Recommended, assuming you take a video and send to me to laugh at&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Doing anything that defies gravity with the cables&lt;&#x2F;strong&gt; Same as above, unless someone&#x27;s waiting to use them&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Walking closely to, or talking to, someone mid-set&lt;&#x2F;strong&gt; Forbidden&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Putting a towel down on the bench&#x2F;machines&lt;&#x2F;strong&gt; Recommended (some say required)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Form checking strangers&lt;&#x2F;strong&gt; Frowned upon&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cleaning up after you spill your protein shake&lt;&#x2F;strong&gt; Required&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Farting while squatting&lt;&#x2F;strong&gt; Frowned upon&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Laughing at the person who farts while squatting&lt;&#x2F;strong&gt; Frowned upon, but perhaps inevitable&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Spitting in the gym&lt;&#x2F;strong&gt; Forbidden&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cheering someone hitting a PR&lt;&#x2F;strong&gt; Recommended&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Putting on any form of hand lotion before touching any gym equipment&lt;&#x2F;strong&gt; Forbidden&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Typing Resistance</title>
		<published>2019-04-01T00:00:00+00:00</published>
		<updated>2019-04-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/04/typing-resistance/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/04/typing-resistance/</id>
		<content type="html">&lt;p&gt;I assure you, this is a post about programming, it&#x27;ll just take a few
paragraphs to get there.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a biological mechanism known as &lt;em&gt;resistance&lt;&#x2F;em&gt;, and it plays out
in many different systems. For example, as you habitually drink more
alcohol, you gain a tolerance, which prevents you from getting drunk
as easily. This can be called &lt;em&gt;alcohol resistance&lt;&#x2F;em&gt;. When you
habitually run high levels of insulin, your body becomes less
sensitive to insulin, making you &lt;em&gt;insulin resistant&lt;&#x2F;em&gt;. When you go into
a loud room, your ears adjust down the sound, making you &lt;em&gt;noise
resistant&lt;&#x2F;em&gt;. And when you change enough dirty diapers, you become
&lt;em&gt;smell resistant&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Resistance applies not just at the biological level. Consider a car
crash. The first time your car is in a crash, it is impacted in a
major way. But after repeated crashes, the damage goes down, as your
car attains &lt;em&gt;crash resistance&lt;&#x2F;em&gt;. The first time a baseball goes through
a window, it shatters. But further impact between the shards and balls
causes less damage. This is &lt;em&gt;impact resistance&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Resistance isn&#x27;t a term we often use in the programming world. That&#x27;s
a mistake I intend to rectify today.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine you&#x27;re working on a Python application. Python is a memory
managed language, so you have &lt;em&gt;never&lt;&#x2F;em&gt; seen a segfault. One day, you&#x27;re
testing your code, and &lt;strong&gt;poof&lt;&#x2F;strong&gt;, a wild segfault appears! You will
respond to it far more strongly than a C programmer, who has built up
a healthy memory bug resistance over the years. And as a result, you
may begin to develop some of that alcohol resistance I mentioned
above.&lt;&#x2F;p&gt;
&lt;p&gt;But I&#x27;m not here to talk about Python, because no one uses Python in
the real world. Instead, let&#x27;s discuss Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;In Haskell, we can use strong typing techniques to great effect, such
as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoiding 404 errors in a web application with type-safe URLs&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring proper character encoding handling by differentiating
textual and binary data&lt;&#x2F;li&gt;
&lt;li&gt;Making Software Transactional Memory safe by quarantining effects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The problem is that we use it &lt;em&gt;everywhere&lt;&#x2F;em&gt;. Like any system, this
overuse of typing builds up a resistance. When someone is insulin
sensitive, and you give them a small dose of insulin, they respond
quickly. When they are insulin resistant, that same dose produces
almost no impact. The same is true with typing.&lt;&#x2F;p&gt;
&lt;p&gt;Every single expression and subexpression in Haskell is typed. Sure,
there&#x27;s type inference and the programmer doesn&#x27;t have to spell it
out. But &lt;em&gt;it&#x27;s still there&lt;&#x2F;em&gt;. The effects can still be felt. You cannot
escape the reality that, when you hit compile, an Abstract Syntax Tree
annotated with types is being generated. One of the intermediate
languages used by GHC—Core—type annotates &lt;em&gt;everything&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The types are there, just like insulin. And just like insulin, whether
we realize it or not, our bodies and minds are slowly building up
resistance to it.&lt;&#x2F;p&gt;
&lt;p&gt;With insulin resistance, the body produces ever increasing amounts of
insulin to overcome the resistance, till the levels are so high that
they cause damage. So, too, with types: Haskellers end up using more
and more types in their code until they buckle under the strain. Their
minds break down, their tools break, runtime errors slip in,
performance suffers.&lt;&#x2F;p&gt;
&lt;p&gt;Types, like insulin, are not evil. But they need to be moderated.&lt;&#x2F;p&gt;
&lt;p&gt;There is no future for a language like Haskell. It dictates
overuse—nay, abuse—of types. It is inhumane and immoral to
subject our computers to such torture. We need to immediately reduce
our dependence on types, and then—when type sensitivity is
reestablished—carefully and moderately add them back in.&lt;&#x2F;p&gt;
&lt;p&gt;Python took this too far, by fully eliminating types. It&#x27;s literally
impossible in Python to even get a type error, even at runtime. That&#x27;s
absurd, and is just as bad as a body with no insulin production at
all. However, Python heads in the right direction. We need a blend of
Python&#x27;s complete lack of a type system, and Haskell&#x27;s ability to use
types in the right location.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, I&#x27;m announcing today the creation of a new language:
Paskell. It fortunately is an unused name, and sounds nothing like any
other programming language ever before created.&lt;&#x2F;p&gt;
&lt;p&gt;And for those who want to learn more, you can &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dQw4w9WgXcQ&quot;&gt;watch this
video&lt;&#x2F;a&gt; where I describe
in more detail how I truly feel about types.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Shutting down haskell-lang.org</title>
		<published>2019-02-18T00:00:00+00:00</published>
		<updated>2019-02-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/02/shutting-down-haskell-lang/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/02/shutting-down-haskell-lang/</id>
		<content type="html">&lt;p&gt;Early this week, I merged a commit which essentially shuts down the
haskell-lang.org website. Besides a few rarely viewed pages without
obvious replacements, visiting pages on https:&#x2F;&#x2F;haskell-lang.org will
automatically redirect you to an appropriate page on
https:&#x2F;&#x2F;haskell.fpcomplete.com. Also, consider this an announcement
that there&#x27;s a new site around, https:&#x2F;&#x2F;haskell.fpcomplete.com!&lt;&#x2F;p&gt;
&lt;p&gt;The site is still being refined. However, to avoid confusion, someone
requested that I make an announcement now. That request makes
sense. In this post, I want to explain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why I shut down haskell-lang.org&lt;&#x2F;li&gt;
&lt;li&gt;What the goal of haskell.fpcomplete.com is&lt;&#x2F;li&gt;
&lt;li&gt;What makes this new site different from haskell-lang.org&lt;&#x2F;li&gt;
&lt;li&gt;Plans for the future&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Onward!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shutting-down-haskell-lang-org&quot;&gt;Shutting down haskell-lang.org&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been playing with the idea of shutting down haskell-lang.org for
a while now. I didn&#x27;t want to simply turn it off, since there&#x27;s a lot
of useful content there that I regularly use myself and point others
to for training (we&#x27;ll get to that in a bit). It wasn&#x27;t a huge amount
of work to put together the replacement site, but it did take some
dedicated writing time. I got that time last week and did most of the
work then.&lt;&#x2F;p&gt;
&lt;p&gt;I first publicly proposed shutting down the site &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;12&#x2F;improving-commercial-haskell&quot;&gt;in December of last
year&lt;&#x2F;a&gt;. I
put together a proposal to get a bunch of people together to work on a
new Commercial Haskell site. There wasn&#x27;t much interest in such
collaboration, so I went with option B, which I&#x27;ll explain in the next
section.&lt;&#x2F;p&gt;
&lt;p&gt;As for why haskell-lang.org should be shut down, I&#x27;ll quote &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;haskell.fpcomplete.com&#x2F;#history&quot;&gt;the
history section of the new site&#x27;s
README&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This website replaces some previous false starts (and mistakes) at
trying to create an opinionated hub of Haskell
information. Previously, some FP Complete members participated in
haskell-lang.org as another vision of an opinionated Haskell
site. Later, we sought out collaborators for creating a more
complete Commercial Haskell website.&lt;&#x2F;p&gt;
&lt;p&gt;haskell-lang.org was a mistake, and there was insufficient interest in
commercialhaskell.com. Given that the branding for haskell-lang.org was
incorrect, there was little interest from others in the general concept
of creating an opinionated site, and we at FP Complete were still passionate
about this topic, we decided to focus efforts on a site
under our own branding and control.&lt;&#x2F;p&gt;
&lt;p&gt;This site is unapologetically opinionated, and follows what we have
found to be the best route towards getting productive with Haskell
quickly.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-need-for-a-site&quot;&gt;The need for a site&lt;&#x2F;h2&gt;
&lt;p&gt;haskell-lang.org has been collecting solid tutorials on general
Haskell techniques and specific libraries. The collection is
opinionated, so that I can use it for training courses I give, and
point new users to it without needing to give any caveats about which
approach to follow. And the site is backed by a Git repository using
Markdown files, which &lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;08&#x2F;thoughts-on-documentation&quot;&gt;I&#x27;m a huge fan
of&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So first goal of this site would be: retain the technical content and
educational approach provided by haskell-lang.org, without the bad
history that goes along with that name.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-goals&quot;&gt;Other goals&lt;&#x2F;h2&gt;
&lt;p&gt;At FP Complete, we&#x27;ve done a few surveys of the Haskell community to
get an idea of what we can do to most help more companies adopt
Haskell. From our last survey, it seems that more educational content
is top of the list, followed by helping companies generally feel
comfortable adopting Haskell. I covered the education aspect above,
and we&#x27;ll continue to put efforts into improving that
situation.&lt;&#x2F;p&gt;
&lt;p&gt;On the more nebulous adoption point, we&#x27;re adding two more goals to
the new site:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Provide &lt;a href=&quot;https:&#x2F;&#x2F;haskell.fpcomplete.com&#x2F;promote&quot;&gt;promotion&lt;&#x2F;a&gt;
material: content that explains what makes Haskell a good choice for
businesses, together with some potential drawbacks people should be
aware of.&lt;&#x2F;li&gt;
&lt;li&gt;Introduce a &lt;a href=&quot;https:&#x2F;&#x2F;haskell.fpcomplete.com&#x2F;success&quot;&gt;Success
Program&lt;&#x2F;a&gt; at FP Complete,
providing affordable commercial Haskell support including training
and mentoring. We believe this may help more companies adopt
Haskell.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enrolling in the Success Program is a paid service at FP Complete
(though we are pricing it as low as we can, to maximize adoption
without actually losing money). We&#x27;re hoping that the
presence of a clearly defined and publicly priced commercial support
package will help reduce perceived risk with Haskell further and allow
more adoption.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;&#x2F;h2&gt;
&lt;p&gt;The new site is still a work in progress. Overall, the styling still
needs a bit of work, I want to refine the language some (and likely
scale back the prose). I also want to refresh a bunch of the technical
content to be in line with our current recommendations. This will also
affect the &lt;a href=&quot;https:&#x2F;&#x2F;www.eventbrite.com&#x2F;e&#x2F;applied-haskell-by-michael-snoyman-lambdaconf-edition-tickets-53187843271&quot;&gt;Applied
Haskell&lt;&#x2F;a&gt;
training I&#x27;ll be giving later this year. (Feel free to check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;applied-haskell#readme&quot;&gt;the
current version of the course
online&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;I still have some questions up in the air, like whether we&#x27;ll host a
blog on this site or simply continue all FP Complete blogging
activitiy on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&quot;&gt;our corporate
site&lt;&#x2F;a&gt;. I&#x27;ve started putting together
a bit of a &lt;a href=&quot;https:&#x2F;&#x2F;haskell.fpcomplete.com&#x2F;philosophy&quot;&gt;philosophy
page&lt;&#x2F;a&gt; explaining the FP
Complete approach to commercial Haskell development, and that needs
expanding. And I&#x27;d like to get a more content on the &lt;a href=&quot;https:&#x2F;&#x2F;haskell.fpcomplete.com&#x2F;contribute&quot;&gt;contribute
page&lt;&#x2F;a&gt; to allow people to
find a project they can cut their teeth on.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that this new site not only allows for creation of and access
to great Haskell content. I also hope that this is taken as a positive
message from the rest of the community and an indication of how we at
FP Complete, and I personally, intend to interact with the broader
Haskell community going forward. We&#x27;ll remain opinionated on our
technical recommendations, as I believe we should be. But hopefully
this change in naming and purpose of the site remove any adversarial
nature to sharing these opinions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Call for new Stack issue triager</title>
		<published>2019-02-12T00:00:00+00:00</published>
		<updated>2019-02-12T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/02/call-for-new-issue-triager/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/02/call-for-new-issue-triager/</id>
		<content type="html">&lt;p&gt;For those unfamiliar with it, Stack has a team called the &amp;quot;Stack Issue
Triagers.&amp;quot; If you&#x27;ve been interacting on the Stack issue tracker recently, it&#x27;s
likely that those are the people you&#x27;ve seen answering questions. We&#x27;ve been
slowly ramping up the team, and it seems to have been quite successful so far
at helping Stack users, as well as escalating issues and getting them resolved
as necessary.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re looking to expand the team again. This team is a volunteer effort, with
each person taking a week at a time of responding to issues. We have a lot more
information on this in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;blob&#x2F;master&#x2F;doc&#x2F;maintainers&#x2F;team_process.md&quot;&gt;team process Stack
documentation&lt;&#x2F;a&gt;.
Working with this team is not only a great service to the community, but also
gives you a chance to learn more about maintaining a large open source Haskell
codebase, and gives you many opportunities to interact with the Stack maintainers.&lt;&#x2F;p&gt;
&lt;p&gt;For now, we&#x27;re adding 1 new person to the team, though we&#x27;ll likely add another
one in three months time, and continue the ramp up process from there. If
you&#x27;re interested in taking part, please send me a private email to &lt;code&gt;michael at snoyman dot com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll collect applicants and discuss with the team members. If you have
questions about the process, please feel free to ask on the &lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;commercialhaskell&#x2F;stack&quot;&gt;Gitter Stack
chat&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mismatched global packages</title>
		<published>2019-01-24T00:00:00+00:00</published>
		<updated>2019-01-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/01/mismatched-global-packages/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/01/mismatched-global-packages/</id>
		<content type="html">&lt;p&gt;This blog post covers an issue with how packages are shipped with GHC, and an edge case of how this can negatively interact with Stack. The overall point about the package contents mismatch will apply more broadly, but I&#x27;m mostly focused in this post on how to better handle this in Stack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;GHC ships with a few &lt;em&gt;wired in&lt;&#x2F;em&gt; packages which cannot be reinstalled. Examples are &lt;code&gt;ghc&lt;&#x2F;code&gt;, &lt;code&gt;base&lt;&#x2F;code&gt;, and &lt;code&gt;template-haskell&lt;&#x2F;code&gt;. The situation with these for all build tools is simple: the GHC version determines the package version.&lt;&#x2F;p&gt;
&lt;p&gt;There are also packages which are not shipped with GHC at all. All build tools get to determine whatever version of these packages they want, assuming compatibility with the GHC version and the packages that are wired in with it.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s an in-between category: packages like &lt;code&gt;process&lt;&#x2F;code&gt; and &lt;code&gt;transformers&lt;&#x2F;code&gt; are shipped with GHC, but can also be easily reinstalled from Hackage. Some tools may decide to eagerly recompile the latest version of them. Stackage takes a different approach: in order to avoid invalidating the &lt;code&gt;ghc&lt;&#x2F;code&gt; package, it avoids recompiling any of these packages, and sticks by default with the &lt;em&gt;global version&lt;&#x2F;em&gt;. Stack is designed to work with that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-recompilation-happens&quot;&gt;When recompilation happens&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you have the following &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ghc-8.6.3
packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And suppose your local package depends on the &lt;code&gt;unix&lt;&#x2F;code&gt; package. On non-Windows systems, &lt;code&gt;unix&lt;&#x2F;code&gt; ships with GHC. Running &lt;code&gt;stack build&lt;&#x2F;code&gt; will therefore result in only building the local package, not &lt;code&gt;unix&lt;&#x2F;code&gt;, since &lt;code&gt;unix&lt;&#x2F;code&gt; is in the global package database.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s suppose that, instead of using a &lt;code&gt;ghc-8.6.3&lt;&#x2F;code&gt; resolver, you use an LTS Haskell resolver:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;lts-13.4
packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Same thing: LTS Haskell snapshots never specify versions of global packages. Instead, they are implicitly inherited from the GHC global package database. In a few specific cases (like the &lt;code&gt;stack init&lt;&#x2F;code&gt; command), we want to avoid requiring that GHC is already installed, so we instead use a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage-content&#x2F;blob&#x2F;master&#x2F;stack&#x2F;global-hints.yaml&quot;&gt;global hints&lt;&#x2F;a&gt; file to specify the versions of packages which ship with GHC.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;unix&lt;&#x2F;code&gt; package depends on the &lt;code&gt;time&lt;&#x2F;code&gt; package. Let&#x27;s suppose your &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; file instead said:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;resolver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;lts-13.4
packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;extra-deps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;time-1.9.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And suppose your local package depends on both &lt;code&gt;unix&lt;&#x2F;code&gt; and &lt;code&gt;time&lt;&#x2F;code&gt;. If you run &lt;code&gt;stack build&lt;&#x2F;code&gt;, Stack has three basic options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Only recompile &lt;code&gt;time&lt;&#x2F;code&gt;, but keep the original &lt;code&gt;unix&lt;&#x2F;code&gt;. That&#x27;s a bad idea: you&#x27;ll now have two different versions of the datatypes in the &lt;code&gt;time&lt;&#x2F;code&gt; package floating around. People may remember extremely confusing error messages about &amp;quot;cannot match &lt;code&gt;ByteString&lt;&#x2F;code&gt; with &lt;code&gt;ByteString&lt;&#x2F;code&gt;&amp;quot; or similar. It comes from this kind of a build plan.&lt;&#x2F;li&gt;
&lt;li&gt;Fail to compile at all. The &lt;code&gt;unix&lt;&#x2F;code&gt; in the global database is &amp;quot;invalidated&amp;quot; by the presence of a newly compiled &lt;code&gt;time&lt;&#x2F;code&gt;, and your package depends on &lt;code&gt;unix&lt;&#x2F;code&gt;. Just give up.&lt;&#x2F;li&gt;
&lt;li&gt;Automatically add an &lt;code&gt;extra-dep&lt;&#x2F;code&gt; version of &lt;code&gt;unix&lt;&#x2F;code&gt; to the build plan, and recompile both &lt;code&gt;time&lt;&#x2F;code&gt; and &lt;code&gt;unix&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;(1) is a really bad idea, and (2) is pretty annoying. So today, Stack follows (3), and automatically&#x2F;implicitly adds the invalidated global packages to the build plan.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-do-global-packages-come-from&quot;&gt;Where do global packages come from?&lt;&#x2F;h2&gt;
&lt;p&gt;Look at the following simplified output of a command describing the global &lt;code&gt;process&lt;&#x2F;code&gt; package shipped with GHC 8.6.3:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ stack --resolver ghc-8.6.3 exec -- ghc-pkg describe process
name: process
version: 1.6.3.0
...
depends:
    base-4.12.0.0 deepseq-1.4.4.0 directory-1.3.3.0 filepath-1.4.2.1
    unix-2.7.2.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important bits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;re using &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re depending on &lt;code&gt;base-4.12.0.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now check out the &lt;code&gt;process.cabal&lt;&#x2F;code&gt; file for &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;process-1.6.3.0&#x2F;revision&#x2F;0.cabal&quot;&gt;on Hackage&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;process&#x2F;blob&#x2F;v1.6.3.0&#x2F;process.cabal#L77&quot;&gt;on Github&lt;&#x2F;a&gt;. You&#x27;ll notice the following bound:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    build-depends: base      &amp;gt;= 4.4 &amp;amp;&amp;amp; &amp;lt; 4.12,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These pieces of information are contradictory: the cabal file says &lt;code&gt;base &amp;lt; 4.12&lt;&#x2F;code&gt;, but GHC ships with this version of &lt;code&gt;process&lt;&#x2F;code&gt; and &lt;code&gt;base-4.12.0.0&lt;&#x2F;code&gt;! How is this possible?&lt;&#x2F;p&gt;
&lt;p&gt;Well, it turns out, when GHC says it has &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt;, it&#x27;s &lt;em&gt;not&lt;&#x2F;em&gt; code that&#x27;s downloaded from Hackage. Instead, it&#x27;s established via a submodule. Specifically, you can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ghc&#x2F;ghc&#x2F;tree&#x2F;ghc-8.6.3-release&#x2F;libraries&quot;&gt;see on Github&lt;&#x2F;a&gt; that GHC 8.6.3 is using &lt;code&gt;process&lt;&#x2F;code&gt; at Git commit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;process&#x2F;tree&#x2F;36a3ad577e31e8c3336c7464b252fc2c9b01a20c&quot;&gt;36a3ad5&lt;&#x2F;a&gt;. By contrast, the &lt;code&gt;v1.6.3.0&lt;&#x2F;code&gt; tag points to Git commit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;process&#x2F;commit&#x2F;7c0b58141290b50a338bf391adc0a8c43513165b&quot;&gt;7c0b5814&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t a recent revelation, and not only my revelation. I peripherally knew about this, but I&#x27;ve heard of three different people discovering this problem in the past month. I&#x27;m writing this blog post to point out how it negatively affects Stack, and what to do about it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-breaks-stack&quot;&gt;How it breaks Stack&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;process&lt;&#x2F;code&gt; depends on the &lt;code&gt;directory&lt;&#x2F;code&gt; package. Let&#x27;s use an extra-dep to provide a new version of &lt;code&gt;directory&lt;&#x2F;code&gt;, and then try to build:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cat stack.yaml 
resolver: ghc-8.6.3
packages: []
extra-deps:
- directory-1.3.3.1
$ stack build process

Error: While constructing the build plan, the following exceptions were encountered:

In the dependencies for process-1.6.3.0:
    base-4.12.0.0 from stack configuration does not match &amp;gt;=4.4 &amp;amp;&amp;amp; &amp;lt;4.12  (latest matching version is 4.11.1.0)
needed since process is a build target.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well that&#x27;s darn confusing. I changed a version of &lt;code&gt;directory&lt;&#x2F;code&gt;, and suddenly &lt;code&gt;process&lt;&#x2F;code&gt; has a bounds error?!? This makes perfect sense given the above (though it&#x27;s certainly unsatisfying):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GHC ships with a &lt;em&gt;different version&lt;&#x2F;em&gt; of &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;process&lt;&#x2F;code&gt; needs to be recompiled when we change the &lt;code&gt;directory&lt;&#x2F;code&gt; package&lt;&#x2F;li&gt;
&lt;li&gt;Stack assumes that it can simply use &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt; to replace the global &lt;code&gt;process&lt;&#x2F;code&gt; package&lt;&#x2F;li&gt;
&lt;li&gt;However, the &lt;code&gt;process&lt;&#x2F;code&gt; on Hackage differs slightly from the one shipped with GHC&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a relatively simple problem which results in an annoying bounds error, and can be easily fixed by adding a new &lt;code&gt;process&lt;&#x2F;code&gt; extra-dep. However, other problems are much more severe:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What if GHC is compiling one of these packages with a special cabal flag? We won&#x27;t be able to reproduce that. In fact, there are comments in the Stack code base about this already.&lt;&#x2F;li&gt;
&lt;li&gt;What if the code on Hackage is &lt;em&gt;fundamentally&lt;&#x2F;em&gt; different from what&#x27;s shipped with GHC? We could get silent but significant behavior changes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;solution-make-no-assumptions&quot;&gt;Solution: make no assumptions&lt;&#x2F;h2&gt;
&lt;p&gt;The core problem here is that Stack assumes &lt;code&gt;process-1.6.3.0&lt;&#x2F;code&gt; provided by GHC is the same as what&#x27;s on Hackage. That assumption plays itself out in our selection of option (3) above. I propose: get rid of the assumption! Instead, move to option (2): if we replace a global package, prune all global packages that depend on it, and require adding those as explicit &lt;code&gt;extra-dep&lt;&#x2F;code&gt; entries.&lt;&#x2F;p&gt;
&lt;p&gt;This will break some existing build plans, but I&#x27;m proposing this change for Stack 2.0, which is already allowing some slight breakage along those lines. This will add some annoyance to users, but with the result of more clarity on what&#x27;s happening in a build plan. And perhaps we can even make an error message for these cases which points right at this post!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kids Coding, Part 4</title>
		<published>2019-01-18T00:00:00+00:00</published>
		<updated>2019-01-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2019/01/kids-coding-part-4/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2019/01/kids-coding-part-4/</id>
		<content type="html">&lt;p&gt;Previous lessons have all been focused on teaching our ten and eight
year olds some coding, since our six year old (Yakov) is still working
on reading and writing in English. However, Yakov&#x27;s been home sick all
week, and he asked me today to teach him some programming. So I came
up with a simplified version focused solely on the GHCi prompt.&lt;&#x2F;p&gt;
&lt;p&gt;I started off with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; x = 32
&amp;gt; x + x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then I asked him what he thought the answer would be. He quickly
came back with 64. Then I typed in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; y = 5
&amp;gt; x + y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And he got 37 pretty quickly. We played around with a few more bits of
simple arithmetic (he hasn&#x27;t really mastered multiplication yet). I
introduced defining variables in terms of other variables:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; x = 2 * 3
&amp;gt; y = x * 2
&amp;gt; y + 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This took him a &lt;em&gt;bit&lt;&#x2F;em&gt; longer, but entirely due to the multiplication!
This showed me a few things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Reassigning variables was not confusing for him in the least&lt;&#x2F;li&gt;
&lt;li&gt;Variable replacement was similarly trivial&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Finally, I decided to push things just a bit further and introduce
functions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; f x = x + 3
&amp;gt; f 7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This confused him at first, but once I explained that this was
applying the function &lt;code&gt;f&lt;&#x2F;code&gt; to the number 7, he got it, and said &amp;quot;oh,
it&#x27;s the +3 function.&amp;quot; (Remember from &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;12&#x2F;kids-coding-interlude-the-function-game&quot;&gt;last
time&lt;&#x2F;a&gt;
that he&#x27;s been playing the function game for a while.) Next I hit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; x = f 0
&amp;gt; f x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was easy: it&#x27;s 6! Finally I gave him two more challenging ones:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; f (f 0)
&amp;gt; f (f (f 10))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I fully expected confusion about parentheses. I was shocked: he wasn&#x27;t
bothered by them at all. He immediately got both answers, and was very
proud of himself.&lt;&#x2F;p&gt;
&lt;p&gt;Total time: less than 10 minutes, probably closer to 5. Which is good,
because he&#x27;s got a short attention span and wanted to play some
Nintendo with me too. Overall, I was &lt;em&gt;very&lt;&#x2F;em&gt; happy with how many
concepts he was able to absorb.&lt;&#x2F;p&gt;
&lt;p&gt;(Thanks to my &lt;code&gt;~&#x2F;.ghc&#x2F;ghci_history&lt;&#x2F;code&gt; file for reminding me what we
covered today.)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kids Coding Interlude: the function game</title>
		<published>2018-12-16T00:00:00+00:00</published>
		<updated>2018-12-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/12/kids-coding-interlude-the-function-game/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/12/kids-coding-interlude-the-function-game/</id>
		<content type="html">&lt;p&gt;Since the kids have been back at school and we&#x27;ve been busy with work
and some home renovations, I unfortunately haven&#x27;t had a chance to
continue much with the kids coding training. However, when discussing
the general topic of education at &lt;a href=&quot;https:&#x2F;&#x2F;functionalconf.com&#x2F;&quot;&gt;Functional
Conf&lt;&#x2F;a&gt;, the topic of &amp;quot;the function game&amp;quot;
came up, and I wanted to share what we did. I found this a
great—and perhaps vital—pre-training for Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;The function game is simple: I pretend to be a function, let the kids
give me input, and I give them output. They need to try to figure out
what the function is. Here&#x27;s an example conversation:&lt;&#x2F;p&gt;
&lt;p&gt;Me: When you give me 1, I give you 2. When you give me 2, I give you 3.&lt;br &#x2F;&gt;
Them: What if I give you 5?&lt;br &#x2F;&gt;
Me: 6&lt;br &#x2F;&gt;
Them: 8&lt;br &#x2F;&gt;
Me: 9&lt;br &#x2F;&gt;
Them: You&#x27;re just adding 1!&lt;&#x2F;p&gt;
&lt;p&gt;With each kid, I&#x27;ve &lt;em&gt;always&lt;&#x2F;em&gt; started off with addition. I&#x27;ll later get
into identity, but that one is (perhaps surprisingly) more confusing
for them. Multiplication by 2 is a good follow-up to addition. Then,
when they get comfortable with discovering a few of these, I&#x27;ll throw in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f x = x * 2 + 3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;f x = x&lt;&#x2F;code&gt; (identity)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;f x = 5&lt;&#x2F;code&gt; (constant)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll typically play this game at the dinner table. At some point I&#x27;ll
also actually &lt;em&gt;define&lt;&#x2F;em&gt; a function for them, after they&#x27;ve already
experienced some success at guessing what I&#x27;m doing:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It always gives the same output for the same input&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The next curveball I introduce is different types:&lt;&#x2F;p&gt;
&lt;p&gt;Me: When you give me &amp;quot;apple&amp;quot;, I give you 5&lt;br &#x2F;&gt;
Them: What?&lt;br &#x2F;&gt;
Me: Functions don&#x27;t just work on numbers&lt;br &#x2F;&gt;
Them: OK...&lt;br &#x2F;&gt;
Me: When you give me &amp;quot;book&amp;quot;, I give you 4&lt;br &#x2F;&gt;
Them: It&#x27;s the number of letters!&lt;&#x2F;p&gt;
&lt;p&gt;After that, each time I tell them I have a new function, they&#x27;ll ask
me the type of the input. As a Haskeller father, I couldn&#x27;t be more
proud :).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll also teach them about functions of multiple inputs:&lt;&#x2F;p&gt;
&lt;p&gt;Me: When you give me 2 and 3, I give you 5&lt;br &#x2F;&gt;
Them: What?&lt;br &#x2F;&gt;
Me: Functions can take more than 1 input.&lt;&#x2F;p&gt;
&lt;p&gt;And after a few more examples, they figure out that I&#x27;m just doing
addition.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;&#x2F;em&gt; I tried demonstrating partial function application by saying
&amp;quot;when you give me 2, I give you a new function you can play with.&amp;quot; But
I don&#x27;t remember if I actually did this, or if I just planned it. And
since I&#x27;m sitting in a hotel lobby waiting for a cab, I can&#x27;t test out
the theory on them right now.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I hope this proves useful for others trying to teach their
kids (or maybe non-kids!) either math or functional programming. If
you try it out, please let me know how it goes.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Improving Commercial Haskell</title>
		<published>2018-12-13T00:00:00+00:00</published>
		<updated>2018-12-13T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/12/improving-commercial-haskell/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/12/improving-commercial-haskell/</id>
		<content type="html">&lt;p&gt;I passed around a version of this document for initial feedback. I&#x27;m
now proposing this publicly. I say this below, but I want to reiterate
here: I&#x27;m only interested in doing this if there&#x27;s real demand and
interest, as well as others to participate. If an improved Commercial
Haskell is something with little interest, I&#x27;ll drop the topic
completely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;premise&quot;&gt;Premise&lt;&#x2F;h2&gt;
&lt;p&gt;We started the Commercial Haskell Special Interest Group (SIG) as an
informal organization for those interested in using Haskell in a
commercial setting. So far, it has provided a few concrete activities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to sign up as an individual or a company to be “part of” the group&lt;&#x2F;li&gt;
&lt;li&gt;A central place for some documentation, which honestly hasn’t taken off too significantly&lt;&#x2F;li&gt;
&lt;li&gt;A Github organization for placing some community projects, like Stack, Stackage, and others&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The premise of this proposal is: can and should we do more? Are there
additional activities that the Commercial Haskel SIG should be
responsible for? Should the decision making process and meaning of
membership be clarified?&lt;&#x2F;p&gt;
&lt;p&gt;And then, most importantly, is this something that others are
interested in participating in? If this is just a group with a handful
of active members, there’s not reason to formalize things at all.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;possible-goals&quot;&gt;Possible goals&lt;&#x2F;h2&gt;
&lt;p&gt;First of all, I believe we should be defining clearly what the goal of
the Commercial Haskell SIG is, and some potential subgoals. As a
headline, I think the overriding goal should be:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Increase the commercial adoption of Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I can think of some concrete subgoals which are in line with the
above.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Encourage more serious consideration of security vulnerabilities in the Haskell ecosystem, such as:
&lt;ul&gt;
&lt;li&gt;Provide a Responsible Disclosure policy&lt;&#x2F;li&gt;
&lt;li&gt;Encourage security reviews of popular packages&lt;&#x2F;li&gt;
&lt;li&gt;Begin tracking vulnerabilities in the Haskell ecosystem more properly (e.g., via CVEs)&lt;&#x2F;li&gt;
&lt;li&gt;Prior art: https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;4uta1e&#x2F;proposal_tracking_security_holes_and_major_bugs&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Provide forums for commercial users to discuss issues and collaborate on solutions&lt;&#x2F;li&gt;
&lt;li&gt;Put together marketing-style material for Haskell in industry&lt;&#x2F;li&gt;
&lt;li&gt;Increase the set of documentation provided by Commercial Haskell, and probably host on commercialhaskell.com
&lt;ul&gt;
&lt;li&gt;One easy, concrete, and hopefully beneficial to the ecosystem: I propose to remove haskell-lang.org, and instead put its documentation on commercialhaskell.com&lt;&#x2F;li&gt;
&lt;li&gt;Concretely, this will hopefully help rectify a mistake I made, and provide a clear vision for why this site exists and is separate from haskell.org (providing opinionated, commercially-geared documentation, without needing to distance from haskell.org)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Establish and encourage a Code of Conduct. This has been an ongoing discussion across the Haskell ecosystem.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;possible-problems&quot;&gt;Possible problems&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve debated this off-and-on for a while now. Here’s a brain dump of potential hurdles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Yet another committee&amp;quot; overhead. We have enough of these already, and they are not well loved in general.&lt;&#x2F;li&gt;
&lt;li&gt;If we establish clear committee rules, they may be open to abuse. This would depend on organizational structure and how we determine voting occurs.&lt;&#x2F;li&gt;
&lt;li&gt;There’s a non-trivial time and energy investment in this, and I personally don’t have a lot of either right now. This will only work if others are truly engaged.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe no one cares about any of this, and formalizing things is strictly worse than the status quo.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe there’s not alignment on what the Commercial Haskell SIG should be doing, and all we’ll be doing is creating a new public fight.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe some people who are signed up on the repo don’t believe on our goals, and will object to any clarification of direction.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;organizational-structure&quot;&gt;Organizational structure&lt;&#x2F;h2&gt;
&lt;p&gt;Some basic ideas, I haven’t given this much thought yet.&lt;&#x2F;p&gt;
&lt;p&gt;Option A: Typical committee, a group of 7-ish people, privately choose members, no real accountability&lt;&#x2F;p&gt;
&lt;p&gt;Option B:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Individual initiatives have a single owner or small group of cooperating owners&lt;&#x2F;li&gt;
&lt;li&gt;Approved list of members of Commercial Haskell SIG
&lt;ul&gt;
&lt;li&gt;Question: how do we bootstrap that list?&lt;&#x2F;li&gt;
&lt;li&gt;What is the criterion for membership? Individuals? Companies?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If there’s an objection to actions by the owner, can take a vote to override
&lt;ul&gt;
&lt;li&gt;Simple majority? 60%? Two-thirds?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Option C (proposed by a reviewer): A Benevolent Dictator for Life (BDFL) model&lt;&#x2F;p&gt;
&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;commercialhaskell&#x2F;issues&#x2F;141&quot;&gt;a Github
issue&lt;&#x2F;a&gt;
for discussion, and will be participating there. Discussion is of
course free to occur elsewhere, but I&#x27;m going to focus my energies on
that Github issue. For real-time chat (if relevant), the
&lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;commercialhaskell&#x2F;commercialhaskell&quot;&gt;commercialhaskell Gitter
channel&lt;&#x2F;a&gt; is a
great place. If there&#x27;s anything sensitive people want to raise, I&#x27;m
also available for private communications.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>FP Complete&#x27;s opinion</title>
		<published>2018-12-12T00:00:00+00:00</published>
		<updated>2018-12-12T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/12/fp-completes-opinion/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/12/fp-completes-opinion/</id>
		<content type="html">&lt;p&gt;I see an attitude expressed on forums often. This has happened for
years, and I usually ignore it. But I&#x27;m responding to it today because
I think the opinion is negative for the Haskell
community. And—hitting a bit closer to home for
me—negatively impacts my coworkers.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m an opinionated person. In my experience, most people who end up
writing Haskell are to some extent. I&#x27;m not afraid to share my
opinions on lots of topics, and I think that&#x27;s healthy. Most people
who read my blog or Twitter feed know my opinions on language design,
API design, build tool design, nutrition, and exercise, for example.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the two sentence summary of everything I&#x27;m going to say in this
blog post:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Just because I believe something does not make it FP Complete&#x27;s belief.&lt;&#x2F;li&gt;
&lt;li&gt;Just because I believe something does not mean that everyone at FP Complete believes it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I think I&#x27;ve interviewed every engineer who works for FP
Complete. When interviewing, I &lt;em&gt;do&lt;&#x2F;em&gt; look for certain criteria. For
example, if I&#x27;m hiring for a Haskell development position, I look for
people who like and know Haskell. That&#x27;s the closest thing to an &amp;quot;FP
Complete opinion&amp;quot; you can find: things which are intrinsic to the job.
I&#x27;ve never tried to hire someone who has identical opinions to me on
all topics. Not only would that be impossible to achieve, but it would
be bad for business: we &lt;em&gt;want&lt;&#x2F;em&gt; a diversity of opinions, not a
monoculture.&lt;&#x2F;p&gt;
&lt;p&gt;Someone on our sales team recently brought a question to the
engineering team: &amp;quot;Why does FP Complete hate Nix?&amp;quot; He showed me the
comment in question. I won&#x27;t point to the comment; it&#x27;s neither
informative nor unique. Here&#x27;s the answer: FP Complete has no
emotions. It&#x27;s a company. We work on projects, and we have people who
do that work. I don&#x27;t think &lt;em&gt;anyone&lt;&#x2F;em&gt; on our team &amp;quot;hates&amp;quot; Nix. I
certainly don&#x27;t, even if I&#x27;m usually one of the people on the team
saying we shouldn&#x27;t use Nix for most projects (I can explain why that
happens separately, but it&#x27;s off topic here). However:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Even I will &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;11&#x2F;stackage-history-philosophy-future&quot;&gt;recommend using Nix when I think it&#x27;s the right tool
for the
job&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Many&lt;&#x2F;em&gt; members of our team really love Nix&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We have technical disagreements on our team. You&#x27;ve probably seen
members of the FP Complete team espousing those differing viewpoints
publicly. We regularly have technical debates about how to approach
things. This isn&#x27;t just in the realm of Haskell. We debate DevOps
tooling, front end development, and even business objectives.&lt;&#x2F;p&gt;
&lt;p&gt;When someone joins the FP Complete team, they are agreeing to fulfill
the terms of their contract: do the work we ask from them, contribute
to our internal technical discussions, and so on. There is no pledge
of obedience to the &amp;quot;FP Complete will.&amp;quot; Because it doesn&#x27;t exist.&lt;&#x2F;p&gt;
&lt;p&gt;I feel almost silly writing up this blog post, because everything I&#x27;m
saying &lt;em&gt;should&lt;&#x2F;em&gt; be automatic. However, it seems like something like
this needed to be said.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to criticize something I&#x27;ve said, go for it. I&#x27;ve proven
over the years I&#x27;m always up for a technical debate. But couching it
as &amp;quot;FP Complete believes X&amp;quot; is lazy (in the bad way) and wrong. That
goes for generalizing from statements of other members of the team
too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>New user empathy</title>
		<published>2018-12-11T00:00:00+00:00</published>
		<updated>2018-12-11T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/12/new-user-empathy/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/12/new-user-empathy/</id>
		<content type="html">&lt;p&gt;This blog post will focus on the situation for Haskell, though the
ideas likely generalize well to other languages, or even to
non-programming disciplines. I&#x27;m simply speaking to the topic I have
the most experience with.&lt;&#x2F;p&gt;
&lt;p&gt;Many people will make claims that a certain decision needs to be made
&amp;quot;for new users.&amp;quot; These recommendations can range anywhere from
sensible, to confusing, to insulting. New users are thought of
anywhere from smart people who need decent information provided, to
individuals hungry for knowledge, to idiots who don&#x27;t know any better.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve discussed this situation over time with people, and have spent
significant time personally and professionally looking for ways to
improve the situation for &amp;quot;new users.&amp;quot; And I believe that, by far, the
most important trait we need to do this is &lt;em&gt;empathy&lt;&#x2F;em&gt;. To quote
Wikipedia:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Empathy is the capacity to understand or feel what another person is
experiencing from within their frame of reference&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let me start off with the most extreme example of where we, as
Haskellers, have failed historically: monad tutorials.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-monad-tutorial-fallacy&quot;&gt;The monad tutorial fallacy&lt;&#x2F;h2&gt;
&lt;p&gt;Haskellers occassionally will glibly state &amp;quot;a monad is just a monoid
in the category of endofunctors, what&#x27;s the problem.&amp;quot; I strongly
believe the vast majority, if not all cases, of this statement are
meant to self-mock. But let&#x27;s pretend for a moment that this
information was stated in this tone to a new user, who has never seen
monads, monoids, categories, or endofunctors before. This &lt;em&gt;massively&lt;&#x2F;em&gt;
fails the empathy test:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The new user is unaware of these terms, and cannot understand them
without further information&lt;&#x2F;li&gt;
&lt;li&gt;Their frame of reference is &lt;em&gt;probably&lt;&#x2F;em&gt; &amp;quot;I heard that monads are
necessary to do I&#x2F;O in Haskell, why is that?&amp;quot; The answer provides
obfuscation in place of elucidation&lt;&#x2F;li&gt;
&lt;li&gt;The tone, especially &amp;quot;just&amp;quot; and &amp;quot;what&#x27;s the problem,&amp;quot; is dismissive
and derisive. If I&#x27;d heard a statement like that, I&#x27;d probably want
to walk away from Haskell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that none of these statements require us to believe anything
negative about a new user. I&#x27;ve not implied that they are
unintelligent, lazy, weak-willed, or unsuitable to Haskell. My mental
model of their frame of reference is fairly straightforward here: they
have not been exposed to this material previously, they&#x27;re trying to
get an answer to a specific question, and they don&#x27;t want to be made
to feel inferior.&lt;&#x2F;p&gt;
&lt;p&gt;The monad tutorial fallacy in general (aka &amp;quot;monads are like burritos&amp;quot;)
is a more subtle form of this. The author of such a tutorial, in their
mind, has decided that monads are somehow like burritos. This is
ignoring the frame of reference of the reader, who likely has no
reason to believe monads actually are like burritos, and cannot
understand the analogy. Sharing the analogy as if it will help, when
in reality it doesn&#x27;t, can make a reader feel frustrated, confused,
and inferior, and prevent them from wanting to go further. Again, this
is &lt;em&gt;not&lt;&#x2F;em&gt; a failing in the new user!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-mental-model-for-a-new-user&quot;&gt;My mental model for a new user&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve built up a mental model for how I believe a new user to Haskell
will &lt;em&gt;typically&lt;&#x2F;em&gt; be thinking. This is by no means universal; many
people are exceptions. But I&#x27;ve found that the following traits
generally apply to someone trying out Haskell for the first time. And
making these assumptions about new users who &lt;em&gt;don&#x27;t&lt;&#x2F;em&gt; fit this
description perfectly doesn&#x27;t usually cause any kind of major negative
impact:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Skeptical: they don&#x27;t yet know if Haskell will live up to the hype
and actually solve their problems&lt;&#x2F;li&gt;
&lt;li&gt;Impatient: there are dozens of languages that they could be
investigating, and they want to quickly figure out if Haskell is one
of the select few worth spending more time on&lt;&#x2F;li&gt;
&lt;li&gt;Curious: few people pick Haskell as a language to look into without
some level of curiosity about what makes this language so cool&lt;&#x2F;li&gt;
&lt;li&gt;Smart, but distracted: I assume that, despite this curiosity,
impatience may win out, and new users will probably be juggling a
few other things concurrently. Maybe they&#x27;re testing out other
languages, or have some deadline at work, or who knows what.&lt;&#x2F;li&gt;
&lt;li&gt;Eager to succeed: most people don&#x27;t want to fail. They want their
efforts to pay off and be rewarded.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are others attributes too, most of which I probably haven&#x27;t
fully identified even to myself. But this is a decent starting point.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;&#x2F;h3&gt;
&lt;p&gt;Regarding exceptions to this rule: some people are &lt;em&gt;not&lt;&#x2F;em&gt;
skeptical. Maybe they&#x27;ve been a Scala developer for years, have seen
Haskell at conferences for a long time, and are totally bought into
the language before they even start. Great! Treating them as skeptical
initially may involve giving them some cool motivating cases for
Haskell (my personal favorite being something like STM and the
&lt;code&gt;Concurrently&lt;&#x2F;code&gt; type). Providing this extra information can, at worst,
result in them telling me &amp;quot;hey, I get it, can we just skip to the part
where you teach me something?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;The same applies with impatient. I optimize my Haskell teaching to get
something working quickly so that people know the investment has a
good chance of paying off. But maybe someone has decided that, come
hell or high water, they&#x27;re going to spend the next 2 weeks learning
all the ins and outs of Haskell. They want to learn the Lambda
calculus from the ground up, understand some type theory, and then
write Hello World. Great! In those cases, they can easily skip my
&amp;quot;concurrent HTTP downloads in 5 minutes&amp;quot; tutorial. The other way
around—skipping the &amp;quot;the Lambda calculus for math
majors&amp;quot;—happens less frequently.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note, and just to prove the point: my wife has started
learning Haskell (though our home renovations have recently gotten in
the way of that). She fulfills &lt;em&gt;neither&lt;&#x2F;em&gt; of these criteria: she&#x27;s
watched me using Haskell for 10 years, and isn&#x27;t at all skeptical of
the language. And she&#x27;s learning the language without any specific
impatience to get things working. To my knowledge, my standard mental
modeling and new user onboarding wouldn&#x27;t have negatively impacted her
acquisition of Haskell, despite this mismatch..&lt;&#x2F;p&gt;
&lt;h2 id=&quot;practical-outcomes&quot;&gt;Practical outcomes&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, so given that I&#x27;ve built up this mental model, how does this
affect how I try to onboard new users?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure there&#x27;s a clear start location to point them to&lt;&#x2F;li&gt;
&lt;li&gt;Reduce the number of choices they need to make to get started&lt;&#x2F;li&gt;
&lt;li&gt;Include a compelling example from the beginning that will get them interested&lt;&#x2F;li&gt;
&lt;li&gt;Include exercises they can work on to keep that curiosity high, but
don&#x27;t make them too complicated at first&lt;&#x2F;li&gt;
&lt;li&gt;Provide links to go &amp;quot;off the beaten track&amp;quot; if someone has
drastically different goals than provided&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;new-users-are-different&quot;&gt;New users are different!&lt;&#x2F;h2&gt;
&lt;p&gt;This is vital to keep in mind. When I started using Haskell, Hackage
had barely started, &lt;code&gt;cabal-install&lt;&#x2F;code&gt; didn&#x27;t really exist at all, there
were barely any libraries worth using, and there was almost no
educational material. I was absolutely a &amp;quot;new user,&amp;quot; but I didn&#x27;t fit
the mental model described above at all. Making any assumption about
what other new users are willing to go through based on my own
experience would be wrong.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-our-goals&quot;&gt;What are our goals?&lt;&#x2F;h2&gt;
&lt;p&gt;As I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;11&#x2F;stackage-history-philosophy-future&quot;&gt;recently
stated&lt;&#x2F;a&gt;,
my goal is to &amp;quot;increase the adoption of Haskell.&amp;quot; For me, it&#x27;s vital
to improve the new user experience significantly, and this drives a
lot of what I work on in Haskell. Not everyone shares that goal, and
that&#x27;s fine. But identifying these differences can help us within the
Haskell community to have more constructive discussions about how to
proceed.&lt;&#x2F;p&gt;
&lt;p&gt;One example of such a discussion (that I was not really involved in)
was the Foldable Traversable Proposal (FTP) debate. There was a lot of
discussion about &amp;quot;new users.&amp;quot; I strongly believe that different
parties had wildly different ideas of who these new users were, and
what their frame of reference was. If we had the language and
perspective to openly discuss these differences, I think we could have
had a more meaningful discussion.&lt;&#x2F;p&gt;
&lt;p&gt;The same applies to many discussions I &lt;em&gt;am&lt;&#x2F;em&gt; involved in, such as
tooling. You can trace many of the more opinionated pieces of Stack to
the mental model I&#x27;ve described above. For example, on the impatient
side, Stack is optimized for a use case of impatience: you download a
Stack executable, and it will automatically handle all of the other
tooling installation you need. It may not do it in exactly the way
every user wants (e.g. shared vs user-local GHC installations), but
that&#x27;s not the goal.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, it&#x27;s optimized for skeptical users. From personal
experience, running into dependency hell out of the gate is a major
turnoff for skeptical users. Ensuring that the default of the tool is
to use pretested Stackage snapshots knocks down this major obstacle to
skeptical users. This also plays into the &amp;quot;smart, but distracted:&amp;quot;
from experience, new users won&#x27;t spend time reading all of the
detailed instructions you put on your site. They&#x27;re impatient to get
started quickly, distracted by 15 other tabs, and will become
frustrated when line 27 of your instructions would have fixed the
problem they run into, but they just happened to miss it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Async, futures, and tokio - Rust Crash Course lesson 7</title>
		<published>2018-12-03T00:00:00+00:00</published>
		<updated>2018-12-03T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/12/rust-crash-course-07-async-futures-tokio/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/12/rust-crash-course-07-async-futures-tokio/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; With the addition of async&#x2F;await syntax in Rust 1.39 (November 2019), everything related to async code in Rust is getting an overhaul. As such, this lesson is now pretty deeply out of date. It&#x27;s still useful for understanding the deeper principles, but I hope to write up an updated tutorial in the future covering the new approach.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike languages like Haskell, Erlang, and Go, Rust does not have a
runtime system providing green threads and asynchronous I&#x2F;O. However,
for many real world use cases, async I&#x2F;O is strongly desired, if not a
hard requirement. The de facto standard library for handling this in
Rust is tokio.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This lesson in the crash course is going to be a bit different from
others, since:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;There&#x27;s a lot of interconnected material to cover which can&#x27;t as
easily be separated out&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s more important to understand the motivation behind the design
of these libraries than in many other cases&lt;&#x2F;li&gt;
&lt;li&gt;I believe the material may be useful for people who haven&#x27;t been
following the rest of the crash course&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Therefore, some different rules will apply:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m defining up front the knowledge you&#x27;ll need of Rust to
understand this lesson, namely:
&lt;ul&gt;
&lt;li&gt;All the basics of syntax&lt;&#x2F;li&gt;
&lt;li&gt;Traits and associated types&lt;&#x2F;li&gt;
&lt;li&gt;Iterators&lt;&#x2F;li&gt;
&lt;li&gt;Closures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Instead of providing the exercise solutions in a later post, I&#x27;ll be
providing them immediately, since the material is so cumulative. I
still &lt;em&gt;strongly recommend&lt;&#x2F;em&gt; spending significant time and effort
trying to solve the exercises yourself before looking at the
solutions. It&#x27;s harder and more time consuming, but ultimately
worthwhile.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, this lesson is &lt;em&gt;much longer and more involved&lt;&#x2F;em&gt; than previous
lessons. You should plan on it taking more time to complete than
others. I considered breaking this up into multiple lessons, but
decided to keep all of the content together. Instead, I&#x27;ll be taking a
break from weekly lessons after this one for a bit.&lt;&#x2F;p&gt;
&lt;p&gt;Consider that the intro to the intro. Now the real intro!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-async&quot;&gt;Why async?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m going to assume that readers are already familiar with async I&#x2F;O
and its motivations in general. If you&#x27;re not, it&#x27;s worth reading up a
bit on &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C10k_problem&quot;&gt;the C10k problem&lt;&#x2F;a&gt;,
where many of us started thinking hard about async I&#x2F;O. You may also
be interested in reading a post I wrote &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;01&#x2F;green-threads-are-like-garbage-collection&quot;&gt;about green
threads&lt;&#x2F;a&gt;,
a language runtime-based solution to the same problem.&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the day, the goals of Rust&#x27;s approach to async I&#x2F;O are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Minimize system resources for handling a large number of concurrent
I&#x2F;O tasks&lt;&#x2F;li&gt;
&lt;li&gt;Provide a zero-cost abstraction on top of the async I&#x2F;O mechanisms
provided by operating systems&lt;&#x2F;li&gt;
&lt;li&gt;Do it at a library level, instead of introducing a runtime to Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-sample-problem&quot;&gt;A sample problem&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s difficult to dive in to the wonderful world of tokio. You need to
learn about futures and streams, tasks and executors, async I&#x2F;O system
calls and the &lt;code&gt;Async&lt;&#x2F;code&gt; type, etc. To try and decouple this learning
experience, we&#x27;re going to start with a simplified problem. This
problem mostly, but not perfectly, models async I&#x2F;O in the real world,
and will demonstrate many of the design concerns. It will also let us
play just a bit more with concurrent programming before diving into
futures and tokio.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to run a separate thread. This thread will have access to
two atomic values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;AtomicBool&lt;&#x2F;code&gt; to tell us whether we want this side thread to keep
running&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; counter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We haven&#x27;t covered atomic types yet, but they&#x27;re exactly what they
sound like: variables that can be safely accessed from multiple
threads. Since learning about them isn&#x27;t the point of this lesson,
I&#x27;ll defer further questions about the usage of these types to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;index.html&quot;&gt;their
API
documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Our separate thread is going to run in a loop. As long as the
&lt;code&gt;AtomicBool&lt;&#x2F;code&gt; is &lt;code&gt;true&lt;&#x2F;code&gt;, it will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sleep for a given number of milliseconds&lt;&#x2F;li&gt;
&lt;li&gt;Print a message to the console&lt;&#x2F;li&gt;
&lt;li&gt;Increment the &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; counter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The series of examples we&#x27;ll be looking at will then try different
approaches to observing the changes in the counter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interval&quot;&gt;Interval&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to call this thing an &lt;code&gt;Interval&lt;&#x2F;code&gt;, since it somewhat
represents a &lt;code&gt;setInterval&lt;&#x2F;code&gt; call in Javascript.  Go ahead and start a
new project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new interval --bin
$ cd interval
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to put the code for our &lt;code&gt;Interval&lt;&#x2F;code&gt; into a separate
module. First, put the following code into &lt;code&gt;src&#x2F;interval.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Arc&amp;lt;AtomicUsize&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;still_running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Arc&amp;lt;AtomicBool&amp;gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Interval thread shutting down&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.still_running.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, Ordering::SeqCst);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Interval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;from_millis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;millis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Interval {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; duration = Duration::from_millis(millis);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; counter = Arc::new(AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; counter_clone = counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; still_running = Arc::new(AtomicBool::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; still_running_clone = still_running.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Interval thread launched&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; still_running_clone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Ordering::SeqCst) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(duration);
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; old = counter_clone.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, Ordering::SeqCst);
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Interval thread still alive, value was: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, old);
            }
        });

        Interval {
            counter,
            still_running,
        }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Ordering::SeqCst)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s provide a minimal &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; which uses this &lt;code&gt;Interval&lt;&#x2F;code&gt;
data type:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; 2 seconds
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Iteration number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, counter is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
        std::thread::sleep(duration);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should see something like the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iteration number 1, counter is 0
Interval thread launched
Interval thread still alive, value was: 0
Interval thread still alive, value was: 1
Interval thread still alive, value was: 2
Iteration number 2, counter is 3
Interval thread still alive, value was: 3
Interval thread still alive, value was: 4
...
Interval thread still alive, value was: 33
Interval thread still alive, value was: 34
Iteration number 10, counter is 35
Interval thread still alive, value was: 35
Interval thread still alive, value was: 36
Interval thread still alive, value was: 37
Interval thread still alive, value was: 38
Interval thread shutting down
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hurrah, we have some concurrent communication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problems-with-this-approach&quot;&gt;Problems with this approach&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing that jumps out as a problem is that we&#x27;re missing some updates in the main thread. Notice how the counter jumps from 0 to 3. This is obviously a problem with the interval set in the main thread: we&#x27;re delaying for 2 seconds instead of half a second. Let&#x27;s instead delay for a tenth of a second (100ms) in the main thread, and check if the value has changed since last time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; It&#x27;s still possible we&#x27;ll miss some updates this way, since
&lt;code&gt;sleep&lt;&#x2F;code&gt; guarantees a thread will sleep &lt;em&gt;at least&lt;&#x2F;em&gt; a given amount of
time, but may sleep longer. However, by having such a large
difference, we&#x27;re fairly certain we&#x27;ll catch all of the updates.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; 0.1 seconds
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; last = interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr = interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr != last {
            last = curr;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Iteration number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, counter is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, curr);
        }

        std::thread::sleep(duration);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had to increase the number of iterations to 50, because so many of
our main thread iterations end up showing no change in the
counter. Here&#x27;s an example of running this on my machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Interval thread launched
Interval thread still alive, value was: 0
Iteration number 6, counter is 1
Interval thread still alive, value was: 1
Iteration number 11, counter is 2
Interval thread still alive, value was: 2
Iteration number 16, counter is 3
Interval thread still alive, value was: 3
Iteration number 21, counter is 4
Interval thread still alive, value was: 4
Iteration number 26, counter is 5
Interval thread still alive, value was: 5
Iteration number 31, counter is 6
Interval thread still alive, value was: 6
Iteration number 36, counter is 7
Interval thread still alive, value was: 7
Iteration number 41, counter is 8
Interval thread still alive, value was: 8
Iteration number 46, counter is 9
Interval thread still alive, value was: 9
Interval thread shutting down
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We didn&#x27;t lose any counter updates here, but from the bumps in
interval thread numbers, we can see that we&#x27;re wasting a lot of time
in the main thread checking numbers that aren&#x27;t changing.&lt;&#x2F;p&gt;
&lt;p&gt;Another problem that&#x27;s less obvious is that we&#x27;re dedicating an entire
OS thread to this sleep-and-check iteration. In our simple program,
that&#x27;s not a big deal. But imagine we decided we wanted to have 50
different similar tasks going on. It would require 49 extra threads,
most of which would sit around &lt;code&gt;sleep&lt;&#x2F;code&gt;ing the majority of the
time. That&#x27;s highly wasteful. We should be able to do better.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, and perhaps least important for the moment, this is all
rather ad hoc. It seems like a common need to be able to abstract over
&amp;quot;this thing will produce a value in the future.&amp;quot; Even though this
seems like the least important problem, we&#x27;ll start by solving it
first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future-trait&quot;&gt;The Future trait&lt;&#x2F;h2&gt;
&lt;p&gt;Who&#x27;d have thought that our meandering would naturally lead to one of
the topics mentioned in this lesson&#x27;s title! You may have noticed a
pattern that developed in the &lt;code&gt;main&lt;&#x2F;code&gt; thread&#x27;s loop:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Check if a new value is available&lt;&#x2F;li&gt;
&lt;li&gt;Use it if it is available&lt;&#x2F;li&gt;
&lt;li&gt;Skip if it isn&#x27;t available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s exactly what the &lt;code&gt;Future&lt;&#x2F;code&gt; trait allows us to do, with one
addition: it also allows for error handling. We&#x27;re not going to worry
about that for now, since my code doesn&#x27;t have any errors :).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll start by adding the &lt;code&gt;futures&lt;&#x2F;code&gt; crate as a dependency. In
&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s add a new module to provide a struct that will provide a
&lt;code&gt;Future&lt;&#x2F;code&gt; implementation. Behold, &lt;code&gt;src&#x2F;future.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;futures::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalFuture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Interval,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalFuture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Interval) -&amp;gt; IntervalFuture {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; last = interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        IntervalFuture { interval, last }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalFuture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.last {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::NotReady)
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.last = curr;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(curr))
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to own an &lt;code&gt;Interval&lt;&#x2F;code&gt; and the last value we provided, just
like our &lt;code&gt;main&lt;&#x2F;code&gt; loop used to. The &lt;code&gt;new&lt;&#x2F;code&gt; method is fairly
straightforward. For the &lt;code&gt;impl Future&lt;&#x2F;code&gt;, we need to define three
things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The thing which will be returned by this type when ready. In our
case, it&#x27;s the counter value, which is a &lt;code&gt;usize&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The type of errors that can occur. We don&#x27;t have any errors, so we
use &lt;code&gt;()&lt;&#x2F;code&gt;. (The Haskeller in me screams that we should use
&lt;code&gt;Void&lt;&#x2F;code&gt;. Soon enough, we&#x27;ll be able to use
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.never.html&quot;&gt;&lt;code&gt;never&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.)&lt;&#x2F;li&gt;
&lt;li&gt;A function &lt;code&gt;poll&lt;&#x2F;code&gt;, which returns a &lt;code&gt;Result&lt;&#x2F;code&gt;. In the error case, this
will be our &lt;code&gt;Self::Error&lt;&#x2F;code&gt;. In the success case, this is an &lt;code&gt;Async&lt;&#x2F;code&gt;
enum type. As we can see in our method body, this is either a
&lt;code&gt;Ready&lt;&#x2F;code&gt; variant with the value, or &lt;code&gt;NotReady&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The logic in our function is the same as before, so I won&#x27;t comment on
implementation. Back in our &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;, instead of playing around
with the &lt;code&gt;curr&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;last&lt;&#x2F;code&gt; logic, we can just pattern match on the result
of &lt;code&gt;poll()&lt;&#x2F;code&gt;ing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::future::IntervalFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;futures::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = IntervalFuture::new(interval);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; 0.1 seconds

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(curr)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Iteration number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, counter is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, curr);
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::NotReady) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; unreachable!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
        }

        std::thread::sleep(duration);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arguably a minor improvement on the previous code, though nothing
major. But congratulations, you&#x27;re now officially using the &lt;code&gt;futures&lt;&#x2F;code&gt;
crate!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-poll-type-definition&quot;&gt;The Poll type definition&lt;&#x2F;h3&gt;
&lt;p&gt;Just a minor helper to mention. The type &lt;code&gt;Result&amp;lt;Async&amp;lt;Self::Item&amp;gt;, Self::Error&amp;gt;&lt;&#x2F;code&gt; may look a bit unwieldy to you. If so, you&#x27;ll be happy
to learn about the &lt;code&gt;Poll&lt;&#x2F;code&gt; type definition, which lets you replace the
above with &lt;code&gt;Poll&amp;lt;Self::Item, Self::Error&amp;gt;&lt;&#x2F;code&gt;. Not a big deal, but
important to recognize as you&#x27;re reading other code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-tokio-executor&quot;&gt;The tokio executor&lt;&#x2F;h2&gt;
&lt;p&gt;Right now, we&#x27;re running our own executor in our &lt;code&gt;main&lt;&#x2F;code&gt; function:
we&#x27;re manually looping, delaying, etc. Besides tedium, we&#x27;ve already
mentioned some downsides to this above:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We need a single thread per task we wish to perform&lt;&#x2F;li&gt;
&lt;li&gt;We need to implement some kind of guess-and-check thread sleeping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s time to pull out the big guns, and tokio this thing. We&#x27;ll end up
losing some functionality first, and then we&#x27;ll build it back.&lt;&#x2F;p&gt;
&lt;p&gt;First, add &lt;code&gt;tokio = &amp;quot;0.1&amp;quot;&lt;&#x2F;code&gt; to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. Now, let&#x27;s try using
the tokio executor by calling &lt;code&gt;tokio::run&lt;&#x2F;code&gt; on a &lt;code&gt;Future&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::future::IntervalFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = IntervalFuture::new(interval);

    tokio::run(interval_future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fails with a compilation error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;E0271&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mismatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; resolving `&amp;lt;future::IntervalFuture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;futures::Future&amp;gt;::Item == ()`
  --&amp;gt; src&#x2F;main.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::run(interval_future)
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|     ^^^^^^^^^^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, found ()
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= note: expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;`
              found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; `()`
   = note: required by `tokio::run`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;tokio::run&lt;&#x2F;code&gt; function expects a &lt;code&gt;Future&lt;&#x2F;code&gt; where the &lt;code&gt;Item&lt;&#x2F;code&gt; is &lt;code&gt;()&lt;&#x2F;code&gt;,
but ours is &lt;code&gt;usize&lt;&#x2F;code&gt;. This kind of makes sense anyway: don&#x27;t we want to
write some code to actually do something when we get a value?&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to fix this, first the overly painful way, and then the
pleasant way. That will also help you appreciate why lesson 5 spent so
much time on closures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;define-an-adapter-future&quot;&gt;Define an adapter Future&lt;&#x2F;h3&gt;
&lt;p&gt;Remember how you can define &lt;code&gt;Iterator&lt;&#x2F;code&gt;s that consume other &lt;code&gt;Iterator&lt;&#x2F;code&gt;s
and compose more powerful streams? Well, you can do the same thing
with &lt;code&gt;Future&lt;&#x2F;code&gt;s. Let&#x27;s define a new type that will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wrap around an &lt;code&gt;IntervalFuture&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Print the new value whenever it&#x27;s ready&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll put this in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; for now, it won&#x27;t last long anyway.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::future::IntervalFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalPrinter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(IntervalFuture);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalPrinter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(curr)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(()))
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::NotReady) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::NotReady),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e),
        }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = IntervalFuture::new(interval);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_printer = IntervalPrinter(interval_future);

    tokio::run(interval_printer)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compile the code, but don&#x27;t run it yet. This is relatively
straight-forward given all of the types and traits we&#x27;ve seen, but
it&#x27;s obviously tedious. Let&#x27;s start off with a minor simplification.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-try-ready-macro&quot;&gt;The try_ready macro&lt;&#x2F;h3&gt;
&lt;p&gt;The body of poll spends a lot of lines of code to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pattern match&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s &lt;code&gt;NotReady&lt;&#x2F;code&gt;, return &lt;code&gt;NotReady&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s an &lt;code&gt;Err&lt;&#x2F;code&gt;, return the &lt;code&gt;Err&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a repetitive pattern, and is pretty similar to the error
handling we saw previously in lesson 3. The futures crate provides a
macro, &lt;code&gt;try_ready!&lt;&#x2F;code&gt;, to deal with this annoyance. Add the following
above the &lt;code&gt;extern crate futures;&lt;&#x2F;code&gt; in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then your implementation of &lt;code&gt;poll&lt;&#x2F;code&gt; can be simplified to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try_ready!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(()))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice! Compile, and again, don&#x27;t run. (Getting curious yet why I keep
saying that? We&#x27;ll find out soon, just one more pitstop first.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;i-need-some-closure&quot;&gt;I need some closure&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s amazing I&#x27;ve made it to lesson 7 in this crash course without
making that pun. Obviously, defining an entire struct and &lt;code&gt;Future&lt;&#x2F;code&gt;
implementation is a bit overkill to just print a line. Fortunately,
the authors of the &lt;code&gt;futures&lt;&#x2F;code&gt; crate noticed this too. There are a
number of combinators built into the &lt;code&gt;Future&lt;&#x2F;code&gt; trait that make it easy
to chain things together. We&#x27;re going to use the &lt;code&gt;and_then&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::future::IntervalFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = IntervalFuture::new(interval);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_printer = interval_future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;curr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
        futures::future::ok(())
    });

    tokio::run(interval_printer)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s much nicer! If you&#x27;re anything like me though, the
&lt;code&gt;futures::future::ok(())&lt;&#x2F;code&gt; is bothering you. What purpose does it serve
there? This is a vital part of the design of futures, which we&#x27;ll be
taking advantage of quite a bit going forward. It allows us to create
chains of actions to run as each bit of async I&#x2F;O completes. For now,
we don&#x27;t want to do anything else after we print the first value from
the counter, so we just return &lt;code&gt;futures::future::ok(())&lt;&#x2F;code&gt;, which means
&amp;quot;don&#x27;t do anything, and return the item &lt;code&gt;()&lt;&#x2F;code&gt;&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 1&lt;&#x2F;strong&gt; There&#x27;s another method, &lt;code&gt;.map&lt;&#x2F;code&gt;, which is actually a
better choice for us here than &lt;code&gt;.and_then&lt;&#x2F;code&gt;. Try rewriting the code
above to use &lt;code&gt;.map&lt;&#x2F;code&gt;. Note: no solution provided to this one.&lt;&#x2F;p&gt;
&lt;p&gt;Out of curiosity, what&#x27;s the type of &lt;code&gt;interval_printer&lt;&#x2F;code&gt;? Let&#x27;s use the
dumb trick from before of giving it the wrong type. Insert something
silly like &lt;code&gt;let interval_printer: bool = ...&lt;&#x2F;code&gt; and try compiling,
you&#x27;ll get some type like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;futures::AndThen&amp;lt;
  future::IntervalFuture,
  futures::FutureResult&amp;lt;(), ()&amp;gt;,
  [closure@src&#x2F;main.rs:14:59: 17:6]
&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If this is starting to look a bit like &lt;code&gt;Iterator&lt;&#x2F;code&gt; types, that&#x27;s by
design. Just like &lt;code&gt;Iterator&lt;&#x2F;code&gt;s, &lt;code&gt;Future&lt;&#x2F;code&gt;s capture a large amount of
information in the types themselves about what they&#x27;ll do. This allows
&lt;code&gt;Future&lt;&#x2F;code&gt;s to compile down to highly efficient code, living up to the
Rust mantra of zero-cost abstractions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;finally-run-it&quot;&gt;Finally, run it!&lt;&#x2F;h3&gt;
&lt;p&gt;Is the suspense killing you? Alright, your moment has arrived. What
happens when you run &lt;code&gt;cargo run&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run
Interval thread launched
Interval thread shutting down
Interval thread still alive, value was: 0
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that&#x27;s it. It hangs. It doesn&#x27;t print out the message we
painstakingly added with &lt;code&gt;and_then&lt;&#x2F;code&gt;. I&#x27;m a complete failure, my life
is in ruins.&lt;&#x2F;p&gt;
&lt;p&gt;After an hour to myself to contemplate my life and a few shots of
whiskey, things started to get clear. In our original implementation,
we had a really wasteful loop in the main function. It kept checking
if the counter had changed. We did that with our &lt;code&gt;Future&lt;&#x2F;code&gt;
implementation too at first, sleeping and then checking again for a
&lt;code&gt;NotReady&lt;&#x2F;code&gt;. But tokio probably &lt;em&gt;isn&#x27;t&lt;&#x2F;em&gt; doing that, right? (The answer
is yes, right.)&lt;&#x2F;p&gt;
&lt;p&gt;Instead of doing the silly wasteful thing, the &lt;code&gt;futures&lt;&#x2F;code&gt; crate is far
smarter. It has a mechanism to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;determine which task is trying to get access to the data provided by
this future, and then&lt;&#x2F;li&gt;
&lt;li&gt;notify that task that new data is available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1&#x2F;futures&#x2F;task&#x2F;fn.current.html&quot;&gt;&lt;code&gt;futures::task::current()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function gives us the current task being run, as a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1&#x2F;futures&#x2F;task&#x2F;struct.Task.html&quot;&gt;&lt;code&gt;Task&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
struct. That struct has a method,
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1&#x2F;futures&#x2F;task&#x2F;struct.Task.html#method.notify&quot;&gt;&lt;code&gt;notify&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
to let the task know that more data is available.&lt;&#x2F;p&gt;
&lt;p&gt;In our program, we have the logic split between &lt;code&gt;Interval&lt;&#x2F;code&gt; and
&lt;code&gt;IntervalFuture&lt;&#x2F;code&gt;. &lt;code&gt;IntervalFuture&lt;&#x2F;code&gt; will need to be responsible for
calling the &lt;code&gt;current()&lt;&#x2F;code&gt; function (give some thought as to why that&#x27;s
the case). The changes needed to make this work are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add a new field to &lt;code&gt;Interval&lt;&#x2F;code&gt; to hold an &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;Option&amp;lt;Task&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;
(yes, that&#x27;s a mouthful), and initialize correctly.&lt;&#x2F;li&gt;
&lt;li&gt;Each time we call &lt;code&gt;fetch_add&lt;&#x2F;code&gt; and update the counter, also call
&lt;code&gt;notify()&lt;&#x2F;code&gt; on that task, if it&#x27;s there.&lt;&#x2F;li&gt;
&lt;li&gt;Provide a method &lt;code&gt;set_task&lt;&#x2F;code&gt; to set the &lt;code&gt;Task&lt;&#x2F;code&gt; on an &lt;code&gt;Interval&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When returning &lt;code&gt;NotReady&lt;&#x2F;code&gt; in &lt;code&gt;IntervalFuture&lt;&#x2F;code&gt;, call &lt;code&gt;set_task&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Exercise 2&lt;&#x2F;strong&gt; Take a stab at implementing these four changes before
looking at the solution below. A hint on some features of Rust we
haven&#x27;t covered yet: you&#x27;ll end up wanting to pattern match on the
&lt;code&gt;Option&lt;&#x2F;code&gt; held inside the &lt;code&gt;Mutex&lt;&#x2F;code&gt;. You&#x27;ll want to pattern match by
reference, which will require some code that looks like &lt;code&gt;Some(ref task) =&amp;gt;&lt;&#x2F;code&gt;. And the final output should look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Interval thread launched
Interval thread still alive, value was: 0
Counter is: 1
Interval thread shutting down
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to be sure, you can see the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;rush-crash-course-tokio-exercise-2&#x2F;tree&#x2F;03c5b9029263ce36e626e877e986a281c9334d4e&quot;&gt;initial version of the code on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution-2&quot;&gt;Solution 2&lt;&#x2F;h3&gt;
&lt;p&gt;You can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;rush-crash-course-tokio-exercise-2&#x2F;commit&#x2F;1c58bf4df946763f5f9f0773235e975968260ba9&quot;&gt;check out the
diff&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;rush-crash-course-tokio-exercise-2&#x2F;tree&#x2F;1c58bf4df946763f5f9f0773235e975968260ba9&quot;&gt;full
solution&lt;&#x2F;a&gt;
on Github. Here&#x27;s the diff included inline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;diff --git a&#x2F;src&#x2F;future.rs b&#x2F;src&#x2F;future.rs
index 9aaee3c..e231e7b 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--- a&#x2F;src&#x2F;future.rs
+++ b&#x2F;src&#x2F;future.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;@@ -22,6 +22,8 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;impl Future for IntervalFuture {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;     fn poll(&amp;amp;mut self) -&amp;gt; Result&amp;lt;Async&amp;lt;Self::Item&amp;gt;, Self::Error&amp;gt; {
         let curr = self.interval.get_counter();
         if curr == self.last {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+            let task = futures::task::current();
+            self.interval.set_task(task);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;             Ok(Async::NotReady)
         } else {
             self.last = curr;
diff --git a&#x2F;src&#x2F;interval.rs b&#x2F;src&#x2F;interval.rs
index 044e2ca..8013ac6 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--- a&#x2F;src&#x2F;interval.rs
+++ b&#x2F;src&#x2F;interval.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;@@ -1,12 +1,14 @@
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;-use std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+use std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; use std::thread::{sleep, spawn};
 use std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+use futures::task::Task;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
 #[derive(Clone)]
 pub struct Interval {
     counter: Arc&amp;lt;AtomicUsize&amp;gt;,
     still_running: Arc&amp;lt;AtomicBool&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+    task: Arc&amp;lt;Mutex&amp;lt;Option&amp;lt;Task&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; }

 impl Drop for Interval {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;@@ -26,22 +28,37 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;impl Interval {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;         let still_running = Arc::new(AtomicBool::new(true));
         let still_running_clone = still_running.clone();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+        let task: Arc&amp;lt;Mutex&amp;lt;Option&amp;lt;Task&amp;gt;&amp;gt;&amp;gt; = Arc::new(Mutex::new(None));
+        let task_clone = task.clone();
+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;         spawn(move || {
             println!(&amp;quot;Interval thread launched&amp;quot;);
             while still_running_clone.load(Ordering::SeqCst) {
                 sleep(duration);
                 let old = counter_clone.fetch_add(1, Ordering::SeqCst);
                 println!(&amp;quot;Interval thread still alive, value was: {}&amp;quot;, old);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+
+                let task = task_clone.lock().unwrap();
+                match *task {
+                    None =&amp;gt; (),
+                    Some(ref task) =&amp;gt; task.notify(),
+                };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;             }
         });

         Interval {
             counter,
             still_running,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+            task,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;         }
     }

     pub fn get_counter(&amp;amp;self) -&amp;gt; usize {
         self.counter.load(Ordering::SeqCst)
     }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+
+    pub fn set_task(&amp;amp;mut self, task: Task) {
+        let mut guard = self.task.lock().unwrap();
+        *guard = Some(task);
+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hurrah, we finally have a working tokio program!&lt;&#x2F;p&gt;
&lt;p&gt;In case you&#x27;re worried about how complex that was, don&#x27;t
be. Notification is a vital aspect of how tokio works
internally. However, in most cases, you won&#x27;t be creating your own
primitive &lt;code&gt;Future&lt;&#x2F;code&gt;s, but instead dealing with existing ones provided
by tokio or other libraries. Those existing &lt;code&gt;Future&lt;&#x2F;code&gt;s will provide the
necessary notification logic. You&#x27;ll simply need to obey this one
rule:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Only return a &lt;code&gt;NotReady&lt;&#x2F;code&gt; from a &lt;code&gt;poll&lt;&#x2F;code&gt; function if you received a
&lt;code&gt;NotReady&lt;&#x2F;code&gt; from an underlying &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;just-one-value&quot;&gt;Just one value?&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a bit disappointing that our wonderful long running counter only
ends up printing a single value. Can we create some kind of a loop? A
simple approach like the following doesn&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_printer = interval_future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;curr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
    interval_printer
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This isn&#x27;t Haskell, we can&#x27;t recursively refer to &lt;code&gt;interval_printer&lt;&#x2F;code&gt;
we&#x27;re in the middle of defining. Go ahead and take a few other stabs
at doing something like that, and you&#x27;ll eventually get frustrated and
go back to the whiskey. Digging through the &lt;code&gt;futures&lt;&#x2F;code&gt; docs, a helper
function like
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1.25&#x2F;futures&#x2F;future&#x2F;fn.loop_fn.html&quot;&gt;&lt;code&gt;loop_fn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
looks promising, but I didn&#x27;t see a simple way to make it work in this
case. (Please let me know if I missed something!) I ended up with
something wonky like this before stopping:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = Arc::new(Mutex::new(IntervalFuture::new(interval)));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_printer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(interval_future, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interval_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future_clone = interval_future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        interval_future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;curr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
            futures::future::ok(Continue(interval_future_clone))
        })
    });

    tokio::run(interval_printer)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;another-struct&quot;&gt;Another struct!&lt;&#x2F;h3&gt;
&lt;p&gt;Like before, we&#x27;re going to define another helper type to implement
this concept of looping. Then we&#x27;ll see that this problem has already
been solved better in the &lt;code&gt;futures&lt;&#x2F;code&gt; crate itself, but we&#x27;ll get there
soon.&lt;&#x2F;p&gt;
&lt;p&gt;We want to define a new struct, &lt;code&gt;KeepPrinting&lt;&#x2F;code&gt;, which is a newtype
around an &lt;code&gt;IntervalFuture&lt;&#x2F;code&gt;. It&#x27;s going to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Have a &lt;code&gt;Future&lt;&#x2F;code&gt; implementation&lt;&#x2F;li&gt;
&lt;li&gt;Have &lt;code&gt;Item = ()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use a &lt;code&gt;loop&lt;&#x2F;code&gt; in its implementation&lt;&#x2F;li&gt;
&lt;li&gt;Use the &lt;code&gt;try_ready!&lt;&#x2F;code&gt; macro&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Exercise 3&lt;&#x2F;strong&gt; Try implementing &lt;code&gt;KeepPrinting&lt;&#x2F;code&gt; and using it in the
&lt;code&gt;main&lt;&#x2F;code&gt; function. Solution follows immediately, but try not to cheat!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::future::IntervalFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;KeepPrinting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(IntervalFuture);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;KeepPrinting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;(), ()&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try_ready!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
        }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_future = IntervalFuture::new(interval);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; keep_printing = KeepPrinting(interval_future);

    tokio::run(keep_printing)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, just like that, we get an infinitely looping program. This almost
looks like something that we could have done with &lt;code&gt;Iterator&lt;&#x2F;code&gt;s. Which
makes me wonder... is there something like &lt;code&gt;Iterator&lt;&#x2F;code&gt;s in &lt;code&gt;futures&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;streams&quot;&gt;Streams&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;code&gt;Future&lt;&#x2F;code&gt; is an action with a delayed single result. A &lt;code&gt;Stream&lt;&#x2F;code&gt; is a
stream of results, like an &lt;code&gt;Iterator&lt;&#x2F;code&gt;, with a delay between each
value.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;, add &lt;code&gt;mod stream;&lt;&#x2F;code&gt; and then edit &lt;code&gt;src&#x2F;stream.rs&lt;&#x2F;code&gt;. The
file will end up looking remarkably similar to &lt;code&gt;src&#x2F;future.rs&lt;&#x2F;code&gt;,
except:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Call the struct &lt;code&gt;IntervalStream&lt;&#x2F;code&gt; instead of &lt;code&gt;IntervalFuture&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Provide an &lt;code&gt;impl Stream for IntervalStream&lt;&#x2F;code&gt; instead of &lt;code&gt;impl Future&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Follow the compiler errors to fix it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Within the &lt;code&gt;main&lt;&#x2F;code&gt; function, instead of using &lt;code&gt;KeepPrinting&lt;&#x2F;code&gt; or
anything else, we&#x27;ll want to create an &lt;code&gt;IntervalStream&lt;&#x2F;code&gt;
value. However, &lt;code&gt;tokio::run&lt;&#x2F;code&gt; needs a &lt;code&gt;Future&lt;&#x2F;code&gt;, not a &lt;code&gt;Stream&lt;&#x2F;code&gt;, to
run. Fortunately, there&#x27;s a helper function, &lt;code&gt;for_each&lt;&#x2F;code&gt;, that runs a
given &lt;code&gt;closure&lt;&#x2F;code&gt; on each value in the stream.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 4&lt;&#x2F;strong&gt; Try to implement &lt;code&gt;src&#x2F;stream.rs&lt;&#x2F;code&gt; and
&lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;. Solution to follow.&lt;&#x2F;p&gt;
&lt;p&gt;The trickiest bit for me when first learning &lt;code&gt;for_each&lt;&#x2F;code&gt; was to realize
that, like &lt;code&gt;and_then&lt;&#x2F;code&gt;, it needs to end with a &lt;code&gt;Future&lt;&#x2F;code&gt;. I don&#x27;t know
if that was just my own shortcoming, or a common issue. In any event,
if you struggled to realize you needed something like &lt;code&gt;future::ok(())&lt;&#x2F;code&gt;
at the end of your closure, you&#x27;re in good company.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, the &lt;code&gt;poll&lt;&#x2F;code&gt; function for a &lt;code&gt;Stream&lt;&#x2F;code&gt; is slightly different,
in returning an &lt;code&gt;Option&amp;lt;Item&amp;gt;&lt;&#x2F;code&gt;. This is similar to how &lt;code&gt;Iterator&lt;&#x2F;code&gt;
works. In our case, we have an infinite stream, so we never provide
the &lt;code&gt;None&lt;&#x2F;code&gt; case.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, here&#x27;s &lt;code&gt;src&#x2F;stream.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;futures::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Interval,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Interval) -&amp;gt; IntervalStream {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; last = interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        IntervalStream { interval, last }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntervalStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; curr == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.last {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; task = futures::task::current();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.interval.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(task);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::NotReady)
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.last = curr;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(curr)))
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::interval::Interval;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::stream::IntervalStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval = Interval::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; half a second
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; interval_stream = IntervalStream::new(interval);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = interval_stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;curr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, curr);
        futures::future::ok(())
    });

    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 5&lt;&#x2F;strong&gt; Like &lt;code&gt;Iterator&lt;&#x2F;code&gt;s, &lt;code&gt;Stream&lt;&#x2F;code&gt;s have helper methods that
you can use to build up more complex things. For example, try throwing
in &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;take&lt;&#x2F;code&gt; to print only the first 10 counter values, but
double them before printing. (No solution provided.)&lt;&#x2F;p&gt;
&lt;p&gt;This is all beginning to fit together nicely! While there are still
details to learn in the &lt;code&gt;futures&lt;&#x2F;code&gt; crate, you&#x27;ve got most of the big
ideas down. The next bit is to get familiar with the API in tokio, but
relatively speaking this is less mind-bending. To hammer home what
we&#x27;ve done so far, we&#x27;ll hit a few exercises, and then continue with
tokio.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-6&quot;&gt;Exercise 6&lt;&#x2F;h2&gt;
&lt;p&gt;Define a new struct &lt;code&gt;MyOk&lt;&#x2F;code&gt; such that this &lt;code&gt;main&lt;&#x2F;code&gt; function works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = MyOk::new(name).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
        MyOk::new(())
    });

    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hint: before cheating and looking at the solution, here&#x27;s one piece of
help: you&#x27;ll want an &lt;code&gt;Option&lt;&#x2F;code&gt; inside the &lt;code&gt;MyOk&lt;&#x2F;code&gt; newtype, and it&#x27;s
invalid to call &lt;code&gt;poll&lt;&#x2F;code&gt; on it twice.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution-6&quot;&gt;Solution 6&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyOk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyOk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: T) -&amp;gt; MyOk&amp;lt;T&amp;gt; {
        MyOk(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(t))
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyOk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= T;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;T, ()&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-7&quot;&gt;Exercise 7&lt;&#x2F;h2&gt;
&lt;p&gt;Use &lt;code&gt;iter_ok&lt;&#x2F;code&gt; to convert the range &lt;code&gt;1..11&lt;&#x2F;code&gt; to a &lt;code&gt;Stream&lt;&#x2F;code&gt;, and then
collect it as a &lt;code&gt;Vec&lt;&#x2F;code&gt; and print it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution-7&quot;&gt;Solution 7&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    tokio::run(stream::iter_ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
        future::ok(())
    }))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;async-i-o&quot;&gt;Async I&#x2F;O&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve played around with the &lt;code&gt;futures&lt;&#x2F;code&gt; crate by creating a fake async
I&#x2F;O source of data (the &lt;code&gt;Interval&lt;&#x2F;code&gt;). We&#x27;ve built up &lt;code&gt;Future&lt;&#x2F;code&gt;s and
&lt;code&gt;Stream&lt;&#x2F;code&gt;s in that world. And we&#x27;ve used tokio&#x27;s executor to run these
things. It&#x27;s now time to take it to use some real async I&#x2F;O.&lt;&#x2F;p&gt;
&lt;p&gt;Most async I&#x2F;O we care about will end up being network
traffic. Filesystem operations don&#x27;t always play nicely with async I&#x2F;O
at an operating system level. That said, to get our feet wet, let&#x27;s
play with a filesystem based example.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll want to look at the docs quite a bit, you can &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.11&#x2F;tokio&#x2F;&quot;&gt;find them on
docs.rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;list-files-in-a-directory&quot;&gt;List files in a directory&lt;&#x2F;h2&gt;
&lt;p&gt;If you look through the docs above, you may find the function
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.11&#x2F;tokio&#x2F;fs&#x2F;fn.read_dir.html&quot;&gt;&lt;code&gt;read_dir&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. It
takes a path, and returns a &lt;code&gt;ReadDirFuture&lt;&#x2F;code&gt;. This is a standard
approach in tokio, like we had with &lt;code&gt;Iterator&lt;&#x2F;code&gt;s: simple wrapper
functions providing access to the structs that do the heavy
lifting. One thing to get used to in tokio is how to read these docs.&lt;&#x2F;p&gt;
&lt;p&gt;Click through on the &lt;code&gt;ReadDirFuture&lt;&#x2F;code&gt; struct. It has a &lt;code&gt;Future&lt;&#x2F;code&gt;
implementation, where &lt;code&gt;Item&lt;&#x2F;code&gt; is &lt;code&gt;ReadDir&lt;&#x2F;code&gt;, and &lt;code&gt;Error&lt;&#x2F;code&gt; is
&lt;code&gt;std::io::Error&lt;&#x2F;code&gt;. Before we deal with that &lt;code&gt;ReadDir&lt;&#x2F;code&gt;, let&#x27;s just get
something that compiles. Since this is still a crash course, we&#x27;ll
bash our heads against a brick wall each step of the way.&lt;&#x2F;p&gt;
&lt;p&gt;First, to call &lt;code&gt;read_dir&lt;&#x2F;code&gt;, we need a directory. Let&#x27;s use &lt;code&gt;&amp;quot;.&amp;quot;&lt;&#x2F;code&gt; (the
current directory). We&#x27;ll use command line arguments later. Here&#x27;s a
naive implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us a somewhat intimidating error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0271]: type mismatch resolving `&amp;lt;tokio_fs::read_dir::ReadDirFuture&amp;lt;&amp;amp;str&amp;gt; as tokio::prelude::Future&amp;gt;::Item == ()`
 --&amp;gt; src&#x2F;main.rs:8:5
  |
8 |     tokio::run(future)
  |     ^^^^^^^^^^ expected struct `tokio_fs::read_dir::ReadDir`, found ()
  |
  = note: expected type `tokio_fs::read_dir::ReadDir`
             found type `()`
  = note: required by `tokio::run`

error[E0271]: type mismatch resolving `&amp;lt;tokio_fs::read_dir::ReadDirFuture&amp;lt;&amp;amp;str&amp;gt; as tokio::prelude::Future&amp;gt;::Error == ()`
 --&amp;gt; src&#x2F;main.rs:8:5
  |
8 |     tokio::run(future)
  |     ^^^^^^^^^^ expected struct `std::io::Error`, found ()
  |
  = note: expected type `std::io::Error`
             found type `()`
  = note: required by `tokio::run`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, let me narrow that down for you:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;expected type `tokio_fs::read_dir::ReadDir`, found type `()`
expected type `std::io::Error`, found type `()`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, right! &lt;code&gt;tokio::run&lt;&#x2F;code&gt; requires that we have &lt;code&gt;Item&lt;&#x2F;code&gt; and &lt;code&gt;Error&lt;&#x2F;code&gt; as
&lt;code&gt;()&lt;&#x2F;code&gt;. We can modify the &lt;code&gt;Error&lt;&#x2F;code&gt; with &lt;code&gt;map_err&lt;&#x2F;code&gt;. Let&#x27;s just print out
the error if one occurs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
    ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That knocked out the first compilation error. Let&#x27;s also throw in a
&lt;code&gt;.and_then&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;readdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;FIXME: use this: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, readdir);
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh, we got this compilation error. Can you figure out how to solve it?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: the trait bound `(): tokio::prelude::Future` is not satisfied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my experience, when you see that, it almost always means: &amp;quot;I forgot
to add &lt;code&gt;future::ok(())&lt;&#x2F;code&gt;. Remember, &lt;code&gt;and_then&lt;&#x2F;code&gt; needs to end with the
next &lt;code&gt;Future&lt;&#x2F;code&gt; to run. Add that line, and your code should
compile. Running produces the output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;FIXME: use this: ReadDir(ReadDir(&amp;quot;.&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool! Now it&#x27;s time to look at the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio-fs&#x2F;0.1.3&#x2F;tokio_fs&#x2F;struct.ReadDir.html&quot;&gt;docs for
&lt;code&gt;ReadDir&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Instead
of a &lt;code&gt;Future&lt;&#x2F;code&gt; implementation, this has a &lt;code&gt;Stream&lt;&#x2F;code&gt;. Let&#x27;s shove a
&lt;code&gt;for_each&lt;&#x2F;code&gt; in there and see what happens.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; try to guess the errors in the code below before you compile it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;readdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
    readdir
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
        })
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two problems with this code:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It leaves an error type of &lt;code&gt;std::io::Error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It doesn&#x27;t include &lt;code&gt;future::ok(())&lt;&#x2F;code&gt; at the end of the closure
provided to &lt;code&gt;for_each&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Go ahead and fix those problems. To be sure we&#x27;re on the same page,
here&#x27;s my solution which compiles and runs successfully:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;readdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            readdir
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                    future::ok(())
                })
        })
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;duplicated-error-handling&quot;&gt;Duplicated error handling&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s a bit irritating that we have two identical &lt;code&gt;map_err&lt;&#x2F;code&gt; calls. We
have two different sources of errors: the initial &lt;code&gt;read_dir&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt;,
and then streaming the individual &lt;code&gt;DirEntry&lt;&#x2F;code&gt;s from it. However, the
type of the errors in both cases is the same:
&lt;code&gt;std::io::Error&lt;&#x2F;code&gt;. Therefore, we can move our error handling to the
end, and just do it once:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;readdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            readdir
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                    future::ok(())
                })
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;flattening&quot;&gt;Flattening&lt;&#x2F;h3&gt;
&lt;p&gt;It turns out that it&#x27;s common enough to have a &lt;code&gt;Future&lt;&#x2F;code&gt; that generates
another &lt;code&gt;Future&lt;&#x2F;code&gt;, and then we want to run that second &lt;code&gt;Future&lt;&#x2F;code&gt;, that
there&#x27;s a helper method for it &lt;code&gt;flatten()&lt;&#x2F;code&gt;. There&#x27;s &lt;em&gt;also&lt;&#x2F;em&gt; a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1.23&#x2F;futures&#x2F;future&#x2F;trait.Future.html#method.flatten_stream&quot;&gt;&lt;code&gt;flatten_stream()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
that does the same thing when a &lt;code&gt;Future&lt;&#x2F;code&gt; gives us a &lt;code&gt;Stream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 8&lt;&#x2F;strong&gt; Rewrite the code above to use &lt;code&gt;flatten_stream&lt;&#x2F;code&gt;. You
should end up with &lt;em&gt;no calls to &lt;code&gt;and_then&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;. Solution follows
immediately:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
            future::ok(())
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s somewhat boring to always print out what&#x27;s in the current
directory. Instead, let&#x27;s take all of the command line arguments
(skipping the first, which is the executable name), and list the
directory contents. We&#x27;ll use &lt;code&gt;stream::iter_ok&lt;&#x2F;code&gt; to convert the &lt;code&gt;Args&lt;&#x2F;code&gt;
&lt;code&gt;Iterator&lt;&#x2F;code&gt; into a &lt;code&gt;Stream&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = stream::iter_ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            fs::read_dir(dir)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                    future::ok(())
                })
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, this doesn&#x27;t compile. The full error message is large
(I encourage you to check it out yourself), but the first few lines
are sufficient to find the problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: `std::env::Args` cannot be sent between threads safely
  --&amp;gt; src&#x2F;main.rs:20:5
   |
20 |     tokio::run(future)
   |     ^^^^^^^^^^ `std::env::Args` cannot be sent between threads safely
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, darn. &lt;code&gt;Args&lt;&#x2F;code&gt; isn&#x27;t thread safe, and so cannot be converted into a
&lt;code&gt;Stream&lt;&#x2F;code&gt;. Fair enough: vectors to the rescue!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 9&lt;&#x2F;strong&gt; Create a vector of arguments before the definition of
&lt;code&gt;future&lt;&#x2F;code&gt; and use that.&lt;&#x2F;p&gt;
&lt;p&gt;Solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = stream::iter_ok(args)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            fs::read_dir(dir)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                    future::ok(())
                })
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;where-s-the-concurrency&quot;&gt;Where&#x27;s the concurrency?&lt;&#x2F;h3&gt;
&lt;p&gt;If you provide this program two different directories with a large
number of files, you may notice that it processes these directories
sequentially: it will print all of the files in the first directory,
and then all of the files in the second directory. Given that async
I&#x2F;O and concurrency usually go hand-in-hand, that may be a bit
surprising.&lt;&#x2F;p&gt;
&lt;p&gt;So far, we&#x27;ve only ever had a single task at a time. Our program
streams out the value of &lt;code&gt;args&lt;&#x2F;code&gt;, and for each one provides a
&lt;code&gt;Future&lt;&#x2F;code&gt;. That &lt;code&gt;Future&lt;&#x2F;code&gt; is run to completion, and then the next value
from &lt;code&gt;args&lt;&#x2F;code&gt; is processed.&lt;&#x2F;p&gt;
&lt;p&gt;What if we want to process each directory concurrently? To do that, we
need to &lt;em&gt;spawn&lt;&#x2F;em&gt; another task, the same way we would spawn a new
thread. Like &lt;code&gt;tokio::run&lt;&#x2F;code&gt;, &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; takes a &lt;code&gt;Future&lt;&#x2F;code&gt; where both
&lt;code&gt;Item&lt;&#x2F;code&gt; and &lt;code&gt;Error&lt;&#x2F;code&gt; are &lt;code&gt;()&lt;&#x2F;code&gt;. Here&#x27;s a more concurrent version of our
program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = stream::iter_ok(args)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(dir)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                future::ok(())
            })
            ;
        tokio::spawn(future);
        future::ok(())
    })
    ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how I&#x27;ve put &lt;code&gt;future::ok(())&lt;&#x2F;code&gt; after the
&lt;code&gt;tokio::spawn(future);&lt;&#x2F;code&gt; call. It turns out that&#x27;s not needed: &lt;code&gt;spawn&lt;&#x2F;code&gt;
returns a &lt;code&gt;Spawn&lt;&#x2F;code&gt; value, which behaves like &lt;code&gt;future::ok(())&lt;&#x2F;code&gt; (via its
&lt;code&gt;IntoFuture&lt;&#x2F;code&gt; implementation). So just remove &lt;code&gt;future::ok&lt;&#x2F;code&gt; and the
semicolon after &lt;code&gt;spawn&lt;&#x2F;code&gt;, and your code will still work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You may not notice the concurrency unless you have a large
number of files in each directory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skipping-the-vector&quot;&gt;Skipping the vector&lt;&#x2F;h3&gt;
&lt;p&gt;One final thing that annoyed me above is that &lt;code&gt;Vec&lt;&#x2F;code&gt;. It really seems
like we should be able to get away without it. We can&#x27;t convert &lt;code&gt;Args&lt;&#x2F;code&gt;
into a &lt;code&gt;Stream&lt;&#x2F;code&gt;, because that would require sending the value between
threads. But now we&#x27;ve got a new trick up our sleeves: spawning. What
if we never send the &lt;code&gt;Args&lt;&#x2F;code&gt; anywhere, but just spawn a bunch of tasks.&lt;&#x2F;p&gt;
&lt;p&gt;When I was first learning tokio, I&#x27;ll admit that I spent way more time
trying to figure out the trick I&#x27;m about to show you than I&#x27;m proud
of. We need to create a &lt;code&gt;Future&lt;&#x2F;code&gt;, then run a &lt;code&gt;for&lt;&#x2F;code&gt; loop inside of
it. How do we create a &lt;code&gt;Future&lt;&#x2F;code&gt; that lets us run some code without
waiting for anything else? We can use &lt;code&gt;future::ok(())&lt;&#x2F;code&gt; to create a
dummy &lt;code&gt;Future&lt;&#x2F;code&gt;, and then chain the next action together with
&lt;code&gt;and_then&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = future::ok(()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|()| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(dir)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                future::ok(())
            })
            ;
        tokio::spawn(future);
    }
    future::ok(())
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another approach, if you&#x27;re so inclined, is to use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.11&#x2F;tokio&#x2F;prelude&#x2F;future&#x2F;fn.poll_fn.html&quot;&gt;&lt;code&gt;future::poll_fn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; helper function. This takes a 0 argument function which returns a &lt;code&gt;Result&amp;lt;Async&amp;lt;Item&amp;gt;, Error&amp;gt;&lt;&#x2F;code&gt;, just like the &lt;code&gt;poll&lt;&#x2F;code&gt; method of &lt;code&gt;Future&lt;&#x2F;code&gt; does.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 10&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rewrite our program above to use &lt;code&gt;future::poll_fn&lt;&#x2F;code&gt;. Your program
should not use &lt;code&gt;and_then&lt;&#x2F;code&gt; at all.&lt;&#x2F;p&gt;
&lt;p&gt;Solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::fs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = future::poll_fn(|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = fs::read_dir(dir)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;flatten_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error reading directory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
                    future::ok(())
                })
                ;
            tokio::spawn(future);
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(()))
    });
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is all of this ceremony worth it for file system operations? Probably
not. Let&#x27;s get into something more interesting: network communications!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcp-client&quot;&gt;TCP client&lt;&#x2F;h2&gt;
&lt;p&gt;Rust&#x27;s standard library already provides really nice support for TCP
communications out of the box. For example, the following code will
print the full response headers and body from an HTTP request to
http:&#x2F;&#x2F;httpbin.org&#x2F;json:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::io::{Read, Write};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::net::TcpStream;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;std::error::Error&amp;gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stream = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.org:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &#x2F;json HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Host: httpbin.org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection: close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, std::str::from_utf8(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some simplifying assumptions here, like using &lt;code&gt;connection: close&lt;&#x2F;code&gt; so that we can use &lt;code&gt;read_to_end&lt;&#x2F;code&gt;, and assuming the response
body is properly UTF-8 encoded. But that&#x27;s not really an indictment of
the TCP support in the standard library.&lt;&#x2F;p&gt;
&lt;p&gt;The real problem is the same one we&#x27;ve been talking about throughout
this lesson: it hogs an entire OS thread blocking on a successful
write to and subsequent read from the network. Let&#x27;s look at how tokio
can help.&lt;&#x2F;p&gt;
&lt;p&gt;It looks like there&#x27;s a &lt;code&gt;TcpStream&lt;&#x2F;code&gt; type in
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;net&#x2F;struct.TcpStream.html&quot;&gt;&lt;code&gt;tokio::net::TcpStream&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. That
looks like a good place to start. It takes a
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;net&#x2F;addr&#x2F;enum.SocketAddr.html&quot;&gt;&lt;code&gt;SocketAddr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which we can probably make easily enough. And it returns a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;net&#x2F;tcp&#x2F;struct.ConnectFuture.html&quot;&gt;&lt;code&gt;ConnectFuture&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Let&#x27;s
start with some code that simple establishes a connection:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::net::ToSocketAddrs;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.org:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_socket_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;DNS resolution failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error connecting: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Got a stream: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, stream);
        });
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;to_socket_addrs&lt;&#x2F;code&gt; business isn&#x27;t our focus right now, so I&#x27;m going
to ignore it. Feel free as an exercise to improve the error handling
of that bit of code.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve got all of the familiar pieces here: define a &lt;code&gt;Future&lt;&#x2F;code&gt;, handle
errors, and use &lt;code&gt;map&lt;&#x2F;code&gt; to chain together the action to take with the
open connection.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look a bit more closely at that &lt;code&gt;stream&lt;&#x2F;code&gt; value passed to the
closure. It comes from a &lt;code&gt;ConnectFuture&lt;&#x2F;code&gt;, so we need to look at the
&lt;code&gt;Item&lt;&#x2F;code&gt; associated type there. And sure enough, if you check the docs,
you&#x27;ll see that it&#x27;s &lt;code&gt;TcpStream&lt;&#x2F;code&gt;. Great.&lt;&#x2F;p&gt;
&lt;p&gt;We used &lt;code&gt;write_all&lt;&#x2F;code&gt; in our original, non-async, blocking code. If I
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;prelude&#x2F;trait.AsyncWrite.html?search=write_all&quot;&gt;search for &lt;code&gt;write_all&lt;&#x2F;code&gt; in
tokio&lt;&#x2F;a&gt;,
I find that &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;io&#x2F;fn.write_all.html&quot;&gt;there&#x27;s such a helper
function&lt;&#x2F;a&gt;
which returns a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;io&#x2F;struct.WriteAll.html&quot;&gt;&lt;code&gt;WriteAll&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
&lt;code&gt;Future&lt;&#x2F;code&gt;. Something interesting:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write_all&lt;&#x2F;code&gt; takes two parameters: an &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt; and an
&lt;code&gt;AsRef&amp;lt;[u8]&amp;gt;&lt;&#x2F;code&gt;. This will work out to be our &lt;code&gt;TcpStream&lt;&#x2F;code&gt; and the data
to send.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Item&lt;&#x2F;code&gt; for &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt; is a pair of the variables &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;T&lt;&#x2F;code&gt;,
which turns out to be exactly the same as the parameters we passed
in.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Giving us back the stream we originally provided is vital to
continuing the connection. I didn&#x27;t see any documentation clarifying
the point of returning the byte buffer, but I believe it&#x27;s returned so
that, if desired, you can reuse a mutable buffer.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, let&#x27;s put this together and make our request:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::write_all;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::net::ToSocketAddrs;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &#x2F;json HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Host: httpbin.org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection: close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.org:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_socket_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;DNS resolution failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Write succeeded: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, stream))
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how I replaced the previous &lt;code&gt;map&lt;&#x2F;code&gt; with an &lt;code&gt;and_then&lt;&#x2F;code&gt; call, so
that I could provide another &lt;code&gt;Future&lt;&#x2F;code&gt; to be performed after the
connection was established.&lt;&#x2F;p&gt;
&lt;p&gt;Would it be too much to ask to &lt;em&gt;also&lt;&#x2F;em&gt; get a &lt;code&gt;read_to_end&lt;&#x2F;code&gt; function in
tokio? &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;io&#x2F;fn.read_to_end.html&quot;&gt;Nope, not at
all.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 11&lt;&#x2F;strong&gt; Use &lt;code&gt;read_to_end&lt;&#x2F;code&gt; to consume the entire response into
a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt;, and then print that out, using &lt;code&gt;std::str::from_utf8&lt;&#x2F;code&gt; and
being as careless with error handling as you like.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::net::ToSocketAddrs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::{read_to_end, write_all};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &#x2F;json HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Host: httpbin.org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection: close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.org:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_socket_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;DNS resolution failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, buffer)
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s = std::str::from_utf8(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, s);
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e));
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;streaming-to-a-file&quot;&gt;Streaming to a file&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll repeat for maximum annoyance: tokio is not intended for
asynchronous file operations. That said, there &lt;em&gt;is&lt;&#x2F;em&gt; a
&lt;code&gt;tokio::fs::File&lt;&#x2F;code&gt; struct which we can use. Let&#x27;s try to write the
response contents to &lt;code&gt;httpbin.json&lt;&#x2F;code&gt; instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, buffer)
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
        File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(file, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| ())
        })
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, the compiler doesn&#x27;t like this too much:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: the trait bound `std::fs::File: tokio::io::AsyncWrite` is not satisfied
  --&amp;gt; src&#x2F;main.rs:25:17
   |
25 |                 write_all(file, &amp;amp;buffer).map(|_| ())
   |                 ^^^^^^^^^ the trait `tokio::io::AsyncWrite` is not implemented for `std::fs::File`
   |
   = note: required by `tokio::io::write_all
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, I guess that makes sense: you can&#x27;t asynchronously write to a
&lt;code&gt;File&lt;&#x2F;code&gt;, so &lt;code&gt;tokio::io::write_all&lt;&#x2F;code&gt; isn&#x27;t going to work. Fortunately,
&lt;code&gt;File&lt;&#x2F;code&gt; &lt;em&gt;does&lt;&#x2F;em&gt; implement the &lt;code&gt;Write&lt;&#x2F;code&gt; trait, which provides a blocking
&lt;code&gt;write_all&lt;&#x2F;code&gt;, which is sufficient for our purposes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 12&lt;&#x2F;strong&gt; Rewrite the code above to successfully write
&lt;code&gt;httpbin.json&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First solution, ignoring anything close to proper error handling:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;REQ_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, buffer)
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
        File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        })
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But ideally, we&#x27;d like to avoid that &lt;code&gt;unwrap()&lt;&#x2F;code&gt; and instead promote an
I&#x2F;O error here to be handle by the &lt;code&gt;map_err&lt;&#x2F;code&gt; below. It turns out that
there&#x27;s a surprisingly trivial change to make that happen:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;httpbin.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
    file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer)
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of using &lt;code&gt;map&lt;&#x2F;code&gt;, we use &lt;code&gt;and_then&lt;&#x2F;code&gt;, which requires that we
return some value that implements &lt;code&gt;Future&lt;&#x2F;code&gt;. But fortunately, &lt;code&gt;Result&lt;&#x2F;code&gt;
itself implements &lt;code&gt;Future&lt;&#x2F;code&gt;! The &lt;code&gt;Ok&lt;&#x2F;code&gt; variant becomes the &lt;code&gt;Item&lt;&#x2F;code&gt; for
that &lt;code&gt;Future&lt;&#x2F;code&gt;, and the &lt;code&gt;Err&lt;&#x2F;code&gt; variant becomes its &lt;code&gt;Error&lt;&#x2F;code&gt;. Problem
solved!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-13&quot;&gt;Exercise 13&lt;&#x2F;h2&gt;
&lt;p&gt;We haven&#x27;t taken advantage of tokio here at all! Let&#x27;s make this
program concurrent. Write a program that takes command line arguments
to determine HTTP requests to make and files to store them to. To
simplify the implementation, we&#x27;ll have it take input that looks like
the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run httpbin.org:80 &#x2F;json httpbin.json example.com:80 &#x2F; homepage.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Feel free to handle invalid command line arguments however&#x27;s easiest.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::net::ToSocketAddrs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::{read_to_end, write_all};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::fs::File;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;download&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) -&amp;gt; impl Future&amp;lt;Item=(), Error=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter = host.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_socket_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;DNS resolution failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; req_body = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection: close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        path,
        host,
        );

    TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, req_body).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
                    File::create(filename).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                        file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer)
                    })
                })
            })
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    tokio::run(future::poll_fn(|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(), args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(), args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(host), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(path), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(filename)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                    tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;download&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(host, path, filename));
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_ =&amp;gt; return Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Async::Ready(())),
            }
        }
    }))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;nicer-error-handling&quot;&gt;Nicer error handling&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re just &lt;code&gt;panic!&lt;&#x2F;code&gt;ing when we have a bad address. Let&#x27;s do a little
bit better. First, I&#x27;ll define a helper function to return a nice
&lt;code&gt;Result&lt;&#x2F;code&gt;. We&#x27;ll use a &lt;code&gt;String&lt;&#x2F;code&gt; for the &lt;code&gt;Err&lt;&#x2F;code&gt; variant, but we could
should ideally define an &lt;code&gt;enum&lt;&#x2F;code&gt; instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resolve_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;SocketAddr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; host.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_socket_addrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr_iter) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Invalid host name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, host, e)),
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr_iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No addresses found for host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, host)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside &lt;code&gt;download&lt;&#x2F;code&gt;, we could continue &lt;code&gt;panic!&lt;&#x2F;code&gt;ing with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;resolve_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;host).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But let&#x27;s do better. Using &lt;code&gt;?&lt;&#x2F;code&gt; won&#x27;t work, since we aren&#x27;t returning a
&lt;code&gt;Result&lt;&#x2F;code&gt;. One idea would be to use &lt;code&gt;return&lt;&#x2F;code&gt; to return early:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match resolve_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;host) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error resolving address: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;future::err(());
    }
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, we get an interesting error message from the compiler:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
  --&amp;gt; src&#x2F;main.rs:34:5
   |
34 | &#x2F;     TcpStream::connect(&amp;amp;addr)
35 | |         .and_then(|stream| {
36 | |             write_all(stream, req_body).and_then(|(stream, _body)| {
37 | |                 let buffer = vec![];
...  |
43 | |             })
44 | |         }).map_err(|e| eprintln!(&amp;quot;Error occured: {:?}&amp;quot;, e))
   | |___________________________________________________________^ expected struct `tokio::prelude::future::FutureResult`, found struct `tokio::prelude::future::MapErr`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to make things work, we need to ensure that we always return
the same type. We&#x27;ve so far used &lt;code&gt;impl Future&lt;&#x2F;code&gt; to say &amp;quot;we&#x27;ll return
some type which is a &lt;code&gt;Future&lt;&#x2F;code&gt;,&amp;quot; but we haven&#x27;t told the compiler what
that type is. Instead, the compiler has inferred that. But now, we
have two different types.&lt;&#x2F;p&gt;
&lt;p&gt;One approach would be dynamic dispatch, such as using
&lt;code&gt;Box&amp;lt;Future&amp;gt;&lt;&#x2F;code&gt;. But there&#x27;s a better way: using the &lt;code&gt;Either&lt;&#x2F;code&gt; helper
type. This type is used in a case where we have two different types of
&lt;code&gt;Future&lt;&#x2F;code&gt;s which both have the same &lt;code&gt;Item&lt;&#x2F;code&gt; and &lt;code&gt;Error&lt;&#x2F;code&gt;. Let&#x27;s see how
we can rewrite our code above to use &lt;code&gt;Either&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;download&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) -&amp;gt; impl Future&amp;lt;Item=(), Error=()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match resolve_addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;host) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(addr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error resolving address: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;future::Either::A(future::err(()));
        }
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; req_body = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection: close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        path,
        host,
        );

    future::Either::B(TcpStream::connect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, req_body).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; buffer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[];
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream, buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)| {
                    File::create(filename).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                        file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;buffer)
                    })
                })
            })
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error occured: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e)))
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 14&lt;&#x2F;strong&gt; Implement your own &lt;code&gt;Either&lt;&#x2F;code&gt; data type and use it in
the code above.&lt;&#x2F;p&gt;
&lt;p&gt;Solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;A, B&amp;gt; {
    A(A),
    B(B),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;A, B&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;A, B&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; A: Future&amp;lt;Item=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;B::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item, Error=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;B::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Error&amp;gt;,
          B: Future,
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= A::Item;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= A::Error;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            Either::A(a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
            Either::B(b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;tcp-server&quot;&gt;TCP server&lt;&#x2F;h2&gt;
&lt;p&gt;Having been so successful with our TCP client, let&#x27;s move over to the
server side. Conceptually, we want to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Bind a listening socket&lt;&#x2F;li&gt;
&lt;li&gt;Accept connections from that socket&lt;&#x2F;li&gt;
&lt;li&gt;Copy all data from the input side of the socket to the output side
of the socket&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Binding a listening socket is going to be a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;net&#x2F;struct.TcpListener.html#method.bind&quot;&gt;blocking
call&lt;&#x2F;a&gt;
to &lt;code&gt;bind&lt;&#x2F;code&gt;, taking our old friend &lt;code&gt;SocketAddr&lt;&#x2F;code&gt;. Since we&#x27;re not playing
around with DNS resolution anymore, we can be a bit lazier about how
we do this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;It worked! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, listener);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have have a &lt;code&gt;TcpListener&lt;&#x2F;code&gt;. Unlike other types we&#x27;ve seen, this
doesn&#x27;t have an implementation of either &lt;code&gt;Future&lt;&#x2F;code&gt; or
&lt;code&gt;Stream&lt;&#x2F;code&gt;. However, it does have a method called &lt;code&gt;incoming()&lt;&#x2F;code&gt;, which
returns an &lt;code&gt;Incoming&lt;&#x2F;code&gt;, which has a &lt;code&gt;Stream&lt;&#x2F;code&gt; implementation, where
&lt;code&gt;Item&lt;&#x2F;code&gt; is &lt;code&gt;TcpStream&lt;&#x2F;code&gt;. That looks promising!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Accepted a connection! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, socket);
        future::ok(())
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
    ;
tokio::run(future)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that, we&#x27;ve implemented points (1) and (2) above. We&#x27;re
just left with point 3: copying all of the data. Let&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;net&#x2F;struct.TcpListener.html?search=copy&quot;&gt;search tokio
for something to do
copying&lt;&#x2F;a&gt;. It
looks like
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;io&#x2F;fn.copy.html&quot;&gt;&lt;code&gt;tokio::io::copy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
will do. We need to provide it both a reader and writer. Since we&#x27;re
reader from and writing to the same socket, let&#x27;s just provide the
same value for both:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket, socket)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
    ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Are you already laughing at my comically silly mistake?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of moved value: `socket`
  --&amp;gt; src&#x2F;main.rs:13:26
   |
13 |             copy(socket, socket)
   |                  ------  ^^^^^^ value used here after move
   |                  |
   |                  value moved here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course we can&#x27;t use the same value in both positions. Fortunately,
when designing &lt;code&gt;Stream&lt;&#x2F;code&gt;s, the authors provided a method called
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;prelude&#x2F;trait.Stream.html#method.split&quot;&gt;&lt;code&gt;split&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
to give us a read and write end of the stream. With that in hand, our
echo server becomes trivial:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::copy;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(reader, writer) = socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(reader, writer)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;writing-directly&quot;&gt;Writing directly&lt;&#x2F;h2&gt;
&lt;p&gt;Using &lt;code&gt;copy&lt;&#x2F;code&gt; kind of ignores the gory details of what&#x27;s going on under
the surface. Let&#x27;s start off by writing some arbitrary message to the
writer side of things, using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;io&#x2F;fn.write_all.html&quot;&gt;&lt;code&gt;write_all&lt;&#x2F;code&gt;
function&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; The &lt;code&gt;tokio::io::write_all&lt;&#x2F;code&gt; function takes a &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt; and
returns a &lt;code&gt;WriteAll&lt;&#x2F;code&gt; &lt;code&gt;Future&lt;&#x2F;code&gt;. Don&#x27;t be confused by the presence of a
&lt;code&gt;write_all&lt;&#x2F;code&gt; &lt;em&gt;method&lt;&#x2F;em&gt;, which in fact is a blocking call. I wasted about
5 minutes fumbling with that while writing this tutorial.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::io::{copy, write_all};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(reader, writer) = socket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(writer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 15&lt;&#x2F;strong&gt; Modify the code above so that, after printing &amp;quot;Welcome
to the echo server&amp;quot;, it proceeds to actually echo content sent in.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(writer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, _)| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(reader, writer)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
    })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;codecs&quot;&gt;Codecs&lt;&#x2F;h2&gt;
&lt;p&gt;Reading from the &lt;code&gt;reader&lt;&#x2F;code&gt; directly is slightly trickier than writing
to the &lt;code&gt;writer&lt;&#x2F;code&gt;. We &lt;em&gt;could&lt;&#x2F;em&gt; go play around with the underlying polling
reading functions, but we&#x27;re not going to here. (Feel free to &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;docs&#x2F;getting-started&#x2F;hello-world&#x2F;&quot;&gt;read
the official tokio tutorial for more
information&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we&#x27;re going to introduce a new concept, &lt;em&gt;codecs&lt;&#x2F;em&gt;. So far,
we&#x27;ve implicitly been working with the &lt;code&gt;AsyncRead&lt;&#x2F;code&gt; and &lt;code&gt;AsyncWrite&lt;&#x2F;code&gt;
traits, which essentially provide the raw polling functions we&#x27;d need
for building up our own &lt;code&gt;Future&lt;&#x2F;code&gt;s (as we did way long ago at the
beginning of this lesson). However, we often don&#x27;t want to work at
that level of abstraction. Instead, we&#x27;d like to deal with some kind
of framed (or chunked) data.&lt;&#x2F;p&gt;
&lt;p&gt;The new abstraction instead will be a &lt;code&gt;Sink&lt;&#x2F;code&gt;, which is &amp;quot;a value into
which other values can be sent, asynchronously.&amp;quot; We&#x27;ll continue to use
the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait for the read side, which we&#x27;re already quite
familiar with.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s contrive an example. Our echo server currently provides slightly
weird output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Hello
Hello
There
There
World
World
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s hard to tell what I typed in, and what the server
responded. Instead, I&#x27;d like each line sent back from the server to
begin with &amp;quot;You said: &amp;quot;. Doing that with the abstractions we&#x27;ve seen
so far would be fairly painful: we&#x27;d need to grab chunks of data, look
for the newline character, break up the input, splice in the &amp;quot;You
said: &amp;quot; message. I know this is a crash course and all, but I&#x27;d rather
not crash into that.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, let&#x27;s jump straight to the better solution. I want to treat
our TCP stream as a stream of lines of data. If I search for the word
&amp;quot;lines&amp;quot; (and this is &lt;em&gt;actually&lt;&#x2F;em&gt; how I learned about codecs), I end up
with
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;codec&#x2F;struct.LinesCodec.html&quot;&gt;&lt;code&gt;LinesCodec&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. It
provides a method &lt;code&gt;new()&lt;&#x2F;code&gt;, as well as &lt;code&gt;new_with_max_length&lt;&#x2F;code&gt;. We&#x27;ll use
&lt;code&gt;new&lt;&#x2F;code&gt; here, but I recommend reading the docs to see why that&#x27;s a
terrible idea in any kind of security sensitive context.&lt;&#x2F;p&gt;
&lt;p&gt;The only other method on the type is &lt;code&gt;max_length&lt;&#x2F;code&gt;, which doesn&#x27;t look
like it&#x27;s going to help us actually deal with a TCP socket as a stream
of lines. So let&#x27;s look down at the trait implementations. We&#x27;ve got
all of our usual suspects: &lt;code&gt;Clone&lt;&#x2F;code&gt;, &lt;code&gt;PartialOrd&lt;&#x2F;code&gt;, etc. But two new
ones stick out: &lt;code&gt;Decoder&lt;&#x2F;code&gt; and &lt;code&gt;Encoder&lt;&#x2F;code&gt;. Well &lt;em&gt;that&lt;&#x2F;em&gt; certainly looks
interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Reading through the docs on &lt;code&gt;Decoder&lt;&#x2F;code&gt;, it provides a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;codec&#x2F;trait.Decoder.html#method.framed&quot;&gt;method called
&lt;code&gt;framed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which has a description that is great. (Please, take a second to
follow that link and read the docs.) Without further ado, let&#x27;s try
adding in our &lt;code&gt;LinesCodec&lt;&#x2F;code&gt; to our echo server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::codec::{Decoder, LinesCodec};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines_codec = LinesCodec::new();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; socket = lines_codec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;framed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket);
            socket
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may have noticed that we no longer have a newline sequence at the
end of the &amp;quot;Welcome&amp;quot; string. That&#x27;s because our lines codec
automatically handles that. Additionally, we now need to use
&lt;code&gt;String::from&lt;&#x2F;code&gt;, since the &lt;code&gt;Item&lt;&#x2F;code&gt; for this &lt;code&gt;Sink&lt;&#x2F;code&gt; is a &lt;code&gt;String&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can also use &lt;code&gt;split&lt;&#x2F;code&gt; to isolate the &lt;code&gt;Sink&lt;&#x2F;code&gt; from the &lt;code&gt;Stream&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(sink, stream) = lines_codec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;framed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
sink
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, we can use &lt;code&gt;for_each&lt;&#x2F;code&gt; on the &lt;code&gt;Stream&lt;&#x2F;code&gt; side to get a stream of the
lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::codec::{Decoder, LinesCodec};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines_codec = LinesCodec::new();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(sink, stream) = lines_codec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;framed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            sink
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    stream
                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Received a line: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, line);
                            future::ok(())
                        })
                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
                })
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re almost done here: we just need to &lt;code&gt;send&lt;&#x2F;code&gt; the lines back to the
&lt;code&gt;sink&lt;&#x2F;code&gt; instead of to &lt;code&gt;stdout&lt;&#x2F;code&gt;. Unfortunately, using the &lt;code&gt;send&lt;&#x2F;code&gt; method
we&#x27;ve seen so far is going to be tricky, since we&#x27;ll end up consuming
the &lt;code&gt;sink&lt;&#x2F;code&gt; in each iteration of &lt;code&gt;for_each&lt;&#x2F;code&gt;. We could figure out a way
to make that all work, but instead, let&#x27;s just cut to the chase and
use &lt;code&gt;send_all&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 16&lt;&#x2F;strong&gt; Modify the code above so that, instead of printing the
lines to standard output, they get sent back to the client with the
message &amp;quot;You said: &amp;quot;. You&#x27;ll want to look at
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.12&#x2F;tokio&#x2F;prelude&#x2F;trait.Sink.html#method.send_all&quot;&gt;&lt;code&gt;send_all&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tokio::codec::{Decoder, LinesCodec};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;127.0.0.1:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t parse address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; listener = TcpListener::bind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;addr).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;couldn&amp;#39;t bind address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; future = listener
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lines_codec = LinesCodec::new();
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(sink, stream) = lines_codec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;framed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(socket).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            sink
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome to the echo server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; stream = stream
                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You said: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, line))
                        ;
                    sink.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;send_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(stream)
                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Connection closed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
                })
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;An error occurred: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e))
        ;
    tokio::run(future)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h2&gt;
&lt;p&gt;Whew, that was a big lesson! At this point, you should have a &lt;em&gt;very&lt;&#x2F;em&gt;
solid footing in the ins and outs of tokio. It&#x27;s time to get lots more
experience with using the library, and related higher level libraries
for doing things like HTTP servers and clients.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on reader feedback, the next lesson may either go deeper
into tokio and related libraries, or go back to more fundamental
aspects of Rust like lifetimes. From the tokio side, we&#x27;d play with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Message passing between tasks&lt;&#x2F;li&gt;
&lt;li&gt;UDP communications&lt;&#x2F;li&gt;
&lt;li&gt;Recursive directory traversal&lt;&#x2F;li&gt;
&lt;li&gt;Parallel downloading of files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Lifetimes and Slices - Rust Crash Course lesson 6 - exercise solutions</title>
		<published>2018-11-28T00:00:00+00:00</published>
		<updated>2018-11-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-06-lifetimes-slices-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-06-lifetimes-slices-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Lifetimes and slices.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;If you try just throwing in the &lt;code&gt;ref&lt;&#x2F;code&gt; keyword like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.age {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Age is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, age);
        *age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No age provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll get an error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0594]: cannot assign to immutable borrowed content `*age`
  --&amp;gt; src&#x2F;main.rs:16:13
   |
14 |         Some(ref age) =&amp;gt; {
   |              ------- help: use a mutable reference instead: `ref mut age`
15 |             println!(&amp;quot;Age is {}&amp;quot;, age);
16 |             *age += 1;
   |             ^^^^^^^^^ cannot borrow as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead, you need to say &lt;code&gt;ref mut age&lt;&#x2F;code&gt;. And if you&#x27;re like me and
regularly type in &lt;code&gt;mut ref age&lt;&#x2F;code&gt; instead of &lt;code&gt;ref mut age&lt;&#x2F;code&gt;, don&#x27;t worry,
the compiler&#x27;s got your back:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error: the order of `mut` and `ref` is incorrect
  --&amp;gt; src&#x2F;main.rs:14:14
   |
14 |         Some(mut ref age) =&amp;gt; {
   |              ^^^^^^^ help: try switching the order: `ref mut`

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;You need to provide mutable references for the two arguments to
&lt;code&gt;swap&lt;&#x2F;code&gt;. Additionally, in order to get a mutable reference to &lt;code&gt;res&lt;&#x2F;code&gt;,
&lt;code&gt;res&lt;&#x2F;code&gt; itself needs to be &lt;code&gt;mut&lt;&#x2F;code&gt;able.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    std::mem::swap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next);
    res
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;We need to have two different parameters, and ensure that &lt;code&gt;ret&lt;&#x2F;code&gt; and
the return value have the same lifetime parameter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;message_and_return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Printing the message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    ret
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;Since the data is stored in the program executable itself, it lives
for the entire program execution. Therefore, the lifetime is
&lt;code&gt;&#x27;static&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bytearray1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World in binary!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bytearray2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World in binary!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, bytearray1);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, bytearray2);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-5&quot;&gt;Exercise 5&lt;&#x2F;h2&gt;
&lt;p&gt;This is a great use case for the iterator method &lt;code&gt;count&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;arg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, characters: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, bytes: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            arg,
            arg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
            arg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
            );
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Lifetimes and Slices - Rust Crash Course lesson 6</title>
		<published>2018-11-26T00:00:00+00:00</published>
		<updated>2018-11-26T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-06-lifetimes-slices/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-06-lifetimes-slices/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve glossed over some details of lifetimes and sequences of values so far.
It&#x27;s time to dive in and learn about lifetimes and &lt;em&gt;slices&lt;&#x2F;em&gt; correctly.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;printing-a-person&quot;&gt;Printing a person&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s look at some fairly unsurprising code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.name {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.age {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(age) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Age is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, age),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No age provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    });
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fairly simple, and a nice demonstration of pattern matching. However,
let&#x27;s throw in one extra line. Try adding this at the beginning of the
&lt;code&gt;print_person&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Full Person value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, person);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All good. We&#x27;re printing the full contents of the &lt;code&gt;Person&lt;&#x2F;code&gt; and then
pattern matching. But try adding that line to the &lt;em&gt;end&lt;&#x2F;em&gt; of the
function, and you&#x27;ll get a compilation error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of partially moved value: `person`
  --&amp;gt; main.rs:18:41
   |
9  |         Some(name) =&amp;gt; println!(&amp;quot;Name is {}&amp;quot;, name),
   |              ---- value moved here
...
18 |     println!(&amp;quot;Full Person value: {:?}&amp;quot;, person);
   |                                         ^^^^^^ value used here after move
   |
   = note: move occurs because the value has type `std::string::String`, which does not implement the `Copy` trait

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; This is an error with the Rust compiler I&#x27;m using,
1.30.1. However, there are plans in place to improve this situation.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that we&#x27;ve consumed a part of the &lt;code&gt;person&lt;&#x2F;code&gt; value, and
therefore cannot display it. We can fix that by setting it
again. Let&#x27;s make the &lt;code&gt;person&lt;&#x2F;code&gt; argument &lt;code&gt;mut&lt;&#x2F;code&gt;able, and then fill
in the moved &lt;code&gt;person.name&lt;&#x2F;code&gt; with a default &lt;code&gt;None&lt;&#x2F;code&gt; value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.name {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.age {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(age) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Age is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, age),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No age provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }

    person.name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Full Person value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, person);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That compiles, but now the output is confusingly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Name is Alice
Age is 30
Full Person value: Person { name: None, age: Some(30) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the &lt;code&gt;name&lt;&#x2F;code&gt; in the last line in &lt;code&gt;None&lt;&#x2F;code&gt;, when ideally it should be
&lt;code&gt;Some(Alice)&lt;&#x2F;code&gt;. We can do better, by returning the name from the &lt;code&gt;match&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;person.name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.name {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(name)
    },
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But that&#x27;s decidely inelegant. Let&#x27;s take a step back. Do we actually
need to consume&#x2F;move the &lt;code&gt;person.name&lt;&#x2F;code&gt; at all? Not really. It should
work to do everything by reference. So let&#x27;s go back and avoid the
move entirely, by using a borrow:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;person.name {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much better! We don&#x27;t need to put the borrow on &lt;code&gt;person.age&lt;&#x2F;code&gt; though,
since the &lt;code&gt;u32&lt;&#x2F;code&gt; is &lt;code&gt;Copy&lt;&#x2F;code&gt;able. Here, we&#x27;re pattern matching on a
reference, and therefore the &lt;code&gt;name&lt;&#x2F;code&gt; is &lt;em&gt;also&lt;&#x2F;em&gt; a reference.&lt;&#x2F;p&gt;
&lt;p&gt;However, we can be more explicit about that with the &lt;code&gt;ref&lt;&#x2F;code&gt;
keyword. This keyword says that, when pattern matching, we want the
pattern to be a reference, &lt;em&gt;not&lt;&#x2F;em&gt; a move of the original value. (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch18-03-pattern-syntax.html#creating-references-in-patterns-with-ref-and-ref-mut&quot;&gt;More
info in the Rust
book.&lt;&#x2F;a&gt;)
We end up with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.name {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our case, this is the same basic result as &lt;code&gt;&amp;amp;person.name&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;birthday&quot;&gt;Birthday!&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s modify our code so that, when printing the age, we also increase
the age by 1. First stab is below. Note that the code won&#x27;t compile,
try to predict why:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.age {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(age) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Age is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, age);
        age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No age provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re trying to mutate the local &lt;code&gt;age&lt;&#x2F;code&gt; binding, but it&#x27;s
immutable. Well, that&#x27;s easy enough to fix, just replace &lt;code&gt;Some(age)&lt;&#x2F;code&gt;
with &lt;code&gt;Some(mut age)&lt;&#x2F;code&gt;. That compiles, but with a warning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: value assigned to `age` is never read
  --&amp;gt; src&#x2F;main.rs:16:13
   |
16 |             age += 1;
   |             ^^^
   |
   = note: #[warn(unused_assignments)] on by default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then the output is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Name is Alice
Age is 30
Full Person value: Person { name: Some(&amp;quot;Alice&amp;quot;), age: Some(30) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how on the last line, the age is still 30, not 31. Take a
minute and try to understand what&#x27;s happening here... Done? Cool.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We pattern match on &lt;code&gt;person.age&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s &lt;code&gt;Some&lt;&#x2F;code&gt;, we need to move the age into the local &lt;code&gt;age&lt;&#x2F;code&gt;
binding&lt;&#x2F;li&gt;
&lt;li&gt;But since the type is &lt;code&gt;u32&lt;&#x2F;code&gt;, it will make a copy and move the copy&lt;&#x2F;li&gt;
&lt;li&gt;When we increment the age, we&#x27;re incrementing a copy, which is never used.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We can try solving this by taking a mutable reference to &lt;code&gt;person.age&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.name {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No name provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person.age {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(age) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Age is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, age);
            age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No age provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Full Person value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, person);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler complains: &lt;code&gt;age&lt;&#x2F;code&gt; is a &lt;code&gt;&amp;amp;mut u32&lt;&#x2F;code&gt;, but we&#x27;re trying to use
&lt;code&gt;+=&lt;&#x2F;code&gt; on it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0368]: binary assignment operation `+=` cannot be applied to type `&amp;amp;mut u32`
  --&amp;gt; src&#x2F;main.rs:16:13
   |
16 |             age += 1;
   |             ---^^^^^
   |             |
   |             cannot use `+=` on type `&amp;amp;mut u32`
   |
   = help: `+=` can be used on &amp;#39;u32&amp;#39;, you can dereference `age`: `*age`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler taketh, and the compiler giveth as well: we just need to
dereference the &lt;code&gt;age&lt;&#x2F;code&gt; reference. Close, but one more error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow field `person.age` of immutable binding as mutable
  --&amp;gt; src&#x2F;main.rs:13:16
   |
7  | fn print_person(person: Person) {
   |                 ------ consider changing this to `mut person`
...
13 |     match &amp;amp;mut person.age {
   |                ^^^^^^^^^^ cannot mutably borrow field of immutable binding

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, the compiler tells us exactly how to solve the problem: make
&lt;code&gt;person&lt;&#x2F;code&gt; &lt;code&gt;mut&lt;&#x2F;code&gt;able. Go ahead and make that change, and everything
should work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 1&lt;&#x2F;strong&gt; In the case of &lt;code&gt;person.name&lt;&#x2F;code&gt;, we came up with two
solutions: borrow the &lt;code&gt;person.name&lt;&#x2F;code&gt;, or use the &lt;code&gt;ref&lt;&#x2F;code&gt; keyword. The
same two styles of solutions will work for our current problem. We&#x27;ve
just demonstrated the borrow approach. Try to solve this instead using
the &lt;code&gt;ref&lt;&#x2F;code&gt; keyword.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-single-iterator&quot;&gt;The single iterator&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s make a silly little iterator which produces a single
value. We&#x27;ll track whether or not the value has been produced by using
an &lt;code&gt;Option&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Single&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s make a helper function to create &lt;code&gt;Single&lt;&#x2F;code&gt; values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;single&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: T) -&amp;gt; Single&amp;lt;T&amp;gt; {
    Single {
        next: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(t),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And let&#x27;s write a &lt;code&gt;main&lt;&#x2F;code&gt; that tests that this works as expected:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; actual: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;single&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;], actual);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try to compile that, you&#x27;ll get an error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `collect` found for type `Single&amp;lt;{integer}&amp;gt;` in the current scope
  --&amp;gt; src&#x2F;main.rs:12:39
   |
1  | struct Single&amp;lt;T&amp;gt; {
   | ---------------- method `collect` not found for this
...
12 |     let actual: Vec&amp;lt;u32&amp;gt; = single(42).collect();
   |                                       ^^^^^^^
   |
   = note: the method `collect` exists but the following trait bounds were not satisfied:
           `&amp;amp;mut Single&amp;lt;{integer}&amp;gt; : std::iter::Iterator`
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `collect`, perhaps you need to implement it:
           candidate #1: `std::iter::Iterator`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need to provide an &lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation in order to use
&lt;code&gt;collect()&lt;&#x2F;code&gt;. The &lt;code&gt;Item&lt;&#x2F;code&gt; is going to be &lt;code&gt;T&lt;&#x2F;code&gt;. And we&#x27;ve already got a
great &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; available for the return value from the &lt;code&gt;next&lt;&#x2F;code&gt;
function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Single&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= T;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately this doesn&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0507]: cannot move out of borrowed content
  --&amp;gt; src&#x2F;main.rs:21:9
   |
21 |         self.next
   |         ^^^^ cannot move out of borrowed content

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, right. We can&#x27;t move the result value out, since our &lt;code&gt;next&lt;&#x2F;code&gt;
function only mutable borrows &lt;code&gt;self&lt;&#x2F;code&gt;. Let&#x27;s try some pattern matching:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(next) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(next),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Except this &lt;em&gt;also&lt;&#x2F;em&gt; involves moving out of a borrow, so it fails. Let&#x27;s
try one more time: we&#x27;ll move into a local variable, set &lt;code&gt;self.next&lt;&#x2F;code&gt;
to &lt;code&gt;None&lt;&#x2F;code&gt; (so it doesn&#x27;t repeat the value again), and return the local
variable:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    res
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nope, the compiler is &lt;em&gt;still&lt;&#x2F;em&gt; not happy! I guess we&#x27;ll just have to
give up on our grand vision of a &lt;code&gt;Single&lt;&#x2F;code&gt; iterator. We could of course
just cheat:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But while that compiles, it fails our test at runtime:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
  left: `[42]`,
 right: `[]`&amp;#39;, src&#x2F;main.rs:13:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;swap&quot;&gt;Swap&lt;&#x2F;h2&gt;
&lt;p&gt;What we did above was attempt to swap the &lt;code&gt;self.next&lt;&#x2F;code&gt; with a local
variable. However, the borrow checker wasn&#x27;t a fan of the approach we
took. However, there&#x27;s a helper function in the standard library,
&lt;code&gt;std::mem::swap&lt;&#x2F;code&gt;, which may be able to help us. It looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; T)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And sure enough, we can use it to solve our problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    std::mem::swap(res, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next);
    res
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 2&lt;&#x2F;strong&gt; The code above doesn&#x27;t quite compile, though the
compiler can guide you to a correct solution. Try to identify the
problems above and fix them yourself. Failing that, ask the compiler
to help you out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;replace-and-take&quot;&gt;replace and take&lt;&#x2F;h2&gt;
&lt;p&gt;Did you find that whole create-a-temp-variable thing a bit verbose?
Yeah, it does to the authors of the Rust standard library too. There&#x27;s
a helper function that bypasses that temporary variable:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    std::mem::replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much nicer! However, that &lt;strong&gt;still&lt;&#x2F;strong&gt; seems like more work for something
that should be really easy. And fortunately, yet again, it does to the
authors of the Rust standard library too. This pattern of replacing
the value in an &lt;code&gt;Option&lt;&#x2F;code&gt; with &lt;code&gt;None&lt;&#x2F;code&gt; and then working with the
original value is common enough that they&#x27;ve given it a name and a
method: &lt;code&gt;take&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.next.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re done!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lifetimes&quot;&gt;Lifetimes&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve briefly mentioned lifetimes in previous lessons, but it&#x27;s time
to get a bit more serious about them. Let&#x27;s look at a simple usage of
references:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) -&amp;gt; String {
    person.name
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code doesn&#x27;t compile. Our &lt;code&gt;get_name&lt;&#x2F;code&gt; function takes a reference
to a &lt;code&gt;Person&lt;&#x2F;code&gt;, and then tries to move that person&#x27;s &lt;code&gt;name&lt;&#x2F;code&gt; in its
result. This isn&#x27;t possible. One solution would be to clone the name:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) -&amp;gt; String {
    person.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this works, it&#x27;s relatively inefficient. We like to avoid making
copies when we can. Instead, let&#x27;s simply return a reference to the
name:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;person.name
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hurrah! But let&#x27;s make our function a little bit more complicated. We
now want a function that will take &lt;em&gt;two&lt;&#x2F;em&gt; &lt;code&gt;Person&lt;&#x2F;code&gt;s, and return the
name of the older one. That sounds fairly easy to write:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; person1.age &amp;gt;= person2.age {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;person1.name
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;person2.name
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bob = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;35&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bob);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Older person: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, the compiler is quite cross with us:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0106]: missing lifetime specifier
 --&amp;gt; src&#x2F;main.rs:6:58
  |
6 | fn get_older_name(person1: &amp;amp;Person, person2: &amp;amp;Person) -&amp;gt; &amp;amp;String {
  |                                                          ^ expected lifetime parameter
  |
  = help: this function&amp;#39;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `person1` or `person2`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That error message is remarkably clear. Our function is returning a
borrowed value. That value must be borrowed from &lt;em&gt;somewhere&lt;&#x2F;em&gt;. The only
two options* are &lt;code&gt;person1&lt;&#x2F;code&gt; and &lt;code&gt;person2&lt;&#x2F;code&gt;. And it seems that Rust
needs to know this for some reason.&lt;&#x2F;p&gt;
&lt;p&gt;* This is a small fib, see &amp;quot;static lifetime&amp;quot; below.&lt;&#x2F;p&gt;
&lt;p&gt;Remember how we have some rules about references? References cannot
outlive the original values they come from. We need to track how long
the result value is allowed to live, which must be less than or equal
to the time the value it came from lives. This whole concept is
&lt;em&gt;lifetimes&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For reasons we&#x27;ll get to in a bit (under &amp;quot;lifetime elision&amp;quot;), we can
often bypass the need to explicitly talk about lifetimes. However,
sometimes we do need to be explicit. To do this, we introduce some new
parameters. But this time, they are &lt;em&gt;lifetime parameters&lt;&#x2F;em&gt;, which begin
with a single quote and are lower case. Usually, they are just a
single letter. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We still get an error from the compiler because our return value
doesn&#x27;t have a lifetime. Should we choose &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; or &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;? Or maybe we
should create a new &lt;code&gt;&#x27;c&lt;&#x2F;code&gt; and try that? Let&#x27;s start off with &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;. We
get the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0623]: lifetime mismatch
  --&amp;gt; src&#x2F;main.rs:10:9
   |
6  | fn get_older_name&amp;lt;&amp;#39;a, &amp;#39;b&amp;gt;(person1: &amp;amp;&amp;#39;a Person, person2: &amp;amp;&amp;#39;b Person) -&amp;gt; &amp;amp;&amp;#39;a String {
   |                                                         ----------     ----------
   |                                                         |
   |                                                         this parameter and the return type are declared with different lifetimes...
...
10 |         &amp;amp;person2.name
   |         ^^^^^^^^^^^^^ ...but data from `person2` is returned here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That makes sense: since our result may come from &lt;code&gt;person2&lt;&#x2F;code&gt;, we have no
guarantee that the &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; lifetime parameter is less than or equal to
the &lt;code&gt;&#x27;b&lt;&#x2F;code&gt; lifetime parameter. Fortunately, we can explicitly state
that, in the same way that we state that types implement some traits:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this actually compiles! Alternatively, in this case, we can just
completely bypass the second lifetime parameter, and say that
&lt;code&gt;person1&lt;&#x2F;code&gt; and &lt;code&gt;person2&lt;&#x2F;code&gt; must have the same lifetime, which must be the
same as the return value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;re like me, you may think that this would be overly
limiting. For example, I initially thought that with the signature
above, this code wouldn&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bob = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;35&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_older_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bob);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Older person: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After all, the lifetime for &lt;code&gt;alice&lt;&#x2F;code&gt; is demonstrably bigger than the
lifetime for &lt;code&gt;bob&lt;&#x2F;code&gt;. However, the semantics for lifetimes in functions
signatures is that all of the values have at least the same
lifetime. If they happen to live a bit longer, no harm, no foul.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirement-for-multiple-lifetime-parameters&quot;&gt;Requirement for multiple lifetime parameters&lt;&#x2F;h2&gt;
&lt;p&gt;So can we cook up an example where multiple lifetime parameters are absolutely necessary? Sure!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;message_and_return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Printing the message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    ret
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;This is the message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;message_and_return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;msg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Return value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ret);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code won&#x27;t compile, because we need some lifetime parameters. So
let&#x27;s use our trick from above, and use the same parameter:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;message_and_return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That compiles, but let&#x27;s make our calling code a bit more complicated:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Return value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ret);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;This is the message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;message_and_return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;msg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the compiler isn&#x27;t happy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0597]: `msg` does not live long enough
  --&amp;gt; src&#x2F;main.rs:14:25
   |
14 |     message_and_return(&amp;amp;msg, &amp;amp;name)
   |                         ^^^ borrowed value does not live long enough
15 | }
   | - borrowed value only lives until here
   |
note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 12:1...
  --&amp;gt; src&#x2F;main.rs:12:1
   |
12 | &#x2F; fn foo(name: &amp;amp;String) -&amp;gt; &amp;amp;String {
13 | |     let msg = String::from(&amp;quot;This is the message&amp;quot;);
14 | |     message_and_return(&amp;amp;msg, &amp;amp;name)
15 | | }
   | |_^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve stated that the return value must live the same amount of time
as the &lt;code&gt;msg&lt;&#x2F;code&gt; parameter. But we return the return value &lt;em&gt;outside&lt;&#x2F;em&gt; of
the &lt;code&gt;foo&lt;&#x2F;code&gt; function, while the &lt;code&gt;msg&lt;&#x2F;code&gt; value will not live beyond the end
of &lt;code&gt;foo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The calling code should be fine, we just need to tell Rust that it&#x27;s
OK if the &lt;code&gt;msg&lt;&#x2F;code&gt; parameter has a shorter lifetime than the return
value.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 3&lt;&#x2F;strong&gt; Modify the signature of &lt;code&gt;message_and_return&lt;&#x2F;code&gt; so that
the code compiles and runs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lifetime-elision&quot;&gt;Lifetime elision&lt;&#x2F;h2&gt;
&lt;p&gt;Why do we sometimes get away with skipping the lifetimes, and
sometimes we need to include them? There are rules in the language
called &amp;quot;lifetime elision.&amp;quot; Instead of trying to cover this myself,
I&#x27;ll refer to the Nomicon:&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;lifetime-elision.html&lt;&#x2F;p&gt;
&lt;h2 id=&quot;static-lifetime&quot;&gt;Static lifetime&lt;&#x2F;h2&gt;
&lt;p&gt;Above, I implied that if you return a reference, then it must have the
same lifetime as one of its input parameters. This mostly makes sense,
because otherwise we&#x27;d have to conjure some arbitrary lifetime out of
thin air. However, it&#x27;s also a lie. There&#x27;s one special lifetime that
survives the entire program, called &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;. And here&#x27;s some fun
news: you&#x27;ve implicitly used it since the first Hello World we wrote
together!&lt;&#x2F;p&gt;
&lt;p&gt;Every single string literal is in fact a reference with the lifetime
of &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;arrays-slices-vectors-and-string&quot;&gt;Arrays, slices, vectors, and String&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s another place where we&#x27;ve been cheeky. What&#x27;s the difference
between &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;str&lt;&#x2F;code&gt;? Both of these have popped up quite a
bit. We&#x27;ll get to those in a little bit. First, we need to talk about
arrays, slices, and vectors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;&#x2F;h3&gt;
&lt;p&gt;To my knowledge, the best official documentation on arrays is in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.array.html&quot;&gt;the
API docs
themselves&lt;&#x2F;a&gt;. Arrays
are contiguous blocks of memory containing a single type of data with
a fixed length. The type is represented as &lt;code&gt;[T; N]&lt;&#x2F;code&gt;, where &lt;code&gt;T&lt;&#x2F;code&gt; is the
type of value, and &lt;code&gt;N&lt;&#x2F;code&gt; is the length of the array. And like any sane
programming language, arrays are 0-indexed in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;There are two syntaxes for initiating arrays. List literal syntax
(like Javascript, Python, or Haskell):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, nums);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a repeat expression:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, nums);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can make arrays mutable and then, well, mutate them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    nums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, nums);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s very nice, but what if you need something more dynamic? For
that, we have...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vec&quot;&gt;Vec&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;code&gt;Vec&lt;&#x2F;code&gt; is a &amp;quot;contiguous, growable array type.&amp;quot; You can &lt;code&gt;push&lt;&#x2F;code&gt; and
&lt;code&gt;pop&lt;&#x2F;code&gt;, check its length, and access via index in O(1) time. We also
have a nifty &lt;code&gt;vec!&lt;&#x2F;code&gt; macro for constructing them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, v); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; 1, 2, 3, 4, 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;slices&quot;&gt;Slices&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m going to write a helper function that prints all the values in a
&lt;code&gt;Vec&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, since this is a pass-by-value, the following doesn&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v);
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(v);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Easy enough to fix: have &lt;code&gt;print_vals&lt;&#x2F;code&gt; take a reference to a &lt;code&gt;Vec&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;v);
    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;v);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, this doesn&#x27;t generalize to, say, an array:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; a: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;a);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fails since &lt;code&gt;print_vals&lt;&#x2F;code&gt; takes a &lt;code&gt;&amp;amp;Vec&amp;lt;u32&amp;gt;&lt;&#x2F;code&gt;, but we&#x27;ve provided
a &lt;code&gt;&amp;amp;[u32; 5]&lt;&#x2F;code&gt;. But this is pretty disappointing. A dynamic vector and
a fixed length array behave the same for so many things. Wouldn&#x27;t it
be nice if there was something that generalized both of these?&lt;&#x2F;p&gt;
&lt;p&gt;Enter slices. To quote the Rust book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Slices let you reference a contiguous sequence of elements in a
collection rather than the whole collection.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To make this all work, we need to change the signature of &lt;code&gt;print_vals&lt;&#x2F;code&gt;
to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;[u32]&lt;&#x2F;code&gt; is a reference to a &lt;em&gt;slice&lt;&#x2F;em&gt; of &lt;code&gt;u32&lt;&#x2F;code&gt;s. A slice can be created
from an array &lt;em&gt;or&lt;&#x2F;em&gt; a &lt;code&gt;Vec&lt;&#x2F;code&gt;, not to mention some other cases as
well. (We&#x27;ll discuss how the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; borrow operator works its magic in a
bit.) As a general piece of advice, if you&#x27;re receiving a parameter
which is a sequence of values, try to use a slice, as it will give the
caller much more control about where the data comes from.&lt;&#x2F;p&gt;
&lt;p&gt;I played a bit of a word game above, switching between &amp;quot;reference to a
slice&amp;quot; and &amp;quot;a slice.&amp;quot; Obviously we&#x27;re using a reference. Can we
dereference a slice reference and get the slice itself? Let&#x27;s try!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print_vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v = *vref;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler is cross with us again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: the size for values of type `[u32]` cannot be known at compilation time
 --&amp;gt; src&#x2F;main.rs:7:9
  |
7 |     let v = *vref;
  |         ^ doesn&amp;#39;t have a size known at compile-time
  |
  = help: the trait `std::marker::Sized` is not implemented for `[u32]`
  = note: to learn more, visit &amp;lt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch19-04-advanced-types.html#dynamically-sized-types-and-sized&amp;gt;
  = note: all local variables must have a statically known size

error[E0277]: the size for values of type `[u32]` cannot be known at compilation time
 --&amp;gt; src&#x2F;main.rs:8:14
  |
8 |     for i in v {
  |              ^ doesn&amp;#39;t have a size known at compile-time
  |
  = help: the trait `std::marker::Sized` is not implemented for `[u32]`
  = note: to learn more, visit &amp;lt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch19-04-advanced-types.html#dynamically-sized-types-and-sized&amp;gt;
  = note: required by `std::iter::IntoIterator::into_iter`

error[E0277]: the trait bound `[u32]: std::iter::Iterator` is not satisfied
 --&amp;gt; src&#x2F;main.rs:8:14
  |
8 |     for i in v {
  |              ^ `[u32]` is not an iterator; maybe try calling `.iter()` or a similar method
  |
  = help: the trait `std::iter::Iterator` is not implemented for `[u32]`
  = note: required by `std::iter::IntoIterator::into_iter`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically, there&#x27;s no way to dereference a slice. It logically makes
sense in any event to just keep a reference to the block of memory
holding the values, whether it&#x27;s on the stack, heap, or the executable
itself (like string literals, which we&#x27;ll get to later).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deref&quot;&gt;Deref&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s something fishy; why does the ampersand&#x2F;borrow operator give
us different types? The following compiles just fine!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;v;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;v;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out that the borrow operator interacts with &amp;quot;&lt;code&gt;Deref&lt;&#x2F;code&gt;
coercion.&amp;quot; If you&#x27;re curious about this, please check out &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Deref.html&quot;&gt;the docs
for the &lt;code&gt;Deref&lt;&#x2F;code&gt;
trait&lt;&#x2F;a&gt;. As an
example, I can create a new struct which can be borrowed into a slice:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::ops::Deref;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; 5]);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; MyArray {
        MyArray([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Deref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;deref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Target {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ma = MyArray::new();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;MyArray = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ma;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;ma;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thanks to udoprog for &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;53250856&#x2F;can-i-borrow-a-custom-type-into-a-slice&quot;&gt;answering this
question&lt;&#x2F;a&gt;. Also,
just because you &lt;em&gt;can&lt;&#x2F;em&gt; do this &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;45086595&#x2F;is-it-considered-a-bad-practice-to-implement-deref-for-newtypes&quot;&gt;doesn&#x27;t necessarily mean you
should&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-slices&quot;&gt;Using slices&lt;&#x2F;h2&gt;
&lt;p&gt;Slices are data types like any others. You can check out the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;slice&#x2F;index.html&quot;&gt;&lt;code&gt;std::slice&lt;&#x2F;code&gt; module
documentation&lt;&#x2F;a&gt; and the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.slice.html&quot;&gt;&lt;code&gt;slice&lt;&#x2F;code&gt; primitive
type&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some common ways to interact with them include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using them as &lt;code&gt;Iterator&lt;&#x2F;code&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;Indexing them with &lt;code&gt;slice[idx]&lt;&#x2F;code&gt; syntax&lt;&#x2F;li&gt;
&lt;li&gt;Taking subslices with &lt;code&gt;slice[start..end]&lt;&#x2F;code&gt; syntax&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;byte-literals&quot;&gt;Byte literals&lt;&#x2F;h2&gt;
&lt;p&gt;If you put a lower case &lt;code&gt;b&lt;&#x2F;code&gt; in front of a string literal, you&#x27;ll get a
byte array. You can either treat this as a fixed length array or, more
commonly, as a slice:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bytearray1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World in binary!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bytearray2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World in binary!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, bytearray1);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, bytearray2);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you always receive a &lt;em&gt;reference&lt;&#x2F;em&gt; to the value, not the value
itself. The data is stored in the program executable itself, and
therefore cannot be modified (thus always receiving an immutable
reference).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 4&lt;&#x2F;strong&gt; Add lifetime parameters to the &lt;code&gt;bytearray1&lt;&#x2F;code&gt; and
&lt;code&gt;bytearray2&lt;&#x2F;code&gt; types above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strings&quot;&gt;Strings&lt;&#x2F;h2&gt;
&lt;p&gt;And finally we can talk about strings! You may think that a string
literal would be a fixed length array of &lt;code&gt;char&lt;&#x2F;code&gt;s. You can in fact
create such a thing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; char_array: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, char_array);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this is &lt;em&gt;not&lt;&#x2F;em&gt; what a &lt;code&gt;str&lt;&#x2F;code&gt; is. The representation above is
highly inefficient. Since a &lt;code&gt;char&lt;&#x2F;code&gt; in Rust has full Unicode support,
it takes up 4 bytes in memory (32 bits). However, for most data, this
is overkill. A character encoding like UTF-8 will be far more
efficient.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; If you&#x27;re not familiar with Unicode and character encodings,
it&#x27;s safe to gloss over these details here. It&#x27;s not vitally important
to understanding how strings work in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, a string slice (&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;) is essentially a newtype wrapper
around a byte slice (&lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;), which is guaranteed to be in UTF-8
encoding. This has some important trade-offs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can cheaply (freely?) convert from a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; to a &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;, which
can be great for making system calls&lt;&#x2F;li&gt;
&lt;li&gt;You cannot get O(1) random access within strings, since the UTF-8
encoding doesn&#x27;t allow for this. Instead, you need to work with a
character iterator to view the individual characters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Exercise 5&lt;&#x2F;strong&gt; Use &lt;code&gt;std::env::args&lt;&#x2F;code&gt; and the &lt;code&gt;chars()&lt;&#x2F;code&gt; method on
&lt;code&gt;String&lt;&#x2F;code&gt; to print out the number of characters in each command line
arguments. Bonus points: also print out the number of bytes. Sample
usage:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run שלום
arg: target&#x2F;debug&#x2F;foo, characters: 16, bytes: 16
arg: שלום, characters: 4, bytes: 8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t forget, the first argument is the name of the executable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lifetimes-in-data-structures&quot;&gt;Lifetimes in data structures&lt;&#x2F;h2&gt;
&lt;p&gt;One final topic for today is lifetimes in data structures. It&#x27;s
entirely possible to keep references in your data structures. However,
when you do so, you need to be explicit about their lifetimes. For
example, this will fail to compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead, you would need to write it as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The general recommendation I&#x27;ve received, and which I&#x27;d pass on, is
avoid this when possible. Things end up getting significantly more
complicated when dealing with lifetime parameters in data
structures. Typically, you should use owned versions of values
(e.g. &lt;code&gt;String&lt;&#x2F;code&gt; instead of &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, or &lt;code&gt;Vec&lt;&#x2F;code&gt; or array instead of a
slice) inside your data structures. In such a case, you need to
ensure that the lifetime of the reference within the structure
outlives the structure itself.&lt;&#x2F;p&gt;
&lt;p&gt;There are times when you can avoid some extra cloning and allocation
if you use references in your data structure, and the time will
probably come when you need to do it. But I&#x27;d recommend waiting until
your profiling points you at a specific decision being the bottleneck.
For more information, see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch10-03-lifetime-syntax.html#lifetime-annotations-in-struct-definitions&quot;&gt;the Rust book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-and-slices-in-apis&quot;&gt;References and slices in APIs&lt;&#x2F;h2&gt;
&lt;p&gt;Some general advice which I received and has mostly steered me
correctly is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When receiving parameters, prefer slices when possible&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However, there are times when this is overly simplistic. If you want a
deeper dive, there a great blog post covering some trade-offs in
public APIs: &lt;a href=&quot;https:&#x2F;&#x2F;phaazon.net&#x2F;blog&#x2F;on-owning-borrowing-pub-interface&quot;&gt;On dealing with owning and borrowing in public
interfaces&lt;&#x2F;a&gt;. The
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;9tzygo&#x2F;on_dealing_with_owning_and_borrowing_in_public&#x2F;&quot;&gt;Reddit
discussion&lt;&#x2F;a&gt;
is also great.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rule of Three - Parameters, Iterators, and Closures - Rust Crash Course lesson 5 - exercise solutions</title>
		<published>2018-11-21T00:00:00+00:00</published>
		<updated>2018-11-21T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-05-rule-of-three-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-05-rule-of-three-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Rule of Three - Parameters, Iterators, and Closures.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    *x *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the variable &lt;code&gt;x&lt;&#x2F;code&gt; does not need to be mutable, since we&#x27;re
only modifying the value it references.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;The (IMO) straightforward solution is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;IntoIterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntoIter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= InfiniteUnitIter;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;IntoIter {
        InfiniteUnitIter
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnitIter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnitIter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;()&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; InfiniteUnit {
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;count == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, if you want to be a bit more clever, there&#x27;s already a
function in the standard library that creates an infinite iterator,
called
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;fn.repeat.html&quot;&gt;&lt;code&gt;repeat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Using
that, you can bypass the extra struct here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;IntoIterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IntoIter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= std::iter::Repeat&amp;lt;()&amp;gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;IntoIter {
        std::iter::repeat(())
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; InfiniteUnit {
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;count == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;The closure version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(msg);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(msg);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the function version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(msg);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(msg);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;say_hi&lt;&#x2F;code&gt; is no longer referring to any variables in the local
scope, it doesn&#x27;t need to be a closure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_message);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_message);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-5&quot;&gt;Exercise 5&lt;&#x2F;h2&gt;
&lt;p&gt;The first error message we get is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `map` found for type `std::vec::Vec&amp;lt;u32&amp;gt;` in the current scope
 --&amp;gt; main.rs:5:23
  |
5 |         for i in nums.map(unimplemented!()) {
  |                       ^^^
  |
  = note: the method `map` exists but the following trait bounds were not satisfied:
          `&amp;amp;mut std::vec::Vec&amp;lt;u32&amp;gt; : std::iter::Iterator`
          `&amp;amp;mut [u32] : std::iter::Iterator`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks like we need to get an &lt;code&gt;Iterator&lt;&#x2F;code&gt; out of our &lt;code&gt;nums&lt;&#x2F;code&gt;. We have
three different choices: &lt;code&gt;into_iter()&lt;&#x2F;code&gt;, &lt;code&gt;iter()&lt;&#x2F;code&gt;, and
&lt;code&gt;iter_mut()&lt;&#x2F;code&gt;. Since we need to use the result multiple times, and
don&#x27;t need any mutation, &lt;code&gt;iter()&lt;&#x2F;code&gt; seems like the right call. Once we
replace &lt;code&gt;nums.map&lt;&#x2F;code&gt; with &lt;code&gt;nums.iter().map&lt;&#x2F;code&gt;, we can move on to the
&lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; bit.&lt;&#x2F;p&gt;
&lt;p&gt;We need a closure that will double a number. That&#x27;s pretty easy: &lt;code&gt;|x| x * 2&lt;&#x2F;code&gt;. Plugging that in works! Extra challenge: is that closure a
&lt;code&gt;FnOnce&lt;&#x2F;code&gt;, &lt;code&gt;FnMut&lt;&#x2F;code&gt;, or &lt;code&gt;Fn&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-6&quot;&gt;Exercise 6&lt;&#x2F;h2&gt;
&lt;p&gt;You need to add a &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; call on the &lt;code&gt;create&lt;&#x2F;code&gt; call:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::io::Write;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I was clicked.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Like this, you&#x27;ll get a warning from the compiler that you&#x27;ve ignored
the &lt;code&gt;Result&lt;&#x2F;code&gt; coming from &lt;code&gt;write_all&lt;&#x2F;code&gt;. That&#x27;s bad practice, and the
compiler is rightfully yelling at you. You can fix that with
&lt;code&gt;unwrap()&lt;&#x2F;code&gt;. However, that&#x27;s also bad practice :).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-7&quot;&gt;Exercise 7&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; gtk;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;gtk::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;gtk::{Button, Window, WindowType};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::cell::RefCell;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::io::Write;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;std::error::Error&amp;gt;&amp;gt; {
    gtk::init()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; window = Window::new(WindowType::Toplevel);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;First GTK+ Program&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_default_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;350&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; button = Button::new_with_label(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Click me!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;button);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;show_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;connect_delete_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_, _| {
        gtk::main_quit();
        Inhibit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    });

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = RefCell::new(file);
    button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;connect_clicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|_| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I was clicked.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error writing to file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e),
        }
    });

    gtk::main();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why (I believe) Stackage succeeded</title>
		<published>2018-11-20T00:00:00+00:00</published>
		<updated>2018-11-20T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/why-i-believe-stackage-succeeded/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/why-i-believe-stackage-succeeded/</id>
		<content type="html">&lt;p&gt;A few days ago I published a post on &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;11&#x2F;stackage-history-philosophy-future&quot;&gt;the history of
Stackage&lt;&#x2F;a&gt;. I
have another proposal coming out soon on formalizing some aspects of
the Commercial Haskell Special Interest Group. Now seems like a good
opportunity to share with you what I think makes Stackage a successful project and how we could improve Haskell resources using similar techniques.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on how you measure it, Stackage is the largest community
project I&#x27;ve ever started. The Github repo has (at time of writing)
567 contributors. For some comparison, Stack has 316 contributors, the
WAI megarepo has 148, and the Yesod megarepo has 188. For those
familiar with the process, contributing to Stackage is a much lower
bar, but as you&#x27;ll see, that&#x27;s kind of my point here. Stackage also
has a wonderful team running it called the Stackage Curators,
consisting of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;CURATORS.md&quot;&gt;8
people&lt;&#x2F;a&gt;
(including myself).&lt;&#x2F;p&gt;
&lt;p&gt;I consider Stackage a success. It has addressed the goals I&#x27;d hoped to
achieve (see the aforementioned History of Stackage post for more
information). In this post, I&#x27;d like to explore some of the design
choices—especially on the social side—that allowed
Stackage to succeed. And then I&#x27;d like to see if we can learn some
lessons for community projects in general.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clear-vision&quot;&gt;Clear vision&lt;&#x2F;h2&gt;
&lt;p&gt;Stackage starts off with a clear vision: &amp;quot;Stable, vetted Hackage.&amp;quot;
That can further be described as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grab upstream Haskell packages&lt;&#x2F;li&gt;
&lt;li&gt;Try to build them together&lt;&#x2F;li&gt;
&lt;li&gt;Try to run test suites&lt;&#x2F;li&gt;
&lt;li&gt;If all of that works, publish a snapshot that end users can use via
tooling like Stack, Nix, or (with some caveats) cabal-install&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, give package authors feedback on what went wrong&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This seems straightforward, and makes it easy for people to see if
they care about participating. As a trivial example, we&#x27;re talking
about Haskell packages here. Someone who exclusively writes Rust knows
that they won&#x27;t be interested in contributing to this project most
likely.&lt;&#x2F;p&gt;
&lt;p&gt;It also defines what is and is not in scope for Stackage. For example,
an oft requested feature for Stackage is the ability to upload
packages to it. This doesn&#x27;t fit in with the vision defined above of
grabbing &lt;em&gt;upstream&lt;&#x2F;em&gt; Haskell packages. We do end up getting into some
grey areas (should Stackage patch packages like Debian does? should
Stackage accept packages from locations besides Hackage?). But this
initial vision does a lot to help guide things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;easy-contribution&quot;&gt;Easy contribution&lt;&#x2F;h2&gt;
&lt;p&gt;As I&#x27;m saying a lot recently, I&#x27;m a big believer in simplifying the
onboarding experience. Contributing a new package to Stackage is
intentionally very simple: send a pull request adding a few lines to a
YAML file and see if CI passes. We could have demanded more rigorous
criteria, like proof that the package works with the latest Stackage
Nightly. We could have used a different format than YAML. We could
have hosted the repo somewhere besides Github.&lt;&#x2F;p&gt;
&lt;p&gt;However, for our target audience, Github, YAML, and watching a CI
system are all fairly standard. If this was a less technical audience,
I may have instead created a web application with Google-backed
authentication and a webform for entering package names. Make the
contribution and onboarding process as easy as possible for the target
audience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;logical-requirements&quot;&gt;Logical requirements&lt;&#x2F;h2&gt;
&lt;p&gt;There is one requirement for getting a package into Stackage: it must
build and pass test cases with all of the other packages in the
snapshot. This is a machine checkable requirement, making it easy to
vet whether or not requirements have been met. And the requirements
follow directly from the vision stated above.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t think we&#x27;ve yet had someone object to this requirement. If you
don&#x27;t want to ensure your package is compatible with other packages on
Hackage, that&#x27;s fine, but clearly Stackage isn&#x27;t a project you&#x27;d be
interested in contributing to. Having the requirement stem directly
from the vision reduces the scope of conflict.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not to say that there are no disagreements. We have constant
back-and-forths about how frequently LTS snapshots should be cut, how
aggressively we should prune packages with restrictive upper bounds,
when skipping tests is appropriate, etc. But the scope of these
debates is relatively contained. It also brings us to our next point:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;public-discussion&quot;&gt;Public discussion&lt;&#x2F;h2&gt;
&lt;p&gt;As this blog post demonstrates, I have a tendency to over-communicate
publicly. But I think this is better than the alternative. We have a
private Stackage Curators channel for discussing day-to-day boring
matters (who&#x27;s on duty, reviewing blog posts, etc). But all major
decisions these days are shared in an issue tracker, a blog post, a
mailing list, or a Gitter discussion. And usually in more than one of
those!&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, we try hard to document the decisions we&#x27;ve made in the
past. Both the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;MAINTAINERS.md&quot;&gt;&lt;code&gt;MAINTAINERS.md&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;CURATORS.md&quot;&gt;&lt;code&gt;CURATORS.md&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
say quite a bit about how Stackage is run. We&#x27;ve tried to stress-test
these documents by having new members of the curator team onboard
themselves with the documentation, and then asking questions on what&#x27;s
unclear. If information is missing, we fill it into the
documents. Ideally, little to no information is retained exclusively
in someone&#x27;s head.&lt;&#x2F;p&gt;
&lt;p&gt;I wouldn&#x27;t say we&#x27;ve been perfect here. In fact, I&#x27;ve been the biggest
culprit of problems here. When Stackage was a one-man show, I &lt;em&gt;did&lt;&#x2F;em&gt;
have a lot of knowledge trapped in my head undocumented. I &lt;em&gt;did&lt;&#x2F;em&gt;
implicitly make decisions by myself (many times without even realizing
it). The rest of the curator team has been a very good influence on
me, and has encouraged more structure in how we document and discuss
our work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;positive-benefits-for-participation&quot;&gt;Positive benefits for participation&lt;&#x2F;h2&gt;
&lt;p&gt;If someone asked me &amp;quot;why should I participate in Stackage?&amp;quot; I could
give some clear benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Get notified if your packages no longer compile with their dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Get your test suites run in a different environment for more thorough testing&lt;&#x2F;li&gt;
&lt;li&gt;Make it easy to access your packages from Stack and Nix&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If those benefits are appealing, and outweigh the costs of
contributing to Stackage, then great! And if not, no hard
feelings. Stackage is fully opt-in, and therefore there&#x27;s only
positive pressure to be a part of it, no negative backlash for failing
to comply.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reasonably-decent-automation&quot;&gt;Reasonably decent automation&lt;&#x2F;h2&gt;
&lt;p&gt;Over the years, the stackage-curator tool has evolved quite a
bit. Personally, I think the process of curating Stackage is
relatively easy. I hope my fellow curators feel the same way. But with
2,000 packages being built regularly, it would be all but impossible
to maintain Stackage without decent tooling. With that said, let&#x27;s get
to improvements.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;&#x2F;h2&gt;
&lt;p&gt;Stackage can and should improve. I believe the two biggest areas for improvement currently are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tooling&lt;&#x2F;strong&gt; stackage-curator is good, but it&#x27;s showing its
age. We&#x27;ve already got &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;4217&quot;&gt;some plans for
improvements&lt;&#x2F;a&gt;,
including possibly using Nix for doing the building (to both
simplify our tooling, and get better testing of the &lt;code&gt;stack2nix&lt;&#x2F;code&gt;
pipeline).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Communications&lt;&#x2F;strong&gt; As I mentioned, the curator team has been a great
influence on better communication. We&#x27;re hoping to continue
that. Some of the tooling improvements will hopefully make it easier
to communicate why packages have been held back in LTS minor bumps,
for example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m sure there are other improvements to be made as well, these are
just the highest two on my personal list.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lessons-for-other-projects&quot;&gt;Lessons for other projects&lt;&#x2F;h2&gt;
&lt;p&gt;As I mentioned, I&#x27;m going to be following up soon with a proposal
related to Commercial Haskell. I&#x27;m hoping the points above can
influence other projects towards making good decisions towards
success. For example, in the case of Commercial Haskell, I don&#x27;t think
we&#x27;ve done enough to clarify the vision of the project.&lt;&#x2F;p&gt;
&lt;p&gt;We can also apply some of these lessons to other Haskell community
projects. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It seems like Hackage has a clear vision: a central package
repository for all open source Haskell code which uses the Cabal
build system. However, a secondary goal—complying with the PVP
in order to allow for dependency solving—has been a highly
contentious issue. I&#x27;ve already &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;haskell-ecosystem-requests&quot;&gt;requested clarification of this
point&lt;&#x2F;a&gt;. In
my opinion, if there was a clearly stated vision for Hackage in
&lt;em&gt;either&lt;&#x2F;em&gt; direction, many of our problems would be solved.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the vision is &amp;quot;central package repository,&amp;quot; then it follows
naturally that non-PVP-compliant code should still be encouraged
to be submitted to Hackage, since that&#x27;s in keeping with the
vision statement.&lt;&#x2F;li&gt;
&lt;li&gt;If, by contrast, PVP compliance for dependency solving is the
goal, then it makes sense that people with different goals would
upload their Haskell packages elsewhere.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Haskell Platform (the original, full version) solved multiple
different goals at the same time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An easy method for installing the Haskell toolchain&lt;&#x2F;li&gt;
&lt;li&gt;An opinionated set of &amp;quot;batteries included&amp;quot; packages&lt;&#x2F;li&gt;
&lt;li&gt;A committee process for vetting libraries for high quality&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I don&#x27;t see a problem with &lt;em&gt;any&lt;&#x2F;em&gt; of these goals. However, putting
them together created problems. For example, bundling of the
&amp;quot;batteries included&amp;quot; packages with HP led to a situation where it
was (with old versions of cabal-install) difficult to upgrade
packages, leading to in some cases of highly-security-vulnerable
packages being shipped for years.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately, the Haskell Platform Core installer addressed a large
part of this issue, since it minimized the vision of the project (an
installer provided the most common tooling, including &lt;em&gt;both&lt;&#x2F;em&gt;
cabal-install and Stack)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What&#x27;s the purpose of the haskell.org homepage? This has been a
highly fought over issue, but defining a vision would have helped
significantly. What is the purpose?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Convince hobbyists to try it out&lt;&#x2F;li&gt;
&lt;li&gt;Provide a homepage for professors to send their students to get
installation instructions&lt;&#x2F;li&gt;
&lt;li&gt;Be a hub for Haskell community information and discussion&lt;&#x2F;li&gt;
&lt;li&gt;Document all common methods of using Haskell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Stating what the vision is, having public discussion about how to
achieve it, and finding methods to address alternative goals, could
greatly help with community tensions over the site.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Within Stack—as I mentioned in my previous post—I see some possibilities for decoupling. For example, we could separate off the GHC installation code from everything else. This mostly falls into the same category: defining a clear vision (opinionated build tool) and letting the less opinionated piece (method of installing GHC) stand on its own.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;haskell-lang.org was &lt;em&gt;not&lt;&#x2F;em&gt; started correctly. The vision was wrong. It should have been something like &amp;quot;Haskell for people who want a highly opinionated set of guidelines.&amp;quot; The naming should have reflected that. Hopefully that&#x27;s something that can be rectified in the near future.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rule of Three - Parameters, Iterators, and Closures - Rust Crash Course lesson 5</title>
		<published>2018-11-19T00:00:00+00:00</published>
		<updated>2018-11-19T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-05-rule-of-three/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-05-rule-of-three/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this lesson, we&#x27;re going to cover what I&#x27;m dubbing the &amp;quot;rule of
three,&amp;quot; which applies to function parameters, iterators, and
closures. We&#x27;ve already seen this rule applied to function parameters,
but didn&#x27;t discuss is so explicitly. We&#x27;ll expand on parameters, and
use that to launch into new information on both iterators and
closures.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-parameters&quot;&gt;Types of parameters&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing I want to deal with is a potential misconception. This
may be one of those &amp;quot;my brain has been scrambled by Haskell&amp;quot;
misconceptions that imperative programmers won&#x27;t feel, so apologies if
I&#x27;m just humoring myself and other Haskellers.&lt;&#x2F;p&gt;
&lt;p&gt;Do these two functions have the same type signature?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Haskeller in me screams &amp;quot;they&#x27;re different!&amp;quot; However, they&#x27;re
&lt;em&gt;exactly the same&lt;&#x2F;em&gt;. The &lt;em&gt;inner mutability&lt;&#x2F;em&gt; of the &lt;code&gt;person&lt;&#x2F;code&gt; variable in
the function is &lt;em&gt;irrelevant&lt;&#x2F;em&gt; to someone calling the function. The
caller of the function will move the &lt;code&gt;Person&lt;&#x2F;code&gt; value into the function,
regardless of whether the value can be mutated or not. We&#x27;ve already
seen a hint of this: the fact that we can pass an immutable value to a
function like &lt;code&gt;foo&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(alice); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; it works!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that misconception out of the way, let&#x27;s consider two other
similar functions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Person) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Firstly, it&#x27;s pretty easy to say that both &lt;code&gt;baz&lt;&#x2F;code&gt; and &lt;code&gt;bin&lt;&#x2F;code&gt; have
different signatures than &lt;code&gt;foo&lt;&#x2F;code&gt;. These are taking references to a
&lt;code&gt;Person&lt;&#x2F;code&gt;, not a &lt;code&gt;Person&lt;&#x2F;code&gt; itself. But what about &lt;code&gt;baz&lt;&#x2F;code&gt; vs &lt;code&gt;bin&lt;&#x2F;code&gt;? Are
they the same or different? You may be tempted to follow the same
logic as &lt;code&gt;foo&lt;&#x2F;code&gt; vs &lt;code&gt;bar&lt;&#x2F;code&gt; and decide that the &lt;code&gt;mut&lt;&#x2F;code&gt; is an internal
detail of the function. But this isn&#x27;t true! Observe:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; this works
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;alice); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; this fails
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; but this works
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first call to &lt;code&gt;bin&lt;&#x2F;code&gt; will not compile, because &lt;code&gt;bin&lt;&#x2F;code&gt; requires a
&lt;em&gt;mutable&lt;&#x2F;em&gt; reference, and we&#x27;ve provided an &lt;em&gt;immutable&lt;&#x2F;em&gt; reference. We
need to use the second version of the call. And not only does this
have a &lt;em&gt;syntactic&lt;&#x2F;em&gt; difference, but a &lt;em&gt;semantic&lt;&#x2F;em&gt; difference as well:
we&#x27;ve taken a mutable reference, which means we can have no other
references at the same time (remember our borrow rules from lesson 2).&lt;&#x2F;p&gt;
&lt;p&gt;The upshot of this is that there are three different ways we can pass
a value into a function which appear at the type level:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pass by value (move semantics), like &lt;code&gt;foo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Pass by immutable reference, like &lt;code&gt;baz&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Pass by mutable reference, like &lt;code&gt;bin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, orthogonally, the variable that captures that parameters
can itself be either immutable or mutable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutable-vs-immutable-pass-by-value&quot;&gt;Mutable vs immutable pass-by-value&lt;&#x2F;h3&gt;
&lt;p&gt;This one is relatively easy to see. What extra functionality do we get
by having a mutable pass-by-value? The ability to mutate the value of
course! Let&#x27;s look at two different ways of implementing a birthday
function, which increases someone&#x27;s age by 1.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;birthday_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) -&amp;gt; Person {
    Person {
        name: person.name,
        age: person.age + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;birthday_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Person) -&amp;gt; Person {
    person.age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    person
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice1 = Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice1);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;birthday_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(alice1);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice2);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;birthday_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(alice2);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice3);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some important takeaways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;code&gt;_immutable&lt;&#x2F;code&gt; implementation follows a more functional idiom,
creating a new &lt;code&gt;Person&lt;&#x2F;code&gt; value by deconstructing the original
&lt;code&gt;Person&lt;&#x2F;code&gt; value. This works just fine in Rust, but is not idiomatic,
and potentially less efficient.&lt;&#x2F;li&gt;
&lt;li&gt;We call both versions of this function in exactly the same way,
reinforcing the claim that these two functions have the same
signature.&lt;&#x2F;li&gt;
&lt;li&gt;You cannot reuse the &lt;code&gt;alice1&lt;&#x2F;code&gt; or &lt;code&gt;alice2&lt;&#x2F;code&gt; values in &lt;code&gt;main&lt;&#x2F;code&gt;, since
they&#x27;ve been moved during their calls.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;alice2&lt;&#x2F;code&gt; is an immutable variable, but it still gets passed in to a
function which mutates it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mutable-vs-immutable-pass-by-mutable-reference&quot;&gt;Mutable vs immutable pass-by-mutable-reference&lt;&#x2F;h3&gt;
&lt;p&gt;This one already gets significantly harder to observe, which indicates a simple fact of Rust: &lt;em&gt;it&#x27;s unusual to want a mutable variable for references&lt;&#x2F;em&gt;. The example below is very contrived, and requires playing with the more advanced concept of explicit lifetime parameters to even make it make sense. But it does demonstrate the difference between where the &lt;code&gt;mut&lt;&#x2F;code&gt; appears.&lt;&#x2F;p&gt;
&lt;p&gt;Before we dive in: parameters that begin with a single quote (&lt;code&gt;&#x27;&lt;&#x2F;code&gt;) are
&lt;em&gt;lifetime parameters&lt;&#x2F;em&gt;, and indicate how long a reference needs to
live. In the examples below, we&#x27;re saying &amp;quot;the two references must
have the same lifetime.&amp;quot; We won&#x27;t cover this in more detail here, at
least not yet. If you want to learn about lifetimes, please &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;2018-edition&#x2F;ch10-03-lifetime-syntax.html&quot;&gt;check out
the Rust
book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;OK, let&#x27;s see a difference between an immutable variable holding a
mutable reference and a mutable variable holding a mutable reference!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;birthday_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) {
    person.age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;birthday_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;replacement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) {
    person = replacement;
    person.age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bob = Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, Bob 1: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice, bob);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;birthday_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, Bob 2: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice, bob);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;birthday_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bob);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice 3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, Bob 3: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice, bob);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; does not compile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;birthday_immutable_broken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;replacement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Person) {
    person = replacement;
    person.age += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;birthday_immutable&lt;&#x2F;code&gt; is fairly simple. We have a mutable reference,
and we&#x27;ve stored it in an immutable variable. We&#x27;ve completely free to
mutate the value pointed to by that reference. The takeaway is: we&#x27;re
mutating the value, &lt;em&gt;not&lt;&#x2F;em&gt; the variable, which is remaining the same.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;birthday_mutable&lt;&#x2F;code&gt; is a contrived, ugly mess, but it demonstrates our
point. Here, we take &lt;em&gt;two&lt;&#x2F;em&gt; references: a &lt;code&gt;person&lt;&#x2F;code&gt;, and a
&lt;code&gt;replacement&lt;&#x2F;code&gt;. They&#x27;re both mutable references, but &lt;code&gt;person&lt;&#x2F;code&gt; is in a
mutable variable. The first thing we do is &lt;code&gt;person = replacement;&lt;&#x2F;code&gt;. This changes what our &lt;code&gt;person&lt;&#x2F;code&gt; variable is pointing at,
and &lt;em&gt;does not modify&lt;&#x2F;em&gt; the original value being pointed at by the
reference at all. In fact, when compiling this, we&#x27;ll get a warning
that we never used the value passed to &lt;code&gt;person&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: value passed to `person` is never read
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we needed to mark both &lt;code&gt;alice&lt;&#x2F;code&gt; and &lt;code&gt;bob&lt;&#x2F;code&gt; as mutable in
&lt;code&gt;main&lt;&#x2F;code&gt; in this example. That&#x27;s because we pass them by mutable
reference, which requires that we have the ability to mutate
them. This is different from pass-by-value with move semantics,
because in our &lt;code&gt;main&lt;&#x2F;code&gt; function, we can directly observe the effect of
mutating the references we&#x27;ve passed in.&lt;&#x2F;p&gt;
&lt;p&gt;Also notice that we also have a &lt;code&gt;birthday_immutable_broken&lt;&#x2F;code&gt;
version. As you may guess from the name, it doesn&#x27;t compile. We cannot
change what &lt;code&gt;person&lt;&#x2F;code&gt; points to if it is an immutable variable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Figure out what the output of this program is going to
be before you run it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutable-vs-immutable-pass-by-immutable-reference&quot;&gt;Mutable vs immutable pass-by-immutable-reference&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m not actually going to cover this case, since it&#x27;s basically the
same as the previous one. If you mark a variable as mutable, you can
change which reference it holds. Feel free to play around with an
example like the one above using immutable references.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutable-to-immutable&quot;&gt;Mutable to immutable&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s point out one final bit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;needs_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    *x *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;needs_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;needs_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;needs_mutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;needs_immutable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From what I&#x27;ve told you so far, you should expect this program to fail
to compile. &lt;code&gt;y&lt;&#x2F;code&gt; is of type &lt;code&gt;&amp;amp;mut u32&lt;&#x2F;code&gt;, but we&#x27;re passing it to
&lt;code&gt;needs_immutable&lt;&#x2F;code&gt; which requires a &lt;code&gt;&amp;amp;u32&lt;&#x2F;code&gt;. Type mismatch, go home!&lt;&#x2F;p&gt;
&lt;p&gt;Not so fast: since the guarantees of a mutable reference are strictly
stronger than an immutable reference, you can always use a mutable
reference where an immutable was needed. (Hold onto this, it will be
important for closures below.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-of-the-rule-of-three-for-parameters&quot;&gt;Summary of the rule of three for parameters&lt;&#x2F;h3&gt;
&lt;p&gt;There are three types of parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pass by value&lt;&#x2F;li&gt;
&lt;li&gt;Pass by immutable reference&lt;&#x2F;li&gt;
&lt;li&gt;Pass by mutable reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is what I&#x27;m calling the rule of three. The captured variables
within a function can either be mutable or immutable, which is
orthogonal to the type of the parameter. However, it&#x27;s by far most
common to have a mutable variable with a pass-by-value. Also, at the
call site, a variable must be mutable if it is called on a pass by
mutable reference functions. Finally, you can use a mutable reference
where an immutable was requested.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;Fix the program below so that it outputs the number 10. Ensure that
there are no compiler warnings.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    x *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hint: you&#x27;ll need to know how to &lt;em&gt;dereference&lt;&#x2F;em&gt; a reference, by putting
a asterisk (&lt;code&gt;*&lt;&#x2F;code&gt;) in front of the variable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iterators&quot;&gt;Iterators&lt;&#x2F;h2&gt;
&lt;p&gt;What&#x27;s the output of the program below?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s right: it prints the numbers 1 to 5. How about this one?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It prints &lt;code&gt;1,1&lt;&#x2F;code&gt;, &lt;code&gt;1,2&lt;&#x2F;code&gt;, ..., &lt;code&gt;1,5&lt;&#x2F;code&gt;, &lt;code&gt;2,1&lt;&#x2F;code&gt;, ..., &lt;code&gt;2,5&lt;&#x2F;code&gt;. Cool, easy
enough. Let&#x27;s move &lt;code&gt;nums&lt;&#x2F;code&gt; a bit. What does this do?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trick question: it doesn&#x27;t compile!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of moved value: `nums`
 --&amp;gt; main.rs:4:18
  |
4 |         for j in nums {
  |                  ^^^^ value moved here in previous iteration of loop
  |
  = note: move occurs because `nums` has type `std::vec::Vec&amp;lt;i32&amp;gt;`, which does not implement the `Copy` trait

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, that kind of makes sense. The first time we run through the
outer loop, we &lt;em&gt;move&lt;&#x2F;em&gt; the &lt;code&gt;nums&lt;&#x2F;code&gt; value into the inner loop. Then, we
can&#x27;t use the &lt;code&gt;nums&lt;&#x2F;code&gt; value again on the second pass through the
loop. OK, logical.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; This was one of my personal &amp;quot;mind blown&amp;quot; moments with
Rust, realizing how sophisticated lifetime tracking was to work
through loops like this. Rust is pretty amazing.&lt;&#x2F;p&gt;
&lt;p&gt;We can go back to our previous version and put &lt;code&gt;nums&lt;&#x2F;code&gt; inside the first
&lt;code&gt;for&lt;&#x2F;code&gt; loop. That means recreating the value each time we pass through
that outer &lt;code&gt;for&lt;&#x2F;code&gt; loop. For our little vector example, it&#x27;s not a big
deal. But imagine constructing &lt;code&gt;nums&lt;&#x2F;code&gt; was expensive. This would be a
major overhead!&lt;&#x2F;p&gt;
&lt;p&gt;If we want to avoid the move of &lt;code&gt;nums&lt;&#x2F;code&gt;, can we get away with just
borrowing it instead? Yes we can!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;nums {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works, but I&#x27;ve got a question for you: what&#x27;s the type of &lt;code&gt;j&lt;&#x2F;code&gt;?
I&#x27;ve got a sneaky little trick to test out different options. If you
throw this in just above the &lt;code&gt;println!&lt;&#x2F;code&gt; call, you&#x27;ll get an error
message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= j;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this will compile just fine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= j;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By iterating over a reference to &lt;code&gt;nums&lt;&#x2F;code&gt;, we got a reference to each
value instead of the value itself. That makes sense. Can we complete
our &amp;quot;rule of three&amp;quot; with mutable references? Yet again, yes!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= j;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
            *j *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Challenges&lt;&#x2F;strong&gt; First, there&#x27;s a compilation error in the program above. Try to catch
it before asking the compiler to help. Second, guess the output of
this program before running it.&lt;&#x2F;p&gt;
&lt;p&gt;Our rule of three translates into iterators as well! We have can
iterators of values, iterators of references, and iterators of mutable
references. Sweet!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-nomenclature&quot;&gt;New nomenclature&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;Vec&lt;&#x2F;code&gt; struct has three different methods on it that are relevant to our examples above. Starting with the mutable case, we can replace the line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The signature of that method is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; IterMut&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly, we&#x27;ve got a &lt;code&gt;iter()&lt;&#x2F;code&gt; method that can replace our immutable
reference case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= j;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, finally, what about the iterator of values case? There, the
nomenclature is &lt;code&gt;into_iter&lt;&#x2F;code&gt;. The idea is that we are &lt;em&gt;converting&lt;&#x2F;em&gt; the
existing value &lt;em&gt;into&lt;&#x2F;em&gt; an iterator, consuming the previous value (the
&lt;code&gt;Vec&lt;&#x2F;code&gt; in this case) completely. This code won&#x27;t compile, go ahead and
fix it by moving the &lt;code&gt;let nums&lt;&#x2F;code&gt; statement.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;reexamining-for-loops&quot;&gt;Reexamining for loops&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s a cool little trick I didn&#x27;t mention before. &lt;code&gt;for&lt;&#x2F;code&gt; loops are a
bit more flexible than I&#x27;d implied. The &lt;code&gt;into_iter&lt;&#x2F;code&gt; method I mention
is actually part of a trait, appropriately named
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.IntoIterator.html&quot;&gt;&lt;code&gt;IntoIterator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Whenever
you use &lt;code&gt;for x in y&lt;&#x2F;code&gt;, the compiler automatically calls &lt;code&gt;into_iter()&lt;&#x2F;code&gt;
on &lt;code&gt;y&lt;&#x2F;code&gt;. This allows you to loop over types which don&#x27;t actually have
their own implementation of &lt;code&gt;Iterator&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h3&gt;
&lt;p&gt;Make this program compile by defining an &lt;code&gt;IntoIterator&lt;&#x2F;code&gt;
implementation for &lt;code&gt;InfiniteUnit&lt;&#x2F;code&gt;. Do &lt;em&gt;not&lt;&#x2F;em&gt; define an &lt;code&gt;Iterator&lt;&#x2F;code&gt;
implementation for it. You&#x27;ll probably want to define an extra
datatype. (Extra credit: also try to find a helper function in the
standard library that repeats values.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InfiniteUnit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; InfiniteUnit {
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;count == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;summary-of-the-rule-of-three-for-iterators&quot;&gt;Summary of the rule of three for iterators&lt;&#x2F;h3&gt;
&lt;p&gt;Just like function parameters, iterators come in three flavors,
corresponding to the following naming scheme:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;into_iter()&lt;&#x2F;code&gt; is an iterator of values, with move semantics&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;iter()&lt;&#x2F;code&gt; is an iterator of immutable references&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;iter_mut()&lt;&#x2F;code&gt; is an iterator of mutable references&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Only &lt;code&gt;iter_mut()&lt;&#x2F;code&gt; requires that the original variable itself be mutable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closures&quot;&gt;Closures&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve danced around closures a bit throughout the crash course so
far. Closures are like functions, in that they can be called on some
arguments. Closures are unlike functions in that they can capture
values from the local scope. We&#x27;ll demonstrate this in an example,
after a word of warning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;One word of warning&lt;&#x2F;strong&gt; If you&#x27;re coming from a non-functional
programming background, you&#x27;ll likely find closures in Rust very
powerful, and surprisingly common in library usage. If you come from a
functional programming background, you&#x27;ll likely be annoyed at how
much you have to think about ownership of data when working with
closures. As a Haskeller, this is still the aspect of Rust I most
often get caught on. I promise, the trade-offs in the design are
logical and necessary to achieve Rust&#x27;s goals, but it can feel a bit
onerous when compared to Haskell, or even compared to Javascript.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, back to our function vs closure thing. Did you know that you can define a function &lt;em&gt;inside another function&lt;&#x2F;em&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s pretty nifty. Let&#x27;s slightly refactor that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, Rust doesn&#x27;t like that very much:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0434]: can&amp;#39;t capture dynamic environment in a fn item
 --&amp;gt; main.rs:4:24
  |
4 |         println!(&amp;quot;{}&amp;quot;, msg);
  |                        ^^^
  |
  = help: use the `|| { ... }` closure form instead

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately, the compiler tells us &lt;em&gt;exactly&lt;&#x2F;em&gt; how to fix it: use a
closure! Let&#x27;s rewrite that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have a closure (introduced by &lt;code&gt;||&lt;&#x2F;code&gt;) which takes 0
arguments. And everything just works.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; You can shorten this a bit with &lt;code&gt;let say_hi = || println!(&amp;quot;{}&amp;quot;, msg);&lt;&#x2F;code&gt;,
which is more idiomatic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 3&lt;&#x2F;strong&gt; Rewrite the above so that instead of taking 0
arguments, &lt;code&gt;say_hi&lt;&#x2F;code&gt; takes a single argument: the &lt;code&gt;msg&lt;&#x2F;code&gt; variable. Then
try out the &lt;code&gt;fn&lt;&#x2F;code&gt; version again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-type-of-a-closure&quot;&gt;The type of a closure&lt;&#x2F;h2&gt;
&lt;p&gt;What exactly is the type of &lt;code&gt;say_hi&lt;&#x2F;code&gt;? I&#x27;m going to use an ugly trick
to get the compiler to tell us: give it the &lt;em&gt;wrong&lt;&#x2F;em&gt; type, and then try
to compile. It&#x27;s probably safe to assume that a closure isn&#x27;t a &lt;code&gt;u32&lt;&#x2F;code&gt;,
so let&#x27;s try this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we get the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;E0308&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]: mismatched types
 --&amp;gt; main.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;23
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;closure
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|
  = note: expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;`
             found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; `[closure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]`

error: aborting due to previous error

For more information about this error, try `rustc --explain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;E0308&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;[closure@main.rs:3:23: 3:48]&lt;&#x2F;code&gt; looks like a weird type... but let&#x27;s
just give it a shot and see what happens:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi: [closure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] = |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But the compiler shoots us down:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error: expected one of `!`, `(`, `+`, `::`, `;`, `&amp;lt;`, or `]`, found `@`
 --&amp;gt; main.rs:3:25
  |
3 |     let say_hi: [closure@main.rs:3:23: 3:48] = |msg| println!(&amp;quot;{}&amp;quot;, msg);
  |         ------          ^ expected one of 7 possible tokens here
  |         |
  |         while parsing the type for `say_hi`

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh well, that isn&#x27;t a valid type. What exactly is the compiler telling
us then?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;anonymous-types&quot;&gt;Anonymous types&lt;&#x2F;h2&gt;
&lt;p&gt;The types of closures are anonymous in Rust. We cannot directly refer
to them at all. But this leaves us in a bit of a pickle. What if we
want to pass a closure into another function? For example, let&#x27;s try
out this program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_message);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_message);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve added a type annotation on the &lt;code&gt;msg&lt;&#x2F;code&gt; parameter in the
closure. These are generally optional in closures, unless type
inference fails. And with our current broken code, type inference is
definitely failing. We&#x27;re including it now to get better error
messages later.&lt;&#x2F;p&gt;
&lt;p&gt;We also now have a type parameter, called &lt;code&gt;F&lt;&#x2F;code&gt;, for the closure we&#x27;re
passing in. We don&#x27;t know anything about &lt;code&gt;F&lt;&#x2F;code&gt; right now, but we&#x27;re
going to just try using it in a function call manner. If we compile
this, we get:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0618]: expected function, found `F`
 --&amp;gt; main.rs:8:5
  |
7 | fn call_with_hi&amp;lt;F&amp;gt;(f: F) {
  |                    - `F` defined here
8 |     f(&amp;quot;Hi!&amp;quot;);
  |     ^^^^^^^^ not a function

error: aborting due to previous error

For more information about this error, try `rustc --explain E0618`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, fair enough: the compiler doesn&#x27;t know that &lt;code&gt;F&lt;&#x2F;code&gt; is a function. It&#x27;s time to finally introduce the magic that will make this compile: the &lt;code&gt;Fn&lt;&#x2F;code&gt; trait!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; ()
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve now put a constraint on &lt;code&gt;F&lt;&#x2F;code&gt; that it must be a function, which
takes a single argument of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, and returns a unit
value. Actually, returning unit values is the default, so we can just
omit that bit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another nifty thing about the &lt;code&gt;Fn&lt;&#x2F;code&gt; trait is that it doesn&#x27;t just apply
to closures. It works on regular ol&#x27; functions too:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exercise 4&lt;&#x2F;strong&gt; Rewrite &lt;code&gt;say_message&lt;&#x2F;code&gt; as a function &lt;em&gt;outside&lt;&#x2F;em&gt; of &lt;code&gt;main&lt;&#x2F;code&gt; and make the program above compile.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This was a bit boring, since &lt;code&gt;say_message&lt;&#x2F;code&gt; isn&#x27;t actually a
closure. Let&#x27;s change that a bit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_something &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg, name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_something);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_something);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_something);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_with_bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_something);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_with_bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;mutable-variables&quot;&gt;Mutable variables&lt;&#x2F;h2&gt;
&lt;p&gt;Remember the good old days of visitor counters on webpages? Let&#x27;s
recreate that beautiful experience!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You are visitor #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works, but it&#x27;s so boring! Let&#x27;s make it more interesting with a
closure.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;visit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You are visitor #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler disagrees:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow immutable local variable `visit` as mutable
 --&amp;gt; main.rs:9:9
  |
3 |     let visit = || {
  |         ----- help: make this binding mutable: `mut visit`
...
9 |         visit();
  |         ^^^^^ cannot borrow mutably

error: aborting due to previous error

For more information about this error, try `rustc --explain E0596`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Huh... what? Apparently calling a function counts as borrowing
it. Fine, that explains why we&#x27;re allowed to call it multiple
times. But now we need to borrow it &lt;em&gt;mutably&lt;&#x2F;em&gt; for some reason. How
come?&lt;&#x2F;p&gt;
&lt;p&gt;That reason is fairly simple: &lt;code&gt;visit&lt;&#x2F;code&gt; has captured and is mutating a
local variable, &lt;code&gt;count&lt;&#x2F;code&gt;. Therefore, any borrow of it is implicitly
mutably borrowing &lt;code&gt;count&lt;&#x2F;code&gt; as well. Logically, this makes sense. But
how about at the type level? How is the compiler tracking this
mutability? To see that, let&#x27;s extend this a bit further with a helper
function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;visit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You are visitor #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, count);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_five_times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(visit);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_five_times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    F: Fn(),
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice! Rust has two different traits for functions: one which covers
functions that don&#x27;t mutate their environment (&lt;code&gt;Fn&lt;&#x2F;code&gt;), and one for
functions which do mutate their environment (&lt;code&gt;FnMut&lt;&#x2F;code&gt;). Let&#x27;s try
modifying our &lt;code&gt;where&lt;&#x2F;code&gt; to use &lt;code&gt;FnMut&lt;&#x2F;code&gt; instead. We get one more error
message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow immutable argument `f` as mutable
  --&amp;gt; main.rs:16:9
   |
11 | fn call_five_times&amp;lt;F&amp;gt;(f: F)
   |                       - help: make this binding mutable: `mut f`
...
16 |         f();
   |         ^ cannot borrow mutably

error: aborting due to previous error

For more information about this error, try `rustc --explain E0596`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Calling this mutating function requires taking a mutable borrow of the
variable, and that requires defining the variable as mutable. Go ahead
and stick a &lt;code&gt;mut&lt;&#x2F;code&gt; in front of the &lt;code&gt;f: F&lt;&#x2F;code&gt;, and you&#x27;ll be golden.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiple-traits&quot;&gt;Multiple traits?&lt;&#x2F;h2&gt;
&lt;p&gt;Is this closure a &lt;code&gt;Fn&lt;&#x2F;code&gt; or a &lt;code&gt;FnMut&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, it doesn&#x27;t modify any variables in the local scope, so
presumably it&#x27;s an &lt;code&gt;Fn&lt;&#x2F;code&gt;. Therefore, passing it to
&lt;code&gt;call_five_times&lt;&#x2F;code&gt;—which expects a &lt;code&gt;FnMut&lt;&#x2F;code&gt;—should fail,
right? Not so fast, it works just fine! Go ahead and add this line to
the program above and prove it to yourself:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_five_times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every value which is a &lt;code&gt;Fn&lt;&#x2F;code&gt; is &lt;em&gt;automatically&lt;&#x2F;em&gt; an &lt;code&gt;FnMut&lt;&#x2F;code&gt;. This is
similar to what happens with a function parameter: if you have a
mutable reference, you can automatically use it as an immutable
reference, since the guarantees of a mutable reference are
stronger. Similarly, if we&#x27;re using a function in such a way that it&#x27;s
safe even if the function is mutable (&lt;code&gt;FnMut&lt;&#x2F;code&gt;), it&#x27;s certainly safe to
do the same thing with an immutable function (&lt;code&gt;Fn&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Does this sound a bit like subtyping? Good, it should :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-rule-of-three&quot;&gt;The rule of three?&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;ve noticed, we now have two different types of functions, in a
lesson entitled &amp;quot;the rule of three.&amp;quot; What could possibly be coming
next? We&#x27;ve seen functions that can be called multiple times in an
immutable context, kind of like immutable references. We&#x27;ve seen
functions that can be called multiple times in a mutable context, kind
of like mutable references. That just leaves one thing... call by
value&#x2F;move semantics!&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to define a closure that moves a local variable
around. We&#x27;re going to go back to use a &lt;code&gt;String&lt;&#x2F;code&gt; instead of a
&lt;code&gt;u32&lt;&#x2F;code&gt;, to avoid the fact that a &lt;code&gt;u32&lt;&#x2F;code&gt; is &lt;code&gt;Copy&lt;&#x2F;code&gt;able. And we&#x27;re going
to use a weird bit of magic in the middle to force things to be moved
instead of being treated as references. We&#x27;ll go into gory detail on
that trick later, and see alternatives.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;welcome &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = name; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; here&amp;#39;s the magic
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;welcome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, &lt;code&gt;name&lt;&#x2F;code&gt; is moved into the &lt;code&gt;welcome&lt;&#x2F;code&gt; closure. This is forced
with the &lt;code&gt;let name = name;&lt;&#x2F;code&gt; bit. Still not 100% convinced that &lt;code&gt;name&lt;&#x2F;code&gt;
was actually moved in? Watch this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;welcome &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name2 = name1;
        name2 += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name2);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;welcome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;name1&lt;&#x2F;code&gt; is defined as &lt;em&gt;immutable&lt;&#x2F;em&gt;. But &lt;code&gt;name2&lt;&#x2F;code&gt; is mutable, and we do
in fact successfully mutate it. This can only happen if we pass by
value instead of by reference. Want further proof? Try to use &lt;code&gt;name1&lt;&#x2F;code&gt;
again after we&#x27;ve defined &lt;code&gt;welcome&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-third-function-trait&quot;&gt;The third function trait&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s complete our rule of three. Remember our &lt;code&gt;call_five_times&lt;&#x2F;code&gt;?
Let&#x27;s use it on &lt;code&gt;welcome&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;welcome &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = name;
        name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_five_times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(welcome);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_five_times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    F: Fn(),
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we get a brand new error message, this time referencing &lt;code&gt;FnOnce&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`
  --&amp;gt; main.rs:4:19
   |
4  |     let welcome = || {
   |                   ^^ this closure implements `FnOnce`, not `Fn`
5  |         let mut name = name;
   |                        ---- closure is `FnOnce` because it moves the variable `name` out of its environment
...
10 |     call_five_times(welcome);
   |     --------------- the requirement to implement `Fn` derives from here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0525`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replacing &lt;code&gt;Fn()&lt;&#x2F;code&gt; with &lt;code&gt;FnOnce()&lt;&#x2F;code&gt; should fix the compilation, right? Wrong!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of moved value: `f`
  --&amp;gt; main.rs:18:9
   |
18 |         f();
   |         ^ value moved here in previous iteration of loop
   |
   = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait

error: aborting due to previous error

For more information about this error, try `rustc --explain E0382`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our loop ends up calling &lt;code&gt;f&lt;&#x2F;code&gt; multiple times. But each time we call
&lt;code&gt;f&lt;&#x2F;code&gt;, we&#x27;re moving the value. Therefore, the function can &lt;em&gt;only be
called once&lt;&#x2F;em&gt;. Maybe that&#x27;s why they named it &lt;code&gt;FnOnce&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s rewrite this to have a helper function that only calls things
once:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;welcome &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = name;
        name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Welcome, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(welcome);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    F: FnOnce(),
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works just fine. Hurrah!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-function-subtyping&quot;&gt;Further function subtyping&lt;&#x2F;h2&gt;
&lt;p&gt;Previously, we said that every &lt;code&gt;Fn&lt;&#x2F;code&gt; is also an &lt;code&gt;FnMut&lt;&#x2F;code&gt;, since anywhere
you can safely call a mutable function, you can also call an immutable
function. It turns out that every &lt;code&gt;Fn&lt;&#x2F;code&gt; and every &lt;code&gt;FnMut&lt;&#x2F;code&gt; are also
&lt;code&gt;FnOnce&lt;&#x2F;code&gt;s, because any context you can guarantee the function will
only be called once is safe for running functions with mutable or
immutable environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-move-keyword&quot;&gt;The move keyword&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s a subtle point we&#x27;re about to get into, which I &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;53029622&#x2F;369198&quot;&gt;didn&#x27;t
understand till I wrote this
lesson&lt;&#x2F;a&gt; (thanks to Sven
Marnach for the explanation there). The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;fn&#x2F;closures.html&quot;&gt;Rust by Example section on closures&lt;&#x2F;a&gt;
was the best resource for helping it all click for me. I&#x27;ll do my best
here explaining it myself.&lt;&#x2F;p&gt;
&lt;p&gt;Functions accept parameters explicitly, complete with type
signatures. You&#x27;re able to explicitly state whether a parameter is
pass by value, mutable reference, or immutable reference. Then, when
you use it, you&#x27;re able to choose any of the weaker forms
available. For example, if you pass a parameter by mutable reference,
you can later use it by immutable reference. However, you &lt;em&gt;cannot&lt;&#x2F;em&gt; use
it by value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pass_by_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pass_by_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String) {}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pass_by_mut_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; String) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pass_by_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; that&amp;#39;s fine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pass_by_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(*x); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; that&amp;#39;s a paddlin&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Closures accept parameters, but they make the type annotations
optional. If you omit them, they are implicit. In addition, closures
allow you to capture variables. These never take a type annotation;
they are &lt;em&gt;always&lt;&#x2F;em&gt; implicit. Nonetheless, there needs to be some
concept of how these values were captured, just like we need to know
how parameters are passed into a function.&lt;&#x2F;p&gt;
&lt;p&gt;How a value is captured will imply the same set of borrow rules we&#x27;re
used to in Rust, in particular:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If by reference, then other references can live concurrently with
the closure&lt;&#x2F;li&gt;
&lt;li&gt;If by mutable reference, then as long as the closure is alive, no
other references to the values can exist. However, once the closure
is dropped, other references can exist again.&lt;&#x2F;li&gt;
&lt;li&gt;If by value, then the value cannot be used by anything ever
again. (This automatically implies that the closure &lt;em&gt;owns&lt;&#x2F;em&gt; the
value.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, there&#x27;s an important and (dare I repeat myself) subtle
distinction between closures and functions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Closures can own data, functions cannot&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sure, if you pass by value to a function, the function call takes
ownership of the data during execution. But closures are different:
the closure &lt;em&gt;itself&lt;&#x2F;em&gt; can own data, and use it while it is being
called. Let&#x27;s demonstrate:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; owned by main
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_outer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; force a move, again, we&amp;#39;ll get smarter in a second
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_inner = name_outer;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_inner);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; main no longer owns name_outer, try this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using name from main: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_outer); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; error!

    &#x2F;&#x2F; but name_inner lives on, in say_hi!
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try as you might, you could not achieve the same thing with a plain
old function, you&#x27;d need to keep &lt;code&gt;name_outer&lt;&#x2F;code&gt; alive separately and
then pass it in.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let&#x27;s get to that smarter way to force a move. In the closure
above, we have &lt;code&gt;let name_inner = name_outer;&lt;&#x2F;code&gt;. This forces the closure
to use &lt;code&gt;name_outer&lt;&#x2F;code&gt; by value. Since we use by value, we can only call
this closure once, since it fully consumes &lt;code&gt;name_outer&lt;&#x2F;code&gt; on the first
call. (Go ahead and try adding a second &lt;code&gt;say_hi()&lt;&#x2F;code&gt; call.) But in
reality, we&#x27;re only using the name by immutable reference inside the
closure. We &lt;em&gt;should&lt;&#x2F;em&gt; be able to call it multiple times. If we skip the
forced use by value, we can use by reference, leaving the &lt;code&gt;name_outer&lt;&#x2F;code&gt;
in the original scope:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; owned by main
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_outer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by reference
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name_outer;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_inner);
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; main still owns name_outer, this is fine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using name from main: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_outer); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; success

    &#x2F;&#x2F; but name_inner lives on, in say_hi!
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; success
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, if we change things around a bit, so that &lt;code&gt;name_outer&lt;&#x2F;code&gt; goes
out of scope before &lt;code&gt;say_hi&lt;&#x2F;code&gt;, everything falls apart!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; forcing the creation of a smaller scope
        &#x2F;&#x2F; owned by the smaller scope
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_outer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; doesn&amp;#39;t work, closure outlives captured values
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by reference
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name_outer;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_inner);
        }
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; syntactically invalid, name_outer isn&amp;#39;t in this scope
    &#x2F;&#x2F;println!(&amp;quot;Using name from main: {}&amp;quot;, name_outer); &#x2F;&#x2F; error!

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we need is some way to say: I&#x27;d like the closure to own the
values it captures, but I don&#x27;t want to have to force a use by value
to do it. That will allow a closure to outlive the original scope of
the value, but still allow a closure to be called multiple times. And
to do that, we introduce the &lt;code&gt;move&lt;&#x2F;code&gt; keyword:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; forcing the creation of a smaller scope
        &#x2F;&#x2F; owned by the smaller scope
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_outer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; now it works!
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by reference
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name_inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;name_outer;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name_inner);
        }
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; syntactically invalid, name_outer isn&amp;#39;t in this scope
    &#x2F;&#x2F;println!(&amp;quot;Using name from main: {}&amp;quot;, name_outer); &#x2F;&#x2F; error!

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The ownership of &lt;code&gt;name_outer&lt;&#x2F;code&gt; passes from the original scope to the
closure itself. We still only use it by reference, and therefore we
can call it multiple times. Hurrah!&lt;&#x2F;p&gt;
&lt;p&gt;One final bit here. Using the &lt;code&gt;move&lt;&#x2F;code&gt; keyword like this moves all
captured variables into the closure, and therefore they cannot be used
after the closure. For example, this will fail to compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using name from main: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; error!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;reluctant-rust&quot;&gt;Reluctant Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, one final point before we sum things up and dive into
examples. The type of capture is implicit in a closure. How does Rust
decide whether to capture by value, mutable reference, or immutable
reference. I like to think of Rust as being reluctant here: it strives
to capture the weakest way possible. To paraphrase the Rust by Example
book:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Closures will preferentially capture by immutable reference, then by
mutable reference, and only then by value.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In our previous examples with &lt;code&gt;let name_inner = name_outer;&lt;&#x2F;code&gt;, we
forced Rust to capture by value. However, it doesn&#x27;t like doing that,
and will instead capture by reference (mutable or immutable) if it can
get away with that. It does this based on the strongest kind of usage
for that value. That is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If any part of the closure uses a variable by value, it must be
captured by value.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, if any part of the closure uses a variable by mutable
reference, it must be captured by mutable reference.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, if any part of the closure uses a variable by immutable
reference, it must be captured by immutable reference.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It does this reluctant capturing &lt;em&gt;even if it causes the program to
fail to compile&lt;&#x2F;em&gt;. Capturing by reference instead of value can cause
lifetime issues, as we&#x27;ve seen previously. However, Rust does not look
at the full context of the usage of the closure to determine how to
capture, it only looks at the body of the closure itself.&lt;&#x2F;p&gt;
&lt;p&gt;But, since there are many legitimate cases where we want to force a
capture by value to solve lifetime issues, we have the &lt;code&gt;move&lt;&#x2F;code&gt; keyword
to force the issue.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; It may be a little annoying at times that Rust doesn&#x27;t
just look at your program as a whole and guess that you want that
&lt;code&gt;move&lt;&#x2F;code&gt; added. However, I think it&#x27;s a great decision in the language:
that kind of &amp;quot;do what I mean&amp;quot; logic is fragile and often times
surprising.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recap-ownership-capture-and-usage&quot;&gt;Recap: ownership, capture, and usage&lt;&#x2F;h2&gt;
&lt;p&gt;To recap the salient points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Within a closure, a variable can be used by value, mutable
reference, or immutable reference&lt;&#x2F;li&gt;
&lt;li&gt;In addition, all variables captured by a closure can be captured by
value, by mutable reference, or by immutable reference&lt;&#x2F;li&gt;
&lt;li&gt;We cannot use a variable in a stronger way than it was captured. If
it was captured by mutable reference, it can be used by immutable
reference, but not by value.&lt;&#x2F;li&gt;
&lt;li&gt;To solve lifetime issues, we can force a closure to capture by value
with the &lt;code&gt;move&lt;&#x2F;code&gt; keyword.&lt;&#x2F;li&gt;
&lt;li&gt;Short of the &lt;code&gt;move&lt;&#x2F;code&gt; keyword, Rust will be reluctant, and capture in
the weakest way allowed by the body of the closure.&lt;&#x2F;li&gt;
&lt;li&gt;Regarding the traits of closures:
&lt;ul&gt;
&lt;li&gt;If a closure uses anything by value, then the closure is a
&lt;code&gt;FnOnce&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, if a closure uses anything by mutable reference, then
the closure is a &lt;code&gt;FnMut&lt;&#x2F;code&gt;, which automatically implies &lt;code&gt;FnOnce&lt;&#x2F;code&gt;
as well&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, a closure is a &lt;code&gt;Fn&lt;&#x2F;code&gt;, which automatically implies both
&lt;code&gt;FnMut&lt;&#x2F;code&gt; and &lt;code&gt;FnOnce&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I consider the points above complicated enough that I&#x27;m included a
number of further examples to help hammer the points home. These are
inspired heavily by the Rust by Example examples.&lt;&#x2F;p&gt;
&lt;p&gt;For all of the examples below, I&#x27;m going to assume the presence of the
following three helper functions in the source:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: Fn() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: FnMut() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; F: FnOnce() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;Consider this &lt;code&gt;main&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;name&lt;&#x2F;code&gt; lives longer than &lt;code&gt;say_hi&lt;&#x2F;code&gt;, and therefore there&#x27;s no problem
with the closure keeping an immutable reference to &lt;code&gt;name&lt;&#x2F;code&gt;. Since it
only has immutable references to the environment and consumes no
values, &lt;code&gt;say_hi&lt;&#x2F;code&gt; is a &lt;code&gt;Fn&lt;&#x2F;code&gt;, &lt;code&gt;FnMut&lt;&#x2F;code&gt;, and &lt;code&gt;FnOnce&lt;&#x2F;code&gt;, and the code above
compiles.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; bad!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name)
    };
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By contrast, this example won&#x27;t compile. &lt;code&gt;name&lt;&#x2F;code&gt; will go out of scope
once we leave the curly braces. However, our closure is capturing it
by reference, and so the reference outlives value. We could do our
trick from before of forcing it to capture by value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        || {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = name;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name)
        }
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &#x2F;&#x2F;call_fn_mut(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this only implements a &lt;code&gt;FnOnce&lt;&#x2F;code&gt;, since the value is captured and
consumed, preventing it from being run again. There&#x27;s a better way!
Instead, we can force the closure to take ownership of &lt;code&gt;name&lt;&#x2F;code&gt;, but
still capture by reference:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name)
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we&#x27;re back to having a &lt;code&gt;Fn&lt;&#x2F;code&gt;, &lt;code&gt;FnMut&lt;&#x2F;code&gt;, and &lt;code&gt;FnOnce&lt;&#x2F;code&gt;! To avoid the
&lt;code&gt;say_hi&lt;&#x2F;code&gt; value itself from being moved with each call, we now pass a
reference to the &lt;code&gt;call_fn&lt;&#x2F;code&gt; functions. I believe (though am not 100%
certain) that this wasn&#x27;t necessary in the first example since, above,
there was no captured environment, and therefore the closure could be
&lt;code&gt;Copy&lt;&#x2F;code&gt;ed. This closure, with a captured environment, cannot be
&lt;code&gt;Copy&lt;&#x2F;code&gt;ed`.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        || std::mem::drop(name)
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &#x2F;&#x2F;call_fn_mut(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example uses the &lt;code&gt;drop&lt;&#x2F;code&gt; function to consume &lt;code&gt;name&lt;&#x2F;code&gt;. Since we use
by value, we must capture by value, and therefore must take ownership
of the value. As a result, sticking &lt;code&gt;move&lt;&#x2F;code&gt; at the front of the closure
is unnecessary, though it will do no harm.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi = {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
        }
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the &lt;code&gt;+=&lt;&#x2F;code&gt; operator on a &lt;code&gt;String&lt;&#x2F;code&gt; requires a mutable reference, so
we&#x27;re out of the territory of immutable reference capturing. Rust
will fall back to capturing via mutable reference. That requires that
the &lt;code&gt;name&lt;&#x2F;code&gt; also be declared mutable. And since &lt;code&gt;name&lt;&#x2F;code&gt; will go out of
scope before the closure, we need to &lt;code&gt;move&lt;&#x2F;code&gt; ownership to the
closure. And since calling &lt;code&gt;say_hi&lt;&#x2F;code&gt; will mutate data, we need to put a
&lt;code&gt;mut&lt;&#x2F;code&gt; on its declaration too.&lt;&#x2F;p&gt;
&lt;p&gt;When we pass &lt;code&gt;say_hi&lt;&#x2F;code&gt; to the call functions, we need to use &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; to
ensure (1) the value isn&#x27;t moved, and (2) the value can be
mutated. Also, &lt;code&gt;call_fn&lt;&#x2F;code&gt; is invalid here, since our closure is &lt;code&gt;FnMut&lt;&#x2F;code&gt;
and &lt;code&gt;FnOnce&lt;&#x2F;code&gt;, but &lt;em&gt;not&lt;&#x2F;em&gt; &lt;code&gt;Fn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; What will the output of this program be? How many times
do we add the string &lt;code&gt;&amp;quot; and Bob&amp;quot;&lt;&#x2F;code&gt; to &lt;code&gt;name&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also avoid the capture by letting the &lt;code&gt;name&lt;&#x2F;code&gt; live longer than the closure.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; bad!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;And now name is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding the &lt;code&gt;println!&lt;&#x2F;code&gt; at the end, which references &lt;code&gt;name&lt;&#x2F;code&gt;, is invalid,
since &lt;code&gt;say_hi&lt;&#x2F;code&gt; is still in scope. This is due to &lt;em&gt;lexical
lifetimes&lt;&#x2F;em&gt;. You can turn on the (at time of writing) experimental
feature non-lexical lifetimes by adding &lt;code&gt;#![feature(nll)]&lt;&#x2F;code&gt; to the top
of your source code. Or, you can explicitly use braces to denote the
scope of the closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
            name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; say_hi);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;And now name is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also (perhaps somewhat obviously) use a value in multiple
different ways:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say_hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by ref
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        name += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; and Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by mut ref
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::mem::drop(name); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; use by value
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F;call_fn(say_hi);
    &#x2F;&#x2F;call_fn_mut(say_hi);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;call_fn_once&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(say_hi);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In these cases, the most powerful use determines the kind of capture
we need. Since we used by value above, we must also capture by value,
and therefore must take ownership.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;which-trait-to-use&quot;&gt;Which trait to use?&lt;&#x2F;h2&gt;
&lt;p&gt;It may be intimidating to try and think through which of these three
traits you need. You can usually punt on this and let the compiler
yell at you. To quote &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;2018-edition&#x2F;ch13-01-closures.html#capturing-the-environment-with-closures&quot;&gt;the Rust
book&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of the time when specifying one of the &lt;code&gt;Fn&lt;&#x2F;code&gt; trait bounds, you
can start with &lt;code&gt;Fn&lt;&#x2F;code&gt; and the compiler will tell you if you need
&lt;code&gt;FnMut&lt;&#x2F;code&gt; or &lt;code&gt;FnOnce&lt;&#x2F;code&gt; based on what happens in the closure body.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;d give a slightly different piece of advice, following the dictum of
&amp;quot;be lenient in what you accept.&amp;quot; When receiving functions as
arguments, the most lenient thing to start with is a &lt;code&gt;FnOnce&lt;&#x2F;code&gt;. If your
usage turns out to be more restrictive, then listen to the
compiler.&lt;&#x2F;p&gt;
&lt;p&gt;For more information on closures as output parameters, see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;fn&#x2F;closures&#x2F;output_parameters.html&quot;&gt;Rust by Example&#x27;s
chapter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-of-the-rule-of-three-for-closures&quot;&gt;Summary of the rule of three for closures&lt;&#x2F;h2&gt;
&lt;p&gt;Both functions and closures are annotated using the &lt;code&gt;Fn&lt;&#x2F;code&gt; family of
trait bounds. These form a subtyping relationship, where every &lt;code&gt;Fn&lt;&#x2F;code&gt; is
also an &lt;code&gt;FnMut&lt;&#x2F;code&gt;, and every &lt;code&gt;FnMut&lt;&#x2F;code&gt; is also an &lt;code&gt;FnOnce&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FnOnce&lt;&#x2F;code&gt; works like pass by value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;FnMut&lt;&#x2F;code&gt; works like pass by mutable reference&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Fn&lt;&#x2F;code&gt; works like pass by immutable reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How these captured variables are used by the closure determines which
of these three it is. Since functions, by definition, never capture
local variables, they are always &lt;code&gt;Fn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-5&quot;&gt;Exercise 5&lt;&#x2F;h2&gt;
&lt;p&gt;Putting together what we&#x27;ve learned about iterators and closures,
modify line 5 below (the one starting with &lt;code&gt;for i in&lt;&#x2F;code&gt;) so that the
program prints the numbers &lt;code&gt;2,4,6,..,20&lt;&#x2F;code&gt; twice.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;guis-and-callbacks&quot;&gt;GUIs and callbacks&lt;&#x2F;h2&gt;
&lt;p&gt;What better way to tie this all off than by writing a GUI and some
callbacks? I&#x27;m going to use GTK+ and the wonderful
&lt;a href=&quot;http:&#x2F;&#x2F;gtk-rs.org&#x2F;&quot;&gt;gtk-rs&lt;&#x2F;a&gt; set of crates. Our goal ultimately is to
create a GUI with a single button on it. When that button is clicked,
a message will be written to a file that says &amp;quot;I was clicked.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;For this example, you&#x27;ll definitely want to use a cargo project. Go
ahead and run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new clicky
$ cd clicky
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now add gtk as a dependency. Within the &lt;code&gt;[dependencies]&lt;&#x2F;code&gt; section of
the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, add the line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;gtk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we&#x27;re going to rip off the sample code from gtk-rs&#x27;s
website. Put this in your &lt;code&gt;main.rs&lt;&#x2F;code&gt; (bonus points if you type it
yourself instead of copy-pasting):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; gtk;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;gtk::prelude::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;gtk::{Button, Window, WindowType};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;gtk::init().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Failed to initialize GTK.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; window = Window::new(WindowType::Toplevel);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;First GTK+ Program&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set_default_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;350&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; button = Button::new_with_label(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Click me!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;button);
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;show_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;connect_delete_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_, _| {
        gtk::main_quit();
        Inhibit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    });

    button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;connect_clicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|_| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Clicked!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    });

    gtk::main();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assuming you&#x27;ve got all of your system libraries set up correctly,
running &lt;code&gt;cargo run&lt;&#x2F;code&gt; should get you a nice, simple GUI.&lt;&#x2F;p&gt;
&lt;p&gt;If you do have trouble installing the crates, check out &lt;a href=&quot;http:&#x2F;&#x2F;gtk-rs.org&#x2F;docs-src&#x2F;requirements.html&quot;&gt;gtk-rs&#x27;s
requirements page&lt;&#x2F;a&gt;
first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;replacing-the-callback&quot;&gt;Replacing the callback&lt;&#x2F;h2&gt;
&lt;p&gt;You may have noticed that sample code already includes a callback,
which prints &lt;code&gt;Clicked!&lt;&#x2F;code&gt; to stdout each time the button is
clicked. That certainly makes our life a little bit easier. Now,
inside of that callback, we need to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open up a file&lt;&#x2F;li&gt;
&lt;li&gt;Write some data to the file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;re going to take a first stab at this without doing any error
handling. Instead, we&#x27;ll use &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; on all of the &lt;code&gt;Result&lt;&#x2F;code&gt;
values, causing our program to &lt;code&gt;panic!&lt;&#x2F;code&gt; if something goes wrong. We&#x27;ll
clean that up a bit later.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fs&#x2F;struct.File.html&quot;&gt;Searching the standard library for
file&lt;&#x2F;a&gt; quickly finds
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fs&#x2F;struct.File.html&quot;&gt;&lt;code&gt;std::fs::File&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which seems promising. It also seems like the &lt;code&gt;create&lt;&#x2F;code&gt; function will
be the easiest way to get started. We&#x27;ll write to &lt;code&gt;mylog.txt&lt;&#x2F;code&gt;. The example at the top of that page shows &lt;code&gt;write_all&lt;&#x2F;code&gt; (thanks Rust for awesome API docs!). First, try out this bit of code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I was clicked.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After addressing exercise 6 below, you&#x27;ll see this error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `write_all` found for type `std::fs::File` in the current scope
  --&amp;gt; src&#x2F;main.rs:27:14
   |
27 |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;);
   |              ^^^^^^^^^
   |
   = help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope, perhaps add a `use` for it:
   |
3  | use std::io::Write;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, that&#x27;s something new. In order to use items from a trait, the
trait has to be in scope. Easy enough, we can just add &lt;code&gt;use std::io::Write;&lt;&#x2F;code&gt; to our closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::io::Write;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I was clicked.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 6&lt;&#x2F;strong&gt; If you&#x27;re following along with the code like you should
be, you probably got a different error message above, and the code
I&#x27;ve provided here doesn&#x27;t actually fix everything. You need to add an
extra method call to convert a &lt;code&gt;Result&amp;lt;File, Error&amp;gt;&lt;&#x2F;code&gt; into a
&lt;code&gt;File&lt;&#x2F;code&gt;. Hint: I mentioned it above.&lt;&#x2F;p&gt;
&lt;p&gt;Go ahead and run this program (via &lt;code&gt;cargo run&lt;&#x2F;code&gt;), click the button a
few times, and close the window. Then look at the contents of
&lt;code&gt;mylog.txt&lt;&#x2F;code&gt;. No matter how many times you clicked, you&#x27;ll only get one
line of output.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that each time the callback is called, we call &lt;code&gt;create&lt;&#x2F;code&gt;
from &lt;code&gt;File&lt;&#x2F;code&gt;, which overwrites the old file. One approach here would be
to create an appending file handle (awesome bonus exercise for anyone
who wants to take it on). We&#x27;re going to take another approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;share-the-file&quot;&gt;Share the file&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s move our &lt;code&gt;create&lt;&#x2F;code&gt; call to &lt;em&gt;outside&lt;&#x2F;em&gt; of the closure
definition. We&#x27;ll open the file in the &lt;code&gt;main&lt;&#x2F;code&gt; function itself, the
closure can capture a mutable reference to the &lt;code&gt;file&lt;&#x2F;code&gt;, and all will be
well in the world.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the compiler really dislikes this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow `file` as mutable, as it is a captured variable in a `Fn` closure
  --&amp;gt; src&#x2F;main.rs:28:9
   |
28 |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;);
   |         ^^^^ cannot borrow as mutable
   |
help: consider changing this to accept closures that implement `FnMut`
  --&amp;gt; src&#x2F;main.rs:26:28
   |
26 |       button.connect_clicked(|_| {
   |  ____________________________^
27 | |         use std::io::Write;
28 | |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;);
29 | |     });
   | |_____^

error[E0597]: `file` does not live long enough
  --&amp;gt; src&#x2F;main.rs:28:9
   |
26 |     button.connect_clicked(|_| {
   |                            --- value captured here
27 |         use std::io::Write;
28 |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;);
   |         ^^^^ borrowed value does not live long enough
...
32 | }
   | - `file` dropped here while still borrowed
   |
   = note: borrowed value must be valid for the static lifetime...

error: aborting due to 2 previous errors

Some errors occurred: E0596, E0597.
For more information about an error, try `rustc --explain E0596`.
error: Could not compile `clicky`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or more briefly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;cannot borrow `file` as mutable, as it is a captured variable in a `Fn` closure
    help: consider changing this to accept closures that implement `FnMut`
`file` does not live long enough
    note: borrowed value must be valid for the static lifetime...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can understand both of these by looking at the signature for &lt;a href=&quot;http:&#x2F;&#x2F;gtk-rs.org&#x2F;docs&#x2F;gtk&#x2F;trait.ButtonExt.html#tymethod.connect_clicked&quot;&gt;&lt;code&gt;connect_clicked&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;connect_clicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) -&amp;gt; SignalHandlerId
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;connect_clicked&lt;&#x2F;code&gt; is a method which takes some function &lt;code&gt;f&lt;&#x2F;code&gt; of type
&lt;code&gt;F&lt;&#x2F;code&gt; and returns a &lt;code&gt;SignalHandlerId&lt;&#x2F;code&gt;. We&#x27;re not using that return
value, so just ignore it. The function is a &lt;code&gt;Fn&lt;&#x2F;code&gt;. Therefore, we&#x27;re
&lt;em&gt;not&lt;&#x2F;em&gt; allowed to pass in a &lt;code&gt;FnMut&lt;&#x2F;code&gt; or an &lt;code&gt;FnOnce&lt;&#x2F;code&gt;. GTK must be allowed
to call that function multiple times without the restrictions of a
mutable context. So keeping a mutable reference won&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;The other interesting thing is &lt;code&gt;+ &#x27;static&lt;&#x2F;code&gt;. We briefly mentioned
lifetime parameters above. &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; is a special lifetime parameter,
which means &amp;quot;can live for the entire lifetime of the program.&amp;quot; As one
nice example of this, all string literals have type &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt;,
though we usually just write &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that our &lt;code&gt;file&lt;&#x2F;code&gt; does &lt;em&gt;not&lt;&#x2F;em&gt; have &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime. It
is created in the &lt;code&gt;main&lt;&#x2F;code&gt; function, remains in the &lt;code&gt;main&lt;&#x2F;code&gt; function, and
only lives as long as the &lt;code&gt;main&lt;&#x2F;code&gt; function. You may argue that the
&lt;code&gt;main&lt;&#x2F;code&gt; function lives the entire length of the program, but that&#x27;s not
exactly true. In our example above, &lt;code&gt;button&lt;&#x2F;code&gt; will outlive &lt;code&gt;file&lt;&#x2F;code&gt; when
calling &lt;code&gt;drop&lt;&#x2F;code&gt;s (since &lt;code&gt;drop&lt;&#x2F;code&gt;s are performed in FILO order). If the
&lt;code&gt;drop&lt;&#x2F;code&gt; for a button decided to call the click
callback one more time, we&#x27;d have memory unsafety.&lt;&#x2F;p&gt;
&lt;p&gt;So what we&#x27;re left with is: we need a closure which does not have a
mutable reference to local data. How do we do that?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;move-it&quot;&gt;Move it&lt;&#x2F;h2&gt;
&lt;p&gt;We can get the compiler to stop complaining about the lifetime by
moving the variable into the closure. Now we&#x27;re guaranteed that the
&lt;code&gt;file&lt;&#x2F;code&gt; will live as long as the closure itself, meeting the guarantees
demanded by &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;. Do accomplish this, stick &lt;code&gt;move&lt;&#x2F;code&gt; in front of
the closure.&lt;&#x2F;p&gt;
&lt;p&gt;This still doesn&#x27;t solve our &lt;code&gt;Fn&lt;&#x2F;code&gt; issue, however. How can we allow our
callback to be called multiple times after moving the value in?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-counting-hint-nope&quot;&gt;Reference counting (hint: nope)&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve reached a point where the normal borrow rules of Rust simply
aren&#x27;t enough. We cannot prove to the compiler that our callback will
obey the mutable reference rules: exactly one mutable reference will
exist at a given time. These kinds of situations occur often enough
that the standard library provides built in support for reference
counted types.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following statement to the top of your &lt;code&gt;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An &lt;code&gt;Rc&lt;&#x2F;code&gt; is a single threaded reference counted value. There&#x27;s also an
&lt;code&gt;Arc&lt;&#x2F;code&gt; type, which is atomic, and can be used in multithreaded
applications. Since GTK is a single-threaded library, we&#x27;re safe using
an &lt;code&gt;Rc&lt;&#x2F;code&gt; instead of an &lt;code&gt;Arc&lt;&#x2F;code&gt;. One really awesome thing about Rust is
that if you make a mistake about this, the compiler can catch
you. This is because &lt;code&gt;Rc&lt;&#x2F;code&gt; does not implement the &lt;code&gt;Sync&lt;&#x2F;code&gt; and &lt;code&gt;Send&lt;&#x2F;code&gt;
traits. See more in the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;marker&#x2F;trait.Send.html&quot;&gt;&lt;code&gt;Send&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, back to our example. We can wrap up our original &lt;code&gt;file&lt;&#x2F;code&gt; with
reference counting with this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = Rc::new(file);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How do we then get access to the underlying &lt;code&gt;File&lt;&#x2F;code&gt; to use it? Turns
out: we don&#x27;t need to do anything special. Keeping our original
&lt;code&gt;file.write_all&lt;&#x2F;code&gt; does what we want. This is because &lt;code&gt;Rc&lt;&#x2F;code&gt; implements
the &lt;code&gt;Deref&lt;&#x2F;code&gt; trait:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; Deref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Rc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= T;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that you can get a reference to a &lt;code&gt;T&lt;&#x2F;code&gt; from a &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;. Since
method call syntax automatically takes a reference, everything
works. Nice.&lt;&#x2F;p&gt;
&lt;p&gt;Well, almost everything:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow data in a `&amp;amp;` reference as mutable
  --&amp;gt; src&#x2F;main.rs:32:9
   |
32 |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;);
   |         ^^^^ cannot borrow as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reference counting allows us to have multiple references to a value,
but they&#x27;re all &lt;em&gt;immutable&lt;&#x2F;em&gt; references. Looks like we haven&#x27;t actually
made our situation any better than before, where we had ensured that
the single owner of our data was the closure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;refcell&quot;&gt;RefCell&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;RefCell&lt;&#x2F;code&gt; is designed to exactly solve this problem. I&#x27;m not going to
go into detail explaining it, because the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;cell&#x2F;index.html&quot;&gt;API docs for &lt;code&gt;std::cell&lt;&#x2F;code&gt; do
that better than I
could&lt;&#x2F;a&gt;. I recommend you
go read that intro now, come back and work on this code, and then go
read the docs again. Personally, I had to read that explanation about
4 or 5 times and bash my head against some broken code before it
finally sank in correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, add &lt;code&gt;use std::cell::RefCell;&lt;&#x2F;code&gt;, and then wrap a &lt;code&gt;RefCell&lt;&#x2F;code&gt;
around the original &lt;code&gt;File&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = std::fs::File::create(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mylog.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; file = RefCell::new(file);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our code will fail to compile with a different message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `write_all` found for type `std::cell::RefCell&amp;lt;std::fs::File&amp;gt;` in the current scope
  --&amp;gt; src&#x2F;main.rs:29:14
   |
29 |         file.write_all(b&amp;quot;I was clicked.\n&amp;quot;).unwrap();
   |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unlike &lt;code&gt;Rc&lt;&#x2F;code&gt;, with &lt;code&gt;RefCell&lt;&#x2F;code&gt; we cannot rely on the &lt;code&gt;Deref&lt;&#x2F;code&gt;
implementation to get us a &lt;code&gt;File&lt;&#x2F;code&gt;. Instead, we&#x27;ll need to use a method
on &lt;code&gt;RefCell&lt;&#x2F;code&gt; to get a reference to the &lt;code&gt;File&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I was clicked.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But that doesn&#x27;t quite work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow data in a `&amp;amp;` reference as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately, that fix is as easy as using &lt;code&gt;borrow_mut()&lt;&#x2F;code&gt; instead. And
now our program works, hurray!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Often, reference counting (&lt;code&gt;Rc&lt;&#x2F;code&gt; or &lt;code&gt;Arc&lt;&#x2F;code&gt;) and cells (&lt;code&gt;Cell&lt;&#x2F;code&gt;,
&lt;code&gt;RefCell&lt;&#x2F;code&gt;, or &lt;code&gt;Mutex&lt;&#x2F;code&gt;) go hand in hand, which is why my first instinct
in writing this lesson was to use both an &lt;code&gt;Rc&lt;&#x2F;code&gt; and a
&lt;code&gt;RefCell&lt;&#x2F;code&gt;. However, in this case, it turns out that just the &lt;code&gt;RefCell&lt;&#x2F;code&gt;
is sufficient.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-7&quot;&gt;Exercise 7&lt;&#x2F;h2&gt;
&lt;p&gt;The error handling in this program is lackluster. There are three problems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;gtk::init()&lt;&#x2F;code&gt; fails, the exit code of our program is still &lt;code&gt;0&lt;&#x2F;code&gt;
(indicating success).&lt;&#x2F;li&gt;
&lt;li&gt;If opening &lt;code&gt;mylog.txt&lt;&#x2F;code&gt; fails, we panic.&lt;&#x2F;li&gt;
&lt;li&gt;If writing to the file fails, we panic.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To fix this, have &lt;code&gt;main&lt;&#x2F;code&gt; return a value of type &lt;code&gt;Result&amp;lt;(), Box&amp;lt;std::error::Error&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. Most other errors can be automatically
coerced via &lt;code&gt;From::from&lt;&#x2F;code&gt; into &lt;code&gt;Box&amp;lt;std::error::Error&amp;gt;&lt;&#x2F;code&gt;. For problems
(1) and (2), use the standard error handling mechanisms we discussed
back in lesson 3. For problem (3), print an error message with
&lt;code&gt;eprintln!&lt;&#x2F;code&gt; when an error occurs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fearless-concurrency&quot;&gt;Fearless concurrency!&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s finally time to do some fearless concurrency. We&#x27;re going to
write a program which will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Allocate a string containing the word &amp;quot;Fearless&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Fork a thread every second for 10 iterations&lt;&#x2F;li&gt;
&lt;li&gt;In the forked thread:
&lt;ul&gt;
&lt;li&gt;Add another exclamation point to the string&lt;&#x2F;li&gt;
&lt;li&gt;Print the string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before we begin, you can probably identify some complex pieces of
ownership that are going to go on here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple threads will have access to some mutable data&lt;&#x2F;li&gt;
&lt;li&gt;We need to ensure only one writer at a time&lt;&#x2F;li&gt;
&lt;li&gt;We need to ensure that the data is released when everyone is done
with it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead of trying to design a great solution to this from the
beginning, we&#x27;ll treat this like a proper crash course. We&#x27;ll do the
most naive stuff possible, look at the error messages, and try to
improve. If you think you can implement the complete program yourself
now, definitely give it a shot! Even if you don&#x27;t think you can
implement it yourself, it&#x27;s worth trying. The effort will make the
explanation below more helpful.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;introducing-the-functions&quot;&gt;Introducing the functions&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;re going to use the following three functions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;fn.spawn.html&quot;&gt;&lt;code&gt;std::thread::spawn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
to spawn a thread. It has an interesting signature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;F, T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: F) -&amp;gt; JoinHandle&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    F: FnOnce() -&amp;gt; T,
    F: Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    T: Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Send&lt;&#x2F;code&gt; trait means that both the provided function and its return
value must be values which can be sent to a different thread. The
&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; bit says that we cannot retain any references to local
variables. And the &lt;code&gt;FnOnce()&lt;&#x2F;code&gt; bit says that &lt;em&gt;any&lt;&#x2F;em&gt; closure will work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;fn.sleep.html&quot;&gt;&lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
to have the main thread sleep. It takes a value of type &lt;code&gt;Duration&lt;&#x2F;code&gt;,
which brings us to our last function:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;time&#x2F;struct.Duration.html&quot;&gt;&lt;code&gt;std::time::Duration::new&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
takes the number of seconds and nanoseconds in a duration.&lt;&#x2F;p&gt;
&lt;p&gt;Before we introduce the great fun which is spawning a new thread,
let&#x27;s try a single threaded version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fearless&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can even wrap up that &lt;code&gt;msg.push&lt;&#x2F;code&gt; and &lt;code&gt;println!&lt;&#x2F;code&gt; in a closure to get
a bit closer to the call to &lt;code&gt;spawn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fearless&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;inner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
            msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That gives us an error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow immutable local variable `inner` as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and fix that and make this compile.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;introducing-spawn&quot;&gt;Introducing spawn&lt;&#x2F;h3&gt;
&lt;p&gt;The simplest way to introduce spawn is to replace the &lt;code&gt;inner()&lt;&#x2F;code&gt; call
with &lt;code&gt;spawn(inner)&lt;&#x2F;code&gt;. Replace:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And add the &lt;code&gt;spawn&lt;&#x2F;code&gt; call. We get the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0373]: closure may outlive the current function, but it borrows `msg`, which is owned by the current function
 --&amp;gt; main.rs:7:25
  |
7 |         let mut inner = || {
  |                         ^^ may outlive borrowed value `msg`
8 |             msg.push(&amp;#39;!&amp;#39;);
  |             --- `msg` is borrowed here
help: to force the closure to take ownership of `msg` (and any other referenced variables), use the `move` keyword
  |
7 |         let mut inner = move || {
  |                         ^^^^^^^

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Seems simple enough: we have to have a self contained closure to pass
to &lt;code&gt;spawn&lt;&#x2F;code&gt;, which can&#x27;t refer to values from the parent thread. Let&#x27;s
just add a &lt;code&gt;move&lt;&#x2F;code&gt; in front of the closure. We get an error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: capture of moved value: `msg`
 --&amp;gt; main.rs:8:13
  |
7 |         let mut inner = move || {
  |                         ------- value moved (into closure) here
8 |             msg.push(&amp;#39;!&amp;#39;);
  |             ^^^ value captured here after move
  |
  = note: move occurs because `msg` has type `std::string::String`, which does not implement the `Copy` trait
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I still don&#x27;t find these error messages particularly enlightening. But
it&#x27;s telling us that we&#x27;re trying to capture a moved value. This is
happening because we&#x27;re moving the value into the closure in the first
iteration of the loop, and then trying to move it in again. That
clearly won&#x27;t work!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-broken-solution&quot;&gt;A broken solution&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s just cheat and create a new copy of the string for each
iteration. That&#x27;s easy enough: add the following above &lt;code&gt;let mut inner&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will compile (with a warning) and run, but it has the wrong
output. We aren&#x27;t adding extra exclamation points each time. We&#x27;re not
actually dealing with shared mutable data. Darn.&lt;&#x2F;p&gt;
&lt;p&gt;But that cloning gives me another idea...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reference-counting&quot;&gt;Reference counting&lt;&#x2F;h3&gt;
&lt;p&gt;Maybe we can throw in that reference counting we mentioned previously,
and let each thread keep a pointer to the same piece of data.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::rc::Rc;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = Rc::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fearless&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(inner);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, &lt;em&gt;that&#x27;s&lt;&#x2F;em&gt; a new one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: `std::rc::Rc&amp;lt;std::string::String&amp;gt;` cannot be sent between threads safely
  --&amp;gt; main.rs:13:9
   |
13 |         spawn(inner);
   |         ^^^^^ `std::rc::Rc&amp;lt;std::string::String&amp;gt;` cannot be sent between threads safely
   |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s that fearless concurrency we&#x27;ve heard so much about! The
compiler is preventing us from sending an &lt;code&gt;Rc&lt;&#x2F;code&gt; value between
threads. It would be nice if the compiler mentioned it, but we already
know that for multithreaded applications, we need an atomic reference
counter, or &lt;code&gt;std::sync::Arc&lt;&#x2F;code&gt;. Go ahead and switch over to that. You
should get a new error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow immutable borrowed content as mutable
  --&amp;gt; main.rs:10:13
   |
10 |             msg.push(&amp;#39;!&amp;#39;);
   |             ^^^ cannot borrow as mutable

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;inner-mutability&quot;&gt;Inner mutability&lt;&#x2F;h3&gt;
&lt;p&gt;Above, I mentioned that &lt;code&gt;Rc&lt;&#x2F;code&gt; and &lt;code&gt;RefCell&lt;&#x2F;code&gt; usually go together. The
&lt;code&gt;Rc&lt;&#x2F;code&gt; provides reference counting, and the &lt;code&gt;RefCell&lt;&#x2F;code&gt; provides
mutability. Maybe we can combine &lt;code&gt;Arc&lt;&#x2F;code&gt; and &lt;code&gt;RefCell&lt;&#x2F;code&gt; too?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::cell::RefCell;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = Arc::new(RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fearless&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(inner);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More fearless concurrency:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: `std::cell::RefCell&amp;lt;std::string::String&amp;gt;` cannot be shared between threads safely
  --&amp;gt; main.rs:15:9
   |
15 |         spawn(inner);
   |         ^^^^^ `std::cell::RefCell&amp;lt;std::string::String&amp;gt;` cannot be shared between threads safely
   |
   = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell&amp;lt;std::string::String&amp;gt;`
   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&amp;lt;std::cell::RefCell&amp;lt;std::string::String&amp;gt;&amp;gt;`
   = note: required because it appears within the type `[closure@main.rs:10:25: 14:10 msg:std::sync::Arc&amp;lt;std::cell::RefCell&amp;lt;std::string::String&amp;gt;&amp;gt;]`
   = note: required by `std::thread::spawn`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could go search for more info, but the normal way to have a
mutable, multithreaded cell is a &lt;code&gt;Mutex&lt;&#x2F;code&gt;. Instead of &lt;code&gt;borrow_mut()&lt;&#x2F;code&gt;,
we have a &lt;code&gt;lock()&lt;&#x2F;code&gt; method, which ensures that only one thread at a
time is using the mutex. Let&#x27;s try that out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::thread::{sleep, spawn};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::time::Duration;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::sync::{Arc, Mutex};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fearless&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; inner = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; msg = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
            msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, msg);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(inner);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Duration::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get the error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `push` found for type `std::result::Result&amp;lt;std::sync::MutexGuard&amp;lt;&amp;#39;_, std::string::String&amp;gt;, std::sync::PoisonError&amp;lt;std::sync::MutexGuard&amp;lt;&amp;#39;_, std::string::String&amp;gt;&amp;gt;&amp;gt;` in the current scope
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, right. &lt;code&gt;lock&lt;&#x2F;code&gt;ing can fail, due to something called
poisoning. (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Mutex.html#poisoning&quot;&gt;Check out the
docs&lt;&#x2F;a&gt;
for more information.) To quote the docs:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most usage of a mutex will simply &lt;code&gt;unwrap()&lt;&#x2F;code&gt; these results,
propagating panics among threads to ensure that a possibly invalid
invariant is not witnessed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is the closest to runtime exceptions I&#x27;ve seen the Rust docs
mention, nice. If we add that &lt;code&gt;.unwrap()&lt;&#x2F;code&gt;, we get told that &lt;code&gt;msg&lt;&#x2F;code&gt;
needs to be mutable. And if we add &lt;code&gt;mut&lt;&#x2F;code&gt;, we&#x27;ve written our first
multithreaded Rust application using shared mutable state.&lt;&#x2F;p&gt;
&lt;p&gt;Notice how the compiler prevented us from making some serious
concurrency mistakes? That&#x27;s pretty awesome.&lt;&#x2F;p&gt;
&lt;p&gt;As a final step, see which &lt;code&gt;mut&lt;&#x2F;code&gt;s and &lt;code&gt;move&lt;&#x2F;code&gt;s you can and cannot
remove from the final program. Make sure you can justify to yourself
why the compiler does or does not accept each change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h2&gt;
&lt;p&gt;You&#x27;re now deep into the hard parts of Rust. What comes now is getting
more comfortable with the hairy bits of ownership and closures, and to
get more comfortable with the library ecosystem. We&#x27;re ready to get
much more real world next time, and learn about tokio, the de facto
standard async I&#x2F;O framework in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stack(age): History, philosophy, and future</title>
		<published>2018-11-18T00:00:00+00:00</published>
		<updated>2018-11-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/stackage-history-philosophy-future/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/stackage-history-philosophy-future/</id>
		<content type="html">&lt;p&gt;Both the Stackage and Stack projects originated many years ago. At the
time they started, they had specific goals geared at solving problems
at the time. Some of those problems remain, some have changed. Also,
as the projects have continued, some goals have morphed as well.&lt;&#x2F;p&gt;
&lt;p&gt;I recently received some questions from newer members of the Haskell
community who were uncertain of some design points in Stackage. As I&#x27;m
wont to do, instead of giving a targeted answer to those questions,
I&#x27;m going to take the opportunity to provide a more in depth review of
the history of these projects, the philosophy governing how they work,
and some (highly opinionated) thoughts on what the future may hold for
them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;&#x2F;h2&gt;
&lt;p&gt;To start off with, let&#x27;s give some historical links. I&#x27;ve typically
been pretty vocal about what I&#x27;m working on, so there are quite a few
posts available. I&#x27;m also assuming people aren&#x27;t going to go through
and read all these posts, so I&#x27;ll be covering a simplified view of the
history next.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;03&#x2F;cabal-nirvana&quot;&gt;Avoid cabal hell: find nirvana&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;03&#x2F;announcing-yesod-platform&quot;&gt;Announcing the Yesod Platform&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;11&#x2F;solving-cabal-hell&quot;&gt;Solving Cabal Hell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;11&#x2F;stable-vetted-hackage&quot;&gt;Stable, Vetted Hackage: Call for Participation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2014&#x2F;08&#x2F;deprecating-yesod-platform&quot;&gt;Deprecating yesod-platform&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2014&#x2F;12&#x2F;backporting-bug-fixes&quot;&gt;Backporting bug fixes: Towards LTS Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2014&#x2F;11&#x2F;case-for-curation&quot;&gt;The case for curation: Stackage and the PVP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;02&#x2F;brittle-haskell-toolchain&quot;&gt;The brittle Haskell toolchain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;04&#x2F;announcing-stackage-update&quot;&gt;Announcing stackage-update&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;09&#x2F;true-root-pvp-debate&quot;&gt;The true root of the PVP debate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;04&#x2F;stackage-data-flow&quot;&gt;The Stackage data flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;01&#x2F;stackage-design-choices&quot;&gt;Stackage design choices: making Haskell curated package sets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;02&#x2F;hackage-security-stack&quot;&gt;Hackage Security and Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;04&#x2F;stackages-no-revisions-field&quot;&gt;Stackage&#x27;s no-revisions (experimental) field&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;01&#x2F;slurp&quot;&gt;SLURP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;stack-patching-policy&quot;&gt;Stack patching policy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;haskell-ecosystem-requests&quot;&gt;Haskell Ecosystem Requests&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also a bunch more on the FP Complete blog, but I decided
this was probably enough for the moment. Finally, I&#x27;d like to include
a write-up by Matt Parsons on &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;parsonsmatt&#x2F;0d75877ea14974647621b21f8492fb43&quot;&gt;the Stack
timeline&lt;&#x2F;a&gt;. His
write-up provides a far more concise summary than mine, with dates to
boot. What I&#x27;ll describe below talks far more to the motivations for
each decision.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h2&gt;
&lt;p&gt;I am going to state as plainly as I can the goals I have always had
for these two projects. I know many people out there have attributed
ulterior and sometimes nefarious motives to me. To those who question
my sincerity: you may as well stop reading this blog post now. For
people willing to take me at my word, here&#x27;s the goal:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Increase the adoption of Haskell.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I work for FP Complete, and our goal is slightly different:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Increase the commercial adoption of Haskell.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s really it. I haven&#x27;t always made the best decisions towards
this end. In 20-20 hindsight, there are certainly other ways I would
have approached things, &lt;em&gt;especially&lt;&#x2F;em&gt; on how I would have presented the
language to non-Haskellers. But that&#x27;s the goal.&lt;&#x2F;p&gt;
&lt;p&gt;You may say, &amp;quot;Well, obviously that&#x27;s the goal.&amp;quot; But that&#x27;s not
true. There are &lt;em&gt;many&lt;&#x2F;em&gt; different goals that may exist. &amp;quot;Design the
most elegant solution to problem X,&amp;quot; or &amp;quot;Generate a bunch of research
papers,&amp;quot; or &amp;quot;Convince one really wealthy company to pay me a lot of
money to work on Haskell.&amp;quot; I&#x27;m not saying those are other people&#x27;s
goals, or that they are somehow other goals of mine. I&#x27;m pointing out
that the goal I had was simple to state, explains many of my
decisions, and is in fact opinionated.&lt;&#x2F;p&gt;
&lt;p&gt;One final note: I&#x27;m willing to make trade-offs to achieve that goal,
to an extent. I&#x27;m willing to giving up on some level of elegance in
the solution to solve an immediate problem. I know others disagree
with me on this. That&#x27;s a fair thing to disagree on, but it also
explains why differing solutions have arisen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history-of-stackage&quot;&gt;History of Stackage&lt;&#x2F;h2&gt;
&lt;p&gt;The origins of this start in a simple place. I wrote Yesod. For better
or worse, I designed Yesod as a large collection of packages to allow
people to mix-and-match components (e.g., use Warp the webserver or
Shakespeare the templating engine without Yesod itself). For years, I
received many, many complaints from users about how difficult it was to
build Yesod.&lt;&#x2F;p&gt;
&lt;p&gt;I tried following the Package Versioning Policy (PVP), but at the
time, this actually made the problem worse, not better. It&#x27;s really
not worth debating this point, though some will want to. This is
absolutely what I thought at the time, and why I stopped following the
PVP. I believe this was due to limitations in the dependency solver at
the time. Regardless of whether those problems have now been fixed, or
whether I just had a fundamental misunderstanding at the time, I
became convinced that a versioning policy was insufficient to escape
dependency hell.&lt;&#x2F;p&gt;
&lt;p&gt;The Haskell Platform solved some level of the dependency hell issue,
by providing a predetermined set of package versions that were known
to work well together. However, it wasn&#x27;t nearly enough to solve my
problems, since it only covered a relatively small number of
packages. (This was by design, and it was the &lt;em&gt;right&lt;&#x2F;em&gt; design for HP.)
To work around this, and finally stop losing prospective users, I put
together the Yesod Platform: a collection of package versions known to
work together. This helped.&lt;&#x2F;p&gt;
&lt;p&gt;When I started working for FP Complete, we ran into similar dependency
issues, as did our customers. Yesod Platform was the right idea, but
it only covered Yesod. What about people working with completely
different libraries, or using a different web framework? We cobbled
together some internal tooling for coming up with package sets.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually, I realized that the entire community would be able to take
advantage of this. We created the Stackage project, started publishing
snapshots, and folded Yesod Platform into it.&lt;&#x2F;p&gt;
&lt;p&gt;Much of the community viewed Stackage as a &amp;quot;community wide CI,&amp;quot; in the
sense that it gave feedback to maintainers for when their builds
failed. I thought there was much more potential to Stackage. I
believed it could dramatically increase usability of Haskell for new
users. After all, out of the gate, most Haskellers were still
regularly hitting dependency issues.&lt;&#x2F;p&gt;
&lt;p&gt;The history of Stackage continues on from here, including adding a
curator team, formalizing our processes, figuring out how to make
tricky decisions around when to boot out packages, and so on. However,
we&#x27;re going to skip all of that history as it&#x27;s less interesting for
now, and continue chronologically with the inception of Stack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history-of-stack&quot;&gt;History of Stack&lt;&#x2F;h2&gt;
&lt;p&gt;Let me start by saying that many of the problems of cabal I&#x27;m about to
allude to have been addressed, either with improvements to the
standard workflow, the addition of sandboxes, or the &lt;code&gt;new-build&lt;&#x2F;code&gt;
system. However, I&#x27;m addressing the history here.&lt;&#x2F;p&gt;
&lt;p&gt;At the point our history is continuing from, &lt;code&gt;cabal-install&lt;&#x2F;code&gt; had
addressed some of the more serious dependency solver issues from the
past. However, dependency solving was still unreliable. You could
certainly make the claim that I was part of the problem by not
following the PVP. However, it&#x27;s also irrelevant:
the design of the dependency solver till today means once you have one
piece of bad historical data, the solver cannot be guaranteed to work
correctly. I strongly believe that no matter what you do, people will
make mistakes, so trusting PVP-guided dependency solving wasn&#x27;t going
to be a solution for me.&lt;&#x2F;p&gt;
&lt;p&gt;The Hackage Trustees introduced the concept of Hackage metadata
revisions at the same time. I did at the time, and still today,
strongly oppose this decision. It has made tooling much more complex,
and introduced new layers of trust into our system. Using this wasn&#x27;t
an option when Stack first came onto the scene, since the system was
not fully developed (e.g., the &lt;code&gt;01-index.tar.gz&lt;&#x2F;code&gt; archive didn&#x27;t exist
yet). There were many alternative solutions if PVP-guided dependency
solving was a goal (like ignoring previous patch releases), but we
ended up with metadata revisions instead.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, back to the history. The out-of-the-box &lt;code&gt;cabal-install&lt;&#x2F;code&gt;
experience involved a lot of user frustration. At FP Complete, we
ended up writing a number of scripts around &lt;code&gt;cabal-install&lt;&#x2F;code&gt; usage to
ensure our software could be developed and deployed reliably. We heard
the same kind of story from many other Haskell shops we spoke with. We
realized wrapping &lt;code&gt;cabal-install&lt;&#x2F;code&gt; was a pattern repeating across the
ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;My next goal was a simple one. Combining Stackage and cabal sandboxes,
the user experience was fairly decent, with mostly reproducible build
plans (ignoring the incoming metadata revisions). I tried to work with
the Hackage, Cabal, and Haskell Platform teams to get Stackage
included in the system. Ultimately, this resulted in a plan called GPS
Haskell, devised in person at ICFP 2014. I made some changes to
Stackage to accomodate (removing the local patching we did to work
around restrictive upper bounds). However, there was no further
response from the other teams, so I had to consider this a dead end.&lt;&#x2F;p&gt;
&lt;p&gt;At FP Complete, we were working on an FDA regulated medical device
written in Haskell. There were dozens of people working on this, many
of whom were not Haskell engineers by trade. We needed to make
guarantees to the FDA that the build plan was reproducible. For the OS
level, we used Docker. But at the Haskell layer, we needed to do
something based on Stackage. We could have done this with
&lt;code&gt;cabal-install&lt;&#x2F;code&gt;, but we needed something that worked reliably across
three OSes, was easy enough for non-Haskellers to use, including QA
engineers and auditors within the client company. We were looking at
writing yet another set of wrapper scripts around &lt;code&gt;cabal-install&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is the environment in which Stack was born. We&#x27;d already written
these scripts multiple times. We already knew how unreliable it was to
try and wrap around &lt;code&gt;cabal-install&lt;&#x2F;code&gt; like this. We were already
reinventing a bunch of the logic inside &lt;code&gt;cabal-install&lt;&#x2F;code&gt;. The presence
of the dependency solver was—for our purposes—a bug, not a
feature. We had requirements for automatic Docker support.&lt;&#x2F;p&gt;
&lt;p&gt;We discussed with our customer, and made the decision that it was time
to invest in a new tool. I promise you that this decision was not
taken lightly. For internal usage, we realized we didn&#x27;t have much
choice. Releasing it as a competitor to &lt;code&gt;cabal-install&lt;&#x2F;code&gt; was another
matter. But it came back to the &amp;quot;promote (commercial) adoption of
Haskell.&amp;quot; We had lots of anecdotal evidence to suggest that a new
build tool would help that case.&lt;&#x2F;p&gt;
&lt;p&gt;So we released Stack. It was a calculated trade-off between the
downsides of forking part of the ecosystem versus providing a better
user experience and hopefully encouraging Haskell adoption. Was it the
right decision? I still believe so. I know others do not.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll leave one last note in the history section, which has been a
recurring theme. No one has the ability or right to force anyone to do
anything they don&#x27;t want. I could not force the &lt;code&gt;cabal-install&lt;&#x2F;code&gt; team
to add Stackage support. I made that request, and nothing came of
it. That&#x27;s their prerogative. However, in an open source world, if you
don&#x27;t listen to the requests of users, the only responses they have
are to give up on the features they want, or to fork. We elected to go
the latter route with a new tool, because the benefit of having a new
tool that did what we wanted outweighed the costs involved, at least
in our judgement.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;philosophy&quot;&gt;Philosophy&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, that&#x27;s the history. And the goal of all of this is hopefully
clear. Over the years of building, maintaining, and modifying these
projects, the philosophy driving them has evolved and solidified. As
one person involved in these projects, let me describe the underlying
philosophy I see.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Build plan creation should &lt;em&gt;always&lt;&#x2F;em&gt; be an explicit step. There
should never be a point where you run a command and are unexpectedly
in build plan construction mode. One approach to ensuring this is to
have lock files (Rust&#x27;s cargo does this, among many others). Freeze
files with cabal-install seem to go in this direction too. However,
I&#x27;m a big fan of what we did with Stack: the available packages (aka the source map) is always
defined in a &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; file, and there is a separate set of
commands (&lt;code&gt;init&lt;&#x2F;code&gt;, &lt;code&gt;solver&lt;&#x2F;code&gt;, etc) involved in modifying that
file. Changes to your &lt;code&gt;.cabal&lt;&#x2F;code&gt; or &lt;code&gt;package.yaml&lt;&#x2F;code&gt; file have no impact
on the set of packages available.&lt;&#x2F;li&gt;
&lt;li&gt;Documentation guides design. There must always be a clear onboarding
story for users, both new and those trying new things. Tools should
be designed from that perspective. It is irrelevant to argue about
&amp;quot;which tool is best for a user.&amp;quot; The real question is: what workflow
is best? One of the issues that has complicated discussion of Stack
vs cabal-install is that there are multiple different cabal-install
workflows that end up discussed concurrently. (To some extent, this
applies to Stack as well, with scripting vs building, but I&#x27;d argue
to a lesser extent.)
&lt;ul&gt;
&lt;li&gt;To get a better idea of what I mean, check out the &amp;quot;Next Steps&amp;quot;
on the &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;getting started&lt;&#x2F;a&gt;
page. Certainly people can and do use Stack differently than
these three links. But we&#x27;ve optimized for these kinds of use
cases, and documented clearly how people can use them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There is an inherent, awkward piece of work in the world called
&amp;quot;making the build plan.&amp;quot; It&#x27;s sometimes trivial, it&#x27;s sometimes
difficult. The work is inherent, though different approaches can to
some extent make the work larger or smaller.  The Stackage approach
is based on curation. It&#x27;s a tried-and-tested approach from the
Linux distribution world, and it centralizes a lot of the pain and
work. Dependency solving is a more flexible and distributed
approach. However, it depends on the cooperation, compliance, and
correctness of a large group of people, and&#x2F;or a large amount of
work by a centralized group to edit the metadata. As a result, my
personal view is:
&lt;ul&gt;
&lt;li&gt;We should focus on curation for the most common use case&lt;&#x2F;li&gt;
&lt;li&gt;For the cases where, for whatever reason, curation ends up not
being sufficient, falling back to manual build plan construction
is painful, but limited in scope. I &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;9bkd6m&#x2F;errors_when_installing_grapefruit_with_stack&#x2F;e5579f9&#x2F;?context=3&quot;&gt;gave an
example&lt;&#x2F;a&gt;
of doing this on Reddit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reproducibility is a great goal, but there&#x27;s &lt;em&gt;always&lt;&#x2F;em&gt; a limit to how
reproducible you can be. Stack aims for reproducible build plans,
but nothing at the OS level. Nix goes a step farther, but doesn&#x27;t
for example ensure identical hardware. My point is: define a level
of reproducibility you want from the tool at hand and strive to
ensure it. I think Stack has the right idea for a build tool, and
OS-level reproducibility should be handled externally, such as via
Docker, Nix, or VMs.&lt;&#x2F;li&gt;
&lt;li&gt;It is vital to observe the new user experience and respond to
it. I&#x27;m still upset (with myself) that there were so many potential
Haskell and Yesod users who almost immediately dropped the language
because of the bad onboarding experience. If I have one biggest
regret in all of this, it&#x27;s that I wasn&#x27;t more proactive in looking
for a solution to these problems far earlier. In other words, I wish
I&#x27;d thought of Stackage and Stack about 5 years before I did!&lt;&#x2F;li&gt;
&lt;li&gt;There will be use cases we don&#x27;t address, and that&#x27;s fine. Stack&#x27;s
goal is not, has never been, and (if I have my way) never will be,
to defeat all other build tools. Stack has a defined set of use
cases it works well for. If it doesn&#x27;t distract and people want it,
we can add additional such use cases. But the existance and
improvement of other tools is a Good Thing.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;ve had a running philosophy in Stack of including extra
functionality, such as built in Docker and Nix integration. But see
the future section for some evolved thoughts on this.&lt;&#x2F;li&gt;
&lt;li&gt;Decouple and avoid needless forking. I obviously made some decisions
that include forking. I&#x27;ve also been very careful to make those fork
points as minimal as possible. Stackage and Stack both use Hackage
as a package repository, instead of having their own. Both projects
continue to use Cabal (the file format, build system, and library)
instead of creating a completely separate build system. I can assure
you, there were strong technical arguments to do things differently,
and there have been large, ongoing costs (to me personally in many
cases) for having &lt;em&gt;not&lt;&#x2F;em&gt; forked. But overall, I believe in the goal
of decoupling the selection of tooling, and making the build tool
selection orthogonal to the package store is a Good Thing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;future&quot;&gt;Future&lt;&#x2F;h2&gt;
&lt;p&gt;One thing we&#x27;ve already been doing in the Stack code base is
decoupling extra functionality. We&#x27;ve split off a few libraries
already. I&#x27;ve spent some time working on Pantry as a means to separate
out the package source logic from Stack. I&#x27;d like to see that trend
continue. Another idea is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;4261&quot;&gt;separating out the GHC installation
logic&lt;&#x2F;a&gt; so it
can be used separately. In my ideal world, &amp;quot;how you install the tools&amp;quot;
would be orthogonal to &amp;quot;which tools you use.&amp;quot; It&#x27;s part of why I
ultimately opposed to the original Haskell Platform (now HP Full): it
bundled opinionated concepts about which libraries you should use with
the less opinionated installer for GHC.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;4217&quot;&gt;open
work&lt;&#x2F;a&gt; on
improving the &lt;code&gt;stackage-curator&lt;&#x2F;code&gt; tool. This follows directly from the
Pantry work, and will hopefully allow a few improvements:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Make it easier for people to create their own snapshots. I strongly
believe in decoupling, and allowing others to create their own,
opinionated snapshots separate from Stackage Nightly and LTS
Haskell would be great.&lt;&#x2F;li&gt;
&lt;li&gt;Make it easier to integrate with Nix. I know they have some scripts
in place already to use Stackage snapshots, and I&#x27;m aware of at
least one shortcoming (not respecting the Hackage revision pinned
by Stackage).&lt;&#x2F;li&gt;
&lt;li&gt;Make the process of choosing which packages to hold back in LTS
minor bumps more transparent. The current tooling makes it hard to
be clear about what decisions were made.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For security sensitive use cases (like the FDA regulated medical
device I mentioned above), including more secure source information is
vital. Currently, Stack relies upon the package tarball hashes from
Hackage Security. This introduces a layer of trust that those hashes
are not modified or corrupted over time, which is hard to justify in
highly-security-sensitive setups. The upcoming Pantry-based Stack will
include far more hashing information so that you can demonstrate
provenance of the source files exclusively from what&#x27;s in your source
tree. I want to see further improvements to the security story like
this.&lt;&#x2F;p&gt;
&lt;p&gt;As you may have noticed, I&#x27;ve talked a lot about community processes
over the past year or so. I find the area fascinating and
underexplored. I&#x27;m already trying to take a back seat in the code
writing aspect of these projects, and involve myself more in
organization and support. The Stackage Curator team has worked out
really well, and the much newer Stack Issue Triagers initiative seems
to be working out nicely as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;collaboration-with-cabal&quot;&gt;Collaboration with cabal?&lt;&#x2F;h3&gt;
&lt;p&gt;As a final point, let me address this question, which comes up a
lot. Despite what many people claim, neither FP Complete nor I have
any vested interest—or even desire—to maintain a separate
build tool (Stack). Stackage is a project I started because I saw a
gap in the ecosystem. But my preference had always been to have
Stackage become part of the rest of the tooling, not have a separate
set of tooling.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, many people and companies rely on the Stack tooling and
workflow. &lt;code&gt;cabal-install&lt;&#x2F;code&gt; has certainly made improvements in the past
5 years, but it is still different. It has different goals, a
different UX, and supports different features. There is not a 1-to-1
mapping between the functionality.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d love to see the gap close. I&#x27;d still love to see support for
Stackage snapshots added to &lt;code&gt;cabal-install&lt;&#x2F;code&gt;. I think Stack has done some
great work with things like the script interpreter, the approach we
have to the implicit global project, the reproducible-by-default build
plans, and the security we&#x27;re introducing with Pantry.&lt;&#x2F;p&gt;
&lt;p&gt;In my ideal world, and I mean this with complete sincerity, enough of
these features would move into &lt;code&gt;cabal-install&lt;&#x2F;code&gt; that we could declare
Stack no longer needed. While forking isn&#x27;t inherently evil, if it can
be avoided it would be a good thing. I don&#x27;t think the current plans
for &lt;code&gt;cabal-install&lt;&#x2F;code&gt; take it in the direction I&#x27;d like to see, so this
is unlikely to happen. But I say in all good faith: if enough of the
Stack community&#x27;s needs and desires could be met with &lt;code&gt;cabal-install&lt;&#x2F;code&gt;,
I&#x27;d advocate for a some kind of deprecation cycle for Stack.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Crates and more iterators - Rust Crash Course lesson 4 - exercise solutions</title>
		<published>2018-11-14T00:00:00+00:00</published>
		<updated>2018-11-14T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-04-crates-more-iterators-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-04-crates-more-iterators-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Crates, I&#x2F;O, and more iterators.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;You can find my complete solution &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;936ecefd7b6fabc2438e51f02bfe36cb&quot;&gt;as a Github
Gist&lt;&#x2F;a&gt;. If
your solution looks a bit different than mine, don&#x27;t worry. Also, see
if there&#x27;s anything interesting you can learn from my implementation,
or some improvements you&#x27;d like to make to it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TheAnswer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TheAnswer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start with the simpler solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fibs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fibs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; Fibs {
    Fibs {
        x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fibs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x = orig_y;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y = orig_x + orig_y;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(orig_x)
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in fibs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, if you bump that &lt;code&gt;take(10)&lt;&#x2F;code&gt; to &lt;code&gt;take(47)&lt;&#x2F;code&gt;, the end of your
output will look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;701408733
1134903170
thread &amp;#39;main&amp;#39; panicked at &amp;#39;attempt to add with overflow&amp;#39;, foo.rs:21:18
note: Run with `RUST_BACKTRACE=1` for a backtrace.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One solution would be to bump to a &lt;code&gt;u64&lt;&#x2F;code&gt;, but that&#x27;s just delaying the
problem. Instead, we can use Rust&#x27;s checked addition method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;checked_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(orig_y) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; overflow
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; no overflow
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(new_y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x = orig_y;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y = new_y;

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(orig_x)
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our stream will stop as soon as overflow occurs.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to get &lt;em&gt;really&lt;&#x2F;em&gt; advanced here, you could actually output
two more values. To do so, we need to assign to a &lt;em&gt;derefenced&lt;&#x2F;em&gt; value
and use an &lt;code&gt;enum&lt;&#x2F;code&gt; to track our state:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Fibs::*;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        Done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        OneLeft(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= Done;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x)
        }
        Running(orig_x, orig_y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;checked_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(orig_y) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; overflow
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; OneLeft(orig_y),
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(new_y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Running(orig_y, new_y),
            };

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(orig_x)
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: Iterator,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item: std::ops::Add&amp;lt;Output=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; + Copy,
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= I::Item;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x + x),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-5&quot;&gt;Exercise 5&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;fold&lt;&#x2F;code&gt; method takes two parameters: the initial value, and a
function for adding the running total with the next value. One
approach using closures is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| x + y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, res);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another approach is to directly refer to the addition
function. Remember how there was a &lt;code&gt;Mul&lt;&#x2F;code&gt; trait for the &lt;code&gt;*&lt;&#x2F;code&gt; operator?
There&#x27;s also an &lt;code&gt;Add&lt;&#x2F;code&gt; trait for addition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, std::ops::Add::add);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, res);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As for writing our own &lt;code&gt;sum&lt;&#x2F;code&gt; function: we&#x27;ll end up back in the
situation where things are generic and we have to provide appropriate
traits. We&#x27;ll follow a similar approach with using &lt;code&gt;From&lt;&#x2F;code&gt; and a &lt;code&gt;u8&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: I) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: Iterator,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item: std::ops::Add&amp;lt;Output=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;,
{
    iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), std::ops::Add::add)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Crates and more iterators - Rust Crash Course lesson 4</title>
		<published>2018-11-12T00:00:00+00:00</published>
		<updated>2018-11-12T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-04-crates-more-iterators/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-04-crates-more-iterators/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m getting bored with bouncy, this is our third week talking about this program. It&#x27;s time to finish this off! How do we do double buffering? It&#x27;s time to learn about external libraries in Rust, or &lt;em&gt;crates&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We still haven&#x27;t fixed our double buffering problem, let&#x27;s finally do that.
We&#x27;re also going to introduce some more error handling from
the standard library. And then we&#x27;ll get to play a bit more with
iterators as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-a-crate&quot;&gt;Finding a crate&lt;&#x2F;h2&gt;
&lt;p&gt;To do double buffering in the terminal, we&#x27;re going to want some kind
of a curses library. We&#x27;re going to look for a crate on
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt;. On that page, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;search?q=curses&quot;&gt;search for
&amp;quot;curses&amp;quot;&lt;&#x2F;a&gt;. Looking through the
download counts and the descriptions,
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pancurses&quot;&gt;pancurses&lt;&#x2F;a&gt; looks nice, especially
since it supports Unix and Windows. Let&#x27;s use it!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; If you&#x27;re wondering, this is &lt;em&gt;exactly&lt;&#x2F;em&gt; the process I
went through when writing up bouncy. I had no prior knowledge to tell
me pancurses was going to be the right choice. Also, this program
happens to be the first time I&#x27;ve ever used a curses library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-a-project&quot;&gt;Starting a project&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to create a new project for this using &lt;code&gt;cargo new&lt;&#x2F;code&gt;. We&#x27;re
going to pull in the bouncy code from the end of week 2 (before the
introduction of command line parsing), since as we&#x27;ll see later, we
won&#x27;t need that parsing anymore.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new bouncy4
$ cd bouncy4
$ curl https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;snoyberg&#x2F;5307d493750d7b48c1c5281961bc31d0&#x2F;raw&#x2F;8f467e87f69a197095bda096cbbb71d8d813b1d7&#x2F;main.rs &amp;gt; src&#x2F;main.rs
$ cargo run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The ball should be bouncing around your terminal, right? Great!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-the-crate&quot;&gt;Adding the crate&lt;&#x2F;h2&gt;
&lt;p&gt;The configuration for your project lives in the file &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;,
known as the &lt;em&gt;manifest&lt;&#x2F;em&gt;. On my system, it looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bouncy4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Michael Snoyman &amp;lt;michael@snoyman.com&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]

[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will look a bit different on your machine (unless your name is also
Michael Snoyman). Notice that &lt;code&gt;[dependencies]&lt;&#x2F;code&gt; section at the end?
That&#x27;s where we add information on external crates. If you go back to
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pancurses&quot;&gt;the pancurses page on
crates.io&lt;&#x2F;a&gt;, you&#x27;ll see:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Cargo.toml  pancurses = &amp;quot;0.16.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It may be different when you&#x27;re reading this. That&#x27;s telling us what
we can add to the dependencies section to depend on the library. There
are lots of details about how to specify dependencies, which we won&#x27;t
get into here (and probably never will in the crash course, I&#x27;ve spent
enough of my life discussing dependency management already :) ). You
can read more in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;manifest.html&quot;&gt;the Cargo book
reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, go ahead and add &lt;code&gt;pancurses = &amp;quot;0.16.0&amp;quot;&lt;&#x2F;code&gt; to the end of your
&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; and run &lt;code&gt;cargo build&lt;&#x2F;code&gt;. &lt;code&gt;cargo&lt;&#x2F;code&gt; should run off and do some
updating, downloading, compiling, and end up with an executable that
does exactly the same thing as it did before. Perfect, time to use it!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; It seems like, at the time of writing, &lt;code&gt;pancurses&lt;&#x2F;code&gt; does not build
against the latest version of the &lt;code&gt;ncurses&lt;&#x2F;code&gt; package. If you get a build
failure, you may need to also add &lt;code&gt;ncurses = &amp;quot;= 5.94.0&amp;quot;&lt;&#x2F;code&gt; to your &lt;code&gt;dependencies&lt;&#x2F;code&gt;
to force Cargo to use an older, compatible version.&lt;&#x2F;p&gt;
&lt;p&gt;With the current version of the Rust, you&#x27;ll also need to add the following to
the top of &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; pancurses;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This requirement is disappearing with Rust 2018. If you&#x27;d like play around with
that, you&#x27;ll need to switch to a nightly compiler and add &lt;code&gt;edition = &amp;quot;2018&amp;quot;&lt;&#x2F;code&gt; to
your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. But we&#x27;re going to stick to the stable compiler and Rust
2015.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;library-docs&quot;&gt;Library docs&lt;&#x2F;h2&gt;
&lt;p&gt;On the crates.io page, there&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pancurses&#x2F;0.16.0&#x2F;pancurses&#x2F;&quot;&gt;link to the
documentation&lt;&#x2F;a&gt; for
pancurses. Open that in a new tab. Also, reading down the crates page,
we get a nice usage example. In &lt;code&gt;main()&lt;&#x2F;code&gt;, the first call is to
&lt;code&gt;initscr&lt;&#x2F;code&gt;. Jump over to the API documentation and search for
&lt;code&gt;initscr&lt;&#x2F;code&gt;, and you&#x27;ll end up at &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pancurses&#x2F;0.16.0&#x2F;pancurses&#x2F;fn.initscr.html&quot;&gt;the &lt;code&gt;initscr&lt;&#x2F;code&gt;
function&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try this out. Add the following line to the top of your &lt;code&gt;main&lt;&#x2F;code&gt;
function and compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; window = pancurses::initscr();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! We&#x27;re going to use that returned &lt;code&gt;Window&lt;&#x2F;code&gt; struct to interact
with pancurses. Go ahead and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pancurses&#x2F;0.16.0&#x2F;pancurses&#x2F;struct.Window.html&quot;&gt;open its
documentation&lt;&#x2F;a&gt;
and start browsing through.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-frame-size&quot;&gt;Getting the frame size&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re currently just assigning an arbitrary frame size. Ideally, we&#x27;d
like to base it off of the actual terminal size. &lt;code&gt;Window&lt;&#x2F;code&gt; provides a
method for this,
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pancurses&#x2F;0.16.0&#x2F;pancurses&#x2F;struct.Window.html#method.get_max_yx&quot;&gt;&lt;code&gt;get_max_yx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First, a step for you dear reader: modify the &lt;code&gt;new&lt;&#x2F;code&gt; method of &lt;code&gt;Game&lt;&#x2F;code&gt;
to take a &lt;code&gt;Frame&lt;&#x2F;code&gt; as input. Then, let&#x27;s jump back to our &lt;code&gt;main&lt;&#x2F;code&gt;. We
can capture the maximum &lt;code&gt;y&lt;&#x2F;code&gt; and &lt;code&gt;x&lt;&#x2F;code&gt; values with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(max_y, max_x) = window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;get_max_yx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now let&#x27;s create a &lt;code&gt;Frame&lt;&#x2F;code&gt; value out of those.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; frame = Frame {
    width: max_x,
    height: max_y,
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then pass that value into &lt;code&gt;Game::new()&lt;&#x2F;code&gt;. This will only work if you already
modified &lt;code&gt;new&lt;&#x2F;code&gt; to take an extra &lt;code&gt;Frame&lt;&#x2F;code&gt; argument, go back a few paragraphs if
you missed that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Before you hit compile, can you figure out what error
message we&#x27;re about to encounter?&lt;&#x2F;p&gt;
&lt;p&gt;When I run &lt;code&gt;cargo build&lt;&#x2F;code&gt;, I get the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
   --&amp;gt; src&#x2F;main.rs:109:16
    |
109 |         width: max_x,
    |                ^^^^^ expected u32, found i32

error[E0308]: mismatched types
   --&amp;gt; src&#x2F;main.rs:110:17
    |
110 |         height: max_y,
    |                 ^^^^^ expected u32, found i32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you remember, &lt;code&gt;width&lt;&#x2F;code&gt; and &lt;code&gt;height&lt;&#x2F;code&gt; are &lt;code&gt;u32&lt;&#x2F;code&gt;s, but pancurses gives
us &lt;code&gt;i32&lt;&#x2F;code&gt;s for the maximum x and y values. How do we convert? One easy
way to handle this is with &lt;code&gt;as u32&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;width: max_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
height: max_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a totally unchecked cast. To demonstrate, try running this
program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Yes, there&#x27;s syntax in Rust for following a number with its type like
that, it&#x27;s really nice.)&lt;&#x2F;p&gt;
&lt;p&gt;Which results in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-5 -&amp;gt; 4294967291
-4 -&amp;gt; 4294967292
-3 -&amp;gt; 4294967293
-2 -&amp;gt; 4294967294
-1 -&amp;gt; 4294967295
0 -&amp;gt; 0
1 -&amp;gt; 1
2 -&amp;gt; 2
3 -&amp;gt; 3
4 -&amp;gt; 4
5 -&amp;gt; 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to just accept this bad behavior for now. Don&#x27;t worry,
it&#x27;ll get worse.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;carriage-return-and-the-border&quot;&gt;Carriage return and the border&lt;&#x2F;h2&gt;
&lt;p&gt;If you run this program, you&#x27;ll get some really weird looking
output. If you don&#x27;t believe me, go run it yourself now. I&#x27;ll wait.&lt;&#x2F;p&gt;
&lt;p&gt;The first problem is that our newlines aren&#x27;t working as expected. We
previously used &lt;code&gt;\n&lt;&#x2F;code&gt; to create a newline. However, with curses
enabled, this create a &lt;em&gt;line feed&lt;&#x2F;em&gt;, moving the cursor down one row,
without a &lt;em&gt;carriage return&lt;&#x2F;em&gt;, moving the cursor to the beginning of the
line. Go ahead and replace the &lt;code&gt;\n&lt;&#x2F;code&gt; usages with &lt;code&gt;\r\n&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s better, but there&#x27;s still a problem: the grid doesn&#x27;t fit in
the terminal! That&#x27;s because we didn&#x27;t take the size of the border
into account. Try subtracing 4 from the maximum x and y values and see
if that fixes things. (Note: there&#x27;s a bit of a trick to where you put
the &lt;code&gt;- 4&lt;&#x2F;code&gt;. Think about what value you&#x27;re trying to cast.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;double-buffering&quot;&gt;Double buffering&lt;&#x2F;h2&gt;
&lt;p&gt;We still haven&#x27;t done double buffering, but we&#x27;re in a much better
position to do so now! The trick is to replace our &lt;code&gt;println!&lt;&#x2F;code&gt; call in
the &lt;code&gt;main&lt;&#x2F;code&gt; function&#x27;s &lt;code&gt;loop&lt;&#x2F;code&gt; with calls to &lt;code&gt;window&lt;&#x2F;code&gt; methods. If you
want the challenge, go read through the docs and try to figure out how
to make it work. One hint: you&#x27;ll need to revert the addition of the
&lt;code&gt;\r&lt;&#x2F;code&gt; carriage returns we added above.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; get rid of old content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; write to the buffer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;refresh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; update the screen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    std::thread::sleep(sleep_duration);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hurrah, we have double buffering in place! We can finally be done with
these bouncing balls.&lt;&#x2F;p&gt;
&lt;p&gt;Or can we?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s time to get more comfortable with exploring API docs, and writing
some Rust code with less training wheels. There are a few problems
with our implementation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t need to generate an entire string for the whole
grid. Instead, we can use some &lt;code&gt;Window&lt;&#x2F;code&gt; methods for moving the
cursor around and adding characters. Use that instead.&lt;&#x2F;li&gt;
&lt;li&gt;Drawing the border as we have is harder than it should be. There&#x27;s a
method on &lt;code&gt;Window&lt;&#x2F;code&gt; that will help significantly.&lt;&#x2F;li&gt;
&lt;li&gt;We have a number of assumptions about numbers, in particular that
the maximum x and y are positive, and large enough to hold the
ball&#x27;s starting position. Put in some sane limits: both values must
be at least 10.&lt;&#x2F;li&gt;
&lt;li&gt;More advanced, but: pancurses has some built in support for input
handling with timeouts. Instead of using &lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt;, we
can set a timeout on input handling and add that to our main
loop. You can then also respond to two specific kinds of input:
&lt;ul&gt;
&lt;li&gt;Exit the program on a &lt;code&gt;q&lt;&#x2F;code&gt; press&lt;&#x2F;li&gt;
&lt;li&gt;Reset the game when the size of the window changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;more-iterators&quot;&gt;More iterators!&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, I&#x27;m sufficiently bored with bouncing balls. Let&#x27;s talk about
something far more interesting: streaming data. Personally I found it
easiest to understand iterators by writing a few of them myself, so
that&#x27;s where we&#x27;re going to start.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do some compiler-guided programming. We discussed previously
that there&#x27;s an &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait. So a fair bet is that we need to
create a new data type and provide an implementation of the &lt;code&gt;Iterator&lt;&#x2F;code&gt;
trait. Let&#x27;s start off with something simple: an iterator that
produces no values at all.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Empty {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Wait, this shouldn&amp;#39;t happen!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;All done!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;panic!&lt;&#x2F;code&gt;ing is a way to cause the current thread to exit due to an
impossible situation. It&#x27;s &lt;em&gt;kind of&lt;&#x2F;em&gt; like runtime exceptions in other
languages, except you can&#x27;t recover from them. They are only
intended to be used for impossible situations.&lt;&#x2F;p&gt;
&lt;p&gt;OK, compile that and you&#x27;ll get a helpful error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: the trait bound `Empty: std::iter::Iterator` is not satisfied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool, let&#x27;s add an empty implementation (no pun intended):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More help from the compiler!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0046]: not all trait items implemented, missing: `Item`, `next`
 --&amp;gt; foo.rs:3:1
  |
3 | impl Iterator for Empty {
  | ^^^^^^^^^^^^^^^^^^^^^^^ missing `Item`, `next` in implementation
  |
  = note: `Item` from trait: `type Item;`
  = note: `next` from trait: `fn(&amp;amp;mut Self) -&amp;gt; std::option::Option&amp;lt;&amp;lt;Self as std::iter::Iterator&amp;gt;::Item&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we need to provide two things: &lt;code&gt;Item&lt;&#x2F;code&gt; and &lt;code&gt;next&lt;&#x2F;code&gt;. &lt;code&gt;next&lt;&#x2F;code&gt; is a
function, so we&#x27;ll get to that in a second. What about that &lt;code&gt;type Item;&lt;&#x2F;code&gt;? It&#x27;s what we call an &lt;em&gt;associated type&lt;&#x2F;em&gt;. It tells us what type
of values will be produced by this iterator. Since we&#x27;re not producing
anything, we can use any type here. I&#x27;ll use a &lt;code&gt;u32&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to add in a &lt;code&gt;next&lt;&#x2F;code&gt;. Above, it gives the type of that
function as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fn(&amp;amp;mut Self) -&amp;gt; std::option::Option&amp;lt;&amp;lt;Self as std::iter::Iterator&amp;gt;::Item&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s simplify this bit by bit. The &lt;em&gt;type&lt;&#x2F;em&gt; of the input is &lt;code&gt;&amp;amp;mut Self&lt;&#x2F;code&gt;. However, the correct syntax will be &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;. Find that
confusing? Remember that &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; is a shortcut for &lt;code&gt;self: &amp;amp;mut Self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fn(&amp;amp;mut self) -&amp;gt; std::option::Option&amp;lt;&amp;lt;Self as std::iter::Iterator&amp;gt;::Item&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we can remove the module qualifiers for &lt;code&gt;Option&lt;&#x2F;code&gt; and &lt;code&gt;Iterator&lt;&#x2F;code&gt;,
since they&#x27;re already in our namespace:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fn(&amp;amp;mut self) -&amp;gt; Option&amp;lt;&amp;lt;Self as Iterator&amp;gt;::Item&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;Self as Iterator&lt;&#x2F;code&gt; is interesting. It&#x27;s saying &amp;quot;take the current
type, and look at its &lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation. The reason we care
about specifying the implementation is because of what comes next:
&lt;code&gt;::Item&lt;&#x2F;code&gt;. What we&#x27;re &lt;em&gt;really&lt;&#x2F;em&gt; saying is &amp;quot;we want the &lt;code&gt;Item&lt;&#x2F;code&gt; associated
type related to the &lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation.&amp;quot; It&#x27;s possible that
other traits will &lt;em&gt;also&lt;&#x2F;em&gt; have an associated type with the same name,
so this is an unambiguous way to refer to it.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, let&#x27;s see if this type signature works. Include the name of
the function and give it a dummy function body:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;::Item&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; is a macro that uses &lt;code&gt;panic!&lt;&#x2F;code&gt; under the surface,
and is a convenient way to stub out implementations while under active
development. If you compile this, it will succeed. Yay! Then it
crashes at runtime due to the &lt;code&gt;unimplemented!&lt;&#x2F;code&gt;. Cool.&lt;&#x2F;p&gt;
&lt;p&gt;We can simplify the signature a bit by removing the &lt;code&gt;as Iterator&lt;&#x2F;code&gt;,
which isn&#x27;t necessary:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can &lt;em&gt;also&lt;&#x2F;em&gt; replace the &lt;code&gt;Self::Item&lt;&#x2F;code&gt; directly with &lt;code&gt;u32&lt;&#x2F;code&gt; if you
want. The upside is, in this case, it&#x27;s shorter. The downside is that
if you change the &lt;code&gt;Item&lt;&#x2F;code&gt; in the future, you&#x27;ll have to change it in
two places. This is really a subjective point, your call.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let&#x27;s provide an implementation. We return an &lt;code&gt;Option&lt;&#x2F;code&gt;, which
is an &lt;code&gt;enum&lt;&#x2F;code&gt; with two variants: &lt;code&gt;None&lt;&#x2F;code&gt; or &lt;code&gt;Some&lt;&#x2F;code&gt;. The former means &amp;quot;we
don&#x27;t have anything,&amp;quot; the latter means &amp;quot;we have something.&amp;quot; Given that
we&#x27;re implementing the empty iterator, returning &lt;code&gt;None&lt;&#x2F;code&gt; seems like the
right move:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that, we have our first &lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;Create an iterator that infinitely produces the number 42. Here&#x27;s a
&lt;code&gt;main&lt;&#x2F;code&gt; function to test it out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; only take 10 to avoid looping forever
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; TheAnswer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The answer to life, the universe, and everything is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;All done!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;mutable-state&quot;&gt;Mutable state&lt;&#x2F;h2&gt;
&lt;p&gt;The signature for &lt;code&gt;next&lt;&#x2F;code&gt; involves taking a mutable reference to
&lt;code&gt;self&lt;&#x2F;code&gt;. Let&#x27;s use it! We&#x27;re going to create an iterator that counts
from 1 to 10. (If you&#x27;re feeling brave, try to implement it yourself
before reading my solution.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;OneToTen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;one_to_ten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; OneToTen {
    OneToTen(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;OneToTen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            res
        }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in one_to_ten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 3&lt;&#x2F;strong&gt; Create an iterator that produces the Fibonacci
sequence. (Anyone who&#x27;s heard me bemoaning this exercise in the
functional programming world should have a hearty chuckle right now.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iterator-adapters&quot;&gt;Iterator adapters&lt;&#x2F;h2&gt;
&lt;p&gt;We can also write an iterator that will modify an existing
iterator. Let&#x27;s write &lt;code&gt;Doubler&lt;&#x2F;code&gt;, which will double the values produced
by a previous iterator. In order to make this work, we&#x27;re going to
capture the underlying iterator inside our new data type, which will
also necessitate parameterizing our &lt;code&gt;Doubler&lt;&#x2F;code&gt; data type on the
contained iterator:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: I,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s throw in a &lt;code&gt;main&lt;&#x2F;code&gt; function to show how this is used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; array indices start at 1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; doubled_iter = Doubler {
        iter: orig_iter,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; doubled_iter {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great. If we compile this, we get an error about the missing
&lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation. Let&#x27;s try to write something for this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we compile this, we get the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0107]: wrong number of type arguments: expected 1, found 0
 --&amp;gt; foo.rs:5:19
  |
5 | impl Iterator for Doubler {
  |                   ^^^^^^^ expected 1 type argument
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, that makes sense. &lt;code&gt;Doubler&lt;&#x2F;code&gt; itself isn&#x27;t a type until we give it
its parameters. Let&#x27;s do that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We get two error messages. Feel free to look at the second if you
like, but it&#x27;s not terribly helpful. (Recommendation: always look at
the first error message first and try to solve that before moving on.)
The first error message is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0412]: cannot find type `I` in this scope
 --&amp;gt; foo.rs:5:27
  |
5 | impl Iterator for Doubler&amp;lt;I&amp;gt; {
  |                           ^ not found in this scope
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, what&#x27;s happening? When we provide an implementation, we need to
state all of the type variables we want upfront. So let&#x27;s do this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That may look a bit redundant (it did to me at first), but eventually
you&#x27;ll get to cases where things are more complicated and the two sets
of angle brackets don&#x27;t look identical. (For Haskellers or PureScript
users, this is kind of like requiring an explicit &lt;code&gt;forall&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;Alright, now we&#x27;ve got something closer, and the compiler is upset
that we haven&#x27;t given &lt;code&gt;type Item&lt;&#x2F;code&gt; and &lt;code&gt;next&lt;&#x2F;code&gt;. Let&#x27;s go ahead and
return a &lt;code&gt;u32&lt;&#x2F;code&gt; again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiles and runs, and then crashes because of the
&lt;code&gt;unimplemented!&lt;&#x2F;code&gt;. Great, progress! The trick here is we want to ask
the underlying &lt;code&gt;Iterator&lt;&#x2F;code&gt; for its next value. We&#x27;ll do this with some
explicit pattern matching (functional programmers: yes, there&#x27;s a
&lt;code&gt;map&lt;&#x2F;code&gt; method on &lt;code&gt;Option&lt;&#x2F;code&gt; we could use here).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice enough, but when we compile it, we get told:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0599]: no method named `next` found for type `I` in the current scope
 --&amp;gt; foo.rs:8:25
  |
8 |         match self.iter.next() {
  |                         ^^^^
  |
  = help: items from traits can only be used if the trait is implemented and in scope
  = note: the following traits define an item `next`, perhaps you need to implement one of them:
          candidate #1: `std::iter::Iterator`
          candidate #2: `std::str::pattern::Searcher`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler knows that we &lt;em&gt;might&lt;&#x2F;em&gt; mean the &lt;code&gt;next&lt;&#x2F;code&gt; method from
&lt;code&gt;Iterator&lt;&#x2F;code&gt;. But it doesn&#x27;t use it. Why, you might ask? Because &lt;em&gt;we
never told the compiler that the implementation exists&lt;&#x2F;em&gt;! We need to
indicate that the &lt;code&gt;I&lt;&#x2F;code&gt; parameter must have an &lt;code&gt;Iterator&lt;&#x2F;code&gt;
implementation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s some new syntax, but pretty straightforward: &lt;code&gt;I&lt;&#x2F;code&gt; must have an
implementation of &lt;code&gt;Iterator&lt;&#x2F;code&gt;. Unfortunately, we&#x27;re not out of the
woods quite yet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0369]: binary operation `*` cannot be applied to type `&amp;lt;I as std::iter::Iterator&amp;gt;::Item`
  --&amp;gt; foo.rs:10:29
   |
10 |             Some(x) =&amp;gt; Some(x * 2),
   |                             ^^^^^
   |
   = note: an implementation of `std::ops::Mul` might be missing for `&amp;lt;I as std::iter::Iterator&amp;gt;::Item`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s talk this through. &lt;code&gt;I&lt;&#x2F;code&gt; is some &lt;code&gt;Iterator&lt;&#x2F;code&gt;, we&#x27;ve already
established that. And we know that the &lt;code&gt;x&lt;&#x2F;code&gt; value we use in &lt;code&gt;x * 2&lt;&#x2F;code&gt;
will be of whatever type the &lt;code&gt;Item&lt;&#x2F;code&gt; associated type for that &lt;code&gt;I&lt;&#x2F;code&gt;
is. The problem is: we have no idea what it is, or whether or not it
can be multiplied!&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve already said we&#x27;re going to produce &lt;code&gt;u32&lt;&#x2F;code&gt;s here, so can we just
enforce that the &lt;code&gt;Item&lt;&#x2F;code&gt; is a &lt;code&gt;u32&lt;&#x2F;code&gt;? Yes!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Item=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whew, our code works!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;alternative-syntax-where&quot;&gt;Alternative syntax: where&lt;&#x2F;h2&gt;
&lt;p&gt;As our constraints get more complex, shoving them all into the
parameters at the beginning of &lt;code&gt;impl&lt;&#x2F;code&gt; starts to feel crowded. You can
alternatively use &lt;code&gt;where&lt;&#x2F;code&gt; for this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Item=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a subjective point at which people decide to make that
transition. Personally, I prefer consistency over brevity, and almost
always use &lt;code&gt;where&lt;&#x2F;code&gt;. Your mileage may vary. You should be aware of both
syntaxes for reading other people&#x27;s code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;not-just-u32&quot;&gt;Not just u32&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a bit weird that we&#x27;re tied down to &lt;code&gt;u32&lt;&#x2F;code&gt;s. What if we change our
&lt;code&gt;main&lt;&#x2F;code&gt; funciton to have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; orig_iter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll get a compiler error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0271]: type mismatch resolving `&amp;lt;std::ops::Range&amp;lt;u64&amp;gt; as std::iter::Iterator&amp;gt;::Item == u32`
  --&amp;gt; foo.rs:23:14
   |
23 |     for i in doubled_iter {
   |              ^^^^^^^^^^^^ expected u64, found u32
   |
   = note: expected type `u64`
              found type `u32`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s possible to relax this, but it starts to get more
complicated. But let&#x27;s do it! We&#x27;ll need to remove all of the
references to &lt;code&gt;u32&lt;&#x2F;code&gt; in our implementation. Here&#x27;s a first stab at
this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: Iterator
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve replaced &lt;code&gt;Option&amp;lt;u32&amp;gt;&lt;&#x2F;code&gt; with &lt;code&gt;Option&amp;lt;Self::Item&amp;gt;&lt;&#x2F;code&gt;, and removed the
&lt;code&gt;&amp;lt;Item = u32&amp;gt;&lt;&#x2F;code&gt; on the &lt;code&gt;I: Iterator&lt;&#x2F;code&gt;. But what should we use for &lt;code&gt;type Item =&lt;&#x2F;code&gt;? We want it to be the same type as the underlying iterator&#x27;s
&lt;code&gt;Item&lt;&#x2F;code&gt;... so let&#x27;s just say that!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= I::Item;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works! We&#x27;re still not compiling though, because Rust doesn&#x27;t
know that it can perform multiplication on &lt;code&gt;I::Item&lt;&#x2F;code&gt;. Fortunately,
there&#x27;s a trait for things that can be multiplied called &lt;code&gt;Mul&lt;&#x2F;code&gt;. We can
add in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
I: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
I::Item: std::ops::Mul,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;New error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
  --&amp;gt; foo.rs:14:29
   |
14 |             Some(x) =&amp;gt; Some(x * From::from(2u8)),
   |                             ^^^^^^^^^^^^^^^^^^^ expected std::iter::Iterator::Item, found std::ops::Mul::Output
   |
   = note: expected type `&amp;lt;I as std::iter::Iterator&amp;gt;::Item`
              found type `&amp;lt;&amp;lt;I as std::iter::Iterator&amp;gt;::Item as std::ops::Mul&amp;gt;::Output`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out that &lt;code&gt;Mul&lt;&#x2F;code&gt; has an associated type for its output. This is
useful for expressing more complicated relationships at the type
level. For example, we can define types for &lt;code&gt;Force&lt;&#x2F;code&gt;, &lt;code&gt;Mass&lt;&#x2F;code&gt;, and
&lt;code&gt;Acceleration&lt;&#x2F;code&gt;, and then define a &lt;code&gt;Mul&lt;&#x2F;code&gt; implementation that says
&lt;code&gt;Mass&lt;&#x2F;code&gt; times &lt;code&gt;Acceleration&lt;&#x2F;code&gt; produces a &lt;code&gt;Force&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s a wonderful feature, but it&#x27;s getting in our way here. We want
to say &amp;quot;the output should be the same as the item itself.&amp;quot; Fair
enough:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: Iterator,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item: std::ops::Mul&amp;lt;Output=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
  --&amp;gt; foo.rs:14:33
   |
14 |             Some(x) =&amp;gt; Some(x * 2),
   |                                 ^ expected associated type, found integral variable
   |
   = note: expected type `&amp;lt;I as std::iter::Iterator&amp;gt;::Item`
              found type `{integer}`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ugh. We have &lt;code&gt;2&lt;&#x2F;code&gt;, which can be &lt;em&gt;some&lt;&#x2F;em&gt; integral type. But we don&#x27;t know
that &lt;code&gt;Item&lt;&#x2F;code&gt; is an integral type! I&#x27;m not aware of a way to give a
constraint that allows this code to work (if someone knows better,
please let me know and I&#x27;ll update this text). One trick that &lt;em&gt;does&lt;&#x2F;em&gt;
work is to upcast from a &lt;code&gt;u8&lt;&#x2F;code&gt; using the &lt;code&gt;From&lt;&#x2F;code&gt; trait, which performs
safe numeric conversions (which cannot over or underflow):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; Iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Doubler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    I: Iterator,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item: std::ops::Mul&amp;lt;Output=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;I::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;,
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= I::Item;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Item&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.iter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;From&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whew, that&#x27;s finally over!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 4&lt;&#x2F;strong&gt; An easier approach to the above is to use &lt;code&gt;x + x&lt;&#x2F;code&gt;
instead of &lt;code&gt;x * 2&lt;&#x2F;code&gt;. Rewrite the iterator to do that. One hint: the
compiler won&#x27;t know that it&#x27;s allowed to make copies of that type
unless you tell it via the appropriately-named trait.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;That was a lot! But hopefully it gets the idea across of how iterators
work. We can write highly generic adapters that work with many kinds
of input. You could apply &lt;code&gt;Doubler&lt;&#x2F;code&gt; to the range iterator as we
did. You could apply it to the &lt;code&gt;Empty&lt;&#x2F;code&gt; we defined earlier. Or to
dozens of other things.&lt;&#x2F;p&gt;
&lt;p&gt;You may notice that the types of these iterators seem to grow as you
add more things to them. That&#x27;s absolutely true, and it&#x27;s also by
design. By representing the full type statically, the compiler is able
to see all of the actions that are being performed in a pipeline of
iterator operations, and optimize things very well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-idiomatic&quot;&gt;More idiomatic&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;Doubler&lt;&#x2F;code&gt; we wrote was not idiomatic at all. Let&#x27;s do it the
&lt;em&gt;real&lt;&#x2F;em&gt; way:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait includes many helper methods, so you can chain up
large sets of actions like that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| x + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| x % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could of course write something like this as a for loop in C&#x2F;C++,
but:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It would be harder to see the logic&lt;&#x2F;li&gt;
&lt;li&gt;It would be harder to extend in the future&lt;&#x2F;li&gt;
&lt;li&gt;It wouldn&#x27;t be faster: the Rust compiler will optimize case like
this down to the same hand-rolled loop you may write&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;collecting-results&quot;&gt;Collecting results&lt;&#x2F;h2&gt;
&lt;p&gt;You can collect the results from an iterator in a vector:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; my_vec: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, my_vec);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The type annotation is necessary here, since &lt;code&gt;collect&lt;&#x2F;code&gt; can work on
many different datatypes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 5&lt;&#x2F;strong&gt; Use the &lt;code&gt;fold&lt;&#x2F;code&gt; method to get the sum of the numbers
from 1 to 10. Extra credit: write a helper &lt;code&gt;sum&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve been dancing around closures for quite a while now, including in
that last exercise. We now know enough to attack them head on. We&#x27;ll
do so next time.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;re now at a point where you can write some real Rust applications
and start cutting your teeth. I&#x27;d recommend finding a few play tasks
you want to experiment with. &lt;a href=&quot;https:&#x2F;&#x2F;exercism.io&quot;&gt;Exercism&lt;&#x2F;a&gt; may be a
good choice if you&#x27;re looking for some challenges.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Proposal: Stack Code of Conduct</title>
		<published>2018-11-07T00:00:00+00:00</published>
		<updated>2018-11-07T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/proposal-stack-coc/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/proposal-stack-coc/</id>
		<content type="html">&lt;p&gt;Technical disagreement is not only an inevitable part of software development and community building. It is a necessary and healthy component thereof. Respectful conversations around technical trade-offs are vital to improving software. And these conversations need to be handled with proper care.&lt;&#x2F;p&gt;
&lt;p&gt;I have failed at this in the past, and I&#x27;ve apologized for having done so. I&#x27;ve strived to do better since. I have encouraged—and continue to encourage—my friends, colleagues, and fellow developers to do the same, and I believe it has been successful.&lt;&#x2F;p&gt;
&lt;p&gt;I think the other extreme—avoiding all discussions of disagreements—is actively harmful. And unfortunately, I see significant confusion in the general Haskell community around what is and is not an acceptable form of technical disagreement.&lt;&#x2F;p&gt;
&lt;p&gt;Outside of my position on the Core Libraries Committee, I do not hold any official position in the leadership of Haskell. I&#x27;ve written open source libraries and educational material. I&#x27;ve worked on and maintained build tooling. I run a team of Haskell engineers at FP Complete. None of those positions grant me any authority to demand compliance from individuals with any code of conduct.&lt;&#x2F;p&gt;
&lt;p&gt;That said, at many points in the past, I &lt;em&gt;have&lt;&#x2F;em&gt; reached out to individuals whom I&#x27;ve been told (or saw myself) were behaving in a non-ideal way. I&#x27;ve attempted to remedy those situations privately wherever possible, and have on rare occasions asked people to discontinue such behavior publicly.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve tried to keep this process informal because, as mentioned, I&#x27;m &lt;em&gt;not&lt;&#x2F;em&gt; any official authority. The exception to this would be my leadership at FP Complete, but I have a strong policy of avoiding the usage of my position to force those reporting to me to behave a certain way. I do not believe it is appropriate for me to leverage what essentially comes to someone&#x27;s livelihood to demand their compliance with my wishes.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s been a slow burn of public discussion over the years that has made me consider making a more formal process. But recently, I had a &amp;quot;straw that broke the camel&#x27;s back&amp;quot; moment. Someone I like and respect expressed opinions that I think are antithetical to healthy community growth. I won&#x27;t call anyone out or refer to those discussions, I&#x27;m just explaining why I&#x27;m doing this now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-proposal&quot;&gt;My proposal&lt;&#x2F;h2&gt;
&lt;p&gt;I will not in any way claim to have an authority position for the Haskell community. As a result, I&#x27;m not going to make any statement for the Haskell community. As the founder of the Stack project, I think I have more of a right (and responsibility) to speak for that project. So I&#x27;m going to refer here to the Haskell Stack community. I&#x27;m hesitant to do so given that it may be seen as divisive, but I believe the alternative—trying to speaking for the entire Haskell community—is inappropriate. My intent is &lt;em&gt;not&lt;&#x2F;em&gt; to be divisive.&lt;&#x2F;p&gt;
&lt;p&gt;I also have no ability to enforce any kind of behavior on Stack users &lt;em&gt;or&lt;&#x2F;em&gt; contributors. Stack is open source: no matter what statements I make, anyone can use it. I could ask the rest of the maintainer team to block pull requests from specific people, but I believe that&#x27;s also overstepping my authority, and so I won&#x27;t be doing it.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I intend to publish two documents, following interaction with people interested in engaging with me on this process. Those two documents will be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A code of conduct. I do not intend to write one myself, but instead use a standard, &amp;quot;off the shelf&amp;quot; CoC. I did this about a year ago &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yesodweb&#x2F;yesod&#x2F;blob&#x2F;master&#x2F;CODE_OF_CONDUCT.md&quot;&gt;for Yesod&lt;&#x2F;a&gt;, and it worked out well.&lt;&#x2F;li&gt;
&lt;li&gt;A recommended communication guide. This is something I &lt;em&gt;do&lt;&#x2F;em&gt; intend to write myself, with feedback from others. I intend to write this as an open source project, on a Github repo, accepting issues and pull requests. I intend this to address specific concerns of how the communication I&#x27;ve been involved with has broken down.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I am not demanding anything of anyone here. I&#x27;m not expecting anyone in other communities (whether within Haskell or outside of it) to participate or change their behavior. And as stated, I&#x27;m not willing or able to demand changes from within the Stack community.&lt;&#x2F;p&gt;
&lt;p&gt;What I &lt;em&gt;am&lt;&#x2F;em&gt; hoping is that by clarifying these points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;People unsure of how to communicate in certain situations have some clarity&lt;&#x2F;li&gt;
&lt;li&gt;We have some better ideas of how to communicate on sensitive technical topics&lt;&#x2F;li&gt;
&lt;li&gt;If someone within the Stack community is seen as misbehaving, there&#x27;s a mechanism to politely and confidentially raise the issue, and hopefully have the situation improved&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;stack-coc&quot;&gt;created a Github repo&lt;&#x2F;a&gt;. This repo is on my personal Github account, not &lt;code&gt;commercialhaskell&lt;&#x2F;code&gt;, &lt;code&gt;fpco&lt;&#x2F;code&gt;, or &lt;code&gt;haskell&lt;&#x2F;code&gt;. Again, this is my own personal set of content. I encourage others to participate if they feel invested in the topic. I&#x27;m considering having a sign-up sheet for the repo after we have a first version, so that people can state that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They&#x27;ve reviewed a certain version of the repo&lt;&#x2F;li&gt;
&lt;li&gt;They agree with what it says&lt;&#x2F;li&gt;
&lt;li&gt;They will strive to follow its recommendations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-to-avoid&quot;&gt;What to avoid&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ll get into far more details in that repo itself, but since I
anticipate this blog post itself kicking off some discussion, I&#x27;m
going to make some requests right now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid ad hominems. (Yes, I&#x27;ve made mistakes here in the past.) This applies both to someone&#x27;s personal history, and to any organizations they are members of, or who they are friendly with.&lt;&#x2F;li&gt;
&lt;li&gt;Avoid offensive language. This is actually more complicated than it seems; one of the ways I&#x27;ve upset people is my highly sarcastic-by-nature communication style. I&#x27;ve worked hard on tamping that down. I point this out because what&#x27;s offensive to one person may be normal to others. This is &lt;em&gt;especially&lt;&#x2F;em&gt; true in a global community.&lt;&#x2F;li&gt;
&lt;li&gt;We will inevitably have to address some old behavior to know what to include in our recommendations. This is &lt;em&gt;not&lt;&#x2F;em&gt; an invitation to air grievances, as tempting as that may be for some people. Keep the comments non-personal, speak in general terms, and try to avoid any grandstanding. This will be a tough line to walk. But a simple example:
&lt;ul&gt;
&lt;li&gt;Good: &amp;quot;I&#x27;ve seen people discredit some people&#x27;s opinion because of who their friends are, I believe we should address that in the guidelines.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Bad: &amp;quot;Two months ago, in &lt;em&gt;this Reddit thread&lt;&#x2F;em&gt;, person X said Y about Z. This is horrible, and X needs to either apologize or be removed from the community. They need to be mentioned by name in the guidelines as an offender.&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is my first time trying to have a discussion quite like this, and I&#x27;m guessing the first time many people involved will be participating in one. As one final note, I&#x27;d like to request people make an assumption of good will. Mistakes will be made, but we can try to minimize those mistakes, and move on from them when they occur.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Iterators and Errors - Rust Crash Course lesson 3 - exercise solutions</title>
		<published>2018-11-07T00:00:00+00:00</published>
		<updated>2018-11-07T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-03-iterators-and-errors-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-03-iterators-and-errors-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Iterators and Errors.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;The trick here is to &amp;quot;wrap&amp;quot; the &lt;code&gt;Args&lt;&#x2F;code&gt; data type with the &lt;code&gt;Skip&lt;&#x2F;code&gt; data
type:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::{args, Args};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::iter::Skip;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args: Skip&amp;lt;Args&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may have noticed that we didn&#x27;t need to mark &lt;code&gt;args&lt;&#x2F;code&gt; as
mutable. That&#x27;s because we are moving the &lt;code&gt;args&lt;&#x2F;code&gt; value into the &lt;code&gt;for&lt;&#x2F;code&gt;
loop, meaning that any mutation to it by the &lt;code&gt;for&lt;&#x2F;code&gt; loop cannot be seen
in the &lt;code&gt;main&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;When we call &lt;code&gt;parse&lt;&#x2F;code&gt; in the context of that example, type inference
tells us that the &lt;code&gt;width&lt;&#x2F;code&gt; and &lt;code&gt;height&lt;&#x2F;code&gt; results must be &lt;code&gt;u32&lt;&#x2F;code&gt;s, since
they are used as fields in &lt;code&gt;Frame&lt;&#x2F;code&gt;. Rust is able to determine what
implementation to use based on the needed return type. Cool!&lt;&#x2F;p&gt;
&lt;p&gt;Yet again, Haskellers are rolling their eyes and saying &amp;quot;old news.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;Complete source file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    TooFewArgs,
    TooManyArgs,
    InvalidInteger(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(std::env::Args);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; ParseArgs {
        ParseArgs(std::env::args())
    }


    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ParseError&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::TooFewArgs),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(s),
        }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), ParseError&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::TooManyArgs),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()),
        }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::InvalidInteger(s)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x),
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Frame, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = ParseArgs::new();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; skip the command name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Frame { width, height })
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;We want to ensure a minimum size for the width and height. First,
let&#x27;s add two more variants to the &lt;code&gt;ParseError&lt;&#x2F;code&gt; enum:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;WidthTooSmall(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
HeightTooSmall(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then add the following to the &lt;code&gt;parse_args&lt;&#x2F;code&gt; function, just before the &lt;code&gt;Ok&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(WidthTooSmall(width));
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(HeightTooSmall(height));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-5&quot;&gt;Exercise 5&lt;&#x2F;h2&gt;
&lt;p&gt;This is another perfect time to pull out our trailing question mark!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), self::parse_args::ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; frame = parse_args::parse_args()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; game = Game::new(frame);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep_duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, game);
        game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        std::thread::sleep(sleep_duration);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Iterators and Errors - Rust Crash Course lesson 3</title>
		<published>2018-11-05T00:00:00+00:00</published>
		<updated>2018-11-05T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/11/rust-crash-course-03-iterators-and-errors/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/11/rust-crash-course-03-iterators-and-errors/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Last time, we finished off with a &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;5307d493750d7b48c1c5281961bc31d0&quot;&gt;bouncy ball
implementation&lt;&#x2F;a&gt;
with some downsides: lackluster error handling and ugly buffering. It
also had another limitation: a static frame size. Today, we&#x27;re going
to address all of these problems, starting with that last one: let&#x27;s
get some command line arguments to control the frame size.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Like last time, I&#x27;m going to expect you, the reader, to be making
changes to the source code along with me. Make sure to &lt;em&gt;actually type
in the code while reading&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;command-line-arguments&quot;&gt;Command line arguments&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to modify our application as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Accept two command line arguments: the width and the height&lt;&#x2F;li&gt;
&lt;li&gt;Both must be valid &lt;code&gt;u32&lt;&#x2F;code&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;Too many or too few command line arguments will result in an error message&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sounds easy enough. In a real application, we would use a proper
argument-handling library, like
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt;. But for now, we&#x27;re going lower
level. Like we did for the sleep function, let&#x27;s start by &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;index.html?search=args&quot;&gt;searching
the standard library
docs&lt;&#x2F;a&gt; for the
word &lt;code&gt;args&lt;&#x2F;code&gt;. The first two entries both look relevant.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::env::Args&lt;&#x2F;code&gt; An iterator over the arguments of a process, yielding a &lt;code&gt;String&lt;&#x2F;code&gt; value for each argument.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::env::args&lt;&#x2F;code&gt; Returns the arguments which this program was started with (normally passed via the command line).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now&#x27;s a good time to mention that, by strong convention:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Module names (like &lt;code&gt;std&lt;&#x2F;code&gt; and &lt;code&gt;env&lt;&#x2F;code&gt;) and function names (like &lt;code&gt;args&lt;&#x2F;code&gt;) are &lt;code&gt;snake_cased&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Types (like &lt;code&gt;Args&lt;&#x2F;code&gt;) are &lt;code&gt;PascalCased&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Exception: primitives like &lt;code&gt;u32&lt;&#x2F;code&gt; and &lt;code&gt;str&lt;&#x2F;code&gt; are lower case&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;std&lt;&#x2F;code&gt; module has an &lt;code&gt;env&lt;&#x2F;code&gt; module. The &lt;code&gt;env&lt;&#x2F;code&gt; module has both an
&lt;code&gt;Args&lt;&#x2F;code&gt; type and a &lt;code&gt;args&lt;&#x2F;code&gt; function. Why do we need both? Even more
strangely, let&#x27;s look at the type signature for the &lt;code&gt;args&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; Args
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;args&lt;&#x2F;code&gt; &lt;em&gt;function&lt;&#x2F;em&gt; returns a value of type &lt;code&gt;Args&lt;&#x2F;code&gt;. If &lt;code&gt;Args&lt;&#x2F;code&gt; was a
type synonym for, say, a vector of &lt;code&gt;String&lt;&#x2F;code&gt;s, this would make
sense. But that&#x27;s not the case. And if you &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;env&#x2F;struct.Args.html&quot;&gt;check out its
docs&lt;&#x2F;a&gt;, there
aren&#x27;t any fields or methods exposed on &lt;code&gt;Args&lt;&#x2F;code&gt;, only trait
implementations!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-extra-datatype-pattern&quot;&gt;The extra datatype pattern&lt;&#x2F;h2&gt;
&lt;p&gt;Maybe there&#x27;s a proper term for this in Rust, but I haven&#x27;t seen it
myself yet. (If someone has, please let me know so I can use the
proper term.) There&#x27;s a pervasive pattern in the Rust ecosystem, which
in my experience starts with iterators and continues to more advanced
topics like futures and async I&#x2F;O.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We want to have composable interfaces&lt;&#x2F;li&gt;
&lt;li&gt;We also want high performance&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, we define lots of helper data types that allow the
compiler to perform some great optimizations&lt;&#x2F;li&gt;
&lt;li&gt;And we define traits as an interface to let these types compose
nicely with each other&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sound abstract? Don&#x27;t worry, we&#x27;ll make that concrete in a bit. Here&#x27;s
the practical outcome of all of this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We end up programming quite a bit against traits, which provide a
common abstractions and lots of helper functions&lt;&#x2F;li&gt;
&lt;li&gt;We get a matching data type for many common functions&lt;&#x2F;li&gt;
&lt;li&gt;Often times, our type signatures will end up being massive,
representing all of the different composition we performed (though
the new-ish &lt;code&gt;-&amp;gt; impl Iterator&lt;&#x2F;code&gt; style helps with that significantly,
see &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;05&#x2F;10&#x2F;Rust-1.26.html#impl-trait&quot;&gt;the announcement blog post&lt;&#x2F;a&gt;
for more details)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Alright, with that out of the way, let&#x27;s get back to command line
arguments!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cli-args-via-iterators&quot;&gt;CLI args via iterators&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s play around in an empty file before coming back to bouncy. (Either use &lt;code&gt;cargo new&lt;&#x2F;code&gt; and &lt;code&gt;cargo run&lt;&#x2F;code&gt;, or use &lt;code&gt;rustc&lt;&#x2F;code&gt; directly, your call.) If I click on the expand button next to the &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait on the &lt;code&gt;Args&lt;&#x2F;code&gt; docs page, I see this function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s play with that a bit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; Yes, that name shadowing works
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that we had to use &lt;code&gt;let mut&lt;&#x2F;code&gt;, since the &lt;code&gt;next&lt;&#x2F;code&gt; method will
mutate the value. Now I&#x27;m going to run this with &lt;code&gt;cargo run foo bar&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run foo bar
   Compiling args v0.1.0 (&#x2F;Users&#x2F;michael&#x2F;Desktop&#x2F;tmp&#x2F;args)
    Finished dev [unoptimized + debuginfo] target(s) in 1.60s
     Running `target&#x2F;debug&#x2F;args foo bar`
Some(&amp;quot;target&#x2F;debug&#x2F;args&amp;quot;)
Some(&amp;quot;foo&amp;quot;)
Some(&amp;quot;bar&amp;quot;)
None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice! It gives us the name of our executable, followed by the command
line arguments, returning &lt;code&gt;None&lt;&#x2F;code&gt; when there&#x27;s nothing left. (For
pedants out there: command line arguments aren&#x27;t technically
&lt;em&gt;required&lt;&#x2F;em&gt; to have the command name as the first argument, it&#x27;s just a
really strong convention most tools follow.)&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s play with this some more. Can you write a loop that prints out
all of the command line arguments and then exits? Take a minute, and
then I&#x27;ll provide some answers.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, done? Cool, let&#x27;s see some examples! First, we&#x27;ll &lt;code&gt;loop&lt;&#x2F;code&gt; with
&lt;code&gt;return&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(arg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also don&#x27;t need to use &lt;code&gt;return&lt;&#x2F;code&gt; here. Instead of returning from the
function, we can just &lt;code&gt;break&lt;&#x2F;code&gt; out of the loop:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(arg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or, if you want to save on some indentation, you can use the &lt;code&gt;if let&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(arg) = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; return would work too, but break is nicer
            &#x2F;&#x2F; here, as it is more narrowly scoped
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can &lt;em&gt;also&lt;&#x2F;em&gt; use &lt;code&gt;while let&lt;&#x2F;code&gt;. Try to guess what that would look like
before checking the next example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(arg) = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Getting better! Alright, one final example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whoa, what?!? Welcome to one of my favorite aspects of Rust. Iterators
are a concept built into the language directly, via &lt;code&gt;for&lt;&#x2F;code&gt; loops. A
&lt;code&gt;for&lt;&#x2F;code&gt; loop will automate the calling of &lt;code&gt;next()&lt;&#x2F;code&gt;. It also hides away
the fact that there&#x27;s some mutable state at play, at least to some
extent. This is a powerful concept, and allows a lot of code to end up
with a more functional style, something I happen to be a big fan of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skipping&quot;&gt;Skipping&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s all well and good that the first arguments in the name of the
executable. But we typically don&#x27;t care about that. Can we somehow
skip that in our output? Well, here&#x27;s one approach:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; drop it on the floor
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works, but it&#x27;s a bit clumsy, especially compared to our previous
version that had no mutable variables. Maybe there&#x27;s some other way to
skip things. Let&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;env&#x2F;struct.Args.html?search=skip&quot;&gt;search the standard library
again&lt;&#x2F;a&gt;. I
see the first results as
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;struct.Skip.html&quot;&gt;&lt;code&gt;std::iter::Skip&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.skip&quot;&gt;&lt;code&gt;std::iter::Iterator::skip&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The
former is a data type, and the latter is a method on the &lt;code&gt;Iterator&lt;&#x2F;code&gt;
trait. Since our &lt;code&gt;Args&lt;&#x2F;code&gt; type implements the &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait, we can
use it. Nice!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; Haskellers: &lt;code&gt;skip&lt;&#x2F;code&gt; is like &lt;code&gt;drop&lt;&#x2F;code&gt; in most Haskell
libraries, like &lt;code&gt;Data.List&lt;&#x2F;code&gt; or &lt;code&gt;vector&lt;&#x2F;code&gt;. &lt;code&gt;drop&lt;&#x2F;code&gt; has a totally
different meaning in Rust (dropping owned data), so &lt;code&gt;skip&lt;&#x2F;code&gt; is a better
name in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at some signatures from the docs above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;I&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;* fields omitted *&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; Skip&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmm... deep breaths. &lt;code&gt;Skip&lt;&#x2F;code&gt; is a data type that is &lt;em&gt;parameterized&lt;&#x2F;em&gt;
over some data type, &lt;code&gt;I&lt;&#x2F;code&gt;. This is a common pattern in iterators:
&lt;code&gt;Skip&lt;&#x2F;code&gt; wraps around an existing data type and adds some new
functionality to how it iterates. The &lt;code&gt;skip&lt;&#x2F;code&gt; method will &lt;em&gt;consume&lt;&#x2F;em&gt; an
existing iterator, take the number of arguments to skip, and return a
new &lt;code&gt;Skip&amp;lt;OrigDataType&amp;gt;&lt;&#x2F;code&gt; value. How do I know it consumes the original
iterator? The first parameter is &lt;code&gt;self&lt;&#x2F;code&gt;, not &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; or &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That seemed like a lot of concepts. Fortunately, &lt;em&gt;usage&lt;&#x2F;em&gt; is pretty
easy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 1&lt;&#x2F;strong&gt; Type inference lets the program above work just fine
without any type annotations. However, it&#x27;s a good idea to get used to
the generated types, since you&#x27;ll see them &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1054393245122334720&quot;&gt;all too
often&lt;&#x2F;a&gt; in
error messages. Get the program below to compile by fixing the type
signature. Try to do it without using compiler at first, since the
error messages will almost give the answer away.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::{args, Args};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::iter::Skip;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args: Args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This layering-of-datatypes approach, as mentioned above, is a real
boon to performance. Iterator-heavy code will often compile down to an
efficient loop, comparable with the best hand-rolled loop you could
have written. However, iterator code is much higher level, more
declarative, and easy to maintain and extend.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a lot more to iterators, but we&#x27;re going to stop there for the
moment, since we still want to process our command line parameters,
and we need to learn one more thing first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing-integers&quot;&gt;Parsing integers&lt;&#x2F;h2&gt;
&lt;p&gt;If you search the standard library for &lt;code&gt;parse&lt;&#x2F;code&gt;, you&#x27;ll find the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.str.html#method.parse&quot;&gt;&lt;code&gt;str::parse&lt;&#x2F;code&gt;
method&lt;&#x2F;a&gt;. The
documentation does a good job of explaining things, I won&#x27;t repeat
that here. Please go read that now.&lt;&#x2F;p&gt;
&lt;p&gt;OK, you&#x27;re back? Turbofish is a funny name, right?&lt;&#x2F;p&gt;
&lt;p&gt;Take a crack at writing a program that prints the result of parsing
each command line argument as a &lt;code&gt;u32&lt;&#x2F;code&gt;, then check my version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;());
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And let&#x27;s try running it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run one 2 three four 5 6 7
Err(ParseIntError { kind: InvalidDigit })
Ok(2)
Err(ParseIntError { kind: InvalidDigit })
Err(ParseIntError { kind: InvalidDigit })
Ok(5)
Ok(6)
Ok(7)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the parse is successful, we get the &lt;code&gt;Ok&lt;&#x2F;code&gt; variant of the &lt;code&gt;Result&lt;&#x2F;code&gt;
enum. When the parse fails, we get the &lt;code&gt;Err&lt;&#x2F;code&gt; variant, with a
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;num&#x2F;struct.ParseIntError.html&quot;&gt;&lt;code&gt;ParseIntError&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
telling us what went wrong. (The type signature on &lt;code&gt;parse&lt;&#x2F;code&gt; itself uses
some associated types to indicate this type, we&#x27;re not going to get
into that right now.)&lt;&#x2F;p&gt;
&lt;p&gt;This is a common pattern in Rust. Rust has no runtime exceptions, so
we track potential failure at the type level with actual values.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; You may think of &lt;code&gt;panic&lt;&#x2F;code&gt;s as similar to runtime
exceptions, and to some extent they are. However, you&#x27;re not able to
properly recover from &lt;code&gt;panic&lt;&#x2F;code&gt;s, making them different in practice from
how runtime exceptions are used in other languages like Python.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parse-our-command-line&quot;&gt;Parse our command line&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re finally ready to get started on our actual command line parsing!
We&#x27;re going to be overly tedious in our implementation, especially
with our data types. After we finish implementing this in a blank
file, we&#x27;ll move the code into the bouncy implementation
itself. First, let&#x27;s define a data type to hold a successful parse,
which will contain the width and the height.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Will this be a struct or an enum? Can you try
implementing this yourself first?&lt;&#x2F;p&gt;
&lt;p&gt;Since we want to hold onto multiple values, we&#x27;ll be using a
&lt;code&gt;struct&lt;&#x2F;code&gt;. I&#x27;d like to use named fields, so we have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s define an error type to represent all of the things that
can go wrong during this parse. We have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Too few arguments&lt;&#x2F;li&gt;
&lt;li&gt;Too many arguments&lt;&#x2F;li&gt;
&lt;li&gt;Invalid integer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Are we going to use a struct or an enum this time?&lt;&#x2F;p&gt;
&lt;p&gt;This time, we&#x27;ll use an enum, because we&#x27;ll only detect one of these
problems (whichever we notice first). Officianados of web forms and
applicative parsing may scoff at this and say we should detect &lt;em&gt;all&lt;&#x2F;em&gt;
errors, but we&#x27;re going to be lazy.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    TooFewArgs,
    TooManyArgs,
    InvalidInteger(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;InvalidInteger&lt;&#x2F;code&gt; variant takes a payload, the &lt;code&gt;String&lt;&#x2F;code&gt;
it failed parsing. This is what makes &lt;code&gt;enum&lt;&#x2F;code&gt;s in Rust so much more
powerful than enumerations in most other languages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; We&#x27;re going to write a &lt;code&gt;parse_args&lt;&#x2F;code&gt; helper function. Can
you guess what its type signature will be?&lt;&#x2F;p&gt;
&lt;p&gt;Combining all of the knowledge we established above, here&#x27;s an
implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    TooFewArgs,
    TooManyArgs,
    InvalidInteger(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Frame, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::ParseError::*; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; bring variants into our namespace

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooFewArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width_str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooFewArgs),
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height_str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooManyArgs),
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(InvalidInteger(width_str)),
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(InvalidInteger(height_str)),
                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Frame {
                                            width,
                                            height,
                                        }),
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Holy nested blocks Batman, that is a &lt;em&gt;lot&lt;&#x2F;em&gt; of indentation! The pattern
is pretty straightforward:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pattern match&lt;&#x2F;li&gt;
&lt;li&gt;If we got something bad, stop with an &lt;code&gt;Err&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If we got something good, keep going&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Haskellers at this point are screaming about &lt;code&gt;do&lt;&#x2F;code&gt; notation and
monads. Ignore them. We&#x27;re in the land of Rust, we don&#x27;t take
&lt;strong&gt;kind&lt;&#x2F;strong&gt;ly to those things around here. (Someone please yell at me for
that terrible pun.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 2&lt;&#x2F;strong&gt; Why didn&#x27;t we need to use the turbofish on the call to
&lt;code&gt;parse&lt;&#x2F;code&gt; above?&lt;&#x2F;p&gt;
&lt;p&gt;What we want to do is &lt;em&gt;return&lt;&#x2F;em&gt; early from our function. You know what
keyword can help with that? That&#x27;s right: &lt;code&gt;return&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Frame, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::ParseError::*;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooFewArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width_str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str,
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooFewArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height_str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str,
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(TooManyArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(),
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(InvalidInteger(width_str)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width,
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(InvalidInteger(height_str)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height,
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Frame {
        width,
        height,
    })
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much nicer to look at! However, it&#x27;s still a bit repetitive, and
littering those &lt;code&gt;return&lt;&#x2F;code&gt;s everywhere is subjectively not very nice. In
fact, while typing this up, I accidentally left off a few of the
&lt;code&gt;return&lt;&#x2F;code&gt;s and got to stare at some long error messages. (Try that for
yourself.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;question-mark&quot;&gt;Question mark&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; The trailing question mark we&#x27;re about to introduce used
to be the &lt;code&gt;try!&lt;&#x2F;code&gt; macro in Rust. If you&#x27;re confused about the seeming
overlap: it&#x27;s simply a transition to new syntax.&lt;&#x2F;p&gt;
&lt;p&gt;The pattern above is so common that Rust has built in syntax for
it. If you put a question mark after an expression, it basically does
the whole match&#x2F;return-on-Err thing for you. It&#x27;s more powerful than
we&#x27;ll demonstrate right now, but we&#x27;ll get to that extra power a bit
later.&lt;&#x2F;p&gt;
&lt;p&gt;To start off, we&#x27;re going to define some helper functions to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Require another argument&lt;&#x2F;li&gt;
&lt;li&gt;Require that there are no more arguments&lt;&#x2F;li&gt;
&lt;li&gt;Parse a &lt;code&gt;u32&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of these need to return &lt;code&gt;Result&lt;&#x2F;code&gt; values, and we&#x27;ll use a
&lt;code&gt;ParseError&lt;&#x2F;code&gt; for the error case in all of them. The first two
functions need to take a mutable reference to our arguments. (As a
side note, I&#x27;m going to stop using the &lt;code&gt;skip&lt;&#x2F;code&gt; method now, because if I
do it will give away the solution to exercise 1.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::Args;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Args) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::TooFewArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(s),
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Args) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::TooManyArgs),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; I think this looks a little weird myself.
        &#x2F;&#x2F; But we&amp;#39;re wrapping up the unit value ()
        &#x2F;&#x2F; with the Ok variant. You get used to it
        &#x2F;&#x2F; after a while, I guess
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;None =&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()),
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(ParseError::InvalidInteger(s)),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have these helpers defined, our &lt;code&gt;parse_args&lt;&#x2F;code&gt; function is
much easier to look at:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Frame, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = std::env::args();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; skip the command name
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _command_name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Frame { width, height })
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beautiful!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;forgotten-question-marks&quot;&gt;Forgotten question marks&lt;&#x2F;h2&gt;
&lt;p&gt;What do you think happens if you forget the question mark on the &lt;code&gt;let width_str&lt;&#x2F;code&gt; line? If you do so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width_str&lt;&#x2F;code&gt; will contain a &lt;code&gt;Result&amp;lt;String, ParseError&amp;gt;&lt;&#x2F;code&gt; instead of a &lt;code&gt;String&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The call to &lt;code&gt;parse_u32&lt;&#x2F;code&gt; will not type check&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
  --&amp;gt; src&#x2F;main.rs:50:27
   |
50 |     let width = parse_u32(width_str)?;
   |                           ^^^^^^^^^ expected struct `std::string::String`, found enum `std::result::Result`
   |
   = note: expected type `std::string::String`
              found type `std::result::Result&amp;lt;std::string::String, ParseError&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s nice. But what will happen if we forget the question mark on
the &lt;code&gt;require_no_args&lt;&#x2F;code&gt; call? We never use the output value there, so it
will type check just fine. Now we have the age old problem of C: we&#x27;re
accidentally ignoring error codes!&lt;&#x2F;p&gt;
&lt;p&gt;Well, not so fast. Check out this wonderful warning from the compiler:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: unused `std::result::Result` which must be used
  --&amp;gt; src&#x2F;main.rs:49:5
   |
49 |     require_no_args(&amp;amp;mut args);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(unused_must_use)] on by default
   = note: this `Result` may be an `Err` variant, which should be handled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s right: Rust will detect if you&#x27;ve ignored a potential
failure. There &lt;em&gt;is&lt;&#x2F;em&gt; a hole in this in the current code sample:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _command_name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That doesn&#x27;t trigger the warning, since in &lt;code&gt;let _name = blah;&lt;&#x2F;code&gt;, the
leading underscore says &amp;quot;I know what I&#x27;m doing, I don&#x27;t care about
this value.&amp;quot; Instead, it&#x27;s better to write the code without the &lt;code&gt;let&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we get a warning, which can be solved with the added trailing
question mark.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;It would be more convenient to use method call syntax. Let&#x27;s define a
helper data type to make this possible. Fill in the implementation of
the code below.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Frame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    TooFewArgs,
    TooManyArgs,
    InvalidInteger(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(std::env::Args);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; ParseArgs {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    }


    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, ParseError&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
        }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), ParseError&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;Frame, ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; args = ParseArgs::new();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; skip the command name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width_str = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height_str = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require_no_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(width_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(height_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Frame { width, height })
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;updating-bouncy&quot;&gt;Updating bouncy&lt;&#x2F;h2&gt;
&lt;p&gt;This next bit should be done as a Cargo project, not with
&lt;code&gt;rustc&lt;&#x2F;code&gt;. Let&#x27;s start a new empty project:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new bouncy-args --bin
$ cd bouncy-args
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s get the &lt;a href=&quot;https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;snoyberg&#x2F;5307d493750d7b48c1c5281961bc31d0&#x2F;raw&#x2F;8f467e87f69a197095bda096cbbb71d8d813b1d7&#x2F;main.rs&quot;&gt;old
code&lt;&#x2F;a&gt;
and place it in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;. You can copy-paste manually, or run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ curl https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;snoyberg&#x2F;5307d493750d7b48c1c5281961bc31d0&#x2F;raw&#x2F;8f467e87f69a197095bda096cbbb71d8d813b1d7&#x2F;main.rs &amp;gt; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run &lt;code&gt;cargo run&lt;&#x2F;code&gt; and make sure it works. You can use &lt;code&gt;Ctrl-C&lt;&#x2F;code&gt; to kill
the program.&lt;&#x2F;p&gt;
&lt;p&gt;We already wrote fully usable argument parsing code above. Instead of
putting it in the same source file, let&#x27;s put it in its own file. In
order to do so, we&#x27;re going to have to play with modules in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;For convenience, you can &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;568899dc3ae6c82e54809efe283e4473&quot;&gt;view the full source code&lt;&#x2F;a&gt; as a Gist. We need to put this in &lt;code&gt;src&#x2F;parse_args.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ curl https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;snoyberg&#x2F;568899dc3ae6c82e54809efe283e4473&#x2F;raw&#x2F;2ee261684f81745b21e571360b1c5f5d77b78fce&#x2F;parse_args.rs &amp;gt; src&#x2F;parse_args.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you run &lt;code&gt;cargo build&lt;&#x2F;code&gt; now, it won&#x27;t even look at
&lt;code&gt;parse_args.rs&lt;&#x2F;code&gt;. Don&#x27;t believe me? Add some invalid content to the top
of that file and run &lt;code&gt;cargo build&lt;&#x2F;code&gt; again. Nothing happens, right? We
need to tell the compiler that we&#x27;ve got another module in our
project. We do that by modifying &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;. Add the following line
to the top of your file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you put in that invalid line before, running &lt;code&gt;cargo build&lt;&#x2F;code&gt; should
now result in an error message. Perfect! Go ahead and get rid of that
invalid line and make sure everything compiles and runs. We won&#x27;t be
accepting command line arguments yet, but we&#x27;re getting closer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-it&quot;&gt;Use it!&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re currently getting some dead code warnings, since we aren&#x27;t using
anything from the new module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: struct is never constructed: `Frame`
 --&amp;gt; src&#x2F;parse_args.rs:2:1
  |
2 | struct Frame {
  | ^^^^^^^^^^^^
  |
  = note: #[warn(dead_code)] on by default

warning: enum is never used: `ParseError`
 --&amp;gt; src&#x2F;parse_args.rs:8:1
  |
8 | enum ParseError {
  | ^^^^^^^^^^^^^^^

warning: function is never used: `parse_args`
  --&amp;gt; src&#x2F;parse_args.rs:14:1
   |
14 | fn parse_args() -&amp;gt; Result&amp;lt;Frame, ParseError&amp;gt; {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s fix that. To start off, add the following to the top of your
&lt;code&gt;main&lt;&#x2F;code&gt; function, just to prove that we can, in fact, use our new module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, parse_args::parse_args());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; don&amp;#39;t start the game, our output will disappear
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, add a &lt;code&gt;pub&lt;&#x2F;code&gt; in front of the items we want to access from the
&lt;code&gt;main.rs&lt;&#x2F;code&gt; file, namely:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;struct Frame&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum ParseError&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fn parse_args&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Running this gets us:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run
   Compiling bouncy-args v0.1.0 (&#x2F;Users&#x2F;michael&#x2F;Desktop&#x2F;tmp&#x2F;bouncy-args)
warning: unreachable statement
   --&amp;gt; src&#x2F;main.rs:115:5
    |
115 |     let mut game = Game::new();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: #[warn(unreachable_code)] on by default

warning: variable does not need to be mutable
   --&amp;gt; src&#x2F;main.rs:115:9
    |
115 |     let mut game = Game::new();
    |         ----^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: #[warn(unused_mut)] on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0.67s
     Running `target&#x2F;debug&#x2F;bouncy-args`
Err(TooFewArgs)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s nice that we get an unreachable statement warning. It&#x27;s also a
bit weird that &lt;code&gt;game&lt;&#x2F;code&gt; is no longer required to be
mutable. Strange. But most importantly: our argument parsing is
working!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try to use this. We&#x27;ll modify the &lt;code&gt;Game::new()&lt;&#x2F;code&gt; method to accept
a &lt;code&gt;Frame&lt;&#x2F;code&gt; as input:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Game &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Frame) -&amp;gt; Game {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ball = Ball {
            x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            vert_dir: VertDir::Up,
            horiz_dir: HorizDir::Left,
        };
        Game {frame, ball}
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we can rewrite our &lt;code&gt;main&lt;&#x2F;code&gt; function as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;parse_args::parse_args() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; prints to stderr instead of stdout
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error parsing args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, e);
        },
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(frame) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; game = Game::new(frame);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep_duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, game);
                game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
                std::thread::sleep(sleep_duration);
            }
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;mismatched-types&quot;&gt;Mismatched types&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re good, right? Not quite:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
   --&amp;gt; src&#x2F;main.rs:114:38
    |
114 |             let mut game = Game::new(frame);
    |                                      ^^^^^ expected struct `Frame`, found struct `parse_args::Frame`
    |
    = note: expected type `Frame`
               found type `parse_args::Frame`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have two different definitions of &lt;code&gt;Frame&lt;&#x2F;code&gt;: in our &lt;code&gt;parse_args&lt;&#x2F;code&gt;
module, and in &lt;code&gt;main.rs&lt;&#x2F;code&gt;. Let&#x27;s fix that. First, delete the &lt;code&gt;Frame&lt;&#x2F;code&gt;
declaration in &lt;code&gt;main.rs&lt;&#x2F;code&gt;. Then add the following after our &lt;code&gt;mod parse_args;&lt;&#x2F;code&gt; statement:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::parse_args::Frame;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;self&lt;&#x2F;code&gt; says we&#x27;re finding a module that&#x27;s a child of the current
module.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;public-and-private&quot;&gt;Public and private&lt;&#x2F;h2&gt;
&lt;p&gt;Now everything will work, right? Wrong again! &lt;code&gt;cargo build&lt;&#x2F;code&gt; will vomit
a bunch of these errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0616]: field `height` of struct `parse_args::Frame` is private
  --&amp;gt; src&#x2F;main.rs:85:23
   |
85 |         for row in 0..self.frame.height {
   |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, identifiers are private in Rust. In order to expose them
from one module to another, you need to add the &lt;code&gt;pub&lt;&#x2F;code&gt; keyword. For
example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and add &lt;code&gt;pub&lt;&#x2F;code&gt; as needed. Finally, if you run &lt;code&gt;cargo run&lt;&#x2F;code&gt;, you
should see &lt;code&gt;Error parsing args: TooFewArgs&lt;&#x2F;code&gt;. And if you run &lt;code&gt;cargo run 5 5&lt;&#x2F;code&gt;, you should see a much smaller frame than before. Hurrah!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;What happens if you run &lt;code&gt;cargo run 0 0&lt;&#x2F;code&gt;? How about &lt;code&gt;cargo run 1 1&lt;&#x2F;code&gt;?
Put in some better error handling in &lt;code&gt;parse_args&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exit-code&quot;&gt;Exit code&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, one final irritation. Let&#x27;s provide some invalid arguments
and inspect the exit code of the process:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run 5
Error parsing args: TooFewArgs
$ echo $?
0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For those not familiar: a 0 exit code means everything went OK. That&#x27;s
clearly not the case here! If we search the standard library, it seems
the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;process&#x2F;fn.exit.html&quot;&gt;&lt;code&gt;std::process::exit&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
can be used to address this. Go ahead and try using that to solve the
problem here.&lt;&#x2F;p&gt;
&lt;p&gt;However, we&#x27;ve got one more option: we can return a &lt;code&gt;Result&lt;&#x2F;code&gt; straight
from &lt;code&gt;main&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), self::parse_args::ParseError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;parse_args::parse_args() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(e);
        },
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(frame) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; game = Game::new(frame);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep_duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, game);
                game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
                std::thread::sleep(sleep_duration);
            }
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 5&lt;&#x2F;strong&gt; Can you do something to clean up the nesting a bit here?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;better-error-handling&quot;&gt;Better error handling&lt;&#x2F;h2&gt;
&lt;p&gt;The error handling problem we had in the last lesson involved the call
to &lt;code&gt;top_bottom&lt;&#x2F;code&gt;. I&#x27;ve already included a solution to that in the
download of the code provided. Guess what I changed since last time
and then check the code to confirm that you&#x27;re right.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re following &lt;em&gt;very&lt;&#x2F;em&gt; closely, you may be surprised that there
aren&#x27;t more warnings about unused &lt;code&gt;Result&lt;&#x2F;code&gt; values coming from other
calls to &lt;code&gt;write!&lt;&#x2F;code&gt;. As far as I can tell, this is in fact a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;55240&quot;&gt;bug in the
Rust compiler&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Still, it would be good practice to fix up those calls to
&lt;code&gt;write!&lt;&#x2F;code&gt;. Take a stab at doing so.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h2&gt;
&lt;p&gt;We still didn&#x27;t fix our double buffering problem, we&#x27;ll get to that
next time. We&#x27;re also going to introduce some more error handling from
the standard library. And maybe we&#x27;ll get to play a bit more with
iterators as well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basics of Ownership - Rust Crash Course lesson 2 - exercise solutions</title>
		<published>2018-10-31T00:00:00+00:00</published>
		<updated>2018-10-31T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Basics of Ownership.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;Implementing &lt;code&gt;drop&lt;&#x2F;code&gt; is fairly simple. We need a function that allows a
value to be moved into it, and then does nothing with that value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: T) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And surprise: check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;8bf7fda6b5fec99a11ae0fb8d5c3dbd150063741&#x2F;src&#x2F;libcore&#x2F;mem.rs#L776&quot;&gt;the actual &lt;code&gt;drop&lt;&#x2F;code&gt;
function&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;The important trick to implement this method syntax is that the first
parameter &lt;em&gt;must&lt;&#x2F;em&gt; be some form of &lt;code&gt;self&lt;&#x2F;code&gt;. We want to keep this as an
immutable reference, so we use &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dropping a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may be wondering: why does the code use &lt;code&gt;x.use_it()&lt;&#x2F;code&gt;? &lt;code&gt;use_it&lt;&#x2F;code&gt;
requires a &lt;em&gt;reference&lt;&#x2F;em&gt; to a &lt;code&gt;Foobar&lt;&#x2F;code&gt;, but &lt;code&gt;x&lt;&#x2F;code&gt; is a &lt;code&gt;Foobar&lt;&#x2F;code&gt;! In fact,
you may have ended up writing something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While that&#x27;s perfectly valid code, it&#x27;s also unnecessary: Rust will
automatically take a reference to a value in the case of a method
call.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;The original code doesn&#x27;t compile, since our &lt;code&gt;x&lt;&#x2F;code&gt; value was
moved. However, if we have a &lt;code&gt;Copy&lt;&#x2F;code&gt; implementation, Rust will
automatically create a copy of the value for us. As I hinted, you can
do this easily by using automatic deriving:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug, Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to be more explicit, you can write the implementations
directly. Note that, to the best of my knowledge, there&#x27;s no advantage
to doing so, at least in this case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    }
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no need for a body for the &lt;code&gt;Copy&lt;&#x2F;code&gt; trait. Its only purpose is
as a signal to the compiler that it&#x27;s acceptable to copy when needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re not taking a reference to &lt;code&gt;x&lt;&#x2F;code&gt; when calling &lt;code&gt;double&lt;&#x2F;code&gt;, so our
&lt;code&gt;double&lt;&#x2F;code&gt; function needs to take an actual &lt;code&gt;Foobar&lt;&#x2F;code&gt;, not a reference to
one. It must also return a &lt;code&gt;Foobar&lt;&#x2F;code&gt;. One implementation we could come
up with is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) -&amp;gt; Foobar {
    Foobar(foobar.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes in an immutable &lt;code&gt;Foobar&lt;&#x2F;code&gt;, and then constructs a new
&lt;code&gt;Foobar&lt;&#x2F;code&gt; from the value inside of it. Another option, however, would
be to mutate the original &lt;code&gt;Foobar&lt;&#x2F;code&gt; and then return it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) -&amp;gt; Foobar {
    foobar.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    foobar
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Haskeller in me prefers the first implementation, since it has
less mutation. The troll in me loves the second one, since it lets me
taunt the Haskeller in me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basics of Ownership - Rust Crash Course lesson 2</title>
		<published>2018-10-29T00:00:00+00:00</published>
		<updated>2018-10-29T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/rust-crash-course-02-basics-of-ownership/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Arguably the biggest distinguishing aspect of Rust versus other
popular programming languages is its ownership model. In this lesson,
we&#x27;re going to hit the basics of ownership in Rust. You can read much
more in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch04-01-what-is-ownership.html&quot;&gt;Rust book chapter on
ownership&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;format&quot;&gt;Format&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m going to be experimenting a bit with lesson format. I want to
cover both:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More theoretical discussions of ownership&lt;&#x2F;li&gt;
&lt;li&gt;Trying to implement an actual program&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As time goes on in this series, I intend to spend more time on the
latter and less on the former, though we still need significant time
on the former right now. I&#x27;m going to try approaching this by having
the beginning of this post discuss ownership, and then we&#x27;ll implement
a first version of bouncy afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;This format may feel a bit stilted, feedback appreciated if this
approach works for people.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparison-with-haskell&quot;&gt;Comparison with Haskell&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m going to start by comparing Rust with Haskell, since both
languages have a strong concept of immutability. However, Haskell is a
garbage collected language. Let&#x27;s see how these two languages
compare. In Haskell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Everything is immutable by default&lt;&#x2F;li&gt;
&lt;li&gt;You use explicit mutability wrappers (like &lt;code&gt;IORef&lt;&#x2F;code&gt; or &lt;code&gt;MVar&lt;&#x2F;code&gt;) to
mark mutability&lt;&#x2F;li&gt;
&lt;li&gt;References to data can be shared however much you like&lt;&#x2F;li&gt;
&lt;li&gt;Garbage collection frees up memory non-deterministically&lt;&#x2F;li&gt;
&lt;li&gt;When you need deterministic resource handling (like file handles),
you need to use &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;raii-better-than-bracket-pattern&quot;&gt;the bracket
pattern&lt;&#x2F;a&gt;
or similar&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Rust, data ownership is far more important: it&#x27;s a primary aspect
of the language, and allows the language to bypass garbage
collection. It also allows data to often live on the stack instead of
the heap, leading to better performance. Also, it runs
deterministically, making it a good approach for handling other
resources like file handles.&lt;&#x2F;p&gt;
&lt;p&gt;Ownership starts off with the following rules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Each value in Rust has a variable that’s called its owner.&lt;&#x2F;li&gt;
&lt;li&gt;There can only be one owner at a time.&lt;&#x2F;li&gt;
&lt;li&gt;When the owner goes out of scope, the value will be dropped.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;simple-example&quot;&gt;Simple example&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Syntax note&lt;&#x2F;strong&gt; &lt;code&gt;#[...]&lt;&#x2F;code&gt; is a compiler pragma. &lt;code&gt;#[derive(...)]&lt;&#x2F;code&gt; is one
example, and is similar to using &lt;code&gt;deriving&lt;&#x2F;code&gt; for typeclasses in
Haskell. For some traits, the compiler can automatically provide an
implementation if you ask it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Syntax note&lt;&#x2F;strong&gt; &lt;code&gt;{:?}&lt;&#x2F;code&gt; in a format string means &amp;quot;use the &lt;code&gt;Debug&lt;&#x2F;code&gt; trait
for displaying this&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Foobar&lt;&#x2F;code&gt; is what&#x27;s known as a newtype wrapper: it&#x27;s a new data type
wrapping around, and with the same runtime representation of, a signed
32-bit integer (&lt;code&gt;i32&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;main&lt;&#x2F;code&gt; function, &lt;code&gt;x&lt;&#x2F;code&gt; contains a &lt;code&gt;Foobar&lt;&#x2F;code&gt;. When it calls
&lt;code&gt;uses_foobar&lt;&#x2F;code&gt;, ownership of that &lt;code&gt;Foobar&lt;&#x2F;code&gt; passes to
&lt;code&gt;uses_foobar&lt;&#x2F;code&gt;. Using that &lt;code&gt;x&lt;&#x2F;code&gt; again in &lt;code&gt;main&lt;&#x2F;code&gt; would be an error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Results in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of moved value: `x`
  --&amp;gt; foo.rs:11:17
   |
10 |     uses_foobar(x);
   |                 - value moved here
11 |     uses_foobar(x);
   |                 ^ value used here after move
   |
   = note: move occurs because `x` has type `Foobar`, which does not implement the `Copy` trait

error: aborting due to previous error

For more information about this error, try `rustc --explain E0382`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Side note on copy trait way below...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dropping&quot;&gt;Dropping&lt;&#x2F;h2&gt;
&lt;p&gt;When a value goes out of scope, its &lt;code&gt;Drop&lt;&#x2F;code&gt; trait (like a typeclass) is
used, and then the memory is freed. We can demonstrate this by writing
a &lt;code&gt;Drop&lt;&#x2F;code&gt; implementation for &lt;code&gt;Foobar&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Guess what the output of the program below is before
seeing the output.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dropping a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Before uses_foobar
I consumed a Foobar: Foobar(1)
Dropping a Foobar: Foobar(1)
After uses_foobar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the value is dropped before &lt;code&gt;After uses_foobar&lt;&#x2F;code&gt;. This is
because the value was moved into &lt;code&gt;uses_foobar&lt;&#x2F;code&gt;, and when that function
exits, the &lt;code&gt;drop&lt;&#x2F;code&gt; is called.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 1&lt;&#x2F;strong&gt; There&#x27;s a function in the standard library,
&lt;code&gt;std::mem::drop&lt;&#x2F;code&gt;, which drops a value immediately. Implement it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lexical-scoping&quot;&gt;Lexical scoping&lt;&#x2F;h2&gt;
&lt;p&gt;Scoping in Rust is currently lexical, though there&#x27;s a Non Lexical
Lifetimes (NLL) proposal being merged in. (There&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;50251487&#x2F;what-are-non-lexical-lifetimes&quot;&gt;nice explanation
on Stack
Overflow&lt;&#x2F;a&gt;
of what NLL does.) We can demonstrate the currently-lexical nature of
scoping:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dropping a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _y = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;End of main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Syntax note&lt;&#x2F;strong&gt; Use a leading underscore &lt;code&gt;_&lt;&#x2F;code&gt; for variables that are
not used.&lt;&#x2F;p&gt;
&lt;p&gt;The output from this program is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Before x
After x
Before y
After y
Dropping a Foobar: Foobar(2)
End of main
Dropping a Foobar: Foobar(1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;CHALLENGE&lt;&#x2F;strong&gt; Remove the seemingly-superfluous braces and run the
program. Extra points: guess what the output will be before looking at
the actual output.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;borrows-references-immutable&quot;&gt;Borrows&#x2F;references (immutable)&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you want to be able to share a reference to a value without
moving ownership. Easy enough:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dropping a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Things to notice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uses_foobar&lt;&#x2F;code&gt; now takes a value of type &lt;code&gt;&amp;amp;Foobar&lt;&#x2F;code&gt;, which is
&amp;quot;immutable reference to a &lt;code&gt;Foobar&lt;&#x2F;code&gt;.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Inside &lt;code&gt;uses_foobar&lt;&#x2F;code&gt;, we don&#x27;t need to explicitly dereference the
&lt;code&gt;foobar&lt;&#x2F;code&gt; value, this is done automatically by Rust.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;code&gt;main&lt;&#x2F;code&gt;, we can now use &lt;code&gt;x&lt;&#x2F;code&gt; in two calls to &lt;code&gt;uses_foobar&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;In order to create a reference from a value, we use &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; in front of
the variable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; When do you think the &lt;code&gt;Dropping a Foobar:&lt;&#x2F;code&gt; message gets
printed?&lt;&#x2F;p&gt;
&lt;p&gt;Remember from the last lesson that there is special syntax for a
parameter called &lt;code&gt;self&lt;&#x2F;code&gt;. The signature of &lt;code&gt;drop&lt;&#x2F;code&gt; above looks quite
different from &lt;code&gt;uses_foobar&lt;&#x2F;code&gt;. When you see &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;, you can think
of it as &lt;code&gt;self: &amp;amp;mut Self&lt;&#x2F;code&gt;. Now it looks more similar to
&lt;code&gt;uses_foobar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 2&lt;&#x2F;strong&gt; We&#x27;d like to be able to use object syntax for
&lt;code&gt;uses_foobar&lt;&#x2F;code&gt; as well. Create a method &lt;code&gt;use_it&lt;&#x2F;code&gt; on the &lt;code&gt;Foobar&lt;&#x2F;code&gt; type
that prints the &lt;code&gt;I consumed&lt;&#x2F;code&gt; message. Hint: you&#x27;ll need to do this
inside &lt;code&gt;impl Foobar { ... }&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiple-live-references&quot;&gt;Multiple live references&lt;&#x2F;h2&gt;
&lt;p&gt;We can change our &lt;code&gt;main&lt;&#x2F;code&gt; function to allow two references to &lt;code&gt;x&lt;&#x2F;code&gt; to
live at the same time. This version also adds explicit types on the
local variables, instead of relying on type inference:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: Foobar = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Foobar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is allowed in Rust, because:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Multiple read-only references to a variable cannot result in any
data races&lt;&#x2F;li&gt;
&lt;li&gt;The lifetime of the value outlives the references to it. In other
words, in this case, &lt;code&gt;x&lt;&#x2F;code&gt; lives at least as long as &lt;code&gt;y&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s see two ways to break this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reference-outlives-value&quot;&gt;Reference outlives value&lt;&#x2F;h3&gt;
&lt;p&gt;Remember that &lt;code&gt;std::mem::drop&lt;&#x2F;code&gt; from before? Check this out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: Foobar = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Foobar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x);
    std::mem::drop(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in the error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0505]: cannot move out of `x` because it is borrowed
  --&amp;gt; foo.rs:19:20
   |
16 |     let y: &amp;amp;Foobar = &amp;amp;x;
   |                       - borrow of `x` occurs here
...
19 |     std::mem::drop(x);
   |                    ^ move out of `x` occurs here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0505`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;mutable-reference-with-other-references&quot;&gt;Mutable reference with other references&lt;&#x2F;h3&gt;
&lt;p&gt;You can also take &lt;em&gt;mutable&lt;&#x2F;em&gt; references to a value. In order to avoid
data races, Rust does not allow value to be referenced mutably and
accessed in any other way at the same time.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: Foobar = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Foobar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; will fail!
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the type of &lt;code&gt;y&lt;&#x2F;code&gt; is now &lt;code&gt;&amp;amp;mut Foobar&lt;&#x2F;code&gt;. Like Haskell, Rust
tracks mutability at the type level. Yay!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Try to guess which lines in the code below will trigger a compilation
error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;y);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(z);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; move
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; read only reference
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Foobar) {
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; mutable reference
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Foobar) {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;mutable-reference-vs-mutable-variable&quot;&gt;Mutable reference vs mutable variable&lt;&#x2F;h2&gt;
&lt;p&gt;Something I didn&#x27;t explain above was the &lt;code&gt;mut&lt;&#x2F;code&gt; before &lt;code&gt;x&lt;&#x2F;code&gt; in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: Foobar = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Foobar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Before uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(y);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;After uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, variables are immutable, and therefore do not allow any
kind of mutation. You cannot take a mutable reference to an immutable
variable, and therefore &lt;code&gt;x&lt;&#x2F;code&gt; must be marked as mutable. Here&#x27;s an
easier way to see this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; changes the 0th value inside the product

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you remove the &lt;code&gt;mut&lt;&#x2F;code&gt;, this will fail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moving-into-mutable&quot;&gt;Moving into mutable&lt;&#x2F;h3&gt;
&lt;p&gt;This bothered me, and I assume it will bother other Haskellers. As
just mentioned, the following code will not compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; changes the 0th value inside the product

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obviously you can&#x27;t mutate &lt;code&gt;x&lt;&#x2F;code&gt;. But let&#x27;s change this ever so
slightly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {

    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; changes the 0th value inside the product

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before learning Rust, I would have objected to this: &lt;code&gt;x&lt;&#x2F;code&gt; is immutable,
and therefore we shouldn&#x27;t be allowed to pass it to a function that
needs a mutable &lt;code&gt;x&lt;&#x2F;code&gt;. However, this isn&#x27;t how Rust views the world. The
mutability here is a feature of the variable, not the value
itself. When you move the &lt;code&gt;x&lt;&#x2F;code&gt; into &lt;code&gt;foo&lt;&#x2F;code&gt;, &lt;code&gt;main&lt;&#x2F;code&gt; no longer has access
to &lt;code&gt;x&lt;&#x2F;code&gt;, and doesn&#x27;t care if it&#x27;s mutated. Inside &lt;code&gt;foo&lt;&#x2F;code&gt;, we&#x27;ve
explicitly stated that &lt;code&gt;x&lt;&#x2F;code&gt; can be mutated, so we&#x27;re cool.&lt;&#x2F;p&gt;
&lt;p&gt;This is fairly different from how Haskell looks at things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;copy-trait&quot;&gt;Copy trait&lt;&#x2F;h2&gt;
&lt;p&gt;We touched on this topic last time with numeric types vs
&lt;code&gt;String&lt;&#x2F;code&gt;. Let&#x27;s hit it a little harder. Will the following code
compile or not?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed an i32: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It &lt;em&gt;shouldn&#x27;t&lt;&#x2F;em&gt; work, right? &lt;code&gt;x&lt;&#x2F;code&gt; is moved into &lt;code&gt;uses_i32&lt;&#x2F;code&gt;, and then
used again. However, it compiles just fine! What gives?&lt;&#x2F;p&gt;
&lt;p&gt;Rust has a special trait, &lt;code&gt;Copy&lt;&#x2F;code&gt;, which indicates that a type is so
cheap that it can automatically be passed-by-value. That&#x27;s exactly
what happens with &lt;code&gt;i32&lt;&#x2F;code&gt;. You can explicitly do this with the &lt;code&gt;Clone&lt;&#x2F;code&gt;
trait if desired:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dropping: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Why don&#x27;t we need to use &lt;code&gt;x.clone()&lt;&#x2F;code&gt; on the second
&lt;code&gt;uses_foobar&lt;&#x2F;code&gt;? What happens if we put it in anyway?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise 3&lt;&#x2F;strong&gt; Change the code below, without modifying the &lt;code&gt;main&lt;&#x2F;code&gt;
function at all, so that it compiles and runs successfully. Some
hints: &lt;code&gt;Debug&lt;&#x2F;code&gt; is a special trait that can be automatically derived,
and in order to have a &lt;code&gt;Copy&lt;&#x2F;code&gt; implementation you also need a &lt;code&gt;Clone&lt;&#x2F;code&gt;
implementation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Foobar) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I consumed a Foobar: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, foobar);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uses_foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;lifetimes&quot;&gt;Lifetimes&lt;&#x2F;h2&gt;
&lt;p&gt;The term that goes along most with ownership is &lt;em&gt;lifetimes&lt;&#x2F;em&gt;. Every
value needs to be owned, and its owned for a certainly lifetime until
it&#x27;s dropped. So far, everything we&#x27;ve looked at has involved implicit
lifetimes. However, as code gets more sophisticated, we need to be
more explicit about these lifetimes. We&#x27;ll cover that another time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;Add an implementation of the &lt;code&gt;double&lt;&#x2F;code&gt; function to get this code to
compile, run, and output the number 2:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x: Foobar = Foobar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y: Foobar = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(x);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember: to provide a return value from a function, put &lt;code&gt;-&amp;gt; ReturnType&lt;&#x2F;code&gt; after the parameter list.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes-on-structs-and-enums&quot;&gt;Notes on structs and enums&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned above that &lt;code&gt;struct Foobar(i32)&lt;&#x2F;code&gt; is a newtype around an
&lt;code&gt;i32&lt;&#x2F;code&gt;. That&#x27;s actually a special case of a more general &lt;em&gt;positional&lt;&#x2F;em&gt;
struct, where you can have 0 or more fields, named by their numeric
position. And positions start numbering at 0, as god and Linus
Torvalds intended.&lt;&#x2F;p&gt;
&lt;p&gt;There are some more examples:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NoFields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; may seem strange, we might cover examples of this later
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;OneField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TwoFields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also use record syntax:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;struct&lt;&#x2F;code&gt;s are known as &lt;em&gt;product types&lt;&#x2F;em&gt;, which means they contain
multiple values. Rust also provides &lt;code&gt;enum&lt;&#x2F;code&gt;s, which are sum types, or
tagged unions. These are &lt;em&gt;alternatives&lt;&#x2F;em&gt;, where you select one of the
options. A simple enum would be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    Red,
    Blue,
    Green,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But enums variants can also take values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Shape &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    Square(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; size of one side
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    Rectangle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; width and height
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    Circle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; radius
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;bouncy&quot;&gt;Bouncy&lt;&#x2F;h2&gt;
&lt;p&gt;Enough talk, let&#x27;s fight! I want to create a simulation of a bouncing
ball. It&#x27;s easier to demonstrate than explain:&lt;&#x2F;p&gt;
&lt;script id=&quot;asciicast-dB8y60T2G2Pp5GWNmxF8lF6tc&quot; src=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;a&#x2F;dB8y60T2G2Pp5GWNmxF8lF6tc.js&quot; async&gt;&lt;&#x2F;script&gt;
&lt;p&gt;Let&#x27;s step through the process of creating such a game together. I&#x27;ll
provide the complete &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; at the end of the lesson, but
strongly recommend you implement this together with me throughout the
sections below. Try to &lt;strong&gt;avoid copy pasting&lt;&#x2F;strong&gt;, but instead type in the
code yourself to get more comfortable with Rust syntax.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initialize-the-project&quot;&gt;Initialize the project&lt;&#x2F;h3&gt;
&lt;p&gt;This part&#x27;s easy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo new bouncy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you &lt;code&gt;cd&lt;&#x2F;code&gt; into that directory and run &lt;code&gt;cargo run&lt;&#x2F;code&gt;, you&#x27;ll get output
like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo run
   Compiling bouncy v0.1.0 (&#x2F;Users&#x2F;michael&#x2F;Desktop&#x2F;bouncy)
    Finished dev [unoptimized + debuginfo] target(s) in 1.37s
     Running `target&#x2F;debug&#x2F;bouncy`
Hello, world!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only file we&#x27;re going to touch today is &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;, which will
have the source code for our program.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;define-data-structures&quot;&gt;Define data structures&lt;&#x2F;h3&gt;
&lt;p&gt;To track the ball bouncing around our screen, we need to know the
following information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The width of the box containing the ball&lt;&#x2F;li&gt;
&lt;li&gt;The height of the box containing the ball&lt;&#x2F;li&gt;
&lt;li&gt;The x and y coordinates of the ball&lt;&#x2F;li&gt;
&lt;li&gt;The vertical direction of the ball (up or down)&lt;&#x2F;li&gt;
&lt;li&gt;The horizontal direction of the ball (left or right)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;re going to define new datatypes for tracking the vertical and
horizontal direction, and use &lt;code&gt;u32&lt;&#x2F;code&gt;s for tracking the
position.&lt;&#x2F;p&gt;
&lt;p&gt;We can define &lt;code&gt;VertDir&lt;&#x2F;code&gt; as an &lt;code&gt;enum&lt;&#x2F;code&gt;. This is a simplified version of
what enums can handle, since we aren&#x27;t given it any payload. We&#x27;ll do
more sophisticated stuff later.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;VertDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    Up,
    Down,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and define a &lt;code&gt;HorizDir&lt;&#x2F;code&gt; as well that tracks whether we&#x27;re
moving left or right. Now, to track a ball, we need to know its &lt;code&gt;x&lt;&#x2F;code&gt;
and &lt;code&gt;y&lt;&#x2F;code&gt; positions and its vertical and horizontal directions. This
will be a struct, since we&#x27;re tracking multiple values instead of
(like an enum) choosing between different options.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Ball &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vert_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: VertDir,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;horiz_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: HorizDir,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Define a &lt;code&gt;Frame&lt;&#x2F;code&gt; struct that tracks the width and height of the play
area. Then tie it all together with a &lt;code&gt;Game&lt;&#x2F;code&gt; struct:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Game &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Frame,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ball&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: Ball,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;create-a-new-game&quot;&gt;Create a new game&lt;&#x2F;h3&gt;
&lt;p&gt;We can define a method on the &lt;code&gt;Game&lt;&#x2F;code&gt; type itself to create a new
game. We&#x27;ll assign some default width and height and initial ball
position.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Game &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; Game {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; frame = Frame {
            width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ball = Ball {
            x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
            vert_dir: VertDir::Up,
            horiz_dir: HorizDir::Left,
        };
        Game {frame, ball}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt; Rewrite this implementation to not use any &lt;code&gt;let&lt;&#x2F;code&gt;
statements.&lt;&#x2F;p&gt;
&lt;p&gt;Notice how we use &lt;code&gt;VertDir::Up&lt;&#x2F;code&gt;; the &lt;code&gt;Up&lt;&#x2F;code&gt; constructor is not imported
into the current namespace by default. Also, we can define &lt;code&gt;Game&lt;&#x2F;code&gt; with
&lt;code&gt;frame, ball&lt;&#x2F;code&gt; instead of &lt;code&gt;frame: frame, ball: ball&lt;&#x2F;code&gt; since the local
variable names are the same as the field names.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bounce&quot;&gt;Bounce&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s implement the logic of a ball to bounce off of a wall. Let&#x27;s
write out the logic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;x&lt;&#x2F;code&gt; value is 0, we&#x27;re at the left of the frame, and therefore
we should move right.&lt;&#x2F;li&gt;
&lt;li&gt;If &lt;code&gt;y&lt;&#x2F;code&gt; is 0, move down.&lt;&#x2F;li&gt;
&lt;li&gt;If &lt;code&gt;x&lt;&#x2F;code&gt; is one less than the width of the frame, we should move left.&lt;&#x2F;li&gt;
&lt;li&gt;If &lt;code&gt;y&lt;&#x2F;code&gt; is one less than the height of the frame, we should move up.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, we should keep moving in the same direction.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll want to &lt;em&gt;modify&lt;&#x2F;em&gt; the ball, and take the frame as a parameter. We&#x27;ll implement this as a method on the &lt;code&gt;Ball&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Ball &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bounce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;frame&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Frame) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.horiz_dir = HorizDir::Right;
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x == frame.width - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.horiz_dir = HorizDir::Left;
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and implement the rest of this function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;move&quot;&gt;Move&lt;&#x2F;h3&gt;
&lt;p&gt;Once we know which direction to move in by calling &lt;code&gt;bounce&lt;&#x2F;code&gt;, we can
move the ball one position. We&#x27;ll add this as another method within
&lt;code&gt;impl Ball&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.horiz_dir {
        HorizDir::Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x -= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        HorizDir::Right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implement the vertical half of this as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step&quot;&gt;Step&lt;&#x2F;h3&gt;
&lt;p&gt;We need to add a method to &lt;code&gt;Game&lt;&#x2F;code&gt; to perform a step of the game. This
will involve both bouncing and moving. This goes inside &lt;code&gt;impl Game&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.ball.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bounce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.frame);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.ball.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few bugs in that implementation which you&#x27;ll need to fix.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;render&quot;&gt;Render&lt;&#x2F;h3&gt;
&lt;p&gt;We need to be able to display the full state of the game. We&#x27;ll see
that this initial implementation has its flaws, but we&#x27;re going to do
this by printing the entire grid. We&#x27;ll add a border, use the letter
&lt;code&gt;o&lt;&#x2F;code&gt; to represent the ball, and put spaces for all of the other areas
inside the frame. We&#x27;ll use the &lt;code&gt;Display&lt;&#x2F;code&gt; trait for this.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s pull some of the types into our namespace. At the top of our
source file, add:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::fmt::{Display, Formatter};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let&#x27;s make sure we got the type signature correct:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Game &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Formatter) -&amp;gt; std::fmt::Result {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;unimplemented!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use the &lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; macro to stub out our function
before we implement it. Finally, let&#x27;s fill in a dummy &lt;code&gt;main&lt;&#x2F;code&gt; function
that will print the initial game:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, Game::new());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If everything is set up correctly, running &lt;code&gt;cargo run&lt;&#x2F;code&gt; will result in
a &amp;quot;not yet implemented&amp;quot; panic. If you get a compilation error, go fix
it now.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;top-border&quot;&gt;Top border&lt;&#x2F;h3&gt;
&lt;p&gt;Alright, now we can implement &lt;code&gt;fmt&lt;&#x2F;code&gt;. First, let&#x27;s just draw the top
border. This will be a plus sign, a series of dashes (based on the
width of the frame), another plus sign, and a newline. We&#x27;ll
use the &lt;code&gt;write!&lt;&#x2F;code&gt; macro, range syntax (&lt;code&gt;low..high&lt;&#x2F;code&gt;), and a &lt;code&gt;for&lt;&#x2F;code&gt; loop:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.frame.width {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks nice, but we get a compilation error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
  --&amp;gt; src&#x2F;main.rs:79:60
   |
79 |       fn fmt(&amp;amp;self, fmt: &amp;amp;mut Formatter) -&amp;gt; std::fmt::Result {
   |  ____________________________________________________________^
80 | |         write!(fmt, &amp;quot;+&amp;quot;);
81 | |         for _ in 0..self.frame.width {
82 | |             write!(fmt, &amp;quot;-&amp;quot;);
83 | |         }
84 | |         write!(fmt, &amp;quot;+\n&amp;quot;);
   | |                           - help: consider removing this semicolon
85 | |     }
   | |_____^ expected enum `std::result::Result`, found ()
   |
   = note: expected type `std::result::Result&amp;lt;(), std::fmt::Error&amp;gt;`
              found type `()`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It says &amp;quot;considering removing this semicolon.&amp;quot; Remember that putting
the semicolon forces our statement to evaluate to the unit value &lt;code&gt;()&lt;&#x2F;code&gt;,
but we want a &lt;code&gt;Result&lt;&#x2F;code&gt; value. And it seems like the &lt;code&gt;write!&lt;&#x2F;code&gt; macro is
giving us a &lt;code&gt;Result&lt;&#x2F;code&gt; value. Sure enough, if we drop the trailing
semicolon, we get something that works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.55s
     Running `target&#x2F;debug&#x2F;bouncy`
+------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may ask: what about all of the other &lt;code&gt;Result&lt;&#x2F;code&gt; values from the
other calls to &lt;code&gt;write!&lt;&#x2F;code&gt;? Good question! We&#x27;ll get to that a bit later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bottom-border&quot;&gt;Bottom border&lt;&#x2F;h3&gt;
&lt;p&gt;The top and bottom border are exactly the same. Instead of duplicating
the code, let&#x27;s define a closure that we can call twice. We introduce
a closure in Rust with the syntax &lt;code&gt;|args| { body }&lt;&#x2F;code&gt;. This closure will
take no arguments, and so will look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;top_bottom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.frame.width {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;top_bottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;top_bottom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First we&#x27;re going to get an error about &lt;code&gt;Result&lt;&#x2F;code&gt; and &lt;code&gt;()&lt;&#x2F;code&gt;
again. You&#x27;ll need to remove two semicolons to fix this. Do that
now. Once you&#x27;re done with that, you&#x27;ll get a brand new error
message. Yay!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0596]: cannot borrow `top_bottom` as mutable, as it is not declared as mutable
  --&amp;gt; src&#x2F;main.rs:88:9
   |
80 |         let top_bottom = || {
   |             ---------- help: consider changing this to be mutable: `mut top_bottom`
...
88 |         top_bottom();
   |         ^^^^^^^^^^ cannot borrow as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error message tells us exactly what to do: stick a &lt;code&gt;mut&lt;&#x2F;code&gt; in the
middle of &lt;code&gt;let top_bottom&lt;&#x2F;code&gt;. Do that, and make sure it fixes
things. Now the question: why? The &lt;code&gt;top_bottom&lt;&#x2F;code&gt; closure has captured
the &lt;code&gt;fmt&lt;&#x2F;code&gt; variable from the environment. In order to use that, we need
to call the &lt;code&gt;write!&lt;&#x2F;code&gt; macro, which mutates that &lt;code&gt;fmt&lt;&#x2F;code&gt;
variable. Therefore, each call to &lt;code&gt;top_bottom&lt;&#x2F;code&gt; is itself a
mutation. Therefore, we need to mark &lt;code&gt;top_bottom&lt;&#x2F;code&gt; as mutable.&lt;&#x2F;p&gt;
&lt;p&gt;There are three different types of closure traits: &lt;code&gt;Fn&lt;&#x2F;code&gt;, &lt;code&gt;FnOnce&lt;&#x2F;code&gt;, and
&lt;code&gt;FnMut&lt;&#x2F;code&gt;. We&#x27;ll get into the differences among these in a later
tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, we should now have both a top and bottom border in our output.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rows&quot;&gt;Rows&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s print each of the rows. In between the two &lt;code&gt;top_bottom()&lt;&#x2F;code&gt; calls,
we&#x27;ll stick a &lt;code&gt;for&lt;&#x2F;code&gt; loop:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.frame.height {
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside that loop, we&#x27;ll want to add the left border and the right
border:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&#x2F;&#x2F; more code will go here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and call &lt;code&gt;cargo run&lt;&#x2F;code&gt;, you&#x27;re in for an unpleasant surprise:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0501]: cannot borrow `*fmt` as mutable because previous closure requires unique access
  --&amp;gt; src&#x2F;main.rs:91:20
   |
80 |         let mut top_bottom = || {
   |                              -- closure construction occurs here
81 |             write!(fmt, &amp;quot;+&amp;quot;);
   |                    --- first borrow occurs due to use of `fmt` in closure
...
91 |             write!(fmt, &amp;quot;|&amp;quot;);
   |                    ^^^ borrow occurs here
...
96 |         top_bottom()
   |         ---------- first borrow used here, in later iteration of loop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh no, we&#x27;re going to have to deal with the borrow checker!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fighting-the-borrow-checker&quot;&gt;Fighting the borrow checker&lt;&#x2F;h3&gt;
&lt;p&gt;Alright, remember before that the &lt;code&gt;top_bottom&lt;&#x2F;code&gt; closure capture a
mutable reference to &lt;code&gt;fmt&lt;&#x2F;code&gt;? Well that&#x27;s causing us some trouble
now. There can only be one mutable reference in play at a time, and
&lt;code&gt;top_bottom&lt;&#x2F;code&gt; is holding it for the entire body of our method. Here&#x27;s a
simple workaround in this case: take &lt;code&gt;fmt&lt;&#x2F;code&gt; as a parameter to the
closure, instead of capturing it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;top_bottom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; Formatter| {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go ahead and fix the calls to &lt;code&gt;top_bottom&lt;&#x2F;code&gt;, and you should get output
that looks like this (some extra rows removed).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+------------------------------------------------------------+
||
||
||
||
...
+------------------------------------------------------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, now we can get back to...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;columns&quot;&gt;Columns&lt;&#x2F;h3&gt;
&lt;p&gt;Remember that &lt;code&gt;&#x2F;&#x2F; more code will go here&lt;&#x2F;code&gt; comment? Time to replace it!
We&#x27;re going to use another &lt;code&gt;for&lt;&#x2F;code&gt; loop for each column:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; column &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.frame.width {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;cargo run&lt;&#x2F;code&gt; will give you a complete frame, nice!
Unfortunately, it doesn&#x27;t include our ball. We want to write a &lt;code&gt;o&lt;&#x2F;code&gt;
character instead of space when &lt;code&gt;column&lt;&#x2F;code&gt; is the same as the ball&#x27;s
&lt;code&gt;x&lt;&#x2F;code&gt;, and the same thing for &lt;code&gt;y&lt;&#x2F;code&gt;. Here&#x27;s a partial implementation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; row == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.ball.y {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39; &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, c);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s something wrong with the output (test with &lt;code&gt;cargo run&lt;&#x2F;code&gt;). Fix
it and your render function will be complete!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-infinite-loop&quot;&gt;The infinite loop&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;re almost done! We need to add an infinite loop in our &lt;code&gt;main&lt;&#x2F;code&gt;
function that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Prints the game&lt;&#x2F;li&gt;
&lt;li&gt;Steps the game&lt;&#x2F;li&gt;
&lt;li&gt;Sleeps for a bit of time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll target 30 FPS, so we want to sleep for 33ms. But how do we sleep
in Rust? To figure that out, let&#x27;s go to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;index.html&quot;&gt;the Rust standard library
docs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;index.html?search=sleep&quot;&gt;search for
&lt;code&gt;sleep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The
first result is
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;fn.sleep.html&quot;&gt;&lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which seems like a good bet. Check out the docs there, especially the
wonderful example, to understand this code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; game = Game::new();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sleep_duration = std::time::Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, game);
        game.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
        std::thread::sleep(sleep_duration);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s one compile error in this code. Try to anticipate what it
is. If you can&#x27;t figure it out, ask the compiler, then fix it. You
should get a successful &lt;code&gt;cargo run&lt;&#x2F;code&gt; that shows you a bouncing ball.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problems&quot;&gt;Problems&lt;&#x2F;h3&gt;
&lt;p&gt;There are two problems I care about in this implementation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The output can be a bit jittery, especially on a slow terminal. We
should really be using something like the &lt;code&gt;curses&lt;&#x2F;code&gt; library to handle
double buffering of the output.&lt;&#x2F;li&gt;
&lt;li&gt;If you ran &lt;code&gt;cargo run&lt;&#x2F;code&gt; before, you probably didn&#x27;t see it. Run
&lt;code&gt;cargo clean&lt;&#x2F;code&gt; and &lt;code&gt;cargo build&lt;&#x2F;code&gt; to force a rebuild, and you should
see the following warning:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;warning: unused `std::result::Result` which must be used
  --&amp;gt; src&#x2F;main.rs:88:9
   |
88 |         top_bottom(fmt);
   |         ^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I mentioned this problem above: we&#x27;re ignoring failures coming from
the calls to the &lt;code&gt;write!&lt;&#x2F;code&gt; macro in most cases but throwing away the
&lt;code&gt;Result&lt;&#x2F;code&gt; using a semicolon. There&#x27;s a nice, single character solution
to this problem. This forms the basis of proper error handling in
Rust. However, we&#x27;ll save that for another time. For now, we&#x27;ll just
ignore the warning.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;complete-source&quot;&gt;Complete source&lt;&#x2F;h3&gt;
&lt;p&gt;You can find the complete source code for this implementation &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;5307d493750d7b48c1c5281961bc31d0&quot;&gt;as a
Github
gist&lt;&#x2F;a&gt;. Reminder:
it&#x27;s much better if you step through the code above and implement it
yourself.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve added one piece of syntax we haven&#x27;t covered yet in that tutorial, at the
end of the call to &lt;code&gt;top_bottom&lt;&#x2F;code&gt;. We&#x27;ll cover that in much more detail next
week.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kick the Tires - Rust Crash Course lesson 1 - exercise solutions</title>
		<published>2018-10-24T00:00:00+00:00</published>
		<updated>2018-10-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/rust-crash-course-01-kick-the-tires-solutions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/rust-crash-course-01-kick-the-tires-solutions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below are the solutions to the exercises from the last Rust Crash
Course lesson, &amp;quot;Kick the Tires.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise 1&lt;&#x2F;h2&gt;
&lt;p&gt;The following code is broken:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We got an error message about a &lt;em&gt;move&lt;&#x2F;em&gt;. We&#x27;ll learn more about moves
in the next lesson, when we discuss ownership. There are two basic
solutions. First, the less-than-ideal one:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clone&quot;&gt;Clone&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ve moved the original &lt;code&gt;val&lt;&#x2F;code&gt; into the first call to &lt;code&gt;printer&lt;&#x2F;code&gt;, and
can&#x27;t use it again. One workaround is to instead move a &lt;em&gt;clone&lt;&#x2F;em&gt; of
&lt;code&gt;val&lt;&#x2F;code&gt; into that call, leaving the original unaffected:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that I only cloned &lt;code&gt;val&lt;&#x2F;code&gt; the first time, not the second
time. We don&#x27;t need &lt;code&gt;val&lt;&#x2F;code&gt; again after the second call, so it&#x27;s safe to
move it. Using an extra clone is expensive, since it requires
allocating memory and performing a buffer copy.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of it being expensive...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pass-by-reference&quot;&gt;Pass by reference&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of moving the value, we can instead pass it into the &lt;code&gt;printer&lt;&#x2F;code&gt;
function by reference. Let&#x27;s first try to achieve that by just
modifying &lt;code&gt;printer&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;String) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This doesn&#x27;t work, because when we call &lt;code&gt;printer&lt;&#x2F;code&gt;, we&#x27;re still giving
it a &lt;code&gt;String&lt;&#x2F;code&gt; and not a reference to a &lt;code&gt;String&lt;&#x2F;code&gt;. Fixing that is pretty
easy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;val);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the ampersand means both:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A reference to this type, and&lt;&#x2F;li&gt;
&lt;li&gt;Take a reference to this value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s an even better way to write &lt;code&gt;printer&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By using &lt;code&gt;str&lt;&#x2F;code&gt; instead of &lt;code&gt;String&lt;&#x2F;code&gt;, we can pass in string literals,
and do not need to force the allocation of a heap object. We&#x27;ll get to
this in more detail when we discuss strings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-2&quot;&gt;Exercise 2&lt;&#x2F;h2&gt;
&lt;p&gt;This is the broken code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error message we get from the compiler is pretty informative:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;cannot assign twice to immutable variable &lt;code&gt;i&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In order to fix this, we change the variable from immutable to mutable:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-3&quot;&gt;Exercise 3&lt;&#x2F;h2&gt;
&lt;p&gt;This exercise asked you do see when you could leave out
semicolons. Here&#x27;s a simple rule:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The statement is the last statement in a block&lt;&#x2F;li&gt;
&lt;li&gt;The type of the expression is unit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, in this code, removing the semicolon is fine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That said, it tends to be somewhat idiomatic to leave semicolons on
expressions like these which are purely effectful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4&quot;&gt;Exercise 4&lt;&#x2F;h2&gt;
&lt;p&gt;This exercise was to implement FizzBuzz in Rust. Repeating the rules here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Print the numbers 1 to 100&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 3, output fizz instead of the number&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 5, output buzz instead of the number&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 3 &lt;strong&gt;and&lt;&#x2F;strong&gt; 5, output fizzbuzz instead of the number&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s one possible solution using &lt;code&gt;if&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;else&lt;&#x2F;code&gt; fallbacks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;101 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;buzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has at least one downside: it will need to test &lt;code&gt;i % 3 == 0&lt;&#x2F;code&gt; and &lt;code&gt;i % 5 == 0&lt;&#x2F;code&gt; potentially multiple times. Under the surface, the compiler may optimize this away. But still, the repeated modulus calls are just sitting in the code taunting us! We can instead use &lt;em&gt;pattern matching&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;101 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;buzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or, if you want to have some fun with wildcard matching:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;101 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizzbuzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fizz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;buzz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m not going to tell you which of these is the &amp;quot;best&amp;quot; solution. And
there are certainly other implementations that could be
attempted. This was meant to give you a feel for some more Rust
constructs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kick the Tires - Rust Crash Course lesson 1</title>
		<published>2018-10-22T00:00:00+00:00</published>
		<updated>2018-10-22T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/rust-crash-course-01-kick-the-tires/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/rust-crash-course-01-kick-the-tires/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Heads up&lt;&#x2F;strong&gt; This blog post series has been updated and published as an eBook by FP Complete. I&#x27;d recommend reading that version instead of these posts. If you&#x27;re interested, please check out the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&#x2F;crash-course&#x2F;&quot;&gt;Rust Crash Course eBook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this lesson, we just want to get set up with the basics: tooling,
ability to compile, basic syntax, etc. Let&#x27;s start off with the
tooling, you can keep reading while things download.&lt;&#x2F;p&gt;
&lt;p&gt;This post is part of a series based on &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;teaching Rust at FP
Complete&lt;&#x2F;a&gt;. If you&#x27;re reading this post outside
of the blog, you can find links to all posts in the series &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;at the top of the
introduction
post&lt;&#x2F;a&gt;. You
can also &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;feed&#x2F;rust-crash-course&quot;&gt;subscribe to the RSS
feed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;&#x2F;h2&gt;
&lt;p&gt;Your gateway drug to Rust will be the &lt;code&gt;rustup&lt;&#x2F;code&gt; tool, which will
install and manage your Rust toolchains. I put that in the plural,
because it can manage both multiple versions of the Rust compiler, as
well as cross compilers for alternative targets. For now, we&#x27;ll be
doing simple stuff.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;en-US&#x2F;install.html&quot;&gt;Installation page on rust-lang.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup.rs page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both of these pages will tell you to do the same thing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On Unix-like systems, run &lt;code&gt;curl https:&#x2F;&#x2F;sh.rustup.rs -sSf | sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Or run a Windows installer, probably the &lt;a href=&quot;https:&#x2F;&#x2F;win.rustup.rs&#x2F;x86_64&quot;&gt;64-bit installer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Read the instructions on the rust-lang page about setting up your
&lt;code&gt;PATH&lt;&#x2F;code&gt; environment variable. For Unix-like systems, you&#x27;ll need
&lt;code&gt;~&#x2F;.cargo&#x2F;bin&lt;&#x2F;code&gt; in your &lt;code&gt;PATH&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Along with the &lt;code&gt;rustup&lt;&#x2F;code&gt; executable, you&#x27;ll also get:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;, the build tool for Rust&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;, the Rust compiler&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;Hello, world!&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, this part&#x27;s easy: &lt;code&gt;cargo new hello &amp;amp;&amp;amp; cd hello &amp;amp;&amp;amp; cargo run&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re &lt;em&gt;not&lt;&#x2F;em&gt; learning all about Cargo right now, but to give you the
basics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; contains the metadata on your project, including
dependencies. We won&#x27;t be using dependencies quite yet, so the
defaults will be fine.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; is generated by &lt;code&gt;cargo&lt;&#x2F;code&gt; itself&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;src&lt;&#x2F;code&gt; contains your source files, for now just &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt; contains generated files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll get to the source code itself in a bit, first a few more tooling
comments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-with-rustc&quot;&gt;Building with rustc&lt;&#x2F;h3&gt;
&lt;p&gt;For something this simple, you don&#x27;t need &lt;code&gt;cargo&lt;&#x2F;code&gt; to do the
building. Instead, you can just use: &lt;code&gt;rustc src&#x2F;main.rs &amp;amp;&amp;amp; .&#x2F;main&lt;&#x2F;code&gt;.
If you feel like experimenting with code this way, go for it. But
typically, it&#x27;s a better idea to create a scratch project with &lt;code&gt;cargo new&lt;&#x2F;code&gt; and experiment in there. Entirely your decision.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-tests&quot;&gt;Running tests&lt;&#x2F;h3&gt;
&lt;p&gt;We won&#x27;t be adding any tests to our code yet, but you can run tests in
your code with &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extra-tools&quot;&gt;Extra tools&lt;&#x2F;h3&gt;
&lt;p&gt;Two useful utilities are the &lt;code&gt;rustfmt&lt;&#x2F;code&gt; tool (for automatically
formatting your code) and &lt;code&gt;clippy&lt;&#x2F;code&gt; (for getting code advice). Note
that &lt;code&gt;clippy&lt;&#x2F;code&gt; is still a work in progress, and sometimes gives false
positives. To get them set up, run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ rustup component add clippy-preview rustfmt-preview
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then you can run them with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ cargo fmt
$ cargo clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;ide&quot;&gt;IDE&lt;&#x2F;h3&gt;
&lt;p&gt;There is some IDE support for those who want it. I&#x27;ve heard great
things about IntelliJ IDEA&#x27;s Rust add-on. Personally, I haven&#x27;t used
it much yet, but I&#x27;m also not much of an IDE user in the first
place. This crash course won&#x27;t assume any IDE, just basic text editor
support.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, we can finally look out our source code in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simple enough. &lt;code&gt;fn&lt;&#x2F;code&gt; says we&#x27;re writing a function. The name is
&lt;code&gt;main&lt;&#x2F;code&gt;. It takes no arguments, and has no return value. (Or, more
accurately, it returns the &lt;em&gt;unit type&lt;&#x2F;em&gt;, which is kind of like void in
C&#x2F;C++, but really closer to the unit type in Haskell.) String literals
look pretty normal, and function calls look almost identical to other
C-style languages.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, here&#x27;s the first &amp;quot;crash course&amp;quot; part of this: why is there an
exclamation point after the &lt;code&gt;println&lt;&#x2F;code&gt;? I say &amp;quot;crash course&amp;quot; because
when I first learned Rust, I didn&#x27;t see an explanation of this, and it
bothered me for a while.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;println&lt;&#x2F;code&gt; is &lt;em&gt;not&lt;&#x2F;em&gt; a function. It&#x27;s a macro. This is because it takes
a &lt;em&gt;format string&lt;&#x2F;em&gt;, which needs to be checked at compile time. To prove
the point, try changing the string literal to include &lt;code&gt;{}&lt;&#x2F;code&gt;. You&#x27;ll get
an error message along the lines of:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error: 1 positional argument in format string, but no arguments were given
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be fixed by providing an argument to fill into the
placeholder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello , world! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{} {} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;foobar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Take a guess at what the output will be, and you&#x27;ll probably be
right. But that leaves us with a question: how does the &lt;code&gt;println!&lt;&#x2F;code&gt;
macro know how to display these different types?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;traits-and-display&quot;&gt;Traits and Display&lt;&#x2F;h2&gt;
&lt;p&gt;More crash course time! To get a better idea of how displaying works,
let&#x27;s trigger a compile time error. To do this, we&#x27;re going to define
a new data type called &lt;code&gt;Person&lt;&#x2F;code&gt;, create a value of that type, and try
to print it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Person: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll get into more examples on defining your own &lt;code&gt;struct&lt;&#x2F;code&gt;s and
&lt;code&gt;enum&lt;&#x2F;code&gt;s later, but you can &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;2018-edition&#x2F;ch05-00-structs.html&quot;&gt;cheat and read the Rust
book&lt;&#x2F;a&gt;
if you&#x27;re curious.&lt;&#x2F;p&gt;
&lt;p&gt;If you try to compile that, you&#x27;ll get:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0277]: `Person` doesn&amp;#39;t implement `std::fmt::Display`
  --&amp;gt; src&#x2F;main.rs:11:28
   |
11 |     println!(&amp;quot;Person: {}&amp;quot;, alice);
   |                            ^^^^^ `Person` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `Person`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required by `std::fmt::Display::fmt`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s a bit verbose, but the important bit is &lt;code&gt;the trait `std::fmt::Display` is not implemented for `Person` &lt;&#x2F;code&gt;. In Rust, a
&lt;em&gt;trait&lt;&#x2F;em&gt; is similar to an interface in Java, or even better like a
typeclass in Haskell. (Noticing a pattern of things being similar to
Haskell concepts? Yeah, I did too.)&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll get to all of the fun of defining our own traits, and learning
about implementing them later. But we&#x27;re crashing forward right
now. So let&#x27;s throw in an implementation of the trait right here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That didn&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0405]: cannot find trait `Display` in this scope
 --&amp;gt; src&#x2F;main.rs:6:6
  |
6 | impl Display for Person {
  |      ^^^^^^^ not found in this scope
help: possible candidates are found in other modules, you can import them into scope
  |
1 | use core::fmt::Display;
  |
1 | use std::fmt::Display;
  |

error: aborting due to previous error

For more information about this error, try `rustc --explain E0405`.
error: Could not compile `foo`.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We haven&#x27;t imported &lt;code&gt;Display&lt;&#x2F;code&gt; into the local namespace. The compiler
helpfully recommends two different traits that we may want, and tells
us that we can use the &lt;code&gt;use&lt;&#x2F;code&gt; statement to import them into the local
namespace. We saw in an earlier error message that we wanted
&lt;code&gt;std::fmt::Display&lt;&#x2F;code&gt;, so adding &lt;code&gt;use std::fmt::Display;&lt;&#x2F;code&gt; to the top of
&lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; will fix this error message. But just to prove the
point, no &lt;code&gt;use&lt;&#x2F;code&gt; statement is necessary! We can instead us:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome, our previous error message has been replaced with something
else:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0046]: not all trait items implemented, missing: `fmt`
 --&amp;gt; src&#x2F;main.rs:6:1
  |
6 | impl std::fmt::Display for Person {
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation
  |
  = note: `fmt` from trait: `fn(&amp;amp;Self, &amp;amp;mut std::fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; std::result::Result&amp;lt;(), std::fmt::Error&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re quickly approaching the limit of things we&#x27;re going to cover in
a &amp;quot;kicking the tires&amp;quot; lesson. But hopefully this will help us plant
some seeds for next time.&lt;&#x2F;p&gt;
&lt;p&gt;The error message is telling us that we need to include a &lt;code&gt;fmt&lt;&#x2F;code&gt; method
in our implementation of the &lt;code&gt;Display&lt;&#x2F;code&gt; trait. It&#x27;s also telling us
what the type signature of this is going to be. Let&#x27;s look at that
signature, or at least what the error message says:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fn(&amp;amp;Self, &amp;amp;mut std::fmt::Formatter&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; std::result::Result&amp;lt;(), std::fmt::Error&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a lot to unpack there. I&#x27;m going to apply terminology to each
bit, but you shouldn&#x27;t expect to fully grok this yet.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Self&lt;&#x2F;code&gt; is the type of the thing getting the implementation. In this
case, that&#x27;s &lt;code&gt;Person&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Adding the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; at the beginning makes it a &lt;em&gt;reference&lt;&#x2F;em&gt; to the value,
not the value itself. C++ developers are used to that concept
already. Many other languages talk about pass by reference too. In
Rust, this plays in quite a bit with &lt;em&gt;ownership&lt;&#x2F;em&gt;. Ownership is a
massively important topic in Rust, and we&#x27;re not going to discuss it
more now.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; is a &lt;em&gt;mutable reference&lt;&#x2F;em&gt;. By default, everything in Rust is
immutable, and you have to explicitly say that things are
mutable. We&#x27;ll later get into why mutability of references is
important to ownership in Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Anyway, the second argument is a mutable reference to a
&lt;code&gt;Formatter&lt;&#x2F;code&gt;. What&#x27;s the &lt;code&gt;&amp;lt;&#x27;_&amp;gt;&lt;&#x2F;code&gt; thing after &lt;code&gt;Formatter&lt;&#x2F;code&gt;? That&#x27;s a
&lt;em&gt;lifetime parameter&lt;&#x2F;em&gt;. That &lt;em&gt;also&lt;&#x2F;em&gt; has to do with ownership. We&#x27;ll
get to lifetimes later as well.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; indicates that we&#x27;re providing the return type of the
function.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is an &lt;code&gt;enum&lt;&#x2F;code&gt;, which is a &lt;em&gt;sum type&lt;&#x2F;em&gt;, or a &lt;em&gt;tagged
union&lt;&#x2F;em&gt;. It&#x27;s generic on two &lt;em&gt;type parameters&lt;&#x2F;em&gt;: the value in case of
success and the value in case of error.&lt;&#x2F;li&gt;
&lt;li&gt;In the case of success, our function returns a &lt;code&gt;()&lt;&#x2F;code&gt;, or unit
value. This is another way of saying &amp;quot;I don&#x27;t return any useful
value if things go well.&amp;quot; In the case of an error, we return
&lt;code&gt;std::fmt::Error&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Rust has no runtime exceptions. Instead, when something goes wrong,
you return it explicitly. Almost all code uses the &lt;code&gt;Result&lt;&#x2F;code&gt; type to
track things going wrong. This is more explicit than exception-based
languages. But unlike languages like C, where it&#x27;s easy to forget to
check the type of a return to see if it succeeded, or tedious to do
error handling properly, Rust makes this much less painful. We&#x27;ll
deal with it later.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Rust &lt;em&gt;does&lt;&#x2F;em&gt; have the concept of panics, which in practice behave similarly to runtime exceptions. However, there are two important differences. Firstly, by convention, code is not supposed to use the panic mechanism for signaling normal error conditions (like file not found), and instead reserve panics for completely unexpected failures (like logic errors). Secondly, panics are (mostly) unrecoverable, meaning they take down the current thread.&lt;&#x2F;p&gt;
&lt;p&gt;A previous version of this document said that panics are unrecoverable, and that they take down the entire thread. However, as pointed out by &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;debugsteven&quot;&gt;J Haigh&lt;&#x2F;a&gt;, this isn&#x27;t quite true: the function &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;panic&#x2F;fn.catch_unwind.html&quot;&gt;&lt;code&gt;catch_unwind&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; allows you to usually capture and recover from a panic without losing the current thread. I&#x27;m not going to go into more details here.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Awesome, that type signature all on its own gave us enough material
for about 5 more lessons! Don&#x27;t worry, you&#x27;ll be able to write some
Rust code without understanding all of those details, as we&#x27;ll
demonstrate in the rest of this lesson. But if you&#x27;re really
adventurous, feel free to explore the Rust book for more information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;semicolons&quot;&gt;Semicolons&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s get back to our code, and actually implement our &lt;code&gt;fmt&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::fmt::Formatter) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;(), std::fmt::Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(fmt, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; years old)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.age)
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; alice = Person {
        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Person: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, alice);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re using the &lt;code&gt;write!&lt;&#x2F;code&gt; macro now, to write content into the
&lt;code&gt;Formatter&lt;&#x2F;code&gt; provided to our method. This is beyond the scope of our
discussion, but this allows for more efficient construction of values
and production of I&#x2F;O than producing a bunch of intermediate
strings. Yay efficiency.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; parameter of the method is a special way of saying &amp;quot;this
is a method that works on this object.&amp;quot; This is quite similar to how
you&#x27;d write code in Python, though in Rust you have to deal with pass
by value vs pass by reference.&lt;&#x2F;p&gt;
&lt;p&gt;The second parameter is named &lt;code&gt;fmt&lt;&#x2F;code&gt;, and &lt;code&gt;&amp;amp;mut Formatter&lt;&#x2F;code&gt; is its type.&lt;&#x2F;p&gt;
&lt;p&gt;The very observant among you may have noticed that, above, the error
message mentioned &lt;code&gt;&amp;amp;Self&lt;&#x2F;code&gt;. In our implementation, however, we made a
lower &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;. The difference is that &lt;code&gt;&amp;amp;Self&lt;&#x2F;code&gt; refers to the &lt;em&gt;type&lt;&#x2F;em&gt; of
the value, and the lower case &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; is the value itself. In fact,
the &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; parameter syntax is basically sugar for &lt;code&gt;self: &amp;amp;Self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Does anyone notice something missing? You may think I made a
typo. Where&#x27;s the semicolon at the end of the &lt;code&gt;write!&lt;&#x2F;code&gt; call? Well,
first of all, copy that code in and run it to prove to yourself that
it&#x27;s &lt;em&gt;not&lt;&#x2F;em&gt; a typo, and that code works. Now add the semicolon and try
compiling again. You&#x27;ll get something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0308]: mismatched types
 --&amp;gt; src&#x2F;main.rs:7:81
  |
7 |       fn fmt(&amp;amp;self, fmt: &amp;amp;mut std::fmt::Formatter) -&amp;gt; Result&amp;lt;(), std::fmt::Error&amp;gt; {
  |  _________________________________________________________________________________^
8 | |         write!(fmt, &amp;quot;{} ({} years old)&amp;quot;, self.name, self.age);
  | |                                                              - help: consider removing this semicolon
9 | |     }
  | |_____^ expected enum `std::result::Result`, found ()
  |
  = note: expected type `std::result::Result&amp;lt;(), std::fmt::Error&amp;gt;`
             found type `()`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is potentially a huge confusion in Rust. Let me point out
something else that you may have noticed, especially if you come from
a C&#x2F;C++&#x2F;Java background: we have a return value from our method, but
we never used &lt;code&gt;return&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The answer to that second concern is easy: the last value generated in
a function in Rust is taken as its return value. This is similar to
Ruby and—yet again—Haskell. &lt;code&gt;return&lt;&#x2F;code&gt; is only needed for
early termination.&lt;&#x2F;p&gt;
&lt;p&gt;But we&#x27;re still left with our first question: why don&#x27;t we need a
semicolon here, and why does adding the semicolon break our code?
Semicolons in Rust are used for terminating &lt;em&gt;statements&lt;&#x2F;em&gt;. A statement
is something like the &lt;code&gt;use&lt;&#x2F;code&gt; statement we saw before, or the &lt;code&gt;let&lt;&#x2F;code&gt;
statement we briefly demonstrated here. The value of a
statement is always unit, or &lt;code&gt;()&lt;&#x2F;code&gt;. That&#x27;s why, when we add the
semicolon, the error message says &lt;code&gt;found type `()` &lt;&#x2F;code&gt;. Leaving off
the semicolon, the expression itself is the return value, which is
what we want.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll see the phrase that Rust is an &lt;em&gt;expression-oriented language&lt;&#x2F;em&gt;,
and this kind of thing is what it&#x27;s referring to. You can &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;en-US&#x2F;faq.html#when-should-i-use-an-implicit-return&quot;&gt;see mention
of this in the
FAQ&lt;&#x2F;a&gt;. Personally,
I find that the usage of semicolon like this can be subtle, and I
still instinctively trip up on it occasionally when my C&#x2F;C++&#x2F;Java
habits kick in. But fortunately the compiler helps identify these
pretty quickly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;numeric-types&quot;&gt;Numeric types&lt;&#x2F;h2&gt;
&lt;p&gt;Last concept before we just start dropping in some code. We&#x27;re going
to start off by playing with numeric values. There&#x27;s a really good
reason for this in Rust: they are &lt;em&gt;copy values&lt;&#x2F;em&gt;, values which the
compiler automatically clones for us. Keep in mind that a
big part of Rust is ownership, and tracking who owns what is
non-trivial. However, with the primitive numeric types, making copies
of the values is so cheap, the compiler will do it for you
automatically. This is some of that automatic magic I mentioned in my
intro post.&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate, let&#x27;s check out some code that works fine with numeric
types:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve used a &lt;em&gt;let statement&lt;&#x2F;em&gt; to create a new variable, &lt;code&gt;val&lt;&#x2F;code&gt;. We&#x27;ve
explicitly stated that its type is &lt;code&gt;i32&lt;&#x2F;code&gt;, or a 32-bit signed
integer. Typically, these kinds of type annotations are not needed in
Rust, as it will usually be able to infer types. Try leaving off the
type annotation here. Anyway, we then call the function &lt;code&gt;printer&lt;&#x2F;code&gt; on
&lt;code&gt;val&lt;&#x2F;code&gt; twice. All good.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s use a &lt;code&gt;String&lt;&#x2F;code&gt; instead. A &lt;code&gt;String&lt;&#x2F;code&gt; is a heap-allocated
value which can be created from a string literal with
&lt;code&gt;String::from&lt;&#x2F;code&gt;. (Much more on the many string types later). It&#x27;s
expensive to copy a &lt;code&gt;String&lt;&#x2F;code&gt;, so the compiler won&#x27;t do it for us
automatically. Therefore, this code won&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(val);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: String) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, val);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll get this intimidating error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error[E0382]: use of moved value: `val`
 --&amp;gt; src&#x2F;main.rs:4:13
  |
3 |     printer(val);
  |             --- value moved here
4 |     printer(val);
  |             ^^^ value used here after move
  |
  = note: move occurs because `val` has type `std::string::String`, which does not implement the `Copy` trait

error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 1&lt;&#x2F;strong&gt; there are two easy ways to fix this error message: one
using the &lt;code&gt;clone()&lt;&#x2F;code&gt; method of &lt;code&gt;String&lt;&#x2F;code&gt;, and one that changes &lt;code&gt;printer&lt;&#x2F;code&gt;
to take a reference to a &lt;code&gt;String&lt;&#x2F;code&gt;. Implement both
solutions. (Solutions will be posted separately in a few days.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;printing-numbers&quot;&gt;Printing numbers&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to tie off this lesson with a demonstration of three
different ways of looping to print the numbers 1 to 10. I&#x27;ll let
readers guess which is the most idiomatic approach.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loop&quot;&gt;loop&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;loop&lt;&#x2F;code&gt; creates an infinite loop.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
            i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Exercise 2&lt;&#x2F;strong&gt; This code doesn&#x27;t quite work. Try to figure out why
without asking the compiler. If you can&#x27;t find the problem, try to
compile it. Then fix the code.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re wondering: you could equivalently use &lt;code&gt;return&lt;&#x2F;code&gt; or &lt;code&gt;return ()&lt;&#x2F;code&gt; to exit the loop, since the end of the loop is also the end of the
function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;while&quot;&gt;while&lt;&#x2F;h3&gt;
&lt;p&gt;This is similar to C-style while loops: it takes a condition to check.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
        i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the same bug as the previous example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-loops&quot;&gt;for loops&lt;&#x2F;h3&gt;
&lt;p&gt;For loops let you perform some action for each value in a
collection. The collections are generated lazily using iterators, a
great concept built right into the language in Rust. Iterators are
somewhat similar to generators in Python.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercise-3-extra-semicolons&quot;&gt;Exercise 3: Extra semicolons&lt;&#x2F;h2&gt;
&lt;p&gt;Can you leave out any semicolons in the examples above? Instead of
just slamming code into the compiler, try to think through when you
can and cannot drop the semicolons.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise-4-fizzbuzz&quot;&gt;Exercise 4: FizzBuzz&lt;&#x2F;h2&gt;
&lt;p&gt;Implement fizzbuzz in Rust. The rules are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Print the numbers 1 to 100&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 3, output fizz instead of the number&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 5, output buzz instead of the number&lt;&#x2F;li&gt;
&lt;li&gt;If the number is a multiple of 3 &lt;strong&gt;and&lt;&#x2F;strong&gt; 5, output fizzbuzz instead of the number&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h2&gt;
&lt;p&gt;Next time, the plan is to get into more details on ownership, though
plans are quite malleable in this series. Stay tuned!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust at FP Complete&lt;&#x2F;a&gt; | &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;introducing-rust-crash-course&quot;&gt;Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Is it healthy? Depends on context</title>
		<published>2018-10-19T00:00:00+00:00</published>
		<updated>2018-10-19T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/is-it-healthy-depends-on-context/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/is-it-healthy-depends-on-context/</id>
		<content type="html">&lt;p&gt;Some relevant backstory: I&#x27;ve been experimenting quite a bit over the
past 6 months to see how I respond to different eating
patterns. Included in that have been a few months of high carb
consumption, focusing mostly on starches as an energy source. However,
I&#x27;m generally in a low-carb mode, and my family are pretty familiar
with that. With that information...&lt;&#x2F;p&gt;
&lt;p&gt;A family member recently asked me why oatmeal is healthy. The question
makes sense: if I typically avoid carbohydrates, why would
oatmeal—a food I ate quite a bit of during that high carb
phase—be a healthy choice?&lt;&#x2F;p&gt;
&lt;p&gt;In that conversation, I introduced the concept of &lt;em&gt;context&lt;&#x2F;em&gt; for
diet. This isn&#x27;t a novel concept I&#x27;ve come up with, but I wanted to
explain it here anyway. Let&#x27;s start off with the extreme versions of
this.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Is sugar healthy?&amp;quot; I&#x27;ve written plenty here already claiming that
sugar is &lt;em&gt;not&lt;&#x2F;em&gt; healthy. However, if someone is about to die due to
lack of sufficient calories, sugar would be &lt;em&gt;very&lt;&#x2F;em&gt; healthy (it will
prevent imminent death).&lt;&#x2F;p&gt;
&lt;p&gt;Which is healthier: a cheeseburger or a cucumber? Most people probably
think the cucumber. In the context of modern Western disease, where
overconsumption is rampant, the cucumber is probably
healthier. However, the cheeseburger includes more micronutrients, and
for someone with a deficiency may be considered healthier.&lt;&#x2F;p&gt;
&lt;p&gt;Coming back to the oatmeal. When I was following a high carb diet, I
considered oatmeal a healthy choice (others may disagree). I was
eating a whole grain, so taking in significant fiber with the
starch. To my knowledge, I have no insulin resistance, and therefore
can tolerate carbohydrates well. Oatmeal is satiating, making it less
likely that I would overeat it. And it provides a decent amount of
protein, something which I was looking for in my context (significant
resistance training).&lt;&#x2F;p&gt;
&lt;p&gt;Right now, I&#x27;m eating a ketogenic diet. If I was to eat a bowl of
oatmeal, it would kick me out of ketosis and spike my insulin. All of
that fat that I&#x27;m eating during this keto phase would likely end up
getting stored as body fat, something I&#x27;m trying to avoid. It would be
a terrible idea.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, during that high carb phase, if I&#x27;d eaten a super-high-fat
meal like I do right now, most of that fat would have gone to storage
instead of to providing my body&#x27;s energy needs.&lt;&#x2F;p&gt;
&lt;p&gt;Keep this in mind when making nutrition choices. Even if someone else
who is highly health conscious is eating it, it may not be the right
choice for you. Make sure to analyze:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your goals (gain weight, perform in the gym, etc)&lt;&#x2F;li&gt;
&lt;li&gt;Any specific aspects of your body (autoimmune, insulin resistance,
current weight, etc) relevant to the decision&lt;&#x2F;li&gt;
&lt;li&gt;What activities you&#x27;re performing (someone with a desk job doesn&#x27;t
need as many calories as a marathon runner)&lt;&#x2F;li&gt;
&lt;li&gt;What the rest of your diet looks like&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, if you&#x27;re vegan, vegetarian, or keep kosher, that cheeseburger I
mentioned above is probably &lt;em&gt;always&lt;&#x2F;em&gt; a bad choice.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing the Rust crash course</title>
		<published>2018-10-18T00:00:00+00:00</published>
		<updated>2018-10-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course/</id>
		<content type="html">&lt;p&gt;I&#x27;m announcing an upcoming series of blog posts, which I&#x27;m calling the
Rust crash course. In this blog post, I want to explain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why I&#x27;m interested in Rust&lt;&#x2F;li&gt;
&lt;li&gt;Why I&#x27;m writing up this series&lt;&#x2F;li&gt;
&lt;li&gt;Who this series is for&lt;&#x2F;li&gt;
&lt;li&gt;My intended flavor for the series&lt;&#x2F;li&gt;
&lt;li&gt;Some examples of Rust gotchas I want to cover&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m getting to work on this series due to &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;increased Rust usage at FP Complete&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-rust&quot;&gt;Why Rust?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m a strong believer in using the compiler to help eliminate bugs. No
programming language can eliminate all bugs and even the best
designed language will typically need to leave developers plenty of
wiggle room to shoot themselves in the foot. Still, there&#x27;s
significant value in safety and long term maintainability of projects
that use languages with this focus.&lt;&#x2F;p&gt;
&lt;p&gt;For about ten years now, my primary language has been (and continues
to be) Haskell. It gets a lot of things right here, such as
immutability, explicit effects, and strong typing. But I&#x27;ve got two
problems with an intense focus on Haskell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s always something to be learned from other languages. It&#x27;s
quite easy to fall into the trap of knowing one language well, and
becoming blind to its shortcomings. Haskell is now the language I&#x27;ve
used for the longest stretch of time as a primary language, finally
displacing Java. I need to avoid this trap.&lt;&#x2F;li&gt;
&lt;li&gt;There are some legitimate technical advantages of Rust:
&lt;ul&gt;
&lt;li&gt;Performance is better, and more reliable as well, relying less
upon things like rewrite rules firing&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s got a better story right now for mobile and frontend
development&lt;&#x2F;li&gt;
&lt;li&gt;Lack of garbage collection opens up new possibilities in real
time development&lt;&#x2F;li&gt;
&lt;li&gt;Rust improves on Haskell&#x27;s safety guarantees in some places,
such as defaulting to requiring complete pattern matches&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Like many others, I&#x27;ve been hearing a buzz around Rust for years. Two
or so years ago, I started playing around with it more, and have been
steadily dedicating more personal time to it. But recently, we&#x27;ve had
more &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;rust&quot;&gt;Rust interest at work&lt;&#x2F;a&gt;, and therefore we&#x27;ve been
expanding our internal Rust team.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-series&quot;&gt;Why this series?&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re a globally distributed team at FP Complete, and we make a heavy
push towards using written communication tools wherever possible. This
also overlaps heavily with training material. As I do more training
(both internally, and for customers), I&#x27;m discovering places where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m finding my own knowledge of the language was lacking&lt;&#x2F;li&gt;
&lt;li&gt;Newcomers are stumbling hard&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This series is intended to collect both initial pointers of how to get
started with Rust, and hard-learned lessons of how to avoid getting
stuck. Some of these stumbling blocks may favor the kind of audience
I&#x27;m working with directly (lots of Haskell and DevOps engineers), but
that will likely change over time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;target-audience&quot;&gt;Target audience&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m gearing this series towards the Rust curious. I&#x27;m assuming programming
knowledge, and some basic idea of what Rust is about, but no real knowledge of
the language itself. I&#x27;ll try to call out when you should go read the Rust
book.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a Java user, a Rubyist, or a Haskeller, and Rust intrigues you, I
hope this will help you. And maybe even Rustaceans will enjoy seeing the pain
points I find myself and others are hitting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flavor-of-the-series&quot;&gt;Flavor of the series&lt;&#x2F;h2&gt;
&lt;p&gt;There is already &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;en-US&#x2F;documentation.html&quot;&gt;really good
material&lt;&#x2F;a&gt; on Rust
available from rust-lang.org. I have no intention of trying to replace
that. Instead, I&#x27;ll assume that people are reading through &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;the Rust
book&lt;&#x2F;a&gt;, and point to sections where
appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;One concrete example: I don&#x27;t intend to spend a lot of time talking
about Rust syntax, or explaining that it&#x27;s an expression-oriented
language. The book covers that.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I want to give people:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Real code to look at and play with&lt;&#x2F;li&gt;
&lt;li&gt;Simple problems to build up experience with&lt;&#x2F;li&gt;
&lt;li&gt;Explanations of tricky cases that catch people up&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And on that note...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-gotchas&quot;&gt;Rust gotchas&lt;&#x2F;h2&gt;
&lt;p&gt;A few people on Twitter asked me to share some Rust gotchas,
especially coming from the perspective of a Haskell developer. I&#x27;ll
certainly be covering more gotchas going forward, but I wanted to give
some examples in this first post so you can get a feel for the kinds
of things we&#x27;ll be addressing in the series. I&#x27;m &lt;em&gt;not&lt;&#x2F;em&gt; going to be
explaining details of these problems here; that&#x27;s what the series is
for!&lt;&#x2F;p&gt;
&lt;p&gt;Just so you know: there&#x27;s no content following these examples, besides
the Disqus comments below. If you&#x27;re not interested in the gotchas,
feel free to quit reading now and &lt;a href=&quot;&#x2F;feed&#x2F;rust-crash-course&quot;&gt;stay
tuned&lt;&#x2F;a&gt; for more posts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutable-values-mutable-variables&quot;&gt;Mutable values, mutable variables&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve got a simple mental model in Haskell. Values are all immutable,
period. A few special reference types allow me to mutate their
contents. And mutating like that is an effect tracked in the type
system.&lt;&#x2F;p&gt;
&lt;p&gt;From that perspective, Rust is a bit surprising. Here&#x27;s one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(i);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, j);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    i
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wait a second... &lt;code&gt;i&lt;&#x2F;code&gt; is immutable. Then I pass it to &lt;code&gt;foo&lt;&#x2F;code&gt;, and it
becomes mutable. Then I return this mutable value as an immutable
value. &lt;em&gt;What?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I assure you, this ultimately makes sense, but it&#x27;s kind of
surprising. Also, the fact that &lt;code&gt;x: &amp;amp;mut isize&lt;&#x2F;code&gt; and &lt;code&gt;mut x: &amp;amp;mut isize&lt;&#x2F;code&gt; are both real things that mean different things:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; j);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, i, j);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;#39;a mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;isize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    *i *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    i = j;
    *i *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;so-many-strings&quot;&gt;So many strings&lt;&#x2F;h3&gt;
&lt;p&gt;I was warned about this one and blew it off. I thought to myself
there&#x27;s no way a Haskeller, trained in the arts of &lt;code&gt;String&lt;&#x2F;code&gt;, strict
&lt;code&gt;Text&lt;&#x2F;code&gt;, lazy &lt;code&gt;Text&lt;&#x2F;code&gt;, &lt;code&gt;ByteString&lt;&#x2F;code&gt;s and more could be daunted. I was
wrong.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hello1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hello2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, hello!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, hello1 + name);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, name + hello2);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nope, the code above doesn&#x27;t compile.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;magically-works-until-it-doesn-t&quot;&gt;Magically works, until it doesn&#x27;t&lt;&#x2F;h3&gt;
&lt;p&gt;There are a number of &amp;quot;magic&amp;quot; things that happen in Rust in the name
of ergonomics. Often, they work perfectly and save a lot of
frustration. And sometimes, they fail. Look at this broken code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;respond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(arg);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;respond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello there!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;OK, goodbye!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_ =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sorry, I don&amp;#39;t know what &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; means&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll get an error message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;expected &amp;amp;str, found struct `std::string::String`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, well that makes sense! I need to get a reference to a &lt;code&gt;str&lt;&#x2F;code&gt; instead of the &lt;code&gt;String&lt;&#x2F;code&gt; I got from &lt;code&gt;args()&lt;&#x2F;code&gt;. Easy enough to fix:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;respond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;arg);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But then I realize that the respond function is silly and inline the
&lt;code&gt;match&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;arg {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello there!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bye&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;OK, goodbye!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;_ =&amp;gt; println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Sorry, I don&amp;#39;t know what &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; means&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, arg),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I remembered to match on &lt;code&gt;&amp;amp;arg&lt;&#x2F;code&gt; instead of &lt;code&gt;arg&lt;&#x2F;code&gt;, so you&#x27;d think it
would be fine. But it isn&#x27;t:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;  |             ^^^^ expected struct `std::string::String`, found str
  |
  = note: expected type `&amp;amp;std::string::String`
             found type `&amp;amp;&amp;#39;static str`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Huh, that&#x27;s weird. In order to figure out what&#x27;s going on here, you
have to understand quite a few details of the deref magic going on
behind the scenes. I dare say some of this magic is even a leaky
abstraction. (Don&#x27;t worry, it&#x27;s still zero cost.) You can solve this
with either:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*arg {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; arg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;moving-data-into-closures&quot;&gt;Moving data into closures&lt;&#x2F;h3&gt;
&lt;p&gt;The biggest pain points I&#x27;ve encountered so far in my Rust odyssey are
all around moving data into closures. I&#x27;ve been spoiled by Haskell: I
like to use closures constantly, and am used to garbage collection
just letting it all magically work.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve got some &lt;em&gt;real&lt;&#x2F;em&gt; head scratchers to demonstrate later, but have
fun with this relatively simple example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hello = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;greet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| hello + name;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>RAII is better than the bracket pattern</title>
		<published>2018-10-08T00:00:00+00:00</published>
		<updated>2018-10-08T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/raii-better-than-bracket-pattern/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/raii-better-than-bracket-pattern/</id>
		<content type="html">&lt;p&gt;I recently wrote an &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;&quot;&gt;FP Complete&lt;&#x2F;a&gt; blog post entitled &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2018&#x2F;10&#x2F;resourcet-necessary-evil&quot;&gt;ResourceT: A necessary evil&lt;&#x2F;a&gt;. I had a line in that post I wanted to expand upon:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe this is an area where the RAII (Resource Acquisition Is Initialization) approach in both C++ and Rust leads to a nicer solution than even our bracket pattern in Haskell, by (mostly) avoiding the possibility of a premature close.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;static&#x2F;io-thief.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;IO Thief&quot; src=&quot;&#x2F;static&#x2F;io-thief.jpg&quot; style=&quot;max-width:100%;width:300px;margin:0 auto;display:block;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate what I&#x27;m talking about, let&#x27;s first see an example of the problem in Haskell. First, the good code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bracket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO MyResource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;newMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Creating a new MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  pure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;closeMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;closeMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Closing MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;withMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bracket newMyResource closeMyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;useMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;useMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; withMyResource useMyResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is correct usage of the bracket pattern, and results in the output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Creating a new MyResource
Using MyResource
Closing MyResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re guaranteed that &lt;code&gt;MyResource&lt;&#x2F;code&gt; will be closed even in the presence of exceptions, and &lt;code&gt;MyResource&lt;&#x2F;code&gt; is closed after we&#x27;re done using it. However, it&#x27;s not too difficult to misuse this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  myResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; withMyResource pure
  useMyResource myResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in the output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Creating a new MyResource
Closing MyResource
Using MyResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re still guaranteed that &lt;code&gt;MyResource&lt;&#x2F;code&gt; will be closed, but now we&#x27;re using it &lt;em&gt;after&lt;&#x2F;em&gt; it was closed! This may look like a contrived example, and easy to spot in code. However:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Many of us choose Haskell because it forces programming errors to be caught at compile time. This is an error which is definitely &lt;em&gt;not&lt;&#x2F;em&gt; caught at compile time.&lt;&#x2F;li&gt;
&lt;li&gt;In larger code examples, it&#x27;s easier for this kind of misuse of the bracket pattern to slip in and evade notice.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;rust&quot;&gt;Rust&lt;&#x2F;h2&gt;
&lt;p&gt;By contrast, with the RAII approach in Rust, this kind of thing can&#x27;t happen under normal circumstances. (Sure, you can use unsafe code, and there might be other cases I&#x27;m unaware of.) Check this out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; MyResource {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Creating a new MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
        MyResource()
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Closing MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; my_resource = MyResource::new();
    my_resource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Despite looking closer to the bad Haskell code, it still generates the right output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Creating a new MyResource
Using MyResource
Closing MyResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In fact, try as I might, I cannot figure out a way to get this to close the resource before using it. For example, this is a compile error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; my_resource = MyResource::new();
    std::mem::drop(my_resource);
    my_resource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this works just fine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;create_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&amp;gt; MyResource {
    MyResource::new()
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; my_resource = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;create_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
    my_resource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;use_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The life time of the value is determined correctly and only dropped at the end of &lt;code&gt;main&lt;&#x2F;code&gt;, not the end of &lt;code&gt;create_it&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fixing-it-in-haskell&quot;&gt;Fixing it in Haskell&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt; In my efforts to make this as simple as possible, I included a &amp;quot;solution&amp;quot; that&#x27;s got a massive hole in it. It still demonstrates the basic idea correctly, but if you want &lt;em&gt;actual&lt;&#x2F;em&gt; guarantees, you&#x27;ll need to include the phantom type variable on the monad as well. See &lt;a href=&quot;http:&#x2F;&#x2F;disq.us&#x2F;p&#x2F;1we3o1q&quot;&gt;Dominique&#x27;s comment&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;We can use a similar approach as the &lt;code&gt;ST&lt;&#x2F;code&gt; strict state transformer via a phantom variable to apply a &amp;quot;lifetime&amp;quot; to the &lt;code&gt;MyResource&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; RankNTypes #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bracket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
newMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Creating a new MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  pure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;closeMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;closeMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Closing MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;forall s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;withMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bracket newMyResource closeMyResource

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;useMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyResource s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;useMyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MyResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Using MyResource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; withMyResource useMyResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the bad version of the code won&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  myResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; withMyResource pure
  useMyResource myResource
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Results in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Main.hs:22:32: error:
    • Couldn&amp;#39;t match type ‘s0’ with ‘s’
        because type variable ‘s’ would escape its scope
      This (rigid, skolem) type variable is bound by
        a type expected by the context:
          forall s. MyResource s -&amp;gt; IO (MyResource s0)
        at Main.hs:22:17-35
      Expected type: MyResource s -&amp;gt; IO (MyResource s0)
        Actual type: MyResource s0 -&amp;gt; IO (MyResource s0)
    • In the first argument of ‘withMyResource’, namely ‘pure’
      In a stmt of a &amp;#39;do&amp;#39; block: myResource &amp;lt;- withMyResource pure
      In the expression:
        do myResource &amp;lt;- withMyResource pure
           useMyResource myResource
   |
22 |   myResource &amp;lt;- withMyResource pure
   |                                ^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach isn&#x27;t used much in the Haskell world, and definitely has overhead versus Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need to add a type variable to all resource types, which gives more things to juggle&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s non-trivial to deal with promoting values beyond their original scope (like we did in Rust with passing outside of the &lt;code&gt;create_it&lt;&#x2F;code&gt; function)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As I mentioned in the original blog post, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;basvandijk&#x2F;regions#readme&quot;&gt;regions&lt;&#x2F;a&gt; based on &lt;a href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Haskell&#x2F;regions.html#light-weight&quot;&gt;a paper by Oleg&lt;&#x2F;a&gt; explores this kind of idea in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How I research health</title>
		<published>2018-10-02T00:00:00+00:00</published>
		<updated>2018-10-02T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/10/how-i-research-health/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/10/how-i-research-health/</id>
		<content type="html">&lt;p&gt;I&#x27;d like to present two fairly straightforward points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;ve written multiple blog posts on health related topics&lt;&#x2F;li&gt;
&lt;li&gt;I have absolutely no formal training on the topic, and there&#x27;s no
reason people should take my blog posts as authoratative&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That said, I continue to write these blog posts, share information
with friends and family, and make decisions for myself. How do I
reconcile this? How do I approach the truly terrifying level of
contradictory information available in the health&#x2F;nutrition&#x2F;exercise
landscape? How do I want other people reading content from me to
relate to it, given that I&#x27;m a self-acknowledged non-expert?&lt;&#x2F;p&gt;
&lt;p&gt;I strongly believe that the biggest hurdle for people to adopt healthy
lifestyle choices these days is knowing where to begin (with willpower
to do so in second place). Are you supposed to follow low carb, or low
fat? Jog, or sprint? Body weight training, or free weights?&lt;&#x2F;p&gt;
&lt;p&gt;In general, this is similar to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Paradox_of_Choice&quot;&gt;Paradox of
Choice&lt;&#x2F;a&gt;, only
worse: not only can you become paralyzed by the sheer number of
options out there, but you can &lt;em&gt;also&lt;&#x2F;em&gt; be paralyzed by the fact that
different sources will claim that each alternative &lt;em&gt;will actively harm
you&lt;&#x2F;em&gt;. Given that landscape, it&#x27;s only natural for people to walk away
saying &amp;quot;the experts are just going to change their minds in 10 years,
there&#x27;s no point trying to make changes to my lifestyle.&amp;quot; And I should
know: I felt that way for years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-process&quot;&gt;My process&lt;&#x2F;h2&gt;
&lt;p&gt;Having established my credentials as a non-expert in this field,
here&#x27;s how I&#x27;ve approached gathering knowledge and making decisions on
the topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trust very little.&lt;&#x2F;strong&gt; If &amp;quot;experts&amp;quot; can completely contradict each
other, blindly trusting &amp;quot;experts&amp;quot; is impossible. You&#x27;ll end up on a
low-fat, low-carb, vegan, carnivore diet. In other words, you&#x27;ll
starve yourself to death. Except the experts &lt;em&gt;also&lt;&#x2F;em&gt; say not to use
fasting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Listen to everything.&lt;&#x2F;strong&gt; This may sound contradictory to my
previous point, but it&#x27;s not. You should read, listen to podcasts,
watch videos, and consume any other content from as varied a set of
sources as you can. Take them all into account, but don&#x27;t &lt;em&gt;blindly
trust&lt;&#x2F;em&gt; anything. Look for patterns in the recommendations. Pay
attention to the inconsistencies. Watch for trends. This may help
guide you towards some relatively uncontroversial opinions (e.g.,
&amp;quot;avoid processed foods,&amp;quot; &amp;quot;don&#x27;t eat unless you&#x27;re hungry&amp;quot;), and help
you understand better what the current debates are all about.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Dig into the sources.&lt;&#x2F;strong&gt; This stage is honestly optional, but I
find it enjoyable because I like this stuff. Having understood where
the &amp;quot;authorities&amp;quot; are arguing, look at their sources, and others
they don&#x27;t provide. Read nutrition studies and reviews. It may help
you understand how those &amp;quot;authorities&amp;quot; are misrepresenting some
facts, for example. Accept the fact that even these primary sources
are going to contradict, but see if you can parse through the
contradictions. Example: it&#x27;s very common for &amp;quot;low carb&amp;quot; studies to
come up with vastly different results; pay attention to if they&#x27;re
using the same definition of &amp;quot;low carb.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Experiment on yourself.&lt;&#x2F;strong&gt; Sample size 1 experiments without a
double blind control aren&#x27;t real science. Fair enough. But they do
tell you a lot about your own body and how you respond. Even if it&#x27;s
the placebo effect, it&#x27;s still an effect. If you get a headache
every time you eat X, even if all of the studies say it helps with
headaches... maybe don&#x27;t eat X. (Intentionally not giving a concrete
example, I don&#x27;t want to cause a placebo effect in anyone.)
&lt;ul&gt;
&lt;li&gt;One caveat I always feel obligated to restate: &lt;strong&gt;I am not a
doctor&lt;&#x2F;strong&gt;. My advice is just the advice of someone who doesn&#x27;t
know anything. If you have medical conditions, or specific
medical instructions, I am &lt;strong&gt;absolutely not telling you to
ignore them&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;my-sources&quot;&gt;My sources&lt;&#x2F;h2&gt;
&lt;p&gt;My sources of information these days tend towards voices in the low
carb and barbell training communities. More on how I ended up here a
bit below. As I said above, I&#x27;d strongly recommend gathering &lt;em&gt;many&lt;&#x2F;em&gt;
different sources. And even if you disagree with one side (e.g.,
you&#x27;re either pro- or anti-vegan), I suggest finding the best sources
on each side that you can.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the sources I read or listen to.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;drjasonfung&quot;&gt;Dr Jason Fung&lt;&#x2F;a&gt;. I&#x27;ve read two of
his books:&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.barbellmedicine.com&#x2F;&quot;&gt;Barbell Medicine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;startingstrength.com&#x2F;&quot;&gt;Starting Strength&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCqYPhGiB9tkShZorfgcL2lA&quot;&gt;What I&#x27;ve Learned&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.marksdailyapple.com&#x2F;&quot;&gt;Mark&#x27;s Daily Apple&lt;&#x2F;a&gt;. In
particular, his &amp;quot;Weekend Link Love&amp;quot; Sunday post is a &lt;em&gt;wonderful&lt;&#x2F;em&gt;
collection of links.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;icecream4PRs&#x2F;featured&quot;&gt;Jeff Nippard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Dr Robert Lustig&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dBnniua6-oM&quot;&gt;Sugar: The Bitter Truth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCcTTiHZtNpiqD2EubIO5HFw&quot;&gt;Low Carb Down Under&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And books I&#x27;ve read and recommend:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Obesity Code&lt;&#x2F;li&gt;
&lt;li&gt;The Complete Guide to Fasting&lt;&#x2F;li&gt;
&lt;li&gt;The Hungry Brain&lt;&#x2F;li&gt;
&lt;li&gt;The Case Against Sugar&lt;&#x2F;li&gt;
&lt;li&gt;The Secret Life of Fat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some notes on these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Hungry Brain and The Case Against Sugar are in many ways
contradictory. However, as I&#x27;ll mention below, I think they can
complement each other.&lt;&#x2F;li&gt;
&lt;li&gt;I got less out of The Complete Guide to Fasting than I expected. It
was interesting and motivational, but I was already motivated to try
fasting. If you want to know &lt;em&gt;why&lt;&#x2F;em&gt; you should try fasting, read
it. If you just want to do it: feel free to just fast :)&lt;&#x2F;li&gt;
&lt;li&gt;Similarly, The Secret Life of Fat was more theoretical on topics I
was less interested in, and didn&#x27;t lend much on the practical
side. Still a good collection of information.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;my-filters&quot;&gt;My filters&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s a huge amount of information out there. It&#x27;s simply not
humanly possible to read everything, experiment with everything,
etc. You&#x27;ll need to ultimately install some filters to help you parse
through the information. Here are some I use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I like to be educated on a topic. But if it doesn&#x27;t affect me
personally, or I&#x27;m happy with my approach for the moment, I&#x27;ll stop
focusing on it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I believe sources are biased. This applies to me (as I tried to
point out a bit above, and will do more so of soon). As a religious
Jew, I use this example: if a Rabbi told me that eating pork was
unhealthy, I would distrust him. I believe there&#x27;s quite a bit of
that in the health space, where moral arguments end up influencing,
for example, complete avoidance of animal products or using only
humanely raised products. I&#x27;m not going to comment here on the moral
arguments at all, but I will say that I think they bias many
proponents. Similarly, people who have made a career on advocating a
certain dietary or exercise approach will have a vested interest in
continue to espouse it, despite new evidence contradicting.&lt;&#x2F;p&gt;
&lt;p&gt;We can&#x27;t eliminate this bias, it&#x27;s human nature. My best advice, and
what I try to do, is to identify it, and weigh arguments. When
possible, I try to find less-biased sources on topics, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=_qoyoItiB1E&quot;&gt;Jeff
Nippard&#x27;s video on vegan diet
science&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After I get into a rut of a specific approach, I try to force myself
to listen to contradicting views again. It&#x27;s enlightening to see how
I will react negatively on hearing the arguments. I try hard to
force myself to get past my own biases and judge the information on
its own. Basically: when I listen to a video or read a
post&#x2F;article&#x2F;book, I try to turn off my falsehood filter
temporarily, absorb the information, and only analyze its veracity
after the fact.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m currently actively looking for information sources which are more
positive of high-carb and vegan eating approaches. The sources I&#x27;ve
found so far typically have been too moralistic (eating animals is
bad) or authoritarian (all major organizations support what we say)
for my taste. I&#x27;d be happy if people want to leave some
recommendations below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-biases&quot;&gt;My biases&lt;&#x2F;h2&gt;
&lt;p&gt;This section is mostly irrelevant, but for those curious, I want to be
more explicit about my current biases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I believe resistance training is overall more important to health
than cardio. Of resistance training, I believe weight training is
easier to improve with than bodyweights or resistance bands. And of
weight training, freeweights (barbells in particular) give the best
results, though require significant effort in learning the form. And
you&#x27;ll never beat deadlifts for back problems.&lt;&#x2F;li&gt;
&lt;li&gt;Sugar is the worst part of our diets today. You should avoid it like
the plague. I&#x27;m mixed on artificial sweeteners.&lt;&#x2F;li&gt;
&lt;li&gt;Vegetable oil is almost as bad as sugar.&lt;&#x2F;li&gt;
&lt;li&gt;Both low carb and low fat work really well. But overall, low carb is
easier to lose weight with and adhere to.&lt;&#x2F;li&gt;
&lt;li&gt;The simple rule of &amp;quot;no processed foods&amp;quot; will solve about 80% of diet
problems, if you include sugar, vegetable oil, and refined grains as
processed foods.&lt;&#x2F;li&gt;
&lt;li&gt;Fasting (intermittent, multiday, etc), are healthy. Not only are
they good &lt;em&gt;physically&lt;&#x2F;em&gt;, but more importantly they prove to yourself
that you&#x27;re stronger than you think.&lt;&#x2F;li&gt;
&lt;li&gt;While hormones are an important part of obesity, and likely the
prime factor (constantly high insulin), the approach in &amp;quot;The Hungry
Brain&amp;quot; of highly palatable foods&#x2F;food reward causing overconsumption
of calories seems to be a factor. (I might even say it&#x27;s &lt;em&gt;obviously&lt;&#x2F;em&gt;
a factor.) Despite much public attention, I don&#x27;t see the hormone
and food reward hypotheses as completely conflicting, and believe
both should be paid attention to for optimizing health.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kids Coding, Part 3</title>
		<published>2018-08-28T00:00:00+00:00</published>
		<updated>2018-08-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/08/kids-coding-part-3/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/08/kids-coding-part-3/</id>
		<content type="html">&lt;p&gt;Eliezer asked me a few questions about programming yesterday, and I
ended up demonstrating a little bit about pattern matching. He then
had a lot of fun showing a friend of his how programming works. I may
end up giving some lessons to some of my kids&#x27; friends in the next few
weeks, which should be interesting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kids-ide&quot;&gt;Kids IDE&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve started using a minimalistic &amp;quot;kids IDE&amp;quot; I threw together for
teaching the kids. It&#x27;s helped us not worry about details like
filepaths, saving, and running in a terminal. It&#x27;s not a great tool,
but good enough. I&#x27;ve included links to better tools in the README,
though this fits my needs for the moment.&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;kids-haskell-ide#readme&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve set up AppVeyor to upload Windows executables to S3:&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;www.snoyman.com&#x2F;kids-ide&#x2F;bin&#x2F;kids-ide.exe&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll also need to &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;install Stack&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pattern-matching-strings&quot;&gt;Pattern matching strings&lt;&#x2F;h2&gt;
&lt;p&gt;This morning, Eliezer and Gavriella both had their next &amp;quot;official&amp;quot;
lesson. I started over with that pattern matching
demonstration. First, I showed them this example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Eliezer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Gavriella&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Yakov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lavi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;

sayNickname realname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn (nickname realname)

nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Eliezer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Elie Belly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Gavriella&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Galla Galla&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lavi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fat baby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Yakov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Koko&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They got the basic idea of this. (And I ended up introducing
&lt;code&gt;putStrLn&lt;&#x2F;code&gt; around here as well, which they were fine with.) However,
as I had them typing out some of this on their own, they ended up with
a lot of trouble around capitalization, which was a good introduction
to Haskell&#x27;s rules around that. We&#x27;ll see how in a bit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pattern-matching-ints&quot;&gt;Pattern matching ints&lt;&#x2F;h2&gt;
&lt;p&gt;After establishing that we could pattern match on strings, I switched
the code to this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;

sayNickname realname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn (nickname realname)

nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Elie Belly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Gavriella&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Galla Galla&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lavi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fat baby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Yakov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Koko&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And gave them the challenge to rewrite &lt;code&gt;nickname&lt;&#x2F;code&gt; so that the code
worked, which wasn&#x27;t too much of a problem. The misordering of &lt;code&gt;Lavi&lt;&#x2F;code&gt;
and &lt;code&gt;Yakov&lt;&#x2F;code&gt; between &lt;code&gt;main&lt;&#x2F;code&gt; and &lt;code&gt;nickname&lt;&#x2F;code&gt; did cause some confusion,
and then helped them understand better how pattern matching works. (I
didn&#x27;t intentionally put that in, it somehow slipped in while the kids
were working on rewriting things.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-signatures&quot;&gt;Type signatures&lt;&#x2F;h2&gt;
&lt;p&gt;I asked them what the type of &lt;code&gt;nickname&lt;&#x2F;code&gt; was, and they said function
(yay!). And then explained to them that you can tell Haskell
explicitly what a thing&#x27;s type is, and typed this in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The funny syntax didn&#x27;t give them too much trouble, and then we got to
fill in the question marks. I asked them what the output of the
function was, pointing at the string. I was surprised: they said the
type was &amp;quot;nickname&amp;quot; or &amp;quot;name.&amp;quot; They accepted that it was a string, but
they didn&#x27;t like that. (New theory: humans&#x27; brains are naturally
strongly typed.)&lt;&#x2F;p&gt;
&lt;p&gt;I then asked what the input was, and they said &amp;quot;number.&amp;quot; I hadn&#x27;t
taught them about &lt;code&gt;Int&lt;&#x2F;code&gt; yet, and didn&#x27;t know about integers from math,
so I told them that integer is a kind of number, and that in Haskell
we call it &lt;code&gt;Int&lt;&#x2F;code&gt;. Filling in the type signature was fine.&lt;&#x2F;p&gt;
&lt;p&gt;I pointed out that some things (like &lt;code&gt;Int&lt;&#x2F;code&gt; and &lt;code&gt;String&lt;&#x2F;code&gt;) were upper
case, and some were lower case. I pointed out that concrete things
that &amp;quot;actually exist&amp;quot; (maybe not the best terminology) are
capitalized. We know what an &lt;code&gt;Int&lt;&#x2F;code&gt; is, for example. Variables are
things we don&#x27;t know yet, and those are lowercase. And finally, you
can put whatever you want inside a string, but it has to match
exactly. That seemed to click fairly well for them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enums&quot;&gt;Enums&lt;&#x2F;h2&gt;
&lt;p&gt;I pointed out that referring to the kids as numbers isn&#x27;t good. (He
responded that I actually &lt;em&gt;do&lt;&#x2F;em&gt; call them 1, 2, 4, and 8 sometimes...)
Anyway, I said that a better type for the &lt;code&gt;nickname&lt;&#x2F;code&gt; function would be
to take a &lt;code&gt;Child&lt;&#x2F;code&gt; as input. He said &amp;quot;can we say &lt;code&gt;Child = Int&lt;&#x2F;code&gt;,&amp;quot; which
was a great insight. I showed up that, yes, we can do &lt;code&gt;type Child = Int&lt;&#x2F;code&gt;, but that there&#x27;s a better way.&lt;&#x2F;p&gt;
&lt;p&gt;I introduced the idea that &lt;code&gt;data&lt;&#x2F;code&gt; defines a new datatype, and then
showed them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Child
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Gavriella
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Yakov
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Lavi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Gavriella asked &amp;quot;what are those lines?&amp;quot; and I explained they mean
&amp;quot;or.&amp;quot; Therefore, a child is Eliezer, or Gavriella, or Yakov, or
Lavi. They got this.&lt;&#x2F;p&gt;
&lt;p&gt;Exercise: fix the following program, uncommenting the lines in &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayNickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--sayNickname Gavriella
  --sayNickname Yakov
  --sayNickname Lavi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
sayNickname realname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn (nickname realname)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Child
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Gavriella
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Yakov
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Lavi

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;nickname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Elie Belly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--nickname 2 = &amp;quot;Galla Galla&amp;quot;
--nickname 3 = &amp;quot;Fat baby&amp;quot;
--nickname 4 = &amp;quot;Koko&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some caveats where they got stuck:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using lower case &lt;code&gt;lavi&lt;&#x2F;code&gt; instead of &lt;code&gt;Lavi&lt;&#x2F;code&gt;. I got to explain how
pattern matching a variable works, and &amp;quot;wildcards.&amp;quot; They got this,
though still needed to be coached on it.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;d been on the fence about including syntax highlighting in the
kids IDE, but it turns out that the different colors of
&lt;code&gt;Eliezer&lt;&#x2F;code&gt; and &lt;code&gt;lavi&lt;&#x2F;code&gt; helped Gavriella realize her mistake. Syntax
highlighting is a &lt;em&gt;good thing&lt;&#x2F;em&gt; here.&lt;&#x2F;li&gt;
&lt;li&gt;I did ultimately have to give her a hint: &amp;quot;Lavi is BIG but you made
him small.&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I started to try and define &lt;code&gt;data Person = Kid Child | Adult Parent&lt;&#x2F;code&gt;,
but realized quickly it was too complicated for now and aborted.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recursion&quot;&gt;Recursion&lt;&#x2F;h2&gt;
&lt;p&gt;I did &lt;em&gt;not&lt;&#x2F;em&gt; teach this well, the children did not get the concepts
correctly. However, they did understand the code as I wrote it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print total

total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;

addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They &lt;em&gt;really&lt;&#x2F;em&gt; hated how repetitive typing that out was, which was
exactly the goal. It was easy to convince them that this was stupid. I
then changed &lt;code&gt;total&lt;&#x2F;code&gt; to &lt;code&gt;addUp 11&lt;&#x2F;code&gt; and it broke. They understood why,
and so we started working on something better.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print total

total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;

addUp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
addUp x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; addUp (x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I stepped through the executable of this, complete with pattern
matching. Doing this a few times in the future is probably a good
idea.&lt;&#x2F;p&gt;
&lt;p&gt;Eliezer asked what happens if we remove the &lt;code&gt;addUp 0 = 0&lt;&#x2F;code&gt; case. We
discussed it, he said it wouldn&#x27;t work, and said it would &amp;quot;keep
going.&amp;quot; I told him it was called an infinite loop, and we got a stack
overflow. Good insight.&lt;&#x2F;p&gt;
&lt;p&gt;Gavriella asked how long it took me to learn this stuff. I told her 12
years; after all, I only started learning Haskell in my twenties. It
made them feel pretty good that they were learning this stuff earlier
than I did.&lt;&#x2F;p&gt;
&lt;p&gt;I gave them an exercise to implement &lt;code&gt;multTo&lt;&#x2F;code&gt; instead of &lt;code&gt;addUp&lt;&#x2F;code&gt;. They
didn&#x27;t understand this, or recursion, and I had to help them through
the whole thing. Mea culpa completely.&lt;&#x2F;p&gt;
&lt;p&gt;Gavriella asked for another exercise:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Gavriella&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Yakov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sayAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Lavi

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;

sayAge child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print (age child)

age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? = ?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;She typed something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? = ?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I showed her that she needed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Eliezer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then she got the rest just fine, though with a few capitalization
mistakes.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kids Coding, Part 2</title>
		<published>2018-08-24T00:00:00+00:00</published>
		<updated>2018-08-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/08/kids-coding-part-2/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/08/kids-coding-part-2/</id>
		<content type="html">&lt;p&gt;I didn&#x27;t expect to be writing the second blog post only 12 hours after the
first. But when the kids came downstairs this morning, they were unbelievably
excited to do more coding. So here we are!&lt;&#x2F;p&gt;
&lt;p&gt;Eliezer and I discussed using more visual tooling (like Code World or Jupiter)
for doing the learning, and I showed him what it looked like. It seems he&#x27;s got
quite a bit of his father&#x27;s preferences, and wanted to stick to plain text for
now. We&#x27;ll probably circle back to that kind of stuff after they get the
basics. It will also give me a chance to get more comfortable with those
offerings. (Thanks all for the recommendations on Reddit.)&lt;&#x2F;p&gt;
&lt;p&gt;One final note. I&#x27;m extremely happy that we went with Haskell after today&#x27;s
lessons. Concepts like variable replacement which are natural in Haskell were
great teaching tools. I obviously don&#x27;t have enough data to prove this yet, but
I&#x27;m more strongly believing the long-held theory that Haskell is easier for
brand new programmers than those familiar with imperative programming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-environment&quot;&gt;Coding environment&lt;&#x2F;h2&gt;
&lt;p&gt;I moved us over to VSCode, with only syntax highlighting set up. Previously,
I&#x27;d used my emacs setup with intero, and the red squiggles let them know they&#x27;d
messed up too early. I used the docked terminal at the bottom, taught them to
save, and showed them to press &amp;quot;up enter&amp;quot; in the terminal to rerun &lt;code&gt;stack runghc foo.hs&lt;&#x2F;code&gt;. Perhaps not the ideal setup, but definitely good enough.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Started with &lt;code&gt;main = print &amp;quot;hello world&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Explained that &lt;code&gt;main&lt;&#x2F;code&gt; is &lt;em&gt;defined&lt;&#x2F;em&gt; as other thing&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Expanded to&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print hello
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;They were not surprised at all that this just worked&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hello = 5 + 6&lt;&#x2F;code&gt;, both got confused about whether it would print &lt;code&gt;11&lt;&#x2F;code&gt; or &lt;code&gt;5 + 6&lt;&#x2F;code&gt;, reminded them of strings&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How about &lt;code&gt;hello = five + six&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Both agreed it wouldn&#x27;t work. I typed in &lt;code&gt;five = 5&lt;&#x2F;code&gt;, and ask if it would
work. They agree that it won&#x27;t, and I show them GHC&#x27;s error message.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Variable not in scope.&amp;quot; Computers talk funny, just means &amp;quot;I don&#x27;t know what
six is.&amp;quot; Instilled that they&#x27;ll eventually be able to understand those
massive error messages, but not to worry about it yet.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Exercise: five the program. Both of them got it no problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I was about to demonstrate &lt;code&gt;five = 4&lt;&#x2F;code&gt;, and then Gavriella figured it out for
herself! They understand that, again, &amp;quot;computers are dumb.&amp;quot; Names are just
there for our benefit, computer doesn&#x27;t care.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We do &lt;code&gt;five + six * seven&lt;&#x2F;code&gt; (with appropriate variable definitions), they get
that answer, and then &lt;code&gt;(five + six) * seven&lt;&#x2F;code&gt;, they get that too.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now I define &lt;code&gt;fivePlusSix = five + six&lt;&#x2F;code&gt;, and change to &lt;code&gt;hello = (fivePlusSix) * seven&lt;&#x2F;code&gt;
(direct replacement). They&#x27;re fine with this. Yay replacement.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Point out that the parens are now unneeded and remove them. Again, no
problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Parens just tell us &amp;quot;do this first&amp;quot;, not needed for one thing&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Type in &lt;code&gt;hello = 5 * 2&lt;&#x2F;code&gt;, no problem.&lt;&#x2F;li&gt;
&lt;li&gt;How about &lt;code&gt;hello = double 5&lt;&#x2F;code&gt;? They figured out that it won&#x27;t work cuz
computers be dumb&lt;&#x2F;li&gt;
&lt;li&gt;How do we define &lt;code&gt;double&lt;&#x2F;code&gt;? Eliezer guessed &lt;code&gt;* 2&lt;&#x2F;code&gt;, which is really close, but
we&#x27;re not ready for sections, and I want to teach standard function stuff
first.&lt;&#x2F;li&gt;
&lt;li&gt;Show them &lt;code&gt;double x = x * 2&lt;&#x2F;code&gt;, that &lt;code&gt;x&lt;&#x2F;code&gt; is a variable, and a function
argument. They don&#x27;t know algebra yet, but got this fairly quickly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hello = addFive (double 5)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Exercise: fix the program!&lt;&#x2F;li&gt;
&lt;li&gt;Eliezer did this one, defined &lt;code&gt;addFive&lt;&#x2F;code&gt;, and he started spacing things like
me without any prompting. Cool.&lt;&#x2F;li&gt;
&lt;li&gt;Exercise: Gavriella, write &lt;code&gt;minusTwo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Got it first time, ran it, answer&#x27;s still 15. Why?&lt;&#x2F;li&gt;
&lt;li&gt;We stepped through how the program is evaluated. &amp;quot;Let&#x27;s look at &lt;code&gt;main&lt;&#x2F;code&gt;, oh, I
got an action! I need to print &lt;code&gt;hello&lt;&#x2F;code&gt;, what&#x27;s that? Oh, it&#x27;s &lt;code&gt;addFive ...&lt;&#x2F;code&gt;.
That means I gotta figure out &lt;code&gt;...&lt;&#x2F;code&gt;. What&#x27;s &lt;code&gt;double 5&lt;&#x2F;code&gt;? Oh, it&#x27;s &lt;code&gt;10&lt;&#x2F;code&gt;. So
that&#x27;s &lt;code&gt;15&lt;&#x2F;code&gt;. And &lt;code&gt;minusTwo&lt;&#x2F;code&gt; was never (terminology break, I taught them that
it wasn&#x27;t used).&lt;&#x2F;li&gt;
&lt;li&gt;Exercise: make the answer 13. They&#x27;re struggling to figure out where to use
it. They&#x27;re stumped, time to jump in.&lt;&#x2F;li&gt;
&lt;li&gt;Stepped through all of the types involved. &amp;quot;double is a function that takes a
number and gives you back a number&amp;quot; blah blah blah&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;minusTwo&lt;&#x2F;code&gt; is also a function. It needs one number. Let&#x27;s try something
wrong: &lt;code&gt;minusTwo addFive (double 5)&lt;&#x2F;code&gt;.  That&#x27;s wrong: it means &amp;quot;apply
&lt;code&gt;minusTwo&lt;&#x2F;code&gt; to two values&amp;quot; but it only needs one number.&lt;&#x2F;li&gt;
&lt;li&gt;We need to turn &lt;code&gt;addFive (double 5)&lt;&#x2F;code&gt; into one thing. Ask them what we can
use.  They played with idea of double quotes, and then they figured out the
parens! Awesome!&lt;&#x2F;li&gt;
&lt;li&gt;One final exercise: make the answer 16 with &lt;code&gt;plus3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Eliezer did that typing, so I gave Gavriella one real final one: make the
answer 6 with &lt;code&gt;minusTen&lt;&#x2F;code&gt;. She did it.&lt;&#x2F;li&gt;
&lt;li&gt;Realizing now: learning to type and navigate an editor is possibly harder for
them than the coding itself&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;&#x2F;h2&gt;
&lt;p&gt;Gavriella kept playing with the code (wow, she&#x27;s focused on this). She decided
she wanted to do division. That was more complicated, but she persevered. I
taught her about &lt;code&gt;div&lt;&#x2F;code&gt; being a function that takes 2 arguments. She didn&#x27;t know
anything about remainders, and was confused that &lt;code&gt;div 15 2&lt;&#x2F;code&gt; worked at all. I
taught her about &lt;code&gt;divMod&lt;&#x2F;code&gt;, and she did great.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kids Coding, Part 1</title>
		<published>2018-08-23T00:00:00+00:00</published>
		<updated>2018-08-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/08/kids-coding-part-1/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/08/kids-coding-part-1/</id>
		<content type="html">&lt;h1 id=&quot;kids-coding-part-1&quot;&gt;Kids Coding, Part 1&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve been wanting to give my eldest child (Eliezer, now 10) a chance
to learn to code for about a year now, with little success. My second
child (Gavriella, now 8) is also ready to start learning some
coding. &amp;quot;Ready&amp;quot; to me means &amp;quot;they have a decent enough grasp of
written English.&amp;quot; (Yakov, my 6 year old, also wants in, but
unfortunately is going to have to wait a bit.)&lt;&#x2F;p&gt;
&lt;p&gt;I know how I learned to code: sitting at a DOS prompt since the age of
2 and reading a massive &amp;quot;Teach Yourself QBasic in 21 Days&amp;quot; book. For
various reasons, this doesn&#x27;t seem to apply to the next
generation. I&#x27;ve looked into other modern approaches, including the
graphical programming environments. My kids enjoyed some of this, but
this week told me that &amp;quot;it&#x27;s fun, but we&#x27;re not learning anything.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Previously, I tried teaching Eliezer some Haskell by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;magical-guide-haskell&quot;&gt;writing up
lessons for
him&lt;&#x2F;a&gt;. Whether
because of my writing or his interest, it didn&#x27;t work at the time. I
decided to not go down this path again, and an hour ago sat down with
Eliezer and Gavriella for their first lesson. I&#x27;m winging this
completely, but here&#x27;s the approach I&#x27;m taking:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the computer in front of me and show them things&lt;&#x2F;li&gt;
&lt;li&gt;See what confuses them, what interests them, and follow that&lt;&#x2F;li&gt;
&lt;li&gt;Give them one or two exercises at the end to reinforce the ideas&lt;&#x2F;li&gt;
&lt;li&gt;Keep the lessons short to keep their interest&lt;&#x2F;li&gt;
&lt;li&gt;Write up a blog post right afterward to record what happened, so I
can learn for the future. After all, Yakov and Lavi (the baby, aka
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;search?f=tweets&amp;amp;q=%23youngesthaskeller&amp;amp;src=typd&quot;&gt;#YoungestHaskeller&lt;&#x2F;a&gt;)
need to learn too&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the first of these summary blog posts. Caveats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;This will likely be incomplete&lt;&#x2F;li&gt;
&lt;li&gt;The material is very much geared towards my kids and probably won&#x27;t
generalize&lt;&#x2F;li&gt;
&lt;li&gt;I have no idea how long or frequently I&#x27;ll be doing this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I considered making these private notes for myself instead, but
thought some others may be interested, so I&#x27;m posting publicly.&lt;&#x2F;p&gt;
&lt;p&gt;Without further ado!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-portion&quot;&gt;Python portion&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Previous experience with Haskell made Eliezer think it was too hard
for him, so we decided to learn Python instead. He has some
experience with that from Code Combat.&lt;&#x2F;li&gt;
&lt;li&gt;I started at the REPL and demonstrated printing strings. We made
some typical jokes (yes, they were fart jokes) in text form, which
made the kids giggle. Upshot: they learned about strings, and stayed
interested.&lt;&#x2F;li&gt;
&lt;li&gt;I demonstrated that basic arithmetic works at the REPL.&lt;&#x2F;li&gt;
&lt;li&gt;I opened up a &lt;code&gt;hello-world.py&lt;&#x2F;code&gt; file and demonstrated you could write
the same stuff from the REPL in a file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This was the point where Eliezer commented that it looked a lot like
the Haskell he&#x27;d seen. I&#x27;m not sure what it was, but somehow it
clicked with him that whatever scared him off of Haskell previously
wasn&#x27;t a real issue. We decided together to switch over to learning
Haskell instead, which I&#x27;m quite happy about (more because I know the
language better than anything else).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-portion&quot;&gt;Haskell portion&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Did the same &lt;code&gt;print&lt;&#x2F;code&gt;, string, and arithmetic stuff at the GHCi
prompt and in a file&lt;&#x2F;li&gt;
&lt;li&gt;Asked them what &lt;code&gt;2 + 3 + 4&lt;&#x2F;code&gt; was, they got that&lt;&#x2F;li&gt;
&lt;li&gt;Asked them what &lt;code&gt;2 * 3 + 4&lt;&#x2F;code&gt; was, they got that too&lt;&#x2F;li&gt;
&lt;li&gt;Then &lt;code&gt;2 + 3 * 4&lt;&#x2F;code&gt;, and I was surprised to find out that they knew
about order of operations already. Yay school system.&lt;&#x2F;li&gt;
&lt;li&gt;They mentioned parentheses, and I told them that would be the same
way to do things in programming, and showed them &lt;code&gt;(2 + 3) * 4&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Next we talked about &lt;code&gt;print 2 + 3&lt;&#x2F;code&gt;. They had some inkling that this
wouldn&#x27;t work, but couldn&#x27;t be sure of why.&lt;&#x2F;li&gt;
&lt;li&gt;I then branched into the next topics...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;types&quot;&gt;Types&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Types are really important in Haskell programming&lt;&#x2F;li&gt;
&lt;li&gt;Everything has a &amp;quot;type&amp;quot; (this raised confusion and interest, as expected)&lt;&#x2F;li&gt;
&lt;li&gt;Explained that 2 is a number, that&#x27;s its type (yes, it&#x27;s a bit of a
lie, &lt;code&gt;Int&lt;&#x2F;code&gt;, and defaulting to &lt;code&gt;Integer&lt;&#x2F;code&gt;, and &lt;code&gt;Num a =&amp;gt; a&lt;&#x2F;code&gt;, blah blah
blah, this is fine for first lesson)&lt;&#x2F;li&gt;
&lt;li&gt;Is 2 a string? No. Is 2 a dog? (giggles) No. Is 2 a missile?
(Eliezer got to explain that concept to Gavriella.)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;print 2 + 3&lt;&#x2F;code&gt; because of order of operations (just like math) really
is &lt;code&gt;(print 2) + 3&lt;&#x2F;code&gt;, what does &lt;em&gt;that&lt;&#x2F;em&gt; mean?&lt;&#x2F;li&gt;
&lt;li&gt;What&#x27;s the type of &lt;code&gt;print&lt;&#x2F;code&gt;? Confusion&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;ve discussed functions a lot before, so pointed out that &lt;code&gt;print&lt;&#x2F;code&gt;
is a function that takes a number (here) and returns &lt;em&gt;something
else&lt;&#x2F;em&gt;. What is that &lt;em&gt;something else&lt;&#x2F;em&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;I introduce the idea of &lt;em&gt;actions&lt;&#x2F;em&gt;. Eliezer got this, Gavriella was
more confused. So more humor to explain this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fart = print &amp;quot;Sorry, I farted&amp;quot;&lt;&#x2F;code&gt; lots of giggling. What is the type
of fart? Is it a number? No. Is it a dog? No. It&#x27;s something that
you do, or the computer does. That&#x27;s what an action is. (Gavriella
translated some words into Hebrew at that point, and the ideas
clicked. Got to remember: they&#x27;re learning both programming
languages and how to learn things in English at the same time.)&lt;&#x2F;li&gt;
&lt;li&gt;OK, you can add two numbers together. Does it make sense to add an
action and a number together? No. So &lt;code&gt;print 2 + 3&lt;&#x2F;code&gt; doesn&#x27;t make
sense!&lt;&#x2F;li&gt;
&lt;li&gt;Now, what&#x27;s &lt;code&gt;print&lt;&#x2F;code&gt;? It&#x27;s a function that takes a number and gives
you back an action. And that&#x27;s how you use functions in Haskell:
just stick things next to each other.&lt;&#x2F;li&gt;
&lt;li&gt;They figured out really quickly at this point that they needed
parens to fix the program, and ended up with &lt;code&gt;print (2 + 3)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;today-s-excercise&quot;&gt;Today&#x27;s excercise&lt;&#x2F;h2&gt;
&lt;p&gt;Note: Somewhere above, I briefly showed them that you could use &lt;code&gt;do&lt;&#x2F;code&gt;
notation and put multiple &lt;code&gt;print&lt;&#x2F;code&gt; calls on different lines. No
confusion from this at all. Relevant to the exercise:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write a program that print &amp;quot;2 + 3 + 4&amp;quot;, first as a string, and then
as a number.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I started them off with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- prompt started here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They both got the answer, one of them with a bit of help:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;2+3+4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Things to note:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They naturally left off the spaces, despite me using the spaces
throughout my typing.&lt;&#x2F;li&gt;
&lt;li&gt;They never questioned why &lt;code&gt;print &amp;quot;Hello World&amp;quot;&lt;&#x2F;code&gt; resulted in output
that kept the double quotes. I&#x27;ll have to explain at &lt;em&gt;some&lt;&#x2F;em&gt; point
about &lt;code&gt;putStrLn&lt;&#x2F;code&gt;, but that can come much, much later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;to-figure-out&quot;&gt;To figure out&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;How much shell do I teach them?&lt;&#x2F;li&gt;
&lt;li&gt;What editor will I set them up with?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-lesson&quot;&gt;Next lesson&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t want to plan out what to cover next time too intricately,
because I want to experiment with them and bounce things around. I&#x27;m
thinking about showing them how to create their own functions, maybe
with lambda syntax, not sure.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Post Fast Write-up</title>
		<published>2018-07-15T00:00:00+00:00</published>
		<updated>2018-07-15T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/07/post-fast-writeup/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/07/post-fast-writeup/</id>
		<content type="html">&lt;p&gt;As I
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;07&#x2F;thoughts-on-fasting&quot;&gt;blogged about last week&lt;&#x2F;a&gt;,
last week I did a multiday fast.  There was definitely interest in
this topic on Twitter, and at least one request for a post-fast
write-up. So here we go.&lt;&#x2F;p&gt;
&lt;p&gt;I fasted from about 8pm on Saturday, July 7 to 8am on Friday,
July 13. This works out to 5.5 days, or 132 hours of fasting.
Additionally, I had done a shorter 1.5 day fast the previous week
(from Thursday, July 5 till Friday, July 6), which as you&#x27;ll see is
relevant to the weight results.&lt;&#x2F;p&gt;
&lt;p&gt;That previous blog post shared some of my reasons for fasting. The
short version is: there are lots of potential health benefits, but my
goal right now was to try to lose some fat with minimal muscle loss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;weight-change&quot;&gt;Weight change&lt;&#x2F;h2&gt;
&lt;p&gt;Since the primary goal of the fast was fat loss, let me share the
numbers. I always weigh in first thing in the morning for
consistency. I additionally record skinfold caliper and waist
measurement approximations of body fat percentage, which should be
taken with a large grain of salt. I&#x27;ll include them in the information
below.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, I forgot to record my weight on Sunday, July 8. The
most recent weigh-in I&#x27;d had before was Wednesday, July 4. I took
measurements on Monday, Wednesday, and Friday (just before breaking
the fast), and again Sunday morning (48 hours after breaking the
fast).&lt;&#x2F;p&gt;
&lt;p&gt;Finally, for context, I am 175cm tall (5&#x27;9&amp;quot;).&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Day&lt;&#x2F;th&gt;&lt;th&gt;Weight&lt;&#x2F;th&gt;&lt;th&gt;Body fat % (est)&lt;&#x2F;th&gt;&lt;th&gt;Fat mass (est)&lt;&#x2F;th&gt;&lt;th&gt;Lean mass (est)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;July 4&lt;&#x2F;td&gt;&lt;td&gt;81.8kg&lt;&#x2F;td&gt;&lt;td&gt;21%&lt;&#x2F;td&gt;&lt;td&gt;17.4kg&lt;&#x2F;td&gt;&lt;td&gt;64.4kg&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;July 9&lt;&#x2F;td&gt;&lt;td&gt;79.3kg&lt;&#x2F;td&gt;&lt;td&gt;21%&lt;&#x2F;td&gt;&lt;td&gt;16.9kg&lt;&#x2F;td&gt;&lt;td&gt;62.4kg&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;July 11&lt;&#x2F;td&gt;&lt;td&gt;77.7kg&lt;&#x2F;td&gt;&lt;td&gt;20%&lt;&#x2F;td&gt;&lt;td&gt;15.5kg&lt;&#x2F;td&gt;&lt;td&gt;62.2kg&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;July 13&lt;&#x2F;td&gt;&lt;td&gt;76.8kg&lt;&#x2F;td&gt;&lt;td&gt;19%&lt;&#x2F;td&gt;&lt;td&gt;14.3kg&lt;&#x2F;td&gt;&lt;td&gt;62.5kg&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;July 15&lt;&#x2F;td&gt;&lt;td&gt;78.5kg&lt;&#x2F;td&gt;&lt;td&gt;20%&lt;&#x2F;td&gt;&lt;td&gt;15.7kg&lt;&#x2F;td&gt;&lt;td&gt;62.8kg&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Again, take the numbers with a grain of salt: body fat measurements
are not perfect. A secondary measurement I&#x27;ll get to in the next
section is changes in lifting strength. Here are some takeaways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There was a precipitous drop in weight right after starting the
fast. This is expected as a loss of water weight.&lt;&#x2F;li&gt;
&lt;li&gt;Similarly, I put on almost 2kg of weight again in the 48 hours
following the fast. This is again expected as I was regaining water
weight. (I ended up eating around 100g of carbs over the course of
Saturday.)&lt;&#x2F;li&gt;
&lt;li&gt;There was a relatively steady weight loss during the course of the
fast.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To me, it looks like I lost between 2-3kg of fat from the fast,
including the 1.5 days the previous week. This would come out to
between 15,400 and 23,100 calories, which would mean between 2,369 and
3,554 calories per day. All of which sounds perfectly reasonable given
my weight and activity level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strength-during-fast&quot;&gt;Strength during fast&lt;&#x2F;h2&gt;
&lt;p&gt;There is a major confounding factor in measuring my strength: I&#x27;ve
been recovering from a wrist injury which has affected all of my major
lifts (squat, deadlift, and bench). That said: I had no major drop in
strength measured by a 5 rep max during the fast. I &lt;em&gt;did&lt;&#x2F;em&gt; tire out
more quickly on subsequent sets, however. I&#x27;ll have a better feel for
whether I had any strength loss over the coming week.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulty&quot;&gt;Difficulty&lt;&#x2F;h2&gt;
&lt;p&gt;This was by far the easiest fast I&#x27;ve ever tried. The second day was,
as usual, the hardest day. But it wasn&#x27;t really that difficult. I had
a high level of mental focus, had plenty of interesting (and some
non-interesting) work tasks to perform, and plenty of phyiscal
activity. In other words, I was able to distract myself from eating.&lt;&#x2F;p&gt;
&lt;p&gt;There were a few times during the week when the hunger was intense,
but only for 1-2 hours at a time. There were a few times when I didn&#x27;t
feel like I could focus on anything, but that seemed more to do with
an overabundance of things grabbing my attention than the fast itself.&lt;&#x2F;p&gt;
&lt;p&gt;I had decided in advance that I would break my fast Friday morning. I
was certainly excited to get back to eating, but when I woke up Friday
morning, I did not feel ravenous, nauseous, or in any other way in
need of breaking the fast. Had circumstances allowed it, I have no
doubt that I could have easily kept going.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hunger-after-fast&quot;&gt;Hunger after fast&lt;&#x2F;h2&gt;
&lt;p&gt;Usually after a fast it takes me a while to feel properly hungry
again. I broke my fast on a (for me) relatively light meal of 2
scrambled eggs. Twenty minutes later, I added in some cheese, and then
took the baby for a walk to visit my parents. That&#x27;s when the hunger
really kicked in. I started snacking on anything I could get access
to. I came home and fried up a pan full of tuna. I continued eating a
lot throughout the day, finishing off with some large pieces of meat
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;lambdamom&quot;&gt;Miriam&lt;&#x2F;a&gt; made for dinner.&lt;&#x2F;p&gt;
&lt;p&gt;Saturday felt much the same, though Miriam seems to think I ate less
than I thought I did.&lt;&#x2F;p&gt;
&lt;p&gt;I neither measured my food intake, nor tried to restrict it in any
way. As you can see from the weight chart above, between Friday
morning and Sunday morning, I put on 1.7kg, which I believe would be
entirely accounted for by water weight. I don&#x27;t believe I had any fat
gain or &amp;quot;refeeding&amp;quot; issues,&amp;quot; though I acknowledge that the body fat
estimates paint a different picture.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;plans-for-the-future&quot;&gt;Plans for the future&lt;&#x2F;h2&gt;
&lt;p&gt;This was a win for me. I have to see if it significantly impacts
performance in the gym, but otherwise, I found this far easier than
trying to do a prolonged weight loss &amp;quot;cut.&amp;quot; Assuming all goes well, I
may try to do alternating weeks of eating a high fat, moderate protein
diet, followed by a week with a multiday fast (between 3 and 5 days),
and see how that affects weight and strength.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll continue taking body measurements, and will share results when I
have more meaningful data.&lt;&#x2F;p&gt;
&lt;p&gt;If anyone has specific questions they&#x27;d like me to answer, let me
know!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Thoughts on Fasting</title>
		<published>2018-07-10T00:00:00+00:00</published>
		<updated>2018-07-10T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/07/thoughts-on-fasting/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/07/thoughts-on-fasting/</id>
		<content type="html">&lt;p&gt;Yesterday on Twitter, a lot of people were interested in
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1016312409760436225&quot;&gt;the multiday fast I&#x27;m currently doing&lt;&#x2F;a&gt;. Since
I&#x27;m awake at 4am (more on that below), now seems like a great time to
explain a bit about the fasting. I will drop the major caveat at the
start: I am in no way an expert on fasting. For that, you&#x27;d want
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;drjasonfung&quot;&gt;Dr. Jason Fung&lt;&#x2F;a&gt;, and likely his book
&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Complete-Guide-Fasting-Intermittent-Alternate-Day&#x2F;dp&#x2F;1628600012&quot;&gt;The Complete Guide to Fasting&lt;&#x2F;a&gt;. This
will be my personal anecdotes version of that information.&lt;&#x2F;p&gt;
&lt;p&gt;There are many reasons to consider fasting, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Religious reasons&lt;&#x2F;strong&gt;. As many know, I&#x27;m a religious Jew, so this
concept is not at all foreign to me, and probably helped me more
easily get into fasting. However, that&#x27;s &lt;em&gt;not&lt;&#x2F;em&gt; my motivation today,
or related to the rest of this blog post.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Losing weight&lt;&#x2F;strong&gt;. It&#x27;s pretty hard to put on weight when you&#x27;re not
eating anything. (But you probably wanted to
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;burn fat, not muscle&lt;&#x2F;a&gt;,
right?)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mental clarity&lt;&#x2F;strong&gt;. Many people—myself included—report
feelings of clear-mindedness and focus during a fast. I find I get
some of my best writing and coding done when fasting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Extra energy&lt;&#x2F;strong&gt;. This may seem counter-intuitive: where&#x27;s the energy
coming from? We&#x27;ll get to that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;General health benefits&lt;&#x2F;strong&gt;. Fasting has been well demonstrated to
help treat epilepsy, but more recently also have claims of
anti-cancer benefits. It can also be a highly effective treatment
for type 2 diabetes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Alright, let&#x27;s get into the details of how to do this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll get this out of the way right now. I am not a doctor. I cannot
give you health advice. I&#x27;m telling you about what works for me, a
decently healthy person without preexisting conditions. If you are
taking medication, &lt;em&gt;especially&lt;&#x2F;em&gt; insulin or anything that affects your
blood sugar, talk with a doctor before doing this, or at the very
least read one of Dr. Fung&#x27;s books.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-fast&quot;&gt;How to fast&lt;&#x2F;h2&gt;
&lt;p&gt;The process is simple: stop eating. This isn&#x27;t a &amp;quot;bread and water&amp;quot;
fast. This isn&#x27;t a &amp;quot;maple syrup and cayenne pepper&amp;quot; fast (worst TED
talk I&#x27;ve ever seen by the way, I refuse to link to it). You are
consuming virtually no calories. (We&#x27;ll get to virtually in a second.)&lt;&#x2F;p&gt;
&lt;p&gt;You &lt;em&gt;should&lt;&#x2F;em&gt; continue drinking water, and lots of it. Drinking green
tea is helpful too, and black and herbal teas are fine. There&#x27;s also
no problem with coffee. In fact: the caffeine in coffee can help you
burn fat, which will help the fast progress more easily.&lt;&#x2F;p&gt;
&lt;p&gt;You should &lt;em&gt;not&lt;&#x2F;em&gt; drink any sugary drinks. (That&#x27;s not just advice for
a fast, that&#x27;s advice for life too.) You should probably avoid
artificial sweeteners as well, since they can cause an insulin spike,
and some contain calories.&lt;&#x2F;p&gt;
&lt;p&gt;There are three other things you can include in your fast if desired:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Salts, including sodium (normal table salt), potassium, and
magnesium. Personally, I&#x27;ve used a bit of normal table salt,
himalayan salt, or high-potassium salt.
&lt;ul&gt;
&lt;li&gt;If you&#x27;re wondering: how do you consume the salt? Yup: I drink
salt water sometimes. Delicious.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Some cream in your coffee. Don&#x27;t overdo it: you&#x27;re not making
bulletproof coffee here. This is intended to just take some of the
edge off of your coffee if you can&#x27;t stand black coffee.&lt;&#x2F;li&gt;
&lt;li&gt;Bone broth, essentially beef (or other) bones cooking in a crockpot
with salt for 24 hours straight. This is a nice way to get in some
salts, a few other trace minerals, and give you a satisfied feeling
before going to sleep.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The latter two &lt;em&gt;do&lt;&#x2F;em&gt; contribute some calories, almost entirely from
fat. Don&#x27;t overdo this, you&#x27;ll be counteracting the point of the
fast. And definitely avoid getting protein or any carbs mixed in; do
not eat some of the meat off the bones, or throw in carrots or other
starchy vegetables.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re doing a fast for anti-cancer reasons, I&#x27;ve read that you
should eliminate the cream and broth as well, and &lt;em&gt;maybe&lt;&#x2F;em&gt; consider
leaving out the coffee and even tea. Again: I&#x27;m not an expert here,
and I&#x27;ve never tried that kind of fast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-to-fast&quot;&gt;When to fast&lt;&#x2F;h2&gt;
&lt;p&gt;Fasting does not require any preparation. Just decide to do it, and
stop eating! I typically like to stop eating around 6pm one day, and
see how many days I can go before I cave in and eat. I&#x27;ll mention some
reasons to cave in below.&lt;&#x2F;p&gt;
&lt;p&gt;My maximum fasting time is currently four days. It&#x27;s doubtful I&#x27;ll
ever get beyond six days due to the weekly Jewish Sabbath, but that&#x27;s
currently my goal. If you&#x27;re doing a multiday fast, I&#x27;d recommend
targeting at least three days, since the second day is by far the
hardest (from personal experience, and what I&#x27;ve read), and you should
see it through till it gets easier.&lt;&#x2F;p&gt;
&lt;p&gt;By the way, the world record longest fast is 382 days. The rules for
fasting change a bit at that point, and you would need to take
vitamins and minerals to make it through.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hunger&quot;&gt;Hunger&lt;&#x2F;h2&gt;
&lt;p&gt;The biggest fear people have is &lt;em&gt;hunger&lt;&#x2F;em&gt;. This is a normal, natural
reaction. As someone who has done fasts plenty of times, I still
sometimes feel the fear of being hungry. Allow me to share some
personal experience.&lt;&#x2F;p&gt;
&lt;p&gt;When I&#x27;m in the middle of eating food, the thought of purposely
witholding from eating is terrifying. Once I&#x27;ve stopped eating for
half a day or so, that terror seems in retrospect to be completely
irrational. I strongly believe that I, like many others, can react
with an almost chemical addiction-like response to food. It&#x27;s nice to
occassionally break that dependence.&lt;&#x2F;p&gt;
&lt;p&gt;Many people assume that they&#x27;ll be overcome with hunger once they&#x27;ve
gone somewhere around 8 hours without eating. I&#x27;d recommend thinking
of it as a challenge: can you handle not eating? Your body is built to
withstand times of no food, you&#x27;ll be fine. This is a straight
mind-over-matter moment.&lt;&#x2F;p&gt;
&lt;p&gt;Another concern many have is memories of trying to diet, and feeling
miserable the whole time. Let me relate that it is &lt;em&gt;significantly
easier&lt;&#x2F;em&gt; to spend a day not eating anything, and another day eating
normally, than it is to spend two days eating less. The simple
decision to not eat at all is massively simplifying.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;relationship-to-ketosis&quot;&gt;Relationship to ketosis&lt;&#x2F;h2&gt;
&lt;p&gt;When most people hear &amp;quot;keto,&amp;quot; they&#x27;re thinking of a diet plan that
involves eating an absurd amount of bacon with an occassional
avocado. In reality, ketosis is a state in the body where your liver
is generating ketone bodies for energy. Here&#x27;s the gist of it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The two primary fuel sources for the body are fat and carbs
(sugar&#x2F;glucose)&lt;&#x2F;li&gt;
&lt;li&gt;Most of your body can happily use either of these&lt;&#x2F;li&gt;
&lt;li&gt;However, fat cannot cross the blood-brain barrier, so your brain
typically runs exclusively on glucose&lt;&#x2F;li&gt;
&lt;li&gt;When you dramatically restrict your carb intake (and to some extent
your protein intake), your body has insufficient glucose to run your
brain&lt;&#x2F;li&gt;
&lt;li&gt;Instead: your liver will convert fat into ketones, which is an
alternate energy source your body, and in particular your brain, can
use&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m honestly a bit unsure of the whole topic of proteins in ketosis,
as I&#x27;ve read conflicting information. But the basic idea of
restricting carbs is straightforward. One way to do this is to eat a
very-high-fat diet. But another approach is to &lt;em&gt;eat nothing at
all&lt;&#x2F;em&gt;. The same process will take place in your body, and you&#x27;ll end up
in ketosis, likely faster than with a ketogenic diet.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, your whole body will be running off of a combination of
ketones and fats, with a small amount of sugar circulating for some
cells which can only run on glucose. This explains some of the
purported benefits I mentioned above:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Running your brain on a different energy source can give you mental
focus. This is &lt;em&gt;not&lt;&#x2F;em&gt; universal: some people report no such feeling.&lt;&#x2F;li&gt;
&lt;li&gt;Once you switch over to ketosis on a fast, you&#x27;re burning your
(likely ample) body fat stores, providing a nearly-unlimited supply
of raw calories. Compare this to having 3 meals a day: you are
typically dependent on each meal to provide your energy, and are
just waiting for your next infusion of food for a pick-me-up.&lt;&#x2F;li&gt;
&lt;li&gt;Using your body fat as a fuel source obviously means you&#x27;ll be
burning fat, which is the right way to lose weight! But
fasting+ketosis does something even better: it trains your body to
be better at burning fat, making it easier to continue burning fat
in the future.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One final note: people familiar with Type 1 diabetes may be terrified
of the term &amp;quot;keto&amp;quot; due to ketoacidosis. Ketoacidosis is a dangerous
medical condition, and does involve ketones. However, it is &lt;em&gt;not&lt;&#x2F;em&gt; the
same state as ketosis, and being in ketosis is not dangerous. (But
remember my caveats about not being a doctor above, especially if you
&lt;em&gt;are&lt;&#x2F;em&gt; a type 1 diabetic.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;&#x2F;h2&gt;
&lt;p&gt;My personal approach to exercise on a fast is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Follow my normal lifting routine&lt;&#x2F;li&gt;
&lt;li&gt;Try to train as hard and heavy as I can, accepting that the lack of
incoming food &lt;em&gt;will&lt;&#x2F;em&gt; make me a bit weaker.&lt;&#x2F;li&gt;
&lt;li&gt;Schedule a lifting session at the very beginning of the fast,
followed by a High Internsity Interval Training (HIIT) session. I
still have plenty of energy and glycogen stores to get me through
this session on the first day, and the session helps drain those
glycogen stores and kick me into ketosis faster.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For weight lifting, I follow an RPE-based program, which essentially
adjusts the weight on the bar to how hard it feels. Therefore, as I
progress through the fast, I can typically continue following the same
program, but the weight I lift will naturally go down a bit.&lt;&#x2F;p&gt;
&lt;p&gt;Side note: at the time of writing this blog post, I&#x27;m recovering from
wrist tendonitis, and was already deloaded in my lifting, which is why
I&#x27;m not lifting hard. It&#x27;s not because of the fast, but it &lt;em&gt;is&lt;&#x2F;em&gt;
affecting how I&#x27;m responding to the fast most likely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;side-effects&quot;&gt;Side effects&lt;&#x2F;h2&gt;
&lt;p&gt;There are some side effects to fasting worth mentioning, including why
I&#x27;m writing this blog post now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Insomnia&lt;&#x2F;strong&gt;. For me, the ketone rush seems to disrupt my sleep
cycle. I don&#x27;t actually feel tired during the day, so maybe this is
a good thing.&lt;&#x2F;li&gt;
&lt;li&gt;I won&#x27;t do it justice, but Dr. Fung describes many &lt;strong&gt;hormonal
changes&lt;&#x2F;strong&gt; that occur when you&#x27;re in a fasted state. These include
things like increased human growth hormone and insulin-like growth
factor 1. The upshot of this is that you should &lt;strong&gt;experience &lt;em&gt;less&lt;&#x2F;em&gt;
protein and muscle wasting&lt;&#x2F;strong&gt; during a fast than when following a
calorite-restricted diet.
&lt;ul&gt;
&lt;li&gt;This is the primary reason I&#x27;m doing the multiday fast right
now: I&#x27;ve been on a &amp;quot;cut&amp;quot; for a few months and unhappy with the
amount of muscle loss I&#x27;ve had. I want to finish up the cut
quickly and get back into maintenance mode eating, without
incurring greater muscle loss. I intend to continue
experimenting into the future with using multiday fasts as
mini-cuts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nausea&lt;&#x2F;strong&gt;. The first time I did a multiday fast, I got so nauseous
that by the end of the third day I had to break the fast. It was bad
enough that I couldn&#x27;t stand the taste of coffee for the next two
months. However, that first fast included no cream or bone
broth. Since I&#x27;ve added those two things, I haven&#x27;t had any more
nausea when fasting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Dizziness&lt;&#x2F;strong&gt;. Especially when first adapting to the fasted state,
you may feel lightheaded. Just be careful, and be sure to drink
enough water, and supplement salts as needed. More generally: make
sure you get enough fluids.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are certainly others, these are just the ones that have most
affected me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ending-the-fast&quot;&gt;Ending the fast&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve ended the fast in the past because I either felt sick, or because
of some personal obligation where I didn&#x27;t want to be &amp;quot;compromised&amp;quot; in
a fasted state. (This was likely just a cop-out on my part, going on a
4 hour trip with a group of fourth graders isn&#x27;t &lt;em&gt;that&lt;&#x2F;em&gt; taxing.) I
would recommend setting a goal for how long you want to try to fast
for, and be ready to be flexible with that goal (either longer or
shorter) depending on how you&#x27;re responding.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t really have any great recommendations on what to break your
fast with. However, you may want to continue eating a low carb or
ketogenic diet. You&#x27;ve just put yourself into a deep state of ketosis,
which many people struggle to do. May as well take advantage of it!&lt;&#x2F;p&gt;
&lt;p&gt;This may not be universal, and I won&#x27;t go into details, but expect
some GI distress after the fast ends. Your digestive system has been
off duty for a few days, it needs to reboot.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recommendations&quot;&gt;Recommendations&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, so that was a lot of information all over the place. You&#x27;re
probably wondering: what should &lt;em&gt;I&lt;&#x2F;em&gt; do? Frankly, you can do whatever
you want! You can choose to dive in at the deep end and start off
immediately with a multiday fast. Dr. Fung mentions this in his
book. However, in my own experience, I started much more gradually:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Low carb and ketogenic diets&lt;&#x2F;li&gt;
&lt;li&gt;Intermittent fasting: only eating between 12pm and 8pm, for example&lt;&#x2F;li&gt;
&lt;li&gt;Experience with religious fasts&lt;&#x2F;li&gt;
&lt;li&gt;Randomly skipping meals&lt;&#x2F;li&gt;
&lt;li&gt;A 24-hour fast (stop eating at 6pm, eat the next day at 6pm)&lt;&#x2F;li&gt;
&lt;li&gt;A multiday fast&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Keep in mind: many people in the world today have never skipped a
meal. Consider starting with something as easy as not having breakfast
to prove to yourself that you don&#x27;t need to consume calories all
waking hours of the day.&lt;&#x2F;p&gt;
&lt;p&gt;If you have questions you&#x27;d like me to answer in a follow up post,
either on fasting, or other related health topics, let me know in the
comments below or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;on Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra-muscle-loss&quot;&gt;Extra: muscle loss&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m not going to claim that fasting is the miracle that allows us to
gain muscle and lose fat. I don&#x27;t have enough personal experience to
vouch for that even in my own body, and the research I&#x27;ve seen is
conflicted on the topic. As I love doing n=1 experiments on myself, I
intend to do more tests with fasting following periods of moderate
over eating to see what happens.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra-some-calorie-math&quot;&gt;Extra: some calorie math&lt;&#x2F;h2&gt;
&lt;p&gt;For anyone in a healthy or above weight range, your body is carrying more
than enough calories in fat to sustain you for days, likely weeks. If
you do some quick math: there are 3,500 calories in 1 pound (0.45 kg)
of fat. If you burn about 2,000 calories a day, you can burn roughly
half a pound (.22kg) of fat a day. A 165 pound (70kg) person at 20%
bodyfat would have 115,500 calories in fat storage, enough to survive
over 55 days. Point being: once you&#x27;ve entered the ketosis stage of
your fast, you essentially have unlimited energy stores available to
use, as opposed to needing another hit from a meal to recharge.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra-anti-cancer&quot;&gt;Extra: anti-cancer&lt;&#x2F;h2&gt;
&lt;p&gt;To be a broken record: I&#x27;m not an expert on this topic. But the basic
idea of anti-cancer claims for fasting come down to starving out the
cancer cells. Cancer cells require lots of glucose (and a bit of
protein) for energy. Fasting starves out the cancer cells. I&#x27;m not
telling anyone to skip chemo or radiation. But I do personally know
someone who defeated breast cancer with an (I believe) 11 day fast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra-relevant-tweets&quot;&gt;Extra: relevant tweets&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some of the relevant tweets from the discussion yesterday.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Day 2.5 of a multiday fast. The ketones have kicked in big time. I&amp;#39;m feeling clear headed, it&amp;#39;s easier to focus on tasks&#x2F;ignore distractions, and physically feeling great. If you haven&amp;#39;t tried a multiday fast, I highly recommend it!&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1016312409760436225?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;👌🏻truth👌🏻&lt;br&gt;&lt;br&gt;fasting is much easier than calorie restriction, but most people won&amp;#39;t believe it until they do it once. After that, they&amp;#39;ll never go back to &amp;quot;trying to eat less today&amp;quot;. The binary decision to eat today or not to eat today is far less stressful. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;uqvwovvtBV&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;uqvwovvtBV&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Thomas D (@tthomasdd) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tthomasdd&#x2F;status&#x2F;1016384405798113280?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;And some Youtube videos I&amp;#39;ve watched by him. There are many others as well, I&amp;#39;m going to assume also very good, but likely lots of repeated content. There&amp;#39;s only so much to say about &amp;quot;stop eating&amp;quot; :)&lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;FPfBZ1UpAy&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;FPfBZ1UpAy&lt;&#x2F;a&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;OGjnA4tgcz&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;OGjnA4tgcz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1016334163664916481?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;No, not at all, it&amp;#39;s the exact opposite. Once you have the mental decision &amp;quot;I&amp;#39;m not going to eat today,&amp;quot; it&amp;#39;s much easier to just move on from food completely. Much harder is to say &amp;quot;I&amp;#39;m only going to eat 500 calories today&amp;quot; or whatever.&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;1016377672119865344?ref_src=twsrc%5Etfw&quot;&gt;July 9, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stop supporting older GHCs</title>
		<published>2018-07-01T00:00:00+00:00</published>
		<updated>2018-07-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/07/stop-supporting-older-ghcs/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/07/stop-supporting-older-ghcs/</id>
		<content type="html">&lt;p&gt;Vincent Hanquez and I have been playing a proverbial game of hot
potato over the past few months about writing this blog post. A
cabal-install bug recently came to my attention that finally pushed me
over the edge into writing this myself. I&#x27;ll discuss that a bit later.&lt;&#x2F;p&gt;
&lt;p&gt;The basic claim here is simple:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Supporting older GHCs together with new ones adds a real maintenance
cost to a library.&lt;&#x2F;li&gt;
&lt;li&gt;This is even higher if your goal is to make the code compile without
warnings across all supported versions. You&#x27;ll often end up
resorting to CPP or weird import hacks to work around redundant
imports.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s nothing wrong with maintaining a code base using an old
version of tools and libraries. However, you should make sure that
you are pinning your dependencies in any such project, and therefore
missing out on the latest updates to a library is not a critical
issue, excluding security patches.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Usually, when I drop support for an older version of GHC in a library,
I receive no complaints. Occasionally, if I do receive a concern about
it, it&#x27;s from someone trying to maintain their own CI matrix with
older GHC support. I rarely, if ever, receive a complaint from someone
trying to actually use an older version of GHC &lt;em&gt;and&lt;&#x2F;em&gt; the newest
version of my code.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of spinning wheels to maintain compatibility on the off chance
that someone may desire bleeding-edge libraries with years-old
compilers, I recommend cutting out support for older GHCs, updating
your cabal files to reflect this decision, and keeping your CI build
matrix curated appropriately. Only if a user has a specific request
for a feature to work with an older GHC would I consider changing
direction on this.&lt;&#x2F;p&gt;
&lt;p&gt;A generally accepted rule of thumb is &lt;strong&gt;three major GHC releases&lt;&#x2F;strong&gt;. At
the time of writing, that would mean supporting GHC 8.0, 8.2, and
8.4. I recommend only supporting the latest minor version of each
line, which would mean GHC 8.0.2, 8.2.2, and 8.4.3.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-cabal-files&quot;&gt;Updating cabal files&lt;&#x2F;h2&gt;
&lt;p&gt;The most common method for specifying which GHC versions you support
is to use the version of the &lt;code&gt;base&lt;&#x2F;code&gt; library that ships with GHC. You
can use this &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;base&quot;&gt;handy lookup table&lt;&#x2F;a&gt; I put
together, which I made because I can never remember this
information. Using that table, if you decided &amp;quot;I want to support GHC
8.0.2 and later&amp;quot;, you&#x27;d look up the corresponding base version, find
that it&#x27;s 4.9.1.0, and add the following to your cabal file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;build-depends: base &amp;gt;= 4.9.1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Or equivalent if using hpack&#x2F;package.yaml.)&lt;&#x2F;p&gt;
&lt;p&gt;Even though this is the standard approach today, there are a few
problems with it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The meaning isn&#x27;t immediately clear. Most people in my experience
think about GHC versions, &lt;em&gt;not&lt;&#x2F;em&gt; &lt;code&gt;base&lt;&#x2F;code&gt; versions. Someone reading
that line will need to go look up what GHC version that corresponds
to.&lt;&#x2F;li&gt;
&lt;li&gt;Newer users may not understand that &lt;code&gt;base&lt;&#x2F;code&gt; is a special,
non-upgradeable package, and not realize that this is pinning the
GHC version. (Many bug reports and support requests about both
cabal-install and Stack back up this claim.)&lt;&#x2F;li&gt;
&lt;li&gt;At some point in the future, in theory, &lt;code&gt;base&lt;&#x2F;code&gt; may in fact be
upgradeable, at which point this approach won&#x27;t work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;base&lt;&#x2F;code&gt; library versions don&#x27;t always bump with new versions of
GHC. For example, both GHC 8.4.2 and 8.4.3 ship with
&lt;code&gt;base-4.11.1.0&lt;&#x2F;code&gt;. If you wanted to state that you only support GHC
8.4.3, you can&#x27;t use the base approach.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s quite possible to write some code which is compatible with an
older &lt;code&gt;base&lt;&#x2F;code&gt; library version, but depends on newer features of GHC,
like a new language extension.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Therefore, I recommend taking a two-pronged approach for dropping
support for older GHC versions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add a lower bound on &lt;code&gt;base&lt;&#x2F;code&gt; as mentioned above. It&#x27;s the standard
approach, and some tooling may depend on it.&lt;&#x2F;li&gt;
&lt;li&gt;Add a stanza to your cabal file using cabal conditionals based on
the GHC version, e.g:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;if impl(ghc &amp;lt; 8.0.2)
  build-depends: unsupported-ghc-version &amp;gt; 1 &amp;amp;&amp;amp; &amp;lt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Originally, Vincent and I had discussed using &lt;code&gt;buildable: False&lt;&#x2F;code&gt;, but
that&#x27;s not an option, because...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recently-uncovered-cabal-install-bug&quot;&gt;Recently uncovered cabal-install bug&lt;&#x2F;h2&gt;
&lt;p&gt;I received a bug report on Friday about my new release of &lt;code&gt;yaml&lt;&#x2F;code&gt;
causing Travis build breakages for GHC 7.10.3. Later this was
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-infra&#x2F;hackage-trustees&#x2F;issues&#x2F;165&quot;&gt;opened as a Hackage Trustee issue&lt;&#x2F;a&gt;,
where I found out that the same bug was being triggered by an earlier
http-client release.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that with all released versions of cabal-install, there&#x27;s
a bug that works something like this: if a component is &lt;code&gt;buildable: False&lt;&#x2F;code&gt;, then all of its dependencies are ignored. However, the
dependency solver will still select such a package as a library
dependency, even though the library component is marked as
non-buildable. Then, when trying to build this dependency,
&lt;code&gt;cabal-install&lt;&#x2F;code&gt; will (rightfully) complain that it cannot build a
package with no library or executables.&lt;&#x2F;p&gt;
&lt;p&gt;This bug has been fixed on cabal-install HEAD (and maybe the 2.2
maintenance branch? I&#x27;m not 100% sure). However, it&#x27;s unreasonable to
expect people to upgrade to bleeding-edge versions of tooling. So
instead of the &lt;code&gt;buildable: False&lt;&#x2F;code&gt; approach, I&#x27;ve adapted the cabal
files in question to use an impossible-to-satisfy constraint, which
the dependency solver does better with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;if impl(ghc &amp;lt; 8.0.2)
  -- Disable building with GHC before 8.0.2.
  -- Due to a cabal bug, do not use buildable: False,
  -- but instead give it an impossible constraint.
  -- See: https:&#x2F;&#x2F;github.com&#x2F;haskell-infra&#x2F;hackage-trustees&#x2F;issues&#x2F;165
  build-depends: unsupported-ghc-version &amp;gt; 1 &amp;amp;&amp;amp; &amp;lt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The dependency solver realizes that it cannot find a version of the
(non-existent) &lt;code&gt;unsupported-ghc-version&lt;&#x2F;code&gt; package which is both greater
than and less than version 1, and so ignores this version of the
package when using GHC before 8.0.2. Problem solved!&lt;&#x2F;p&gt;
&lt;p&gt;I strongly recommend added a comment explaining this unusual
formulation, as it&#x27;s not clear to a reader why such a constraint is
being added instead of the arguably clearer &lt;code&gt;buildable: False&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deprecating the Haskell markdown library</title>
		<published>2018-06-15T00:00:00+00:00</published>
		<updated>2018-06-15T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/06/deprecating-haskell-markdown-library/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/06/deprecating-haskell-markdown-library/</id>
		<content type="html">&lt;p&gt;Back in 2012, I was working on a closed-source project which required
a Markdown parsing library. At the time, the only option in the
Haskell ecosystem I was aware of was Pandoc, which wasn&#x27;t an option
for the project in question due to licensing (GPL). As a result, I
ended up creating my own library called
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;markdown&quot;&gt;markdown&lt;&#x2F;a&gt; (inventive name,
I know). It also had the benefit of significantly less dependencies
than Pandoc, and therefore faster build times. Today, I&#x27;m considering
deprecating this library, for a number of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The license concern no longer affects me. But more to the point:
there are other Haskell markdown libraries with liberal licenses
and low dependency footprints. Some examples include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;cmark&quot;&gt;cmark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;sundown&quot;&gt;sundown&lt;&#x2F;a&gt; (using Github&#x27;s C library)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;lts-11.13&#x2F;package&#x2F;cheapskate-0.1.1&quot;&gt;cheapskate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There are too many different flavors of markdown floating around
today, and I&#x27;m contributing to the problem by having &lt;em&gt;yet another
flavor&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;m not particularly happy with the flavor I created. I&#x27;m not in
any way an expert at parsing, and did not have a deep
understanding of the Markdown spec (or lack thereof) when I wrote
this library. I&#x27;m personally more comfortable using, for example,
Github flavored Markdown.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m not worried about maintenance burden in this case; this library
hasn&#x27;t caused me much trouble. The deprecation would primarily be to
get a flavor of Markdown off the market, and encourage people to use
something more standard. I&#x27;m also open to alternative solutions here,
like using the &lt;code&gt;markdown&lt;&#x2F;code&gt; package namespace for a better
implementation.&lt;&#x2F;p&gt;
&lt;p&gt;My biggest concern with a deprecation or changing the library
significantly is that it may break existing projects that are relying
on this specific flavor of markdown. But for those cases, the current
version of the code will always be available. I may end up using it
myself for some sites where I don&#x27;t want to go back and fix content.&lt;&#x2F;p&gt;
&lt;p&gt;The purpose of this blog post, then, is to find out if there are
people out there who have a strong reason for me to &lt;em&gt;not&lt;&#x2F;em&gt; deprecate
this library, or would like to see something specific happen with the
package name on Hackage&#x2F;Stackage. If so, please let me know.&lt;&#x2F;p&gt;
&lt;p&gt;And as a second, lesser goal, I&#x27;m interested in hearing about the
current state of Markdown libraries in Haskell. Have I missed some
very popular ones? Is there any kind of general consensus on which
library to use? I&#x27;ve been favoring &lt;code&gt;sundown&lt;&#x2F;code&gt; recently, since I&#x27;ve been
working on projects where I want identical HTML output between Github
or Gitlab&#x27;s web interface and the code I&#x27;m writing. But Common Mark is
a much more exciting project on the horizon.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>I am not snoyjerk</title>
		<published>2018-05-28T00:00:00+00:00</published>
		<updated>2018-05-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/05/i-am-not-snoyjerk/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/05/i-am-not-snoyjerk/</id>
		<content type="html">&lt;p&gt;There&#x27;s a user on Reddit with the handle snoyjerk. Since there has
been some confusion recently, I&#x27;d like to set the record straight:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I am not snoyjerk&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I don&#x27;t know who snoyjerk is&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I have never used &amp;quot;sock puppet&amp;quot; accounts to discuss Haskell or other
programming topics.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I have in the past used alternative accounts to discuss other
interests, like weight lifting, but have since stopped to avoid
any possible confusion.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Unless I&#x27;m overlooking something, all of my social media accounts
are under the name snoyberg.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I obviously can&#x27;t guarantee that every snoyberg out there is me,
there are simply too many social media sites.&lt;&#x2F;li&gt;
&lt;li&gt;I also have access to some other social media accounts. For
example, I&#x27;m pretty sure I have the credentials for FP
Complete&#x27;s Twitter account. But I&#x27;d imagine that&#x27;s pretty
obviously not intended to obfuscate my identity.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the past, I&#x27;ve jokingly&#x2F;sarcastically had some banter with
snoyjerk, which unfortunately gave the impression—or even
stated— that it was, in fact, my account. I can&#x27;t blame anyone
but myself for that. I apologize for the confusion, and hope this sets
the record straight.&lt;&#x2F;p&gt;
&lt;p&gt;Some relevant links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;8mo1uc&#x2F;my_open_source_goals&#x2F;dzpdmt7&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;8mo1uc&#x2F;my_open_source_goals&#x2F;dzpdmt7&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7shvxo&#x2F;hash_based_package_downloads_part_1_of_2&#x2F;dt5alxh&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7shvxo&#x2F;hash_based_package_downloads_part_1_of_2&#x2F;dt5alxh&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7shikr&#x2F;replacing_hackage_hash_based_package_downloads&#x2F;dt4sxpq&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7shikr&#x2F;replacing_hackage_hash_based_package_downloads&#x2F;dt4sxpq&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thanks to simonmic, duplode, and and gelisam for helping clarify this
in yesterday&#x27;s Reddit thread.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My open source goals</title>
		<published>2018-05-28T00:00:00+00:00</published>
		<updated>2018-05-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/05/my-open-source-goals/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/05/my-open-source-goals/</id>
		<content type="html">&lt;p&gt;I&#x27;ve worked on a lot of open source Haskell projects over the past ten
years, and continue to do so today. It&#x27;s been a great source of fun
and learning. It has been, and will continue to be, a major part of my
life, my work, and my hobbies. However, I&#x27;m making a conscious
decision to shift where my focus lies.&lt;&#x2F;p&gt;
&lt;p&gt;My goal is to focus much more on enabling others to work on projects,
rather than doing so myself. I&#x27;ve come to this decision for a number
of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I think it&#x27;s healthiest for the projects in question to distribute the
knowledge of how to maintain them, debug them, document them, etc, across a
larger group of people. (In other words: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bus_factor&quot;&gt;bus
factor&lt;&#x2F;a&gt;.)&lt;&#x2F;li&gt;
&lt;li&gt;I don&#x27;t want to set myself up as a bottleneck on any project. Doing so hurts
the project (per previous point), and ultimately will force me to make
decisions on which projects will and will not be supported.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m hoping that I can offer help and mentorship to people trying to get more
involved in open source development, maintenance, or other activities. I know
how valuable these activities have been to me personally and professionally. I
hope I can help others do the same.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you see one of my open source projects that you&#x27;d like to become a
comaintainer on, or contribute in some way, reach out. I can&#x27;t make promises
about my time, but I &lt;em&gt;can&lt;&#x2F;em&gt; promise that I will strive to make time available to
mentor people looking to get more involved.&lt;&#x2F;p&gt;
&lt;p&gt;In collaboration with some others, I&#x27;m planning on writing some kind of &amp;quot;guide
to open source maintenance&amp;quot; document to help keep the projects I&#x27;m maintaining
running smoothly. I&#x27;m hoping that such a write-up will be helpful for others. More
generally: I encourage others who maintain open source projects to take similar
steps towards helping others join their projects.&lt;&#x2F;p&gt;
&lt;p&gt;Related documents I&#x27;ve written before include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;how-to-send-me-a-pull-request&quot;&gt;How to send me a pull request&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;commercialhaskell&#x2F;blob&#x2F;master&#x2F;guide&#x2F;maintainer-communication.md&quot;&gt;Maintainer communication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;communication&quot;&gt;Communication&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re interested in this, you&#x27;re probably wondering how best to communicate
that to me. What I recommend is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pings on the Github issue tracker, or sending a PR, are pretty great, and
others can see them too&lt;&#x2F;li&gt;
&lt;li&gt;Sending me a private email can work also&lt;&#x2F;li&gt;
&lt;li&gt;Chat me up in person! I&#x27;m going to be at LambdaConf next week, and at two
Israeli conferences (Scanapeno and FLIP) in July. If you see me at a
conference, meetup, or elsewhere, I&#x27;m always happy to discuss open source
projects.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve been looking into the best option for text based chat. (This is why I
did that &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;05&#x2F;guide-to-matrix-riot&quot;&gt;write-up on
matrix.org&lt;&#x2F;a&gt; a few
weeks back.) After a lot of review and experimentation, it looks for now like
&lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&quot;&gt;gitter.im&lt;&#x2F;a&gt; is the best bet for now. I&#x27;m already hanging out on
&lt;a href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;commercialhaskell&#x2F;commercialhaskell&quot;&gt;commercialhaskell&#x2F;commercialhaskell&lt;&#x2F;a&gt;
if you want to hit me up there.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(I considered writing a blog post about the comparison of different chat
options I did, but ultimately decided it would be more noise than it&#x27;s worth.
If people are really curious how I ended up on gitter.im, let me know, and I&#x27;ll
reconsider publishing that post.)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building packages outside snapshots</title>
		<published>2018-05-23T00:00:00+00:00</published>
		<updated>2018-05-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/05/building-packages-outside-snapshots/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/05/building-packages-outside-snapshots/</id>
		<content type="html">&lt;p&gt;A question popped up the other day on Stack Overflow, and I thought I&#x27;d write
up in a bit more detail how to solve it. There are some packages that we&#x27;d like
to install, but which are not in Stackage snapshots. Trying to build them may
end up with an error message like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ stack install idris

Error: While constructing the build plan, the following exceptions were encountered:

In the dependencies for idris-1.2.0:
    ansi-terminal-0.8.0.4 from stack configuration does not match &amp;lt;0.8  (latest matching version is 0.7.1.1)
needed since idris is a build target.

Some different approaches to resolving this:

  * Set &amp;#39;allow-newer: true&amp;#39; to ignore all version constraints and build anyway.

  * Consider trying &amp;#39;stack solver&amp;#39;, which uses the cabal-install solver to attempt to find some working build
    configuration. This can be convenient when dealing with many complicated constraint errors, but results may be
    unpredictable.

  * Recommended action: try adding the following to your extra-deps in &#x2F;home&#x2F;michael&#x2F;.stack&#x2F;global-project&#x2F;stack.yaml:

- ansi-terminal-0.7.1.1

Plan construction failed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Note: depending on when you run these commands, view the pages below, and
local settings, you may get different output.)&lt;&#x2F;p&gt;
&lt;p&gt;What this is saying is that Stack is currently configured to use a snapshot
which includes &lt;code&gt;ansi-terminal-0.8.0.4&lt;&#x2F;code&gt;. However, &lt;code&gt;idris-1.2.0&lt;&#x2F;code&gt; has an upper
bound on &lt;code&gt;ansi-terminal&lt;&#x2F;code&gt; that prevents that usage. There are probably two
solutions to this problem that you&#x27;d think of (especially since the error
message mentions them):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Ignore the dependency bounds and hope for the best with &lt;code&gt;--allow-newer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use a dependency solver (via &lt;code&gt;cabal-install&lt;&#x2F;code&gt;) to try to come up with a
complete new build plan&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Both of these approaches run the risk of coming up with a build plan that
doesn&#x27;t work, resulting in wasted time ending in a failed compilation. However,
in some cases, there&#x27;s another option in some cases. If I look at the &lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;idris&quot;&gt;package
page for Idris on Stackage&lt;&#x2F;a&gt;, I see the
following:&lt;&#x2F;p&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;FRqRlOc.png&quot; alt=&quot;Package page for Idris&quot; style=&quot;max-width: 100%&quot;&gt;
&lt;p&gt;It turns out that Idris 1.2.0 already appeared in a Stackage snapshot. At the
very least, it was in LTS Haskell 10.10 and Stackage Nightly 2018-03-10. We can
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;idris&#x2F;snapshots&quot;&gt;follow that link at the
bottom&lt;&#x2F;a&gt; to get a complete
list of snapshots Idris appears in.&lt;&#x2F;p&gt;
&lt;p&gt;With this in mind, it&#x27;s easy to build Idris:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ stack install --resolver lts-10.10 idris
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives you a way to tell Stack about a known good build plan and avoid
spinning your wheels. This approach works best for packages providing
executables you want to use, as opposed to libraries you want to build on. For
the latter, this approach would likely end up pointing you at multiple
conflicting snapshots. Overall, the best bet there is to get the missing
packages &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;MAINTAINERS.md&quot;&gt;added to
Stackage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You may ask: couldn&#x27;t Stack automatically do this for me? Well, it can&#x27;t
&lt;em&gt;guess&lt;&#x2F;em&gt; what you want in this case. It would be ambiguous if you&#x27;re trying to
build a package with your currently selected snapshot so that it&#x27;s available to
your code, for example, versus just creating an executable. But it would also
be possible to add a flag like &lt;code&gt;--select-latest-snapshot&lt;&#x2F;code&gt; or similar to
automatically choose the snapshot with the best chance of building the package.
&lt;code&gt;stack init&lt;&#x2F;code&gt; already does something like this.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Guide to matrix.org and riot.im</title>
		<published>2018-05-14T00:00:00+00:00</published>
		<updated>2018-05-14T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/05/guide-to-matrix-riot/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/05/guide-to-matrix-riot/</id>
		<content type="html">&lt;p&gt;NOTE: This guide is essentially me taking notes while I learn about
the matrix.org&#x2F;riot.im projects. Some of it is almost certainly
wrong. And I&#x27;m trying to take notes on how an end user uninterested in
the technical underpinnings work. There is clearly &lt;em&gt;much more&lt;&#x2F;em&gt; to
these projects than I imply here. If you have suggestions for
improvements, please
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;snoyman.com-content&#x2F;edit&#x2F;master&#x2F;posts&#x2F;guide-to-matrix-riot.md&quot;&gt;send a PR&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As anyone on the internet or a cell phone knows, there are very, very
many different and competing messenger applications out there. I
recently started using Matrix and Riot. I didn&#x27;t find a good &amp;quot;getting
started&amp;quot; guide to these systems, and so decided to write down my
findings here in such a setup.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to belabor this point too much, but I want to at least
acknowledge the question: why should I start using a new system when
so many other, more popular options exist? And especially one that
apparently requires a guide to use correctly! Here is my quick list of
reasons why I started using these systems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fully open source tooling and open protocols: no lock in at all&lt;&#x2F;li&gt;
&lt;li&gt;Potential to use alternative, lighter-weight clients if desired&lt;&#x2F;li&gt;
&lt;li&gt;Encryption&lt;&#x2F;li&gt;
&lt;li&gt;Full decentralization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If these reasons don&#x27;t seem important to you, you may want to stick
with more mainstream tooling. I&#x27;m particularly interested in these
options for open source project communication, which is also why I&#x27;m
writing this blog post (to help others onboard more easily). More on
that topic in a separate blog post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matrix-org-vs-riot-im&quot;&gt;Matrix.org vs Riot.im&lt;&#x2F;h2&gt;
&lt;p&gt;Matrix, hosted at &lt;a href=&quot;https:&#x2F;&#x2F;www.matrix.org&quot;&gt;matrix.org&lt;&#x2F;a&gt;, is &amp;quot;An open
network for secure, decentralized communication.&amp;quot; It is a protocol
people use to communicate with each other. There is a concrete server at
matrix.org that speaks this protocol, but you&#x27;re free to run your own
server on your own machine. That&#x27;s the &amp;quot;decentralized&amp;quot; aspect of
things.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;riot.im&quot;&gt;Riot&lt;&#x2F;a&gt; is the &amp;quot;default&amp;quot; application for talking with
Matrix. It&#x27;s a web app, a Desktop app (via Electron), and a mobile
app. Just like the server, the client has
&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;docs&#x2F;projects&#x2F;try-matrix-now.html&quot;&gt;alternatives&lt;&#x2F;a&gt;
as well, including text-based interfaces.&lt;&#x2F;p&gt;
&lt;p&gt;Since I&#x27;m going for simple overview of the common use case here, I&#x27;m
going to assume you&#x27;re using the matrix.org server and the Riot.im
client.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identifiers-entities&quot;&gt;Identifiers&#x2F;entities&lt;&#x2F;h2&gt;
&lt;p&gt;As you&#x27;d expect, there are users on Matrix. You can create an account
with Riot and get a username. I did this myself, and created my
standard username: &lt;code&gt;snoyberg&lt;&#x2F;code&gt;. If Matrix was a more standard system,
you may think you could find me as &lt;code&gt;@snoyberg&lt;&#x2F;code&gt;. However, that&#x27;s not
the case. Remember, there are different servers in the network, and
&lt;code&gt;matrix.org&lt;&#x2F;code&gt; is just one of them. Therefore, we need to state which
server I&#x27;m a part of. Therefore, my identifier is
&lt;code&gt;@snoyberg:matrix.org&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a convenient site, &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&quot;&gt;matrix.to&lt;&#x2F;a&gt;, which will
allow you to create URLs linking to specific entities. When you visit
these pages, you&#x27;ll see links to communicate with those entities. If
you enter &lt;code&gt;@snoyberg:matrix.org&lt;&#x2F;code&gt; on &lt;code&gt;matrix.to&lt;&#x2F;code&gt;, you&#x27;ll get the URL
&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;@snoyberg:matrix.org&quot;&gt;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;@snoyberg:matrix.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Besides users, there are two other entities you can create and
interact with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Chat rooms, which begin with &lt;code&gt;#&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Communities (aka teams and groups), which begin with &lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As two concrete examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;@commercialhaskell:matrix.org&quot;&gt;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;@commercialhaskell:matrix.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;+commercialhaskell:matrix.org&quot;&gt;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;+commercialhaskell:matrix.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt; You can use https:&#x2F;&#x2F;matrix.to to create links to
entities. Entities must include the server they are a part of, which
will usually be &lt;code&gt;:matrix.org&lt;&#x2F;code&gt; at the end. The &lt;code&gt;@&lt;&#x2F;code&gt; prefix is for users,
&lt;code&gt;#&lt;&#x2F;code&gt; is for channels, and &lt;code&gt;+&lt;&#x2F;code&gt; is for communitites.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rooms&quot;&gt;Rooms&lt;&#x2F;h2&gt;
&lt;p&gt;Rooms are places where multiple people can have a conversation. You can create a new room with the icon with a &lt;code&gt;+&lt;&#x2F;code&gt; sign in the bottom-left corner of Riot. You can give each room a name when creating it. Once you&#x27;re in the room, you can invite people via the &amp;quot;Invite&amp;quot; icon in the bottom right.&lt;&#x2F;p&gt;
&lt;p&gt;You can invite via email address. If they aren&#x27;t already on Matrix,
they&#x27;ll get an invitation email to sign up. You can also invite via
ID. Remember, if you wanted to invite me, don&#x27;t just use &lt;code&gt;snoyberg&lt;&#x2F;code&gt;;
you need to use &lt;code&gt;@snoyberg:matrix.org&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can click on the gear icon in the top-middle of the screen to open
a bunch of settings for a room. Changing the name and topic of the
room are fairly self-explanatory. To me, the most interesting settings
are around privacy.&lt;&#x2F;p&gt;
&lt;p&gt;You can change who has access to a room. By default, each person must
be invited to the room. You can also allow people to join via a
link. In order to do this, you need to create an address for a
room. This would be something like &lt;code&gt;#myroomid:matrix.org&lt;&#x2F;code&gt;. For
example, I created a room
&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#commercialhaskell:matrix.org&quot;&gt;#commercialhaskell:matrix.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can also choose whether a room will be listed in the Matrix
directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;communities&quot;&gt;Communities&lt;&#x2F;h2&gt;
&lt;p&gt;Communities seem to be a relatively new feature, and not all clients support them yet. It seems to me that they are adding two nice things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a description for a community&lt;&#x2F;li&gt;
&lt;li&gt;Add a bunch of related rooms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m still exploring this feature, but I think it will fill the exact
niche I need for my open source project maintenance. If you&#x27;re
interested, you can check out the
&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;+commercialhaskell:matrix.org&quot;&gt;Commercial Haskell community&lt;&#x2F;a&gt;
I created.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bridging&quot;&gt;Bridging&lt;&#x2F;h2&gt;
&lt;p&gt;This seems to be a &amp;quot;killer feature&amp;quot; for Matrix. There are &lt;em&gt;lots&lt;&#x2F;em&gt; of
apps available for it to bridge with other systems, including IRC and
Slack. For example,
&lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#haskell:matrix.org&quot;&gt;#haskell:matrix.org&lt;&#x2F;a&gt; is a
bridge to the #haskell channel on Freenode (IRC).&lt;&#x2F;p&gt;
&lt;p&gt;For open source work, I&#x27;m hoping that this kind of bridging will allow
people who prefer IRC to interact with those looking for clients with
a different interface.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE May 15, 2018&lt;&#x2F;strong&gt; I found a great guide that demonstrates how to
get tighter integration with IRC:
&lt;a href=&quot;https:&#x2F;&#x2F;opensource.com&#x2F;article&#x2F;17&#x2F;5&#x2F;introducing-riot-IRC&quot;&gt;https:&#x2F;&#x2F;opensource.com&#x2F;article&#x2F;17&#x2F;5&#x2F;introducing-riot-IRC&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stop breaking compatibility</title>
		<published>2018-04-01T00:00:00+00:00</published>
		<updated>2018-04-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/04/stop-breaking-compatibility/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/04/stop-breaking-compatibility/</id>
		<content type="html">&lt;p&gt;To get things started correctly, I&#x27;d like to define backwards
compatibility as the following:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maintaining the invariant that, amongst successive versions of a
library or tool, software using that library or tool continues to
build and execute with matching semantics (though perhaps different
performance characteristics).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is some wiggle room for defining if a change is properly
backwards compatible. If we introduce a new identifier which conflicts
with an old one, this may break a build, but most people accept this
as &amp;quot;backwards compatible enough.&amp;quot; Also, fixing a bug in an
implementation may, in some cases,
&lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;1172&#x2F;&quot;&gt;break something&lt;&#x2F;a&gt;. But let&#x27;s ignore the subtle
cases, and instead just focus on the big picture: I released some new
library, and it changed the type signature of a function, tweaked a
data type, or significantly altered runtime behavior.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s just cut to the chase: every single time you break backwards
compatibility should be considered a software crime. I&#x27;m going to demonstrate
why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-wastes-time&quot;&gt;It wastes time&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s face it: changelogs are a total waste of time. No one ever reads
them. Ever. And the only reason you&#x27;re writing them is to notify
people of backwards incompatible changes. So now you&#x27;ve wasted the
time of two groups of people:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The library maintainer has to write a changelog that no one is going
to read&lt;&#x2F;li&gt;
&lt;li&gt;Users of a library have to spend time reading the changelog that
they&#x27;re never going to read anyway&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead, try this one simple trick: never break the API in any way. It
takes literally no time to not break things. So save yourself and your
users some time, and:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t write useless changelogs&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t break APIs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;freedom-is-slavery&quot;&gt;Freedom is Slavery&lt;&#x2F;h2&gt;
&lt;p&gt;The freedom to break an API is a false freedom. In fact, you are now a slave. You&#x27;re a slave to perfection. You will never be satisfied with your API. You&#x27;ll always want to improve it. You&#x27;ll want to make it safer, easier to use, or provide more efficient functions. If you go down this route, &lt;strong&gt;you&#x27;ll never be free&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Instead, embrace the true freedom: your API will never be perfect. People will limp along with it as is. But this is far better than ever making a user change their code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;follow-java-s-example&quot;&gt;Follow Java&#x27;s example&lt;&#x2F;h2&gt;
&lt;p&gt;Java avoids backwards incompatible changes. And there has literally never been a downside to this approach. Code from 20 years ago works perfectly on modern JVMs without any form of modification, and it is a pleasure to write against Java APIs. After all: who minds a little cruft if you don&#x27;t have to learn new APIs ever?&lt;&#x2F;p&gt;
&lt;p&gt;Some people are concerned that new users of the language may have trouble understanding accumulated cruft. But seriously, just keep some log of things that have changed over time, which every new user must read, and you&#x27;ll be golden. Worried about scaring off new people? Don&#x27;t be. If they&#x27;re not willing to invest in learning the history of your language or library, you don&#x27;t want them anyway.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-prefixes-and-suffixes&quot;&gt;Use prefixes and suffixes&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you&#x27;ve written a function &lt;code&gt;theThing&lt;&#x2F;code&gt;. And now you&#x27;ve realized that the function needs to take some extra parameter. You&#x27;re tempted to change the signature. But that&#x27;s pure evil! Instead, follow one of these time-tested techniques:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Call the new function, of course, &lt;code&gt;newTheThing&lt;&#x2F;code&gt;. The naming pattern is clear here: &lt;code&gt;newerTheThing&lt;&#x2F;code&gt;, &lt;code&gt;newNewerTheThing&lt;&#x2F;code&gt;, &lt;code&gt;newerNewerTheThing&lt;&#x2F;code&gt;, etc. It&#x27;s totally obvious, easy to remember, and helpers users understand the work you&#x27;ve put in on your library over the years&lt;&#x2F;li&gt;
&lt;li&gt;If for some reason you don&#x27;t like that, you can go with the less elegant &lt;code&gt;_v2&lt;&#x2F;code&gt;, &lt;code&gt;_v3&lt;&#x2F;code&gt;, etc suffix: &lt;code&gt;newThing_v2&lt;&#x2F;code&gt;, &lt;code&gt;newThing_v3&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After all, it&#x27;s not like there&#x27;s any other place where you could increment a number to indicate that there have been changes in your library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compile-time-checking&quot;&gt;Compile time checking&lt;&#x2F;h2&gt;
&lt;p&gt;This approach may unironically be necessary for dynamically typed languages (cough, Python 3, cough). But pretend like all languages are actually good, and have nice type systems and compile-time checking.&lt;&#x2F;p&gt;
&lt;p&gt;You may think that we&#x27;re going through too much work here with maintaining backwards compatibility. After all, users will just have to build their project with the new release and then fix up compiler errors.&lt;&#x2F;p&gt;
&lt;p&gt;But let&#x27;s be honest here. No one uses CI. And no one pins versions of their dependencies. If you break backwards compat, you&#x27;re guaranteed to have dozens of production services just stop working tomorrow when the code fails to compile. There is literally nothing to do to stop this. Do you want to be responsible for taking down the worlds&#x27; banks just because you wanted to clean up an API? I didn&#x27;t think so.&lt;&#x2F;p&gt;
&lt;p&gt;Do the moral thing, and &lt;em&gt;don&#x27;t break APIs&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think I&#x27;ve made my point more than well enough. There is never a justification to break an API. Ever. At all. If you do it, you are an evil, immoral, selfish person. Stop thinking of beauty. Stop thinking of elegance. Stop thinking of an easy to use API. Let the cruft accumulate, embrace the cruft, live in the cruft, and the world will be a better place.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>LambdaConf Haskell Hackathon 2018</title>
		<published>2018-03-28T00:00:00+00:00</published>
		<updated>2018-03-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/03/lambdaconf-haskell-hackathon-2018/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/03/lambdaconf-haskell-hackathon-2018/</id>
		<content type="html">&lt;p&gt;On June 6, 2018, I&#x27;ll be running a Haskell Hackathon as a Mini-Conf
after LambdaConf. I&#x27;ve started a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;haskell-hackathon#readme&quot;&gt;Github repo&lt;&#x2F;a&gt;
for preparing for this hackathon, and I&#x27;d like to ask for people to
contribute, whether or not you&#x27;ll be attending the hackathon.&lt;&#x2F;p&gt;
&lt;p&gt;My goal with this repository is to provide a way for people
maintaining open source projects to submit work items that they would
like help with, and which they believe could be tackled by a new
contributor within the course of a day (or less!). Note that these
don&#x27;t necessarily need to be beginner-level tasks, but the issue
tracker does ask you to indicate the skill level you think is needed.&lt;&#x2F;p&gt;
&lt;p&gt;If you have such a task, please
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;haskell-hackathon&#x2F;issues&#x2F;new&quot;&gt;submit it as an issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And of course: if you&#x27;re going to be at LambdaConf, or otherwise will
be in or around Boulder on that date, you&#x27;re warmly welcome to attend
and participate in this hackathon. It will be a great opportunity to
dive in to the open source Haskell ecosystem, meet other Haskellers,
get some guidance, and&#x2F;or mentor others. If anyone has questions,
please feel free to reach out in the comments below or elsewhere. Hope
to see you there!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Quick guide to the Jewish Holidays</title>
		<published>2018-03-25T00:00:00+00:00</published>
		<updated>2018-03-25T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/03/quick-guide-jewish-holidays/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/03/quick-guide-jewish-holidays/</id>
		<content type="html">&lt;p&gt;At various points in the year, I end up sending out emails to
colleagues about some unavailability in my schedule due to the Jewish
holidays. These emails are always fairly brief, and don&#x27;t give all of
the explanation about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why I&#x27;m available on some holidays, but unavailable on others&lt;&#x2F;li&gt;
&lt;li&gt;Why the holidays seem to move throughout the year&lt;&#x2F;li&gt;
&lt;li&gt;Why I&#x27;m always unavailable starting the day before the holiday&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m writing up this blog post for anyone working with me, or trying to
interact with me in the open source world, who&#x27;s curious about these
things. Note that what I&#x27;m going to describe may not reflect everyone
who observes Jewish holidays. In particular, I&#x27;m referring to the
Orthodox Jewish observation of holidays, and the holiday schedule
within Israel (which is slightly different to outside of Israel).&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also some really cool math that comes into play, both
sunrise&#x2F;sunset calculations, and the lunar&#x2F;solar calendar
synchronization. But I don&#x27;t intend to get too deep into that (though
feel
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;hebrew-time&quot;&gt;free to read some code about the latter&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-jewish-day&quot;&gt;The Jewish day&lt;&#x2F;h2&gt;
&lt;p&gt;The standard, modern day is something that lasts from one midnight
(12am, or 00:00) to the next. The Jewish day instead lasts from one
sunset to the next. This means when a Jewish holiday falls on Friday,
April 6, 2018, it&#x27;s &lt;em&gt;actually&lt;&#x2F;em&gt; starting at sundown on Thursday.&lt;&#x2F;p&gt;
&lt;p&gt;An important ramification of this is: &lt;strong&gt;sundown depends completely on
your current location&lt;&#x2F;strong&gt; (think of timezones). A holiday may start at
6:30pm in my town in northern Israel, at 6:35pm in Haifa, at 8pm in
London, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;As a more advanced note: there&#x27;s a slight ambiguity about the
definition of sundown, whether it&#x27;s when the sun dips below the
horizon, or the sky goes dark. We&#x27;re typically strict in both
directions, starting holidays on the earlier mark, and ending them at
the later mark. So a 1 day Jewish holiday typically lasts 25 hours,
not 24.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-sabbath&quot;&gt;The Sabbath&lt;&#x2F;h2&gt;
&lt;p&gt;The Sabbath (aka Shabbat or Shabbos, depending on Hebrew
pronunciation) occurs every Saturday. Which, of course, means every
Friday evening at sundown, until Saturday evening at sundown. Orthodox
Jews observe a number of restrictions on Shabbat. There are far too
many to list here, but some examples are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No cooking food (it must be prepared in advance)&lt;&#x2F;li&gt;
&lt;li&gt;No using a computer&#x2F;cell phone&lt;&#x2F;li&gt;
&lt;li&gt;No sewing (a big problem for me)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That may explain to some readers why there&#x27;s a 25+ hour gap in my
communications every week.&lt;&#x2F;p&gt;
&lt;p&gt;Generally speaking, we refer to the restrictions as &amp;quot;no work,&amp;quot; but
that can be a bit misleading. Some things that may be considered
work—like moving heavy furniture around a house—aren&#x27;t
strictly prohibited. And some things that seems to not be
work—like driving to the beach—are not allowed. Without
learning (and living!) the detailed rules, it can be all but
impossible to guess what is and isn&#x27;t allowed on the Sabbath&#x2F;Shabbat.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jewish-calendar&quot;&gt;Jewish calendar&lt;&#x2F;h2&gt;
&lt;p&gt;The Jewish calendar (aka Hebrew calendar) is a lunar calendar: months
correspond to the cycles of the moon. The first of every Jewish month
(known as Rosh Chodesh) falls on or very close to a new moon, and the
15th falls on or near a full moon. Each Jewish month is either 29 or
30 days long.&lt;&#x2F;p&gt;
&lt;p&gt;However, in addition to being a lunar calendar, the Jewish calendar
synchronizes with the solar calendar. This is necessary, because we
have a requirement that one of the Jewish
holidays—Passover—fall out in Spring. There are on average
~354 days in a lunar 12 month cycles, and ~365 days in a complete
solar cycle. Therefore, every 7 out of 19 years we add a leap month.&lt;&#x2F;p&gt;
&lt;p&gt;Advanced note: we also have two months of variable length (Cheshvan
and Kislev, somewhere around October-December) to make all of the math
work out nicely.&lt;&#x2F;p&gt;
&lt;p&gt;Putting this all together: the Jewish calendar syncs up closely with the
Gregorian&#x2F;solar calendar, but not perfectly. Therefore, holidays will
appear to move around. Technically, the holidays are always on the
same day, just on a different calendar. And due to the solar
synchronization, they stay in the same general season.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jewish-holidays&quot;&gt;Jewish holidays&lt;&#x2F;h2&gt;
&lt;p&gt;There are a number of holidays and special days that fall throughout
the Hebrew calendar. Some of them have the status of a &amp;quot;holy day&amp;quot;, and
have almost all the same restrictions as the Sabbath. Others are lower
levels of holiness, and have less restrictions. Without getting into
all of the nitty-gritty details, I&#x27;ll break things up into 3
categories:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;holidays-where-work-is-prohibited&quot;&gt;Holidays where &amp;quot;work&amp;quot; is prohibited&lt;&#x2F;h3&gt;
&lt;p&gt;These holidays follow almost all the rules of the Sabbath:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rosh Hashana (new year): Tishrei 1 and 2, usually falls out around
September&lt;&#x2F;li&gt;
&lt;li&gt;Yom Kippur (day of atonement): Tishrei 10 (8 days later). Also a
fast day (no eating or drinking)&lt;&#x2F;li&gt;
&lt;li&gt;First day of Sukkot (tabernacles): Tishrei 15 (5 days later)&lt;&#x2F;li&gt;
&lt;li&gt;Shmini Atzeret (eighth day of pausing... bad translation): Tishrei
22 (7 days later)&lt;&#x2F;li&gt;
&lt;li&gt;First day of Pesach (Passover): Nissan 15, usually falls out around
April&lt;&#x2F;li&gt;
&lt;li&gt;Seventh day of Pesach: Nissan 21, 6 days later&lt;&#x2F;li&gt;
&lt;li&gt;Shavuot (feast of weeks): Sivan 6, usually falls out around May
(it&#x27;s always 49 days after the first day of Pesach)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One important thing to note: these holidays basically cluster into two
parts of the year: September&#x2F;October, also known as the high holiday
season, and Spring for Pesach and Shavuot. So if it seems like I
suddenly am unavailable a lot at the turn of the season: that&#x27;s why.&lt;&#x2F;p&gt;
&lt;p&gt;Advanced note: outside of Israel, most of these holidays change from
1 day to 2 days.  Both Rosh Hashana and Yom Kippur are exceptions: the
former is 2 days everywhere, the latter 1 day everywhere.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;holidays-with-reduced-work&quot;&gt;Holidays with reduced work&lt;&#x2F;h3&gt;
&lt;p&gt;These days don&#x27;t have the same level of prohibition on them for doing
work, but it&#x27;s generally considered a good thing to do less work.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Chol hamoed (intermediate days) Sukkot: Tishrei 16-21&lt;&#x2F;li&gt;
&lt;li&gt;Purim: Adar 14 (or 15 in Jerusalem)&lt;&#x2F;li&gt;
&lt;li&gt;Chol hamoed Pesach: Nissan 16-20&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While possibly the most famous of Jewish holidays, Chanukah (Kislev
25-Tevet 2 or 3) is actually very unrestricted.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fast-days&quot;&gt;Fast days&lt;&#x2F;h3&gt;
&lt;p&gt;There are 6 fast days in the Jewish calendar. Four of them are 12 hour
fasts, from sunrise to sunset, and involve no eating or drinking. They
are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fast of Gedalliah: Tishrei 3&lt;&#x2F;li&gt;
&lt;li&gt;Fast of Tevet: Tevet 10, around January&lt;&#x2F;li&gt;
&lt;li&gt;Fast of Esther: Adar 13 (day before Purim)&lt;&#x2F;li&gt;
&lt;li&gt;Fast of Tammuz: Tammuz 17, around July&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two other more serious fasts. One was mentioned above (Yom
Kippur). The other is Tisha B&#x27;av (Av 9, around August). Both are 24
hour fasts (sundown to sundown), and involve additional restrictions
(like not wearing leather shoes). As mentioned: Yom Kippur is fully
forbidden for &amp;quot;work&amp;quot; like the Sabbath. Tisha B&#x27;av is a day of mourning
on the Jewish calendar, and while electronics and the like are
allowed, we are not supposed to do activities that distract us from
mourning, especially in the first half of the day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;special-restrictions&quot;&gt;Special restrictions&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to the rules above, some special restrictions apply to
some holidays.&lt;&#x2F;p&gt;
&lt;p&gt;On Pesach (Passover), we are not allowed to eat any leavened
items. This basically includes any grain products, though that&#x27;s a
massive oversimplification. Due to how we execute this restriction,
there&#x27;s a lot of work that has to be done in advance of Passover,
which can be simplified to &amp;quot;the biggest spring cleaning you&#x27;ve ever
seen.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;On Sukkot (Tabernacles), we&#x27;re required to eat &amp;quot;meals&amp;quot; in a temporary
structure known as a Sukkah, which is sort of like a tent. This
doesn&#x27;t usually affect my work too much, but can make it all but
impossible to travel on these days.&lt;&#x2F;p&gt;
&lt;p&gt;Note that these restrictions apply to both the three &amp;quot;holy days&amp;quot; of
the holidays listed above (first and seventh days of Pesach, and first
day of Sukkot), as well as the intermediate days. Said another way:
these restrictions each apply for a total of 7 days (or 8 days outside
of Israel).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advanced-why-the-israel-diaspora-difference&quot;&gt;Advanced: why the Israel&#x2F;diaspora difference?&lt;&#x2F;h2&gt;
&lt;p&gt;Back in the times of the Jewish temple, we didn&#x27;t have a fixed
calendar. Instead, new months would be declared by the high court in
Jerusalem (the Sanhedrin) based on eye witness testimony of the new
moon. As a result, we couldn&#x27;t know from one month to the next for
certain whether the previous month would end up being 29 or 30 days
(though we probably had a good idea based on lunar calculations).&lt;&#x2F;p&gt;
&lt;p&gt;If you notice, Rosh Hashana falls on the 1st and 2nd of the month. The
funny thing is: no one would know on that first day if that day was
going to be Tishrei 1 (because the previous month was 29 days) or the
30th day of the previous month of Elul, because no witness testimony
came forward. If no witnesses came, then in Jerusalem they would need
to celebrate the following day as the real Tishrei 1. If witnesses did
come, they wouldn&#x27;t need to.&lt;&#x2F;p&gt;
&lt;p&gt;However, there was no way to notify people outside of Jerusalem
whether the previous month turned out to be 29 or 30 days. So everyone
else needed to &lt;em&gt;always&lt;&#x2F;em&gt; observe 2 days to be safe.&lt;&#x2F;p&gt;
&lt;p&gt;For all of the other holidays: the high court would send out
messengers to notify everyone of the length of the previous month. The
messengers would have time to reach all of the land of Israel (it&#x27;s a
really small place), and therefore within Israel, there was no doubt
about what date it was. But outside of Israel, in many places, the
messengers wouldn&#x27;t arrive in time. Therefore, they needed to observe
2 days instead. The one exception to this rule was Yom Kippur, since
it wasn&#x27;t feasible to make people fast for 48 hours straight, and
therefore since the month of Elul had historically always been 29
days, they could assume that had been the case.&lt;&#x2F;p&gt;
&lt;p&gt;Some time later in Jewish history, we switched over to a calendar
system that didn&#x27;t rely upon eye witness testimony. However, we
continued the custom of observing two days outside of Israel.&lt;&#x2F;p&gt;
&lt;p&gt;You may be brimming with questions about this, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why continue observing something doubtful, when there&#x27;s no doubt?&lt;&#x2F;li&gt;
&lt;li&gt;What about places like Egypt and Jordan that were close enough for
messengers to arrive?&lt;&#x2F;li&gt;
&lt;li&gt;What about the holiday of Shavuot (Feast of Weeks), where there was
more than enough time for messengers to arrive?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These and many other topics can be found in your local Talmudic study
session :).&lt;&#x2F;p&gt;
&lt;p&gt;Final side note: there was a time when we would announce the new month
by lighting fires on mountain tops. It&#x27;s just like the &amp;quot;beacons of
Gondor&amp;quot; seen in &amp;quot;The Return of the King.&amp;quot;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell Ecosystem Requests</title>
		<published>2018-02-18T00:00:00+00:00</published>
		<updated>2018-02-18T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/02/haskell-ecosystem-requests/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/02/haskell-ecosystem-requests/</id>
		<content type="html">&lt;p&gt;Last month, I
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;01&#x2F;slurp&quot;&gt;clarified some parts of the SLURP proposal&lt;&#x2F;a&gt;. I&#x27;m
intentionally &lt;em&gt;not&lt;&#x2F;em&gt; getting into the SLURP proposal itself here, if
you missed that episode, don&#x27;t worry about it. One of the outcomes of
that blog post was that I shared some of the requests I had made in
private that ultimately led to the SLURP proposal.&lt;&#x2F;p&gt;
&lt;p&gt;A single comment in a mega-thread on Github is hardly a good place to
write down these requests, however, and it seems like there&#x27;s no
progress on them. I&#x27;m going to instead put down these ideas here, with
a bit more explanation, and a few more ideas that have popped up since
then.&lt;&#x2F;p&gt;
&lt;p&gt;(If you really want to, feel free to see the context of my
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;ecosystem-proposals&#x2F;pull&#x2F;4#issuecomment-360044280&quot;&gt;original comment&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;These points should be made in some kind of more official forum, but:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I&#x27;m honestly not sure where that forum is&lt;&#x2F;li&gt;
&lt;li&gt;I don&#x27;t believe the official forums we typically use for
discussions of community infrastructure are nearly visible enough
to most community members&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So I&#x27;ll start the conversation here, and later we can move it to the
right place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pvp-adherence-is-optional&quot;&gt;PVP adherence is optional&lt;&#x2F;h2&gt;
&lt;p&gt;I would like to see some kind of statement on Hackage that says
something like, &amp;quot;PVP adherence is recommended, but not required. You
are free to upload a package even if it does not conform to the PVP.&amp;quot;
Which I realize is in fact &lt;em&gt;exactly&lt;&#x2F;em&gt; what the current policy is, but
in many discussions, this was unclear to people. And have a clear
sentence to be quoted when online discussions get heated would be
useful. Without something like this, I believe that we will continue
having regular online flamewars about the PVP, which is the biggest
thing I&#x27;ve been trying to get to stop over the past few years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hackage-trustee-guidelines&quot;&gt;Hackage Trustee guidelines&lt;&#x2F;h2&gt;
&lt;p&gt;Going along with this, I would like to request a change to the Hackage Trustee
guidelines (or whatever the appropriate term is), namely that it is
not appropriate to PVP police on social media. Sending PRs and opening
issues: totally acceptable. Emails to authors: totally acceptable. If
an author requests that these stop: they must stop. Publicly
criticizing an author for not following the PVP: unacceptable. I &lt;em&gt;do&lt;&#x2F;em&gt;
realize that enforcing a policy on how people behave personally is
difficult. But I&#x27;d be happy to see the change &lt;em&gt;even if it wasn&#x27;t
easily enforceable&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;downstream-projects&quot;&gt;Downstream projects&lt;&#x2F;h2&gt;
&lt;p&gt;Private discussions tried to achieve some kind of technical policy
which would avoid breakage to Stackage and Stack. It seems like those
private discussions did not reach any conclusion. However, regardless
of any technical policy that is put in place, I would request simple
goal be stated:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;GHC, Hackage, and Cabal will strive to meet the needs of commonly
used downstream projects, including but not limited to Stackage,
Stack, and Nix.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not asking for any demands of compatibility or testing, simply a
stated policy that &amp;quot;it works with cabal-install, that&#x27;s all that
matters&amp;quot; is not a sufficient response.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maintainer-guidelines&quot;&gt;Maintainer guidelines&lt;&#x2F;h2&gt;
&lt;p&gt;There have been a number of issues and pull requests recently where
contributors to some infrastructure projects have been discouraged by
the unclear process for getting their changes included upstream. See,
as examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;cabal&#x2F;pull&#x2F;4696&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;cabal&#x2F;pull&#x2F;4696&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;pull&#x2F;203&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;pull&#x2F;203&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More generally, there is an ongoing culture in some places of
goals&#x2F;agendas&#x2F;plans being made privately and not shared, which leads
to an inability of people outside of an inner circle to
contribute. See, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;np.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7tykqi&#x2F;should_stackage_ignore_version_bounds&#x2F;dtgn1eb&#x2F;&quot;&gt;https:&#x2F;&#x2F;np.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;7tykqi&#x2F;should_stackage_ignore_version_bounds&#x2F;dtgn1eb&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I would like to recommend some maintainer guidelines be put in place
for any core Haskell packages and projects. (What constitutes &amp;quot;core&amp;quot;
could definitely be up for debate as well.) I&#x27;d like to see some rules
like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Plans for significant changes must start as an issue in an issue
tracker (see
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;GabrielG439&#x2F;status&#x2F;963659683557933057&quot;&gt;Gabriel&#x27;s golden rule&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Plans for major changes should have a mention in a more public forum
than an issue tracker. As a concrete example: the newly added &lt;code&gt;^&amp;gt;=&lt;&#x2F;code&gt;
operator has significant impacts on how downstream projects like
Stackage interact with dependency bounds, but no public comment
period was granted to provide input before the 2.0 release. (And
even post release, as referenced above, the full plan has not been
revealed.)&lt;&#x2F;li&gt;
&lt;li&gt;Pull requests which are rejected are given a reason for being
rejected (this includes simple refusal to merge). See, for example,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;pull&#x2F;206#issuecomment-366153260&quot;&gt;hackage-security #206&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are likely many other guidelines we could come up with, some
more onerous than others. I encourage others to recommend other
ideas too. One possible source of inspiration for this could be the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;commercialhaskell&#x2F;blob&#x2F;master&#x2F;guide&#x2F;maintainer-communication.md&quot;&gt;maintainer communication advice&lt;&#x2F;a&gt;
I wrote up a few years ago.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stack Patching Policy</title>
		<published>2018-02-14T00:00:00+00:00</published>
		<updated>2018-02-14T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/02/stack-patching-policy/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/02/stack-patching-policy/</id>
		<content type="html">&lt;p&gt;This blog post is about a potential policy decision affecting the
maintenance of the Stack code base itself. It will affect contributors
to the project, and those building Stack for other purposes (such as
maintainers of Linux distro packages). It will only indirectly affect
end users, as hopefully is made clear in the discussion below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;3866&quot;&gt;&lt;strong&gt;Github issue for official discussion&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today&quot;&gt;Today&lt;&#x2F;h2&gt;
&lt;p&gt;Until now, every version of Stack that has been released (or even
merged to &lt;code&gt;master&lt;&#x2F;code&gt;, unless I&#x27;m mistaken) has exclusively used versions
of dependencies available on Hackage. It has not used the &lt;code&gt;extra-dep&lt;&#x2F;code&gt;
archive or Git repo feature, or submodules to include alternative
versions of source code. This means that, for the most part, you get
the same Stack whether you get an official download, run &lt;code&gt;stack build&lt;&#x2F;code&gt;
inside the source tree, use &lt;code&gt;stack build&lt;&#x2F;code&gt; using a Stackage snapshot,
or run &lt;code&gt;cabal install stack&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, as it happens, this isn&#x27;t &lt;em&gt;completely&lt;&#x2F;em&gt; true either. The official
Stack binaries pin the dependencies to exact versions which have been
tested together, via the &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; file. This means that the latter
two approaches of getting Stack binaries may have different behavior,
due to the snapshot or the dependency solver choosing different
versions. Some distros have
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;3848&quot;&gt;already run into bugs&lt;&#x2F;a&gt;
because of this.&lt;&#x2F;p&gt;
&lt;p&gt;To pull all of that back in: the official way to get Stack today will
guarantee a specific set of dependencies which have gone through the
full Stack integration test suite. Some alternative methods may not
provide the same level of guarantees. But with a bit of effort, you
can force Stack or cabal-install to build exactly the same thing the
official binaries provide.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-problem&quot;&gt;The new problem&lt;&#x2F;h2&gt;
&lt;p&gt;One issue that pops up is: what do we do in a situation where an
upstream package has a bug, and either cannot (within the timeframe
desired) or will not release a new version with a fix? The concrete
example that pops up is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;pull&#x2F;203&quot;&gt;hackage-security pull request #203&lt;&#x2F;a&gt;
(addressing
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;issues&#x2F;187&quot;&gt;issue #187&lt;&#x2F;a&gt;),
though the specific details aren&#x27;t too important for the discussion
here. The discussion here is about the general rule: &lt;em&gt;what should
Stack do in this case&lt;&#x2F;em&gt;?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;four-options&quot;&gt;Four options&lt;&#x2F;h2&gt;
&lt;p&gt;Others may be more creative than me, but I can see four different
options to respond in a situation like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Continue using the officially released upstream version of
hackage-security, bugs and all&lt;&#x2F;li&gt;
&lt;li&gt;Fork hackage-security on Hackage, and depend on the fork&lt;&#x2F;li&gt;
&lt;li&gt;Inline the code from hackage-security into Stack itself, and drop
the explicit dependency on hackage-security&lt;&#x2F;li&gt;
&lt;li&gt;Include hackage-security via an &lt;code&gt;extra-dep&lt;&#x2F;code&gt; pointing at a Git
commit. Our official builds will use the patched version of
hackage-security, and anyone building from Hackage will end up with
the unpatched version&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Option (1) is the status quo: we cannot fix this bug until upstream
fixes it. This is a disappointing outcome for users, as we know how to
fix the bug, and can imminently do so, but users will continue to
suffer regardless. However, it makes maintenance of Stack relatively
easy, and has no impact on packagers.&lt;&#x2F;p&gt;
&lt;p&gt;Options (2) and (3) are relatively similar: you end up with a forked
version of the codebase feeding into Stack, but all of the code
necessary is still available from Hackage. Packagers, and people
building with a command like &lt;code&gt;cabal install stack&lt;&#x2F;code&gt;, will still be able
to get the right version of the executable, assuming they pin their
dependencies the same way we do (as mentioned above).&lt;&#x2F;p&gt;
&lt;p&gt;Option (4) is a more radical departure. It means that &lt;code&gt;cabal install stack&lt;&#x2F;code&gt;, without quite a bit of extra work, will &lt;em&gt;not&lt;&#x2F;em&gt; result in the
same executable. You can argue that, given the assumed lack of pinning
of dependency versions, this isn&#x27;t too terribly different from the
status quo. And with the patch I&#x27;ve written for hackage-security now,
that&#x27;s basically true. However, it&#x27;s theoretically possible that, in
the future, we could have a patch that changes the API, and makes it
impossible to build Stack against the Hackage version of a package. So
let&#x27;s break up option 4 into two subchoices:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Option 4a: we can use an extra-dep, but we must ensure that the
Stack codebase continues to build against the Hackage version of the
package, even if it&#x27;s missing a bug fix, performance enhancement, or
whatever else we wrote&lt;&#x2F;li&gt;
&lt;li&gt;Option 4b: free-for-all: use whatever extra-deps we want, and state
that there is no support for building from Hackage alone.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;my-recommendation&quot;&gt;My recommendation&lt;&#x2F;h2&gt;
&lt;p&gt;I lean towards option 4a. I don&#x27;t want to upload forks to Hackage
(option (2)); it&#x27;s a confusing situation for users, and may be seen as
an aggressive move (which is certainly not the intent here). Option
(3) could work, but makes it more painful than it should be to work on
the Stack codebase. I&#x27;d rather not subject contributors (or myself!)
to that.&lt;&#x2F;p&gt;
&lt;p&gt;Option 4b is IMO a step too far: we&#x27;d be uploading something to
Hackage which we know for a fact could never be built there. At that
point, there&#x27;s not really any reason for uploading to Hackage. And
option 1 (we cannot fix bugs) is just too limiting.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest impact I can see is how others will end up packaging
Stack. But frankly, this is already a situation that deserves an
official discussion. There have certainly been plenty of cases in the
past where users tripped on bugs that didn&#x27;t exist in the official
Stack releases, and the Stack team needed to spend inordinate time
tracing this back to a bad build. So if nothing else, hopefully this
post will spawn some discussion of correct packaging behavior.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;official-discussion&quot;&gt;Official discussion&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned above, I&#x27;ve created a Github issue for an official
discussion of this topic:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;3866&quot;&gt;issue #3866&lt;&#x2F;a&gt;. Other
discussions (Disqus below, mailing list, etc) are welcome, but may not
receive the full attention of the Stack team.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Conduitpocalypse</title>
		<published>2018-02-04T00:00:00+00:00</published>
		<updated>2018-02-04T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/02/conduitpocalypse/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/02/conduitpocalypse/</id>
		<content type="html">&lt;p&gt;At the end of last week, I made a number of breaking releases of
libraries. The API impact of these changes was relatively minor, so
most code should continue to work with little to no modification. I&#x27;m
going to call out the major motivating changes for these releases
below. If I leave out a package from explanations, assume the reason
is just &amp;quot;upstream breaking changes caused breaking changes here.&amp;quot; And
of course check the relevant ChangeLogs for more details.&lt;&#x2F;p&gt;
&lt;p&gt;For completeness, the list of packages I released at the end of last
week is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;conduit-1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;conduit-extra-1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;network-conduit-tls-1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;resourcet-1.2.0&lt;&#x2F;li&gt;
&lt;li&gt;xml-conduit-1.8.0&lt;&#x2F;li&gt;
&lt;li&gt;html-conduit-1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;xml-hamlet-0.5.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-2.8.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-mongoDB-2.8.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-mysql-2.8.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-postgresql-2.8.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-sqlite-2.8.0&lt;&#x2F;li&gt;
&lt;li&gt;persistent-template-2.5.3.1&lt;&#x2F;li&gt;
&lt;li&gt;persistent-test-2.0.0.3&lt;&#x2F;li&gt;
&lt;li&gt;conduit-combinators-1.3.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-auth-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-auth-oauth-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-bin-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-core-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-eventsource-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-form-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-newsfeed-1.6.1.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-persistent-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-sitemap-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-static-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-test-1.6.0&lt;&#x2F;li&gt;
&lt;li&gt;yesod-websockets-0.3.0&lt;&#x2F;li&gt;
&lt;li&gt;classy-prelude-1.4.0&lt;&#x2F;li&gt;
&lt;li&gt;classy-prelude-conduit-1.4.0&lt;&#x2F;li&gt;
&lt;li&gt;classy-prelude-yesod-1.4.0&lt;&#x2F;li&gt;
&lt;li&gt;mutable-containers-0.3.4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;switching-to-monadunliftio&quot;&gt;Switching to MonadUnliftIO&lt;&#x2F;h2&gt;
&lt;p&gt;The primary instigator for this set of releases was moving my
libraries over from &lt;code&gt;MonadBaseControl&lt;&#x2F;code&gt; and &lt;code&gt;MonadCatch&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;MonadMask&lt;&#x2F;code&gt;
(from the &lt;code&gt;monad-control&lt;&#x2F;code&gt; and &lt;code&gt;exceptions&lt;&#x2F;code&gt; packages, respectively)
over to &lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt;. I
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=KZIN9f9rI34&quot;&gt;gave a talk recently&lt;&#x2F;a&gt;
(&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;reveal&#x2F;monad-transformer-state&quot;&gt;slides&lt;&#x2F;a&gt;) at
LambdaWorld about this topic, and have
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;07&#x2F;announcing-new-unliftio-library&quot;&gt;blogged&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;07&#x2F;the-rio-monad&quot;&gt;at&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;readert-design-pattern&quot;&gt;length&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;tale-of-two-brackets&quot;&gt;as well&lt;&#x2F;a&gt;.
Therefore, I&#x27;m not going to get into the arguments here of why I think
&lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt; is a better solution to this class of problems.&lt;&#x2F;p&gt;
&lt;p&gt;Unless I missed something, this change dropped direct dependency on
the &lt;code&gt;monad-control&lt;&#x2F;code&gt;, &lt;code&gt;lifted-base&lt;&#x2F;code&gt;, and &lt;code&gt;lifted-async&lt;&#x2F;code&gt; packages
throughout all of the packages listed above. The dependency on the
&lt;code&gt;exceptions&lt;&#x2F;code&gt; package remains, but only for using the &lt;code&gt;MonadThrow&lt;&#x2F;code&gt;
typeclass, not the &lt;code&gt;MonadCatch&lt;&#x2F;code&gt; and &lt;code&gt;MonadMask&lt;&#x2F;code&gt; typeclasses. (This
does leave open a question of whether we should still define valid
instances of &lt;code&gt;MonadCatch&lt;&#x2F;code&gt; and &lt;code&gt;MonadMask&lt;&#x2F;code&gt;, see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;rio&#x2F;issues&#x2F;38&quot;&gt;rio issue #38&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;User impact&lt;&#x2F;strong&gt;: You may need to switch some usages of the
&lt;code&gt;lifted-base&lt;&#x2F;code&gt; package to &lt;code&gt;unliftio&lt;&#x2F;code&gt; or similar, and update some type
signatures. It&#x27;s possible that if you&#x27;re using a monad transformer
stack which is not an instance of &lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt; that you&#x27;ll face
compilation issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;safer-runresourcet&quot;&gt;Safer runResourceT&lt;&#x2F;h2&gt;
&lt;p&gt;In previous versions of the &lt;code&gt;resourcet&lt;&#x2F;code&gt; package, if you register a
cleanup action which throws an exception itself, the exception would
be swallowed. In this new release, any exceptions thrown during
cleanup will be rethrown by &lt;code&gt;runResourceT&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conduit-cleanups&quot;&gt;conduit cleanups&lt;&#x2F;h2&gt;
&lt;p&gt;There were some big-ish changes to conduit:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Drop finalizers from the library,
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;01&#x2F;drop-conduits-finalizers&quot;&gt;as discussed previously&lt;&#x2F;a&gt;. This
resulted in the removal of the &lt;code&gt;yieldOr&lt;&#x2F;code&gt; and &lt;code&gt;addCleanup&lt;&#x2F;code&gt; functions,
and the replacement of the &lt;code&gt;ResumableSource&lt;&#x2F;code&gt; and &lt;code&gt;ResumableConduit&lt;&#x2F;code&gt;
types with the &lt;code&gt;SealedConduitT&lt;&#x2F;code&gt; type.&lt;&#x2F;li&gt;
&lt;li&gt;Deprecated the old type synonyms and operators from the
library. This has been
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;09&#x2F;proposed-conduit-reskin&quot;&gt;planned for a long time&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Moved the &lt;code&gt;Conduit&lt;&#x2F;code&gt; and &lt;code&gt;Data.Conduit.Combinators&lt;&#x2F;code&gt; modules from
&lt;code&gt;conduit-combinators&lt;&#x2F;code&gt; into &lt;code&gt;conduit&lt;&#x2F;code&gt; itself. This increases the
dependency footprint of conduit itself, but makes it a fully loaded
streaming data library. &lt;code&gt;conduit-combinators&lt;&#x2F;code&gt; is now an empty
library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;yesod-no-more-transformers&quot;&gt;Yesod: no more transformers!&lt;&#x2F;h2&gt;
&lt;p&gt;The changes mentioned in
&lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2018&#x2F;01&#x2F;upcoming-yesod-breaking-changes&quot;&gt;my last yesodweb.com blog post&lt;&#x2F;a&gt;
have been carried out. The biggest impact of that is replacing
&lt;code&gt;HandlerT&lt;&#x2F;code&gt; and &lt;code&gt;WidgetT&lt;&#x2F;code&gt; (as transformers over &lt;code&gt;IO&lt;&#x2F;code&gt;) with &lt;code&gt;HandlerFor&lt;&#x2F;code&gt;
and &lt;code&gt;WidgetFor&lt;&#x2F;code&gt;, as concrete monads parameterized by the site data
type. Thanks to backwards compat &lt;code&gt;HandlerT&lt;&#x2F;code&gt; and &lt;code&gt;WidgetT&lt;&#x2F;code&gt; type
synonyms, and the Template Haskell-generated &lt;code&gt;Handler&lt;&#x2F;code&gt; and &lt;code&gt;Widget&lt;&#x2F;code&gt;
synonyms being updated automatically, hopefully most users will feel
almost no impact from this. (Authors of subsites, however, will likely
have a more significant amount of work to do.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;that-s-it&quot;&gt;That&#x27;s it?&lt;&#x2F;h2&gt;
&lt;p&gt;Yeah, this post turned out much smaller than I expected. There are
likely breakages that I&#x27;ve forgotten about and which should be called
out. I&#x27;ll ask that if anyone notices particular breakages they needed
to work around, to please either include a note below or send a PR to
this blog post (link above) adding information on the change.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SLURP</title>
		<published>2018-01-24T00:00:00+00:00</published>
		<updated>2018-01-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/01/slurp/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/01/slurp/</id>
		<content type="html">&lt;p&gt;Many people in the community have seen the SLURP proposal. Some people
have asked my opinion. Some others have made some... let&#x27;s say
&lt;em&gt;colorful&lt;&#x2F;em&gt; statements about my noninvolvement in the discussion. Let
me set the record straight right now on why I&#x27;ve avoided the
topic. The authors showed me the proposal before it was published, and
I told them at that time I would not support it. I&#x27;ve also told them
that, out of respect to them, I would hold back on commenting on
SLURP. Unfortunately, that&#x27;s now led to two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Some people making some very pointed implications&lt;&#x2F;li&gt;
&lt;li&gt;Misunderstanding about the usage of the term &amp;quot;fork&amp;quot; in the proposal,
which unfortunately the authors have not rectified&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To be clear: the proposal is &lt;em&gt;not&lt;&#x2F;em&gt; mine, I did &lt;em&gt;not&lt;&#x2F;em&gt; ask for this
change, and I&#x27;m not &amp;quot;holding a gun&amp;quot; to anyone&#x27;s head. Those
descriptions aren&#x27;t true.  There are plenty of other statements I
could comment on as well, but it&#x27;s honestly not worth it.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what isn&#x27;t false: I regularly am in communication with many
people across the Haskell community and ecosystem management teams
about problems being faced. I interact with a broad group of users in
my work, hear complaints, and relay them. I have my own complaints,
and relay those as well. Some of these complaints have all pointed in
similar directions.&lt;&#x2F;p&gt;
&lt;p&gt;My hands are tied on what I can say publicly, since so many comments
are made in private emails that people object to being made
public. And I know (from experience) that there are detractors out
there who will straight out accuse me of lying. I&#x27;ve been avoiding
saying anything because of this constant accusation, but I&#x27;ve decided
to just put the info out there. I figure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;People who want to believe everything I do is malicious won&#x27;t care
if I have evidence anyway&lt;&#x2F;li&gt;
&lt;li&gt;People who are open to the possibility that I&#x27;m not evil will
hopefully take my statements at face value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One last foreword: I used to very openly discuss my thoughts on
architecture and ecosystem development. I believe it&#x27;s the only real
way to build an open source community. When tensions got their highest
in the Stack-vs-cabal days, many people rebelled against this public
broadcast methodology, and I&#x27;ve switched to quieter communication
channels. I think this is unfortunate, and I&#x27;d much rather talk openly
and loudly about ecosystem plans and let people have easy ways of
input. I object strongly to the mentality of discussing everything
behind closed doors. We&#x27;ll see if open discussions can resume at some
point.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-the-fork&quot;&gt;What&#x27;s the fork?&lt;&#x2F;h2&gt;
&lt;p&gt;It seems clear to me now that the vast majority of discussion on SLURP
has nothing to do with SLURP itself, but with its comments about
forking. I really do wish that the authors had been willing to speak
to that publicly if they were going to use the term fork in the
document. I will speak to what I know about forking in the Stackage
and Stack worlds. We&#x27;ll have to leave it to the authors to speak for
themselves as to whether my words here reflect what they&#x27;d intended.&lt;&#x2F;p&gt;
&lt;p&gt;The term &amp;quot;fork&amp;quot; here is definitely not being used in its most literal
sense of &amp;quot;taking a software project, hosting the source code
elsewhere, then continuing development under a different name&amp;quot; (my
made up definition). It&#x27;s referring to a more general split. Stack is
called by many a fork of cabal-install, for example, even though they
share no code (they share underlying libraries, like Cabal, of
course).&lt;&#x2F;p&gt;
&lt;p&gt;Since everyone is most fixated on this point, let me state it clearly:
I have been involved in absolutely 0 conversations where anyone wanted
to host a direct competitor to Hackage. At all. No one I know wants to
do this. I don&#x27;t want to do this. Stackage and Stack today feed from
Hackage, and no one I know wants to change that. No one I know wants
to try to take over control of Hackage, for that matter.&lt;&#x2F;p&gt;
&lt;p&gt;When &amp;quot;fork&amp;quot; of Hackage is mentioned, that seems like the most logical
conclusion to draw. I can guarantee that it&#x27;s not the case.&lt;&#x2F;p&gt;
&lt;p&gt;Now let me address some concrete pain points that may lead to some
kind of &amp;quot;fork.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hackage-revisions&quot;&gt;Hackage Revisions&lt;&#x2F;h2&gt;
&lt;p&gt;Many people are very outspoken about their dislike for Hackage
Revisions. I dislike Hackage Revisions. I have more reason than most
to dislike them: I&#x27;ve invested weeks to months of my life making
changes to multiple tools to support revisions. I could go through the
gory history of this, but it&#x27;s not worth it: it would just be a
programmer&#x27;s war stories session. So let&#x27;s turn to today.&lt;&#x2F;p&gt;
&lt;p&gt;With Stack 1.6, I finally got all of the pieces in place to fully
support revision pinnings. Stackage has already had revision pinning
for a long time. Stackage has the ability to list some packages as
ignoring revisions.&lt;&#x2F;p&gt;
&lt;p&gt;If you ask me today, I will still say revisions are a bad idea, they
should be disabled, and better solutions to the dependency resolution
problem implemented (I&#x27;ve discussed those at length in the past). At
the same time: the cost is now sunk. I still worry about the fact that
users do not, in fact, pin their extra-deps to specific revisions, and
that the rules for revisions on Hackage are far too lax. These a real
concerns that I care about, but also not the top of my personal
priority list.&lt;&#x2F;p&gt;
&lt;p&gt;Others, by the way, feel differently. I know many individuals who are
offended at the thought of a Hackage Trustee forcibly editing their
cabal files. I don&#x27;t disagree with them per se, but I&#x27;m also not as
passionate about this topic. In conversations with community leaders,
I&#x27;ve made this distinction very clear (at least, I&#x27;ve &lt;em&gt;tried&lt;&#x2F;em&gt; to make
it clear).&lt;&#x2F;p&gt;
&lt;p&gt;My biggest remaining concern about revisions is the social implication
they carry. Namely: the idea that someone else is responsible for the
stability of your build. I&#x27;ve mentioned many times that I believe a
huge source of our social tension is a world where you can complain to
an upstream developer because your build suddenly stopped
working. That&#x27;s a recipe for disaster, and is a fundamental flaw in
the PVP+dependency solving world. We need tooling that focuses instead
on fixed build plans. I&#x27;ve advocated for this for years, and
ultimately created Stack largely due to inability to get traction
upstream.&lt;&#x2F;p&gt;
&lt;p&gt;In sum: will revisions lead to anything of a fork? No.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;curation&quot;&gt;Curation&lt;&#x2F;h2&gt;
&lt;p&gt;A few weeks ago I tweeted:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I did that initially. When collaborating on GPS Haskell, I removed that functionality as a requirement of the Hackage, Cabal, and Haskell Platform teams. Then GPS died and we&amp;#39;re stuck unable to work around upstream breakage like this.&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;949385673982730240?ref_src=twsrc%5Etfw&quot;&gt;January 5, 2018&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;p&gt;The original design of Stackage followed a standard Linux distribution
model directly. Hackage was our upstream, we maintained a set of
patches to avoid massive version bound disruption, and &lt;em&gt;very&lt;&#x2F;em&gt;
occasionally (if at all, I honestly don&#x27;t remember) edited source
files to fix bugs.&lt;&#x2F;p&gt;
&lt;p&gt;In 2014, when I discussed the plans for incorporating Stackage into
cabal and the Haskell Platform (code named GPS Haskell, and which
never got off the ground), the cabal, Hackage, and HP maintainers
required that Stackage not maintain any local modifications. I removed
that functionality, and that&#x27;s the world we&#x27;ve been in since.&lt;&#x2F;p&gt;
&lt;p&gt;Adding that back &lt;em&gt;is&lt;&#x2F;em&gt; on the table. I&#x27;ll explain why in a second. This
could be considered a fork, and some may call it a soft fork. It&#x27;s
honestly not a feature I want to add back to Stackage, since
maintaining patch sets is a lot of work. But many communities need to
do it. As I understand it, Nix does it as well. So if it&#x27;s a fork,
it&#x27;s a fork we already have widely in our ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;One &amp;quot;nice to have&amp;quot; reason for adding in this curation is to work
around packages which are slow to upgrade to newer dependency
versions. It can be very frustrating for Stackage package maintainers
to have their packages held back because &lt;em&gt;someone else&lt;&#x2F;em&gt; won&#x27;t relax an
upper bound. Curation would let us work around that. I consider this a
perk, but not a necessity.&lt;&#x2F;p&gt;
&lt;p&gt;But the more important reason for this is to deal with packages which
are causing trouble in the Stackage or Stack world, but are not
causing trouble in the cabal-install world. I didn&#x27;t consider this a
real concern until it happened multiple times in the past few
months. You can
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-hvr&#x2F;cassava&#x2F;pull&#x2F;155&quot;&gt;see an example here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not demanding anything of any authors by making this
statement. But here&#x27;s the reality: I personally end up spending a lot
of my own time dealing with these kinds of breakages. My friends and
colleagues get sucked into various carry-on tasks, like cutting new
emergency point releases. I do not want my life to be spent in a
situation where, at a moment&#x27;s notice, I&#x27;ll need to dedicate large
amounts of time to changing something in Stack to be compliant with
something in the Cabal library which &lt;em&gt;should&lt;&#x2F;em&gt; be in a spec, but is
instead undocumented.&lt;&#x2F;p&gt;
&lt;p&gt;Hackage already takes great pains to ensure it does not break
cabal-install. Many people have probably heard about how the &lt;code&gt;^&amp;gt;=&lt;&#x2F;code&gt;
operator&#x27;s introduction broke Stack 1.5. What many people &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt;
hear about is that it also broke cabal-install 1.24. You didn&#x27;t hear
about it, because
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;cabal&#x2F;issues&#x2F;4624&quot;&gt;Hackage implemented a workaround to hide those files from older cabal-install versions&lt;&#x2F;a&gt;. This
curation idea is to provide a way for Stackage to work around breakage
for Stack, the same way Hackage will work around damage for
cabal-install.&lt;&#x2F;p&gt;
&lt;p&gt;And yes: I requested that the same kind of treatment be given to Stack
from Hackage. That was met with calls of asking for preferential
treatment. Readers can determine what they feel.&lt;&#x2F;p&gt;
&lt;p&gt;In sum: I&#x27;m working towards allowing Stackage to apply patches to
upstream packages. I don&#x27;t consider this a fork, but rather
curation. Others may choose to label it a fork.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoid-uploading-to-hackage&quot;&gt;Avoid uploading to Hackage&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll start with this: my personal preference is to continue uploading
all of my packages to Hackage. I have no intention nor desire to stop
uploading conduit, yesod, or any of the other 80+ packages I actively
maintain to Hackage. That said, not everyone feels the same way.&lt;&#x2F;p&gt;
&lt;p&gt;Today, Stackage is strictly downstream of Hackage. You cannot get a
package into Stackage unless it is first uploaded to Hackage. Period,
end of story. There seem to be three groups of people pushing towards
the ability to change this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;At least some PVP advocates have requested (or demanded) that
package authors who will not follow the PVP do not upload their
packages to Hackage. This is absolutely contradicted by the
official guidelines of Hackage, which I&#x27;ve pointed out many
times. Nonetheless, this request&#x2F;demand has persisted.&lt;&#x2F;li&gt;
&lt;li&gt;Some opposed to the PVP do not want to upload to Hackage, basically
because of (1). There have been many tense altercations over
adherence to the PVP. People want to avoid this, and the easiest
way is if they don&#x27;t upload to Hackage. I know some people who
simply do not release their code to Hackage or Stackage because of
this. Others do so begrdugingly. But all of them would like to
avoid Hackage for this reason.&lt;&#x2F;li&gt;
&lt;li&gt;Some people feel that, technically, the central repo with manually
uploaded tarball model is outdated. They would rather see a
workflow based on automated Git-based releases using tags or a
release branch. This is not a social dynamic &lt;em&gt;at all&lt;&#x2F;em&gt;, but a desire
to explore a different point in the technical space, which Hackage
does not support today.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;(1) has been a major pain point for me. I&#x27;ve requested changes to the
Hackage Trustee guidelines and Hackage rules to clarify that this
behavior (private emails demanding people not upload to Hackage,
public criticisms on individuals and companies for not following the
PVP, etc) should not be allowed. In fact, &lt;em&gt;that request&lt;&#x2F;em&gt; is what
ultimately led to SLURP as far as I know. Did I demand a change with a
threat to fork? Ehh... if you want to read it that way, OK. Here&#x27;s my
take: I&#x27;ve been told to stop using Hackage, full stop. I requested a
change in official policy to guarantee that my usage of Hackage is
allowed.&lt;&#x2F;p&gt;
&lt;p&gt;As it stands today, no such change to Hackage policy has taken
place. No final decision has been made about how I will respond to
people in groups (2) and (3). But as you can see from the sentiments
of group (3), the idea of hosting an alternative package repository to
Hackage makes no sense. Thus I can again guarantee: the most literal
fork of Hackage is something neither I nor anyone I&#x27;m speaking with
wants.&lt;&#x2F;p&gt;
&lt;p&gt;The other alternative is allowing Stackage to pull packages directly
from Git repos, in addition to pulling from Hackage. This is being
discussed as a workaround for problem (1) above. I have gone on record
in the past, and I&#x27;ll go on record again now: I would rather &lt;em&gt;not&lt;&#x2F;em&gt;
have that situation. I would rather Hackage make it clear that it
welcomes everyone to upload its packages, and then the demands I&#x27;m
receiving to open up Stackage to alternative sources will be less
strong (though group (3) still wants to experiment for purely
technical reasons).&lt;&#x2F;p&gt;
&lt;p&gt;Am I holding a gun to someone&#x27;s head? Your call. This is the most
honest version of the story I know to tell.&lt;&#x2F;p&gt;
&lt;p&gt;In sum: this is the closest to a potential fork, by allowing Git repos
to work as an alternative source to Hackage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve participated in a long, private discussion with multiple people
in trying to resolve the issues referenced above. As I said: my
preference has always been for public discussions. Given how the SLURP
proposal went off, I will stand by my original claim that public
discussions are a better method. I&#x27;m sorry that the &amp;quot;fork&amp;quot; phrasing
scared so many people. To those who were truly terrified I was going
to do something nefarious: I&#x27;m sorry to keep you waiting two days in
an explanation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Breaking changes, dependency trees</title>
		<published>2018-01-09T00:00:00+00:00</published>
		<updated>2018-01-09T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/01/breaking-changes-dependency-trees/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/01/breaking-changes-dependency-trees/</id>
		<content type="html">&lt;p&gt;My
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2018&#x2F;01&#x2F;drop-conduits-finalizers&quot;&gt;previous blog post&lt;&#x2F;a&gt;
discussed a possible upcoming breaking change to the conduit library:
dropping finalizers. This is one of a number of other breaking changes
I have planned. Another one is switching over from &lt;code&gt;MonadBaseControl&lt;&#x2F;code&gt;
to &lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt;, for reasons I&#x27;ve
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;tale-of-two-brackets&quot;&gt;discussed&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;readert-design-pattern&quot;&gt;at&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;07&#x2F;announcing-new-unliftio-library&quot;&gt;length&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2017&#x2F;07&#x2F;the-rio-monad&quot;&gt;before&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;reveal&#x2F;monad-transformer-state&quot;&gt;spoken&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=KZIN9f9rI34&quot;&gt;about&lt;&#x2F;a&gt; too.&lt;&#x2F;p&gt;
&lt;p&gt;Beyond this change, I have a number of others planned out as well,
some more solidly than others. I&#x27;ve started a document
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;codename-karka&#x2F;#refactor-michaels-existing-libraries-to-match&quot;&gt;describing some of these&lt;&#x2F;a&gt;,
and I wanted to bring up one point in this design space for some user
feedback: conduit dependency trees.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today&quot;&gt;Today&lt;&#x2F;h2&gt;
&lt;p&gt;The situation today is that we have a dependency graph that looks
something like the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resourcet&lt;&#x2F;code&gt; is at the base of the hierarchy, and defines some
non-conduit-specific types and functions used throughout the conduit
ecosystem. It currently depends on a number of packages, like
&lt;code&gt;monad-control&lt;&#x2F;code&gt;, but that number will naturally drop as we move over
to &lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt; exclusively.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;conduit&lt;&#x2F;code&gt; is designed to provide basic conduit functionality with
fewer dependencies. It &lt;em&gt;does&lt;&#x2F;em&gt; depend on &lt;code&gt;resourcet&lt;&#x2F;code&gt;, and packages
like &lt;code&gt;monad-control&lt;&#x2F;code&gt;. But it does not depend on &lt;code&gt;bytestring&lt;&#x2F;code&gt;,
&lt;code&gt;text&lt;&#x2F;code&gt;, or &lt;code&gt;vector&lt;&#x2F;code&gt;, even though these are almost always wanted with
conduit. It provides the &lt;code&gt;Data.Conduit.List&lt;&#x2F;code&gt; set of combinators,
which are not the best ones out there.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;conduit-extra&lt;&#x2F;code&gt; adds &lt;em&gt;lots&lt;&#x2F;em&gt; of dependencies, including things like
&lt;code&gt;attoparsec&lt;&#x2F;code&gt;, and provides a nicer set of helpers around
&lt;code&gt;bytestring&lt;&#x2F;code&gt; and &lt;code&gt;text&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;And finally, at the top of the tree (or our tree for today), we&#x27;ve
got &lt;code&gt;conduit-combinators&lt;&#x2F;code&gt;, which provides the combinators I actually
recommend people use in the &lt;code&gt;Data.Conduit.Combinator&lt;&#x2F;code&gt; module. This
has lots of dependencies, since it inherits from &lt;code&gt;conduit-extra&lt;&#x2F;code&gt; and
also adds in some extra things like &lt;code&gt;mwc-random&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;resourcet&lt;&#x2F;code&gt; without touching the conduit ecosystem at all&lt;&#x2F;li&gt;
&lt;li&gt;You can use &lt;code&gt;conduit&lt;&#x2F;code&gt; without pulling in lots of resources&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Data.Conduit.Combinators&lt;&#x2F;code&gt; is fully loaded&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The current dependency footprint even at the base is higher than I&#x27;d
like, though that&#x27;s getting fixed soon regardless.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;conduit&lt;&#x2F;code&gt; package is not super useful on its own due to lack of
&lt;code&gt;bytestring&lt;&#x2F;code&gt;, &lt;code&gt;text&lt;&#x2F;code&gt;, and &lt;code&gt;vector&lt;&#x2F;code&gt; support.&lt;&#x2F;li&gt;
&lt;li&gt;To get the functionality you want in either &lt;code&gt;conduit-extra&lt;&#x2F;code&gt; or
&lt;code&gt;conduit-combinators&lt;&#x2F;code&gt;, you end up with a &lt;em&gt;much&lt;&#x2F;em&gt; larger dependency
footprint.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;plans-for-the-next-version&quot;&gt;Plans for the next version&lt;&#x2F;h2&gt;
&lt;p&gt;I have a number of different ideas in mind. I&#x27;ll start off with the
most conservative plan, and mention some variants below.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As already mentioned, &lt;code&gt;resourcet&lt;&#x2F;code&gt; drops a bunch of
dependencies. Nothing too interesting there.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;conduit&lt;&#x2F;code&gt; adds a dependency on &lt;code&gt;bytestring&lt;&#x2F;code&gt;, &lt;code&gt;text&lt;&#x2F;code&gt;, and &lt;code&gt;vector&lt;&#x2F;code&gt; as
basic libraries everyone should be using anyway. We move over
&lt;code&gt;Data.Conduit.Combinators&lt;&#x2F;code&gt; and provide most of its functionality in
&lt;code&gt;conduit&lt;&#x2F;code&gt; itself, and start recommending against
&lt;code&gt;Data.Conduit.List&lt;&#x2F;code&gt;, &lt;code&gt;Data.Conduit.Binary&lt;&#x2F;code&gt;, and &lt;code&gt;Data.Conduit.Text&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;conduit-extra&lt;&#x2F;code&gt; basically remains as-is&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;conduit-combinators&lt;&#x2F;code&gt; retains the extra functionality not present in
the new &lt;code&gt;conduit&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;conduit&lt;&#x2F;code&gt; package now provides most of the functionality you&#x27;ll
want on a day-to-day basis&lt;&#x2F;li&gt;
&lt;li&gt;The dependency footprint for the &lt;code&gt;Data.Conduit.Combinators&lt;&#x2F;code&gt; module
is much reduced&lt;&#x2F;li&gt;
&lt;li&gt;We can finally get away from the not-well-named functions in
&lt;code&gt;Data.Conduit.List&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There aren&#x27;t necessarily &lt;em&gt;downsides&lt;&#x2F;em&gt; to this approach, as I think it&#x27;s
simply better than what we have today already. But I want to list out
the alternatives, which will make clear some things that could be
possibly better still.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What do we do with the &lt;code&gt;mono-traversable&lt;&#x2F;code&gt; package? It&#x27;s currently a
dependency of &lt;code&gt;conduit-combinators&lt;&#x2F;code&gt;, and the simplest path forward
for the above is to make &lt;code&gt;conduit&lt;&#x2F;code&gt; depend on
&lt;code&gt;mono-traversable&lt;&#x2F;code&gt;. However, this is a slightly heavier dependency
footprint, requiring adding in &lt;code&gt;unordered-containers&lt;&#x2F;code&gt; and
&lt;code&gt;vector-algorithms&lt;&#x2F;code&gt;. Alternatives:
&lt;ul&gt;
&lt;li&gt;Strip down &lt;code&gt;mono-traversable&lt;&#x2F;code&gt; to have less deps&lt;&#x2F;li&gt;
&lt;li&gt;Redefine parts of &lt;code&gt;mono-traversable&lt;&#x2F;code&gt; needed for &lt;code&gt;conduit&lt;&#x2F;code&gt; in
&lt;code&gt;conduit&lt;&#x2F;code&gt; itself&lt;&#x2F;li&gt;
&lt;li&gt;Going crazy: &lt;em&gt;really&lt;&#x2F;em&gt; move &lt;code&gt;mono-traversable&lt;&#x2F;code&gt; into &lt;code&gt;conduit&lt;&#x2F;code&gt; and
swap the dependency tree around&lt;&#x2F;li&gt;
&lt;li&gt;My inclination: minimize &lt;code&gt;mono-traversable&lt;&#x2F;code&gt;&#x27;s dependencies a bit
more (like dropping the &lt;code&gt;split&lt;&#x2F;code&gt; package, and &lt;em&gt;maybe&lt;&#x2F;em&gt;
&lt;code&gt;vector-algorithms&lt;&#x2F;code&gt;) and make it a dependency of &lt;code&gt;conduit&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Do we really need &lt;code&gt;conduit-combinators&lt;&#x2F;code&gt; as well as &lt;code&gt;conduit-extra&lt;&#x2F;code&gt;?
It&#x27;s just adding a few extra pieces of functionality over
&lt;code&gt;conduit-extra&lt;&#x2F;code&gt;, and perhaps those should be folded into
&lt;code&gt;conduit-extra&lt;&#x2F;code&gt; itself.&lt;&#x2F;li&gt;
&lt;li&gt;Some people may not like the heavier dep footprint of &lt;code&gt;conduit&lt;&#x2F;code&gt;
now. Should we split off a &lt;code&gt;conduit-core&lt;&#x2F;code&gt; package providing the core
data types, functions, and operators, and have &lt;code&gt;conduit&lt;&#x2F;code&gt; depend on
that?&lt;&#x2F;li&gt;
&lt;li&gt;It feels almost silly to have the &lt;code&gt;ResourceT&lt;&#x2F;code&gt; data type live in a
separate package.
&lt;ul&gt;
&lt;li&gt;If we have &lt;code&gt;conduit-core&lt;&#x2F;code&gt;, that could be a logical place to put
it, since it won&#x27;t have any extra dependencies versus the
&lt;code&gt;resourcet&lt;&#x2F;code&gt; package itself, and then we can turn &lt;code&gt;resourcet&lt;&#x2F;code&gt;
into a backwards compatibility layer.&lt;&#x2F;li&gt;
&lt;li&gt;Or it may be logical to place &lt;code&gt;ResourceT&lt;&#x2F;code&gt; in the &lt;code&gt;unliftio-core&lt;&#x2F;code&gt;
package, since both concepts help with resource cleanup in monad
transformers. The former is necessary for continuation-based
monads, while the latter (&lt;code&gt;MonadUnliftIO&lt;&#x2F;code&gt;) works for simpler
monads.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If people have feedback, I&#x27;m happy to hear about it. I&#x27;ve spent an
unfortunate amount of time bouncing around between these different
options, so hopefully writing it all down and hearing some outside
opinions can help move this forward.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Drop Conduit&#x27;s Finalizers?</title>
		<published>2018-01-03T00:00:00+00:00</published>
		<updated>2018-01-03T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/01/drop-conduits-finalizers/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/01/drop-conduits-finalizers/</id>
		<content type="html">&lt;p&gt;tl;dr: I&#x27;m thinking of dropping finalizers from Conduit. If you have
use cases that necessitate finalizers, &lt;strong&gt;please share them with
me&lt;&#x2F;strong&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;issues&#x2F;343&quot;&gt;Github issue for examples.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;People who have followed the history of the Conduit library will
likely be aware of how passionately I&#x27;ve argued for the necessity of a
finalizer concept. For those unaware: when you have a Conduit pipeline
like the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runConduitRes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  sourceFile input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; takeCE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sinkFile output
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- lots of other stuff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without finalizers, the file &lt;code&gt;input&lt;&#x2F;code&gt; will remain open until we exit
the &lt;code&gt;runConduitRes&lt;&#x2F;code&gt; call (unless the file is less than 100 bytes). The
reason is that, in a pipeline, downstream is always in control. When
&lt;code&gt;takeCE&lt;&#x2F;code&gt; stops consuming from &lt;code&gt;sourceFile&lt;&#x2F;code&gt;, &lt;code&gt;sourceFile&lt;&#x2F;code&gt; will never be
called again. Finalizers allow &lt;code&gt;sourceFile&lt;&#x2F;code&gt; to tell downstream &amp;quot;hey,
if you don&#x27;t call me back, please close up my file.&amp;quot; And so they&#x27;re a
Good Thing.&lt;&#x2F;p&gt;
&lt;p&gt;They&#x27;re also a Complicated Thing. The internals of Conduit include a
lot of complexity around finalizers. As a user, you hardly ever see
it, which is by design. But if you start dealing with the guts of
Conduit, it&#x27;s there. (Have a look at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;commit&#x2F;e7f0cb77987a23c3d259e413efa33f45f7069f79&quot;&gt;this commit&lt;&#x2F;a&gt;
to get an idea.)&lt;&#x2F;p&gt;
&lt;p&gt;They also complicate the story around associativity of Conduit
significantly. Or more to the point: without finalizers, we can get
properly behaving associative and identity laws*. With finalizers, we
have to start making up claims about reordering of finalizers. Which
is almost always fine in practice, but clearly not a mathematical law.&lt;&#x2F;p&gt;
&lt;p&gt;* Caveats: I&#x27;ve never written the proof of it completely. Also, it
relies on using the type paramter on the &lt;code&gt;Pipe&lt;&#x2F;code&gt; type to eliminate
leftovers, but leftovers are not a topic I&#x27;m raising right now.&lt;&#x2F;p&gt;
&lt;p&gt;None of this is new information; so why am I writing this blog post
now? The first is that I&#x27;m already working on a breaking change to
Conduit to standardize naming and eliminate some legacy type and
operator names. See
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;issues&#x2F;283&quot;&gt;the discussion&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;pull&#x2F;338&#x2F;files&quot;&gt;initial comparison&lt;&#x2F;a&gt;
for more details. This naturally leads me to ask related questions.&lt;&#x2F;p&gt;
&lt;p&gt;More to the point: after having worked with Conduit for years, my
initial concerns about prompt finalization seem to have been
overzealous. While the code above &lt;em&gt;can&lt;&#x2F;em&gt; happen, it doesn&#x27;t happen that
often in practice, and even that level of resource overholding isn&#x27;t
usually that bad. Regardless, if the situation really does call for
guaranteed promptness, we can still get it (a trick I&#x27;m fairly certain
I learned from Gabriel Gonzalez):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runConduitRes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  withSourceFileResource input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    src &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; takeCE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sinkFile output
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- lots of other stuff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s not quite as elegant, but works well enough. And again: I&#x27;m hard
pressed to think of real life code I&#x27;ve written that would really
warrant this. &lt;strong&gt;BIG REQUEST&lt;&#x2F;strong&gt; If you have examples of Conduit-using
code where finalizers are vital, please send me examples.&lt;&#x2F;p&gt;
&lt;p&gt;While on the one hand, making this change would be to admit I&#x27;ve
sucked up huge amounts of extra work in maintaining Conduit over the
years, I&#x27;d be very happy to cut the dead weight now, unless someone
out there wants to convince me otherwise. Feel free to discuss
wherever desired, but the main discussion I&#x27;ll be sure to follow will
be
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;issues&#x2F;343&quot;&gt;conduit issue #343&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are some natural follow-on questions that come from this also,
which I&#x27;ll likely broach in a later blog post. To give a taste and
hopefully encourage some thoughts from others:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Should the &lt;code&gt;Pipe&lt;&#x2F;code&gt; types upstream finalizer concept disappear as
well?&lt;&#x2F;li&gt;
&lt;li&gt;Can we remove the &lt;code&gt;Leftover&lt;&#x2F;code&gt; data constructor from &lt;code&gt;Pipe&lt;&#x2F;code&gt;, making
&lt;code&gt;Pipe&lt;&#x2F;code&gt; a full category, and then move the tracking of leftovers to
&lt;code&gt;ConduitM&lt;&#x2F;code&gt; and its codensity approach?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Review of The Bridge strength program</title>
		<published>2018-01-01T00:00:00+00:00</published>
		<updated>2018-01-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2018/01/review-bridge-program/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2018/01/review-bridge-program/</id>
		<content type="html">&lt;p&gt;Last week, I completed
&lt;a href=&quot;https:&#x2F;&#x2F;www.barbellmedicine.com&#x2F;the-bridge&#x2F;&quot;&gt;The Bridge&lt;&#x2F;a&gt;, an 8 week
strength program by Barbell Medicine. Since this program is
significantly different than what I&#x27;ve done in the past, and what I&#x27;ve
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-exercise&quot;&gt;talked about on this blog previously&lt;&#x2F;a&gt;,
I wanted to share my thoughts and some results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt; This program was more complicated to follow than others
I&#x27;ve tried, but given that I was looking for an intermediate instead
of novice program, that&#x27;s not surprising. I improved my actual 1 rep
max numbers on all 4 major lifts. I&#x27;m planning on continuing my
training with another cycle of the program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been lifting for close to 2 years now, with a few years of
bodyweight training before that. In the subset of that time that I&#x27;ve
been seriously training, I&#x27;ve followed these programs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;&quot;&gt;Start Bodyweight&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stronglifts.com&#x2F;&quot;&gt;StrongLifts 5x5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A few months of a Push-Pull-Leg (PPL) routine I made up, which was a
mistake and gave me no progress. Pretend it didn&#x27;t happen.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.t-nation.com&#x2F;workouts&#x2F;531-how-to-build-pure-strength&quot;&gt;5&#x2F;3&#x2F;1&lt;&#x2F;a&gt;,
with the Boring But Big (BBB) accessories&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ignoring the silly PPL, all three of these programs helped me
significantly. They also all share something: they&#x27;re simple to
follow. First you determine where to start, which is either dictated
by the program or based on current abilities. Then you follow a simple
set of rules on how to progress. This simplicity is very appealing.&lt;&#x2F;p&gt;
&lt;p&gt;Start Bodyweight got me to a decent strength level, but I was unhappy
with weakness in my back leading to regular pain while sitting at my
desk. I switch to StrongLifts when I decided I wanted to do a barbell
program with deadlifts, and (as always happens with a novice program)
eventually hit a wall.&lt;&#x2F;p&gt;
&lt;p&gt;When I switched to 5&#x2F;3&#x2F;1, I immediately saw my estimated 1 rep max
(1RM) numbers going up. In fact, they went up
significantly. Unfortunately, I found that my &lt;em&gt;actual&lt;&#x2F;em&gt; 1RM numbers
were not budging. It seemed that 5&#x2F;3&#x2F;1 was giving me an increase in
muscular &lt;em&gt;endurance&lt;&#x2F;em&gt;, but not necessarily strength. While the program
was fun, easy to follow, and required relatively little time in the
gym, I wanted more progress.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I know there are &lt;em&gt;many&lt;&#x2F;em&gt; variations of 5&#x2F;3&#x2F;1 out there, and
likely some of them would have served me better. I&#x27;m not comparing all
potential programs in the world, just the ones I&#x27;ve actually pursued
myself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview-of-the-bridge&quot;&gt;Overview of The Bridge&lt;&#x2F;h2&gt;
&lt;p&gt;Over the past half year or so, I&#x27;ve been regularly exposed—via
YouTube videos and articles—to the team behind Barbell Medicine,
mainly Drs. Jordan Feigenbaum and Austin Baraki. When I was in the
market for a new program, I heard mention of The Bridge program, and
downloaded it.&lt;&#x2F;p&gt;
&lt;p&gt;The Bridge is delivered as a PDF. The program itself takes up about 5
pages in this 36 page document. The rest of the material is a bit dry
to get through, but immensely useful and informative. I really
appreciate the way the authors have given a background on the concepts
of stress, training volume, and intensity. If you&#x27;re at all interested
in strength training, give it a read.&lt;&#x2F;p&gt;
&lt;p&gt;The program focuses on the main barbell lifts (squat, overhead press,
bench press, deadlift) with accessories (e.g., barbell row, pin squat,
paused deadlift). Unlike other programs I&#x27;d followed, this program
changes from week to week. That makes it more complicated to follow,
but not significantly. The real curve ball is the Rate of Perceived
Exertion scale, or RPE.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rpe-based-training&quot;&gt;RPE based training&lt;&#x2F;h2&gt;
&lt;p&gt;In a program like Strong Lifts, I go into the gym on a Tuesday, and I
know that I&#x27;m going to try to squat X amount of weight for Y sets of Z
reps. Not so with The Bridge. Instead, you&#x27;ll see something like:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Squats: 5 @ 6 RPE, 5 @ 7 RPE, 5 @ 8 RPE for 3 sets&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means that, after my warmup sets, I need to start with a set of 5
squats at an exertion level of 6. The scale goes up to 10, and each
number below 10 indicates how many more reps you could have possibly
done. So RPE 6 means &amp;quot;I could have done 4 more reps.&amp;quot; Therefore, &amp;quot;5
reps at 6 RPE&amp;quot; means &amp;quot;choose a weight that you can just barely do 9
reps for, then do 5 reps at that weight.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;When I first saw this, I was dumbfounded. &amp;quot;How do I guess the magical
weight number?&amp;quot; And in fact, that &lt;em&gt;was&lt;&#x2F;em&gt; the most complicated part of
this program for all 8 weeks. There are charts in the PDF that help
you compare against your 1 rep max. But overall, it was trial and
error. There were definitely sets where I lifted more than I should
have, and sets where I could have added more weight.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast to a simple numeric guide like Strong Lifts or 5&#x2F;3&#x2F;1
delivers, an RPE based scale allows you to easily adjust training
intensity to account for both good and bad days in the gym. A few
times during this program, I had a bad night&#x27;s sleep or a bit of a
cold, and lifted less weight. A few times, I was feeling great and
lifted more than I would have expected. RPE allowed this to happen. By
contrast, with both SL and 5&#x2F;3&#x2F;1, there were days where the weight
felt easy, and other days when it felt crushing.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately, my conclusion to all of this was: RPE is harder than a
number based scale, but gives great results. Just accept the fact that
you&#x27;re going to screw up regularly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulty-level&quot;&gt;Difficulty level&lt;&#x2F;h2&gt;
&lt;p&gt;The program is broken up into weeks of different stress level, either
low, moderate, or high. The weeks also tend to focus on either high
volume or high intensity. For example, both weeks 4 and 7 are
considered high stress weeks, but compare the first day&#x27;s squat
programming:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Week 4: 5 @ RPE 6, 5 @ 7, 5 @ 8 x 4 sets&lt;&#x2F;li&gt;
&lt;li&gt;Week 7: 1 @ RPE 8, 3 @ 8 x 4 sets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Week 4&#x27;s day 1 ends up having 30 total reps of squat, whereas week 7
has 13. However, because of how the RPE scale works, you&#x27;ll end up
lifting much heavier weight on week 7. For example, &amp;quot;5 @ RPE 8&amp;quot; means
a weight you could have done 7 reps at. &amp;quot;3 @ RPE 8&amp;quot; means you could
have done 5. You can lift more weight for 5 reps than you can for 7,
and therefore week 7 ends up with a lower volume at higher intensity.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I really liked the later weeks in the program. None of the
other pgorams I&#x27;d tried ever got to low volume high intensity. But
having read the PDF and its motivations, I understand why we need both
the volume and intensity weeks, and appreciate the way the program is
designed. In fact, having completed the program, I think I understand
the design of the program much better than before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cardio&quot;&gt;Cardio&lt;&#x2F;h2&gt;
&lt;p&gt;Unlike previous programs I&#x27;ve done, this program included cardio. I
considered this a good kick in the pants to start running and the
eliptical again. If you&#x27;re like me: find a good audio book to listen
to, otherwise it will be 30 minutes of hell :)&lt;&#x2F;p&gt;
&lt;p&gt;(Not entirely accidentally, I also signed up for an Audible account
around the same time I started this program.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;time-in-gym&quot;&gt;Time in gym&lt;&#x2F;h2&gt;
&lt;p&gt;The earlier weeks in this program have high volume, with lots of
sets. I spend a &lt;em&gt;long&lt;&#x2F;em&gt; time in the gym some weeks: 3 days of lifting
for about 2 hours each, and 1-2 days doing about 45 minutes of
cardio. You can reduce that by having shorter rest periods or
supersetting your warmups for the next lift with your previous working
sets, or you can answer emails and Slack messages. (Fortunately no one
can smell your sweat over email.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;Way back in May of last year, my gym had a &amp;quot;powerlifting competition.&amp;quot;
I put that in quotes since there were four of us, I was the only one
in my weight class (everyone else weighed 20kg more than me), and some
of the other competitors half repped their squats. (I&#x27;m going to pray
that I actually squatted to depth, since there were no videos and I
don&#x27;t trust the judges.) Between that time and starting this program
at the end of October, I increased my estimated 1RM numbers
significantly, but to my recollection barely, if at all, bested my
powerlifting meet numbers with actual weight.&lt;&#x2F;p&gt;
&lt;p&gt;There are some minor confounding factors in these increases due to my
addition of chalk to assist with my deadlift, and getting more
comfortable with my lifting belt (the competition was the first time I
ever used a lifting belt). Nonetheless, I think a good portion of
these increases can be attributed to my time on The Bridge:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Squat: 20% increase&lt;&#x2F;li&gt;
&lt;li&gt;Overhead press: 16% increase*&lt;&#x2F;li&gt;
&lt;li&gt;Bench press: 11% increase&lt;&#x2F;li&gt;
&lt;li&gt;Deadlift: 19% increase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;* If you&#x27;re wondering: no, the powerlifting competition did not
include an overhead press. I&#x27;m including a number from around the same
time.&lt;&#x2F;p&gt;
&lt;p&gt;Definitely keep in mind that I &lt;em&gt;do&lt;&#x2F;em&gt; believe my time on 5&#x2F;3&#x2F;1 in the
interim helped at the very least with my muscular endurance, and most
likely primed me to be able to hit the volume weeks of The Bridge
better than I would have been able to in May. I would not expect to
make those kinds of increases in just 8 weeks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was my first time taking a foray into an intermediate program,
intended for lifters who are no longer making linear progressions with
novice programs like Strong Lifts. I can finally understand why Mark
Rippetoe says
&lt;a href=&quot;https:&#x2F;&#x2F;startingstrength.com&#x2F;article&#x2F;programming&#x2F;who_wants_to_be_a_novice_you_do&quot;&gt;you want to be a novice&lt;&#x2F;a&gt;:
simple programs with great results are much more fun.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;ve got the time to spend in the gym on higher volume routines,
have the patience to figure out the RPE system, want to learn more
about strength programming, and are looking for a well designed
intermediate program, I recommend checking out The Bridge.&lt;&#x2F;p&gt;
&lt;p&gt;For myself: when it comes to health and fitness, I consider this at
least half an experiment with sample size of 1, and therefore I like
to try out many different things. I&#x27;m going to keep my eyes out for a
new routine to try (and if you have recommendations, let me know). But
given the great progress this program helped me achieve, I&#x27;m going to
continue with at least one more cycle of it before moving on to
something new.&lt;&#x2F;p&gt;
&lt;p&gt;If you want me to share more experience reports like this in the
future, let me know. I can also include the nutrition side of things
if people are interested, which has been possibly more volatile for me
over the past year than the training itself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-reading&quot;&gt;Additional reading&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve added this section to collect additional links to helpful articles that
may be relevant to people interested in The Bridge. Expect it to grow over
time.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.jenreviews.com&#x2F;workout-routines&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Dropped packages following LTS 10</title>
		<published>2017-12-25T00:00:00+00:00</published>
		<updated>2017-12-25T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/12/dropped-packages-following-lts-10/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/12/dropped-packages-following-lts-10/</id>
		<content type="html">&lt;p&gt;tl;dr: Check
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;pull&#x2F;3140&#x2F;files&quot;&gt;this pull request&lt;&#x2F;a&gt;
to see if your package was just removed from Stackage Nightly.&lt;&#x2F;p&gt;
&lt;p&gt;Stackage Nightly maintains a set of upper bounds to give package
maintainers a grace period between dependencies updating their APIs
and users needing to support the new versions. Keeping these upper
bounds in place indefinitely places a burden on the rest of the
ecosystem needing to keep support for older versions of
packages. Therefore, the Stackage Curator team will periodically drop
these upper bounds, and in the process must temporarily drop some
packages.&lt;&#x2F;p&gt;
&lt;p&gt;Over the years, we&#x27;ve standardized on doing this drop immediately
following the release of a new major version of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;lts-haskell#readme&quot;&gt;LTS Haskell&lt;&#x2F;a&gt;. This allows
maximum packages to be included in an LTS release without imposing
&amp;quot;bleeding edge&amp;quot; requirements (something LTS Haskell tries to avoid
doing).&lt;&#x2F;p&gt;
&lt;p&gt;And as you may have guessed: I&#x27;m writing this now since I just dropped
a bunch of upper bounds and blocked a number of packages on Stackage
Nightly :). If you&#x27;d like to see if your package was evicted, please
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;pull&#x2F;3140&#x2F;files&quot;&gt;check out the relevant pull request&lt;&#x2F;a&gt;. Some notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The haskell-src-exts upgrade caused the most downstream breakage&lt;&#x2F;li&gt;
&lt;li&gt;There were a &lt;em&gt;huge&lt;&#x2F;em&gt; number of upper bounds for http-types. Since
this is the second time a major version bump occurred recently, I
left this upper bound in place. More information is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;issues&#x2F;2976&quot;&gt;available on the http-types issue&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once dependencies are fixed, please send pull requests to reenable
packages. Everyone is welcome to do so, whether you&#x27;re unblocking your
own package or someone else&#x27;s.&lt;&#x2F;p&gt;
&lt;p&gt;PS: Merry Christmas to all those celebrating today.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What Makes Haskell Unique</title>
		<published>2017-12-17T00:00:00+00:00</published>
		<updated>2017-12-17T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/12/what-makes-haskell-unique/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/12/what-makes-haskell-unique/</id>
		<content type="html">&lt;p&gt;I gave a talk today at the &lt;a href=&quot;https:&#x2F;&#x2F;fby.by&#x2F;&quot;&gt;F(by) 2017 conference&lt;&#x2F;a&gt; in
Minsk, Belarus. The conference was great, I would definitely recommend
it in the future. Thank you very much to the organizers for the
opportunity to present on Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;I prepared for this talk differently than I&#x27;ve prepared for other
talks in the past. I&#x27;m very comfortable writing up blog posts, but
have always found slide preparation difficult. This time around, I
wrote up the content in mostly-blog-post form first, and only created
the slides after that was complete. Overall, this worked very well for
me, and I&#x27;ll try it again in the future. (If others want to share
their approaches to preparing talks, I&#x27;d definitely be happy to hear
them.)&lt;&#x2F;p&gt;
&lt;p&gt;As a result: I&#x27;m able to share the original write-up I did as
well. For those who saw the live talk (or the video): you may want to
skip towards the end, which covers some material that there wasn&#x27;t
time for in the talk itself.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;d like to follow with
&lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;reveal&#x2F;what-makes-haskell-unique&quot;&gt;the slides&lt;&#x2F;a&gt;,
they&#x27;re also available.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;My name is Michael Snoyman. I work at a company called FP
Complete. One of the things we do is help individuals and companies
adopt Haskell, and functional programming in general. And that leads
right in to the topic of my talk today:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What makes Haskell unique&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Programmers today have a large number of languages to choose from when
deciding what they will learn and use in their day to day coding.  In
order to make intelligent decisions about which languages to pursue,
people need to be able to quickly learn and understand what
distinguishes one language from another.&lt;&#x2F;p&gt;
&lt;p&gt;Given that this is a functional programming conference, it&#x27;s probably
no surprise to you that Haskell can be called a functional programming
language. But there are lots of languages out there that can be called
functional. Definitions vary, but let&#x27;s take a particularly lax
version of functional programming: first class functions, and higher
order functions. Well, by this defintion, even a language like C
counts! You may want to limit the definition further to include
syntactic support for closures, or some other features. Regardless,
the same point remains:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Haskell may be functional, but that doesn&#x27;t make it unique&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In fact, there&#x27;s a long list of features I could rattle off that could
be used to describe Haskell.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Functional&lt;&#x2F;li&gt;
&lt;li&gt;Statically typed&lt;&#x2F;li&gt;
&lt;li&gt;Pure&lt;&#x2F;li&gt;
&lt;li&gt;Lazy&lt;&#x2F;li&gt;
&lt;li&gt;Strongly typed&lt;&#x2F;li&gt;
&lt;li&gt;Green threads&lt;&#x2F;li&gt;
&lt;li&gt;Native executables&lt;&#x2F;li&gt;
&lt;li&gt;Garbage collected&lt;&#x2F;li&gt;
&lt;li&gt;Immutability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some of these features, like being pure and lazy, are relatively rare
in mainstream languages. Others, however, are common place. What I&#x27;m
going to claim is that not one of these features is enough to motivate
new people to Haskell—including people in this audience—to
start using it. Instead:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s the combination of these features that makes Haskell unique&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As an example: the intersection of purity, strong typing, and
functional programming style, for instance, lends itself to a high
level form of expression which is simultaneously easy to write, easy
to read, easy to modify, and efficient. I want to share some examples
of some code examples in Haskell that demonstrate how the language
encourages you to write code differently from other languages. And I&#x27;m
going to try to claim that this &amp;quot;different&amp;quot; style is awesome, though
it also has some downsides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-i-o-and-concurrency&quot;&gt;Async I&#x2F;O and Concurrency&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start off with a use case that&#x27;s pretty popular today. Look at
this pseudocode and tell me what&#x27;s wrong with it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;json1 := httpGet(url1)
json2 := httpGet(url2)
useJsonBodies(json1, json2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Given the heading of this slide, you may have guessed it: this is
blocking code. It will tie up an entire thread waiting for the
response body from each of these requests to come back. Instead, we
should be using asynchronous I&#x2F;O calls to allow more efficient usage
of system resources. One common approach is to use callbacks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;httpGetA(url1, |json1| =&amp;gt;
  httpGetA(url2, |json2| =&amp;gt;
    useJsonBodies(json1, json2)
  )
)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may recognize this coding style as &amp;quot;callback hell.&amp;quot; There are
plenty of techniques in common languages to work around that, usually
around the idea of promises or futures. And you may have heard
something about how Javascript futures are a monad, and expect me to
be talking about how Haskell does monads better. But I&#x27;m not going to
do that at all. Instead, I want to show you what the asynchronous
version of the code looks like in Haskell&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;json1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; httpGet url1
json2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; httpGet url2
useJsonBodies json1 json2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may surprise you, since this looks exactly like the blocking
pseudocode I showed above. It turns out that Haskell has a powerful
runtime system. It will automatically convert your blocking-style code
into asynchronous system calls, and automatically handle all of the
work of scheduling threads and waking them up when data is available.&lt;&#x2F;p&gt;
&lt;p&gt;This is pretty great, but it&#x27;s hardly unique to Haskell. Erlang and
Go, as two popular examples, both have this as well. If we want to see
what makes Haskell different...&lt;&#x2F;p&gt;
&lt;p&gt;we have to go deeper.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s pretty lame that we need to wait for our first HTTP request to
complete before even starting our second. What we&#x27;d like to do is kick
off both requests at the same time. You may be imagining some really
hairy APIs with threads, and mutable variables, and locks. But here&#x27;s
how you do this in Haskell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(json1, json2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; concurrently
  (httpGet url1)
  (httpGet url2)
useJsonBodies json1 json2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Haskell has a green thread implementation which makes forking threads
cheap. The &lt;code&gt;async&lt;&#x2F;code&gt; library provides a powerful, high level interface
performing actions in parallel without bothering with the low level
aspects of locking primitives and mutable variables. And this builds
naturally on top of the async I&#x2F;O system already described to be cheap
about system resource usage.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;canceling&quot;&gt;Canceling&lt;&#x2F;h3&gt;
&lt;p&gt;What we&#x27;ve seen already is elegant in Haskell, but it&#x27;s not terribly
difficult to achieve in other languages. Let&#x27;s take it to the next
level. Instead of needing both JSON response bodies, we only need one:
whichever one comes back first. In pseudocode, this might look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;promise1 := httpGet(url1)
promise2 := httpGet(url2)
result := newMutex()
promise1.andThen(|json1| =&amp;gt;
  result.set(json1)
  promise2.cancel())
promise2.andThen(|json2| =&amp;gt;
  result.set(json2)
  promise1.cancel())
useJsonBody(result.get())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code is tedious and error prone, but it gets the job done. As you
can probably guess, there&#x27;s a simple API for this in Haskell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;eitherJson &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; race
  (httpGet url1)
  (httpGet url2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; eitherJson &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;  json1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; useJsonBody1 json1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; json2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; useJsonBody2 json2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first, this may seem like it&#x27;s just a well designed API. But
there&#x27;s quite a bit more going on under the surface. The Haskell
runtime system itself supports the idea of an asynchronous exception,
which allows us to cancel any other running thread. This feature is
vital to making &lt;code&gt;race&lt;&#x2F;code&gt; work.&lt;&#x2F;p&gt;
&lt;p&gt;And here&#x27;s the final piece in the puzzle. All of the thread scheduing
and canceling logic I&#x27;ve described doesn&#x27;t just apply to async I&#x2F;O
calls. It works for CPU-intensive tasks as well. That means you can
fork thousands of threads, and even if one of them is busy performing
computation, other threads will not be starved. Plus, you can
interrupt these long-running computations:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tenSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
timeout tenSeconds expensiveComputation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;summary-concurrency-and-async-i-o&quot;&gt;Summary: concurrency and async I&#x2F;O&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cheap threads&lt;&#x2F;li&gt;
&lt;li&gt;Simple API&lt;&#x2F;li&gt;
&lt;li&gt;Highly responsive&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Complicated runtime system&lt;&#x2F;li&gt;
&lt;li&gt;Need to be aware of async exceptions when writing code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;immutability-and-purity&quot;&gt;Immutability and purity&lt;&#x2F;h2&gt;
&lt;p&gt;Most programming languages out there default to mutability: a variable
or field in a data structure can be changed at any time. Haskell is
different in two ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Values are immutable by default, and mutability must be explicitly
indicated with a variable type&lt;&#x2F;li&gt;
&lt;li&gt;Mutating a mutable variable is considered a side effect, and that
mutable is tracked by the type system&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For example, the following Haskell-like code is impossible:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mut total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    loop i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From pure code, we cannot create, read, or modify a mutable
variable. We also need to say what kind of mutable variable we want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newIORef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readIORef total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
          modifyIORef total (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
          loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a lot of ceremony for a simple algorithm. Of course, the
recommended Haskell way of doing this would be to avoid mutable
variables, and use a more natural functional style.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Besides pushing us towards this supposedly better functional approach,
why is immutable, pure code such a nice thing?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reasoning-about-code&quot;&gt;Reasoning about code&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ll often hear Haskellers throw around a phrase &amp;quot;reasoning about
code.&amp;quot; Personally, I think the phrase is used to mean too many
different things. But let me give you an example that I think is
accurate. Let&#x27;s look at some pseudocode:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&#x2F; scores.txt
Alice,32
Bob,55
Charlie,22

func main() {
  results := readResultsFromFile(&amp;quot;results.txt&amp;quot;)
  printScoreRange(results)
  print(&amp;quot;First result was by: &amp;quot; + results[0].name)
}

func printScoreRange(results: Vector&amp;lt;TestResult&amp;gt;) {
  ...
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you look at the code above, what do you expect the output to be? I
think it would be reasonable to guess something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Lowest: 22
Highest: 55
First result was by: Alice
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, now let&#x27;s throw in another piece of information: the
definition of &lt;code&gt;printScoreRange&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;func printScoreRange(results: Vector&amp;lt;TestResult&amp;gt;) {
  results.sortBy(|result| =&amp;gt; result.score)
  print(&amp;quot;Lowest: &amp;quot; + results[0].score)
  print(&amp;quot;Highest: &amp;quot; + results[results.len() - 1].score)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Suddenly our assumptions change. We can see that this function mutates
the &lt;code&gt;results&lt;&#x2F;code&gt; value passed to it. If we&#x27;re passing mutable references
to vectors in this made up language, then our output is going to look
more like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Lowest: 22
Highest: 55
First result was by: Charlie
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the original &lt;code&gt;results&lt;&#x2F;code&gt; value in our &lt;code&gt;main&lt;&#x2F;code&gt; function has been
modified. This is what I mean by hurting our ability to reason about
the code: it&#x27;s no longer sufficient to look at just the &lt;code&gt;main&lt;&#x2F;code&gt;
function to understand what will be happening. Instead, we&#x27;re required
to understand what may possibly be occurring in the rest of our
program to mutate our variables.&lt;&#x2F;p&gt;
&lt;p&gt;In Haskell, the code would instead look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readResultsFromFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;results.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  printScoreRange results
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;First result was by: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name (head results)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printScoreRange &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TestResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;printScoreRange results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
  let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; results&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sortBy score results
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lowest: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (score (head results&amp;#39;))
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Highest: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (score (last results&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We know that it&#x27;s impossible for &lt;code&gt;printScoreRange&lt;&#x2F;code&gt; to modify the
&lt;code&gt;results&lt;&#x2F;code&gt; value we have in the &lt;code&gt;main&lt;&#x2F;code&gt; function. Looking at only this
bit of code in &lt;code&gt;main&lt;&#x2F;code&gt; is sufficient to know what will happen with the
&lt;code&gt;results&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-races&quot;&gt;Data races&lt;&#x2F;h3&gt;
&lt;p&gt;Even more powerful than the single threaded case is how immutability
affects multithreaded applications. Ignoring the insanity of multiple
threads trying to output to the console at the same time, we can
easily parallelize our code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readResultsFromFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;results.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  concurrently_ printFirstResult printScoreRange

printFirstResult results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;First result was by: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name (head results)

printScoreRange results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
  let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; results&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sortBy score results
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Lowest: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (score (head results&amp;#39;))
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Highest: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (score (last results&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no need to worry about concurrent accesses to data
structures. It&#x27;s impossible for the other threads to alter our
data. If you do want other threads to affect your local data, you&#x27;ll
need to be more explicit about it, which we&#x27;ll get back to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutability-when-needed&quot;&gt;Mutability when needed&lt;&#x2F;h3&gt;
&lt;p&gt;One thing you may be worried about is how this affects
performance. For example, it&#x27;s much more efficient to sort a vector
using mutable access instead of only pure operations. Haskell has two
tricks for that. The first is the ability to explicitly create mutable
data structures, and mutate them in place. This breaks all of the
guarantees I already mentioned, but if you need the performance, it&#x27;s
available. And unlike mutable-by-default approaches, you now know
exactly which pieces of data you need to handle with care when coding
to avoid tripping yourself up.&lt;&#x2F;p&gt;
&lt;p&gt;The other approach is to create a mutable copy of the original data,
perform your mutable algorithm on it, and then freeze the new copy
into an immutable version. With sorting, this looks something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sortMutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MutableVector a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MutableVector a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
sortMutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- normal sorting algorithm

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sortImmutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Vector a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Vector a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sortImmutable orig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runST &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newMutableVector (length orig)
  copyValues orig mutable
  sort mutable
  freeze mutable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ST&lt;&#x2F;code&gt; is something we use to have temporary and local mutable
effects. Because of how it&#x27;s implemented, we know that none of the
effects can be visible from outside of our function, and that for the
same input, the &lt;code&gt;sortImmutable&lt;&#x2F;code&gt; function will always have the same
output. While this approach requires an extra memory buffer and an
extra copy of the elements in the vector, it avoids completely the
worries of your data being changed behind your back.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-immutability-and-purity&quot;&gt;Summary: immutability and purity&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Easier to reason about code&lt;&#x2F;li&gt;
&lt;li&gt;Avoid many cases of data races&lt;&#x2F;li&gt;
&lt;li&gt;Functions are more reliable, returning the same output for the same
input&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lots of ceremony if you actually want mutation&lt;&#x2F;li&gt;
&lt;li&gt;Some runtime performance hit for mutable algorithms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;software-transactional-memory&quot;&gt;Software Transactional Memory&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you actually need to be able to mutate some values. And for
fun, let&#x27;s say you want to do this from multiple threads. A common
example of this is a bank. Let&#x27;s again play with some pseudocode:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runServer (|request| =&amp;gt; {
  from := accounts.lookup(request.from)
  to := accounts.lookup(request.to)
  accounts.set(request.from, from - request.amt)
  accounts.set(request.to, to + request.amt)
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks reasonable, except that if two requests come in at the same
time for the same account, we can end up with a race
condition. Consider something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Thread 1: receive request: Alice gives $25
Thread 2: receive request: Alice receives $25
Thread 1: lookup that Alice has $50
Thread 2: lookup that Alice has $50
Thread 1: set Alice&amp;#39;s account to $25
Thread 2: set Alice&amp;#39;s account to $75
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We know that we want Alice to end up with $50, but because of our data
race, Alice ends up with $75. Or, if the threads ran differently, it
could be $25. Neither of these is correct. In order to avoid this, we
would typically deal with some kind of locking:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runServer (|request| =&amp;gt; {
  accounts.lock(request.from)
  accounts.lock(request.to)
  &#x2F;&#x2F; same code as before
  accounts.unlock(request.from)
  accounts.unlock(request.to)
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, this leads to deadlocks! Consider this scenario:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Thread 1: receive request: $50 from Alice to Bob
Thread 2: receive request: $50 from Bob to Alice
Thread 1: lock Alice
Thread 2: lock Bob
Thread 1: try to lock Bob, but can&amp;#39;t, so wait
Thread 2: try to lock Alice, but can&amp;#39;t, so wait
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This kind of problem is the bane of many concurrent programs. Let me
show you another approach. As you may guess, here&#x27;s some Haskell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do
  let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fromVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lookup (from request) accounts
      toVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lookup (to request) accounts
  origFrom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTVar fromVar
  writeTVar fromVar (origFrom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; amt request)
  origTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTVar toVar
  writeTVar toVar (origTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; amt request)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are helper functions to make this shorter, but I wanted to do
this the long way to prove a point. This looks like &lt;em&gt;exactly&lt;&#x2F;em&gt; the kind
of race condition I described before. However, that &lt;code&gt;atomically&lt;&#x2F;code&gt;
function is vital here. It ensures that only a complete transaction is
ever committed. If any of the variables we touch are mutated by
another thread before our transaction is complete, all of our changes
are rolled back, and the transaction is retried. No need for explicit
locking, and therefore many less worries about data races and
deadlocks.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;TVar&lt;&#x2F;code&gt; is a &amp;quot;transactional variable.&amp;quot; It&#x27;s an alternative to the
&lt;code&gt;IORef&lt;&#x2F;code&gt; that I mentioned earlier. There are other kinds of mutable
variables in Haskell, including channels and &lt;code&gt;MVar&lt;&#x2F;code&gt;s which are like
mutexes. This is what I meant when I said you need to be explicit
about what kind of mutation you want in Haskell.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;purity-s-role&quot;&gt;Purity&#x27;s role&lt;&#x2F;h3&gt;
&lt;p&gt;What do you think will happen with this program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  buyBitcoins &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- side effects on my bank account
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  modifyTVar myBitcoinCount (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;buyBitcoins&lt;&#x2F;code&gt; is going off to some exchange a buying about
$100,000 in bitcoin (or whatever ridiculous amount they&#x27;re selling for
now). I said before that, if the variables are modified while running,
the transaction will be retried. It seems like this function is very
dangerous, as it may result in me going about $10,000,000 into debt
buying bitcoins!&lt;&#x2F;p&gt;
&lt;p&gt;This is where purity steps in. Inside &lt;code&gt;atomically&lt;&#x2F;code&gt;, you are not
allowed to perform any side effects outside of STM itself. That means
you can modify &lt;code&gt;TVar&lt;&#x2F;code&gt;s, but you cannot read or write files, print to the
console, fire the missiles, or place multi million dollar currency
purchases. This may feel like a limitation, but the tradeoff is that
it&#x27;s perfectly safe for the runtime system to retry your transactions
as many times as it wants.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-of-stm&quot;&gt;Summary of STM&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Makes concurrent data modification much easier&lt;&#x2F;li&gt;
&lt;li&gt;Bypass many race conditions and deadlocks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Depends on purity to work at all&lt;&#x2F;li&gt;
&lt;li&gt;Not really a disadvantage, you&#x27;re already stuck with purity in
Haskell&lt;&#x2F;li&gt;
&lt;li&gt;Not really any other disadvantages, so just use it!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;laziness&quot;&gt;Laziness&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a little cheeky of me to get this far into a talk about unique
features of Haskell and ignore one of its most notable features:
laziness. Laziness is much more of a double-edged sword than the other
features I&#x27;ve talked about, and let me prove that by revisiting one of
our previous examples.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I didn&#x27;t describe it before, but this function will sum up the numbers
from 1 to 1,000,000. There are two problems with this function:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;There&#x27;s a major performance bug in it&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s much more cumbersome than it should be&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;space-leaks&quot;&gt;Space leaks&lt;&#x2F;h3&gt;
&lt;p&gt;The bane of laziness is space leaks, something you&#x27;ve probably heard
about if you&#x27;ve read at all about Haskell. To understand this, let&#x27;s
look at how laziness is implemented. When you say something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;foo&lt;&#x2F;code&gt; doesn&#x27;t actually contain &lt;code&gt;3&lt;&#x2F;code&gt; right now. Instead, it contains an
instruction to apply the operator &lt;code&gt;+&lt;&#x2F;code&gt; to the values &lt;code&gt;1&lt;&#x2F;code&gt; and &lt;code&gt;2&lt;&#x2F;code&gt;. This
kind of instruction is called a &lt;em&gt;thunk&lt;&#x2F;em&gt;. And as you might guess,
storing the thunk is a lot more expensive than storing a simple
integer. We&#x27;ll see why this helps in a bit, but for now we just care
about why it sucks. Let&#x27;s look at what happens in our &lt;code&gt;loop&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each time we step through the loop, we have to compare &lt;code&gt;i&lt;&#x2F;code&gt; to the
number 1,000,000. Therefore, we are forced to evaluate it, which means
turning it into a simple integer. But we never look at the value of
&lt;code&gt;total&lt;&#x2F;code&gt;. Instead of storing a simple integer, which would be cheap, we
end up building a huge tree that looks like &amp;quot;add 1 to the result of
add 2 to the result of ... to 1,000,000.&amp;quot; This is really bad: it uses
more memory and more CPU than we&#x27;d like.&lt;&#x2F;p&gt;
&lt;p&gt;We can work around this in Haskell by being explicit about which
values should be evaluated. There are a few ways to do this, but in
our case, the easiest is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All I&#x27;ve done is added an exclamation point in front of the &lt;code&gt;total&lt;&#x2F;code&gt;
argument. This is known as a bang pattern, and says &amp;quot;make sure this is
evaluated before running the rest of this function.&amp;quot; The need to do
this in some cases is definitely a downside to Haskell&#x27;s laziness. On
the other hand, as we&#x27;ll see shortly, you often don&#x27;t need to bother
if you use the right kinds of functions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;laziness-is-awesome&quot;&gt;Laziness is awesome&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s go back to pseudocode and rewrite our summation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total := 0
for(i := 1; i &amp;lt;= 1000000; i++) {
  total += i
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty simple. But now let&#x27;s modify this to only sum up the even
numbers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total := 0
for(i := 1; i &amp;lt;= 1000000; i++) {
  if (isEven(i)) {
    total += i
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, that&#x27;s fine. But now, let&#x27;s sum up the indices modulus 13 (for
some weird reason):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total := 0
for(i := 1; i &amp;lt;= 1000000; i++) {
  if (isEven(i)) {
    total += i % 13
  }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each of these modifications is fine on its own, but at this point it&#x27;s
getting harder to see the forest for the trees. And fortunately each
of these transformations was relatively simple. If some of the
requirements were more complicated, fitting it into the &lt;code&gt;for&lt;&#x2F;code&gt; loop may
be more challenging.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go back to the beginning with Haskell. We saw how we could do it
with a loop, but let&#x27;s see the real way to sum the numbers from 1 to
1,000,000:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Bad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
      if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; total
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop (i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i)
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Awesome!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sum [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use list range syntax to create a list with one million numbers in
it. On its face, this looks terrible: we need to allocate about 8mb of
data to hold onto these integers, when this should run in constant
space. But this is exactly where laziness kicks in: instead of
allocating all of these values immediately, we allocate a thunk. Each
time we step through the list, our thunk generates one new integer and
a new thunk for the rest of the list. We&#x27;re never using more than a
few machine words.&lt;&#x2F;p&gt;
&lt;p&gt;There are also other optimizations in GHC to avoid even allocating
those thunks, but that&#x27;s not something I&#x27;m going to cover today.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, let&#x27;s continue. We can easily tweak this to only add up the
even numbers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sum (filter even [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This uses the &lt;code&gt;filter&lt;&#x2F;code&gt; higher order function, and likewise avoids
allocating an entire list at once. And doing the silly modulus 13
trick:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sum (map (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`mod` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (filter even [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Laziness is definitely a mixed bag, but combined with the functional
style of Haskell in general, it allows you to write higher level,
declarative code, while keeping great performance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;short-circuiting-for-free&quot;&gt;Short circuiting for free&lt;&#x2F;h3&gt;
&lt;p&gt;Lots of languages define &lt;code&gt;&amp;amp;&amp;amp;&lt;&#x2F;code&gt; and &lt;code&gt;||&lt;&#x2F;code&gt; operators which stop evaluation
early, e.g.:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;foo() &amp;amp;&amp;amp; bar()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;bar&lt;&#x2F;code&gt; is only called if &lt;code&gt;foo&lt;&#x2F;code&gt; returns &lt;code&gt;true&lt;&#x2F;code&gt;. Haskell works the same way, but these operators aren&#x27;t special; they just use laziness!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;amp;&amp;amp; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;False
True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;amp;&amp;amp; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;True &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;True
False &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This even scales up to functions working on lists of values, such as
&lt;code&gt;and&lt;&#x2F;code&gt;, &lt;code&gt;or&lt;&#x2F;code&gt;, &lt;code&gt;all&lt;&#x2F;code&gt;, and &lt;code&gt;any&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;other-downsides&quot;&gt;Other downsides&lt;&#x2F;h3&gt;
&lt;p&gt;There&#x27;s one other downside to laziness, and a historical
artifact. Laziness means that exceptions can be hiding inside any
thunk. This is also known as partial values and partial functions. For
example, what does this mean?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Generally speaking, partiality is frowned upon, and you should use
total functions in Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;The historical artifact is that many bad functions are still easily
available, and they should be avoided. &lt;code&gt;head&lt;&#x2F;code&gt; is arguably an example
of that. Another is the lazy left fold function, &lt;code&gt;foldl&lt;&#x2F;code&gt;. In virtually
all cases, you should replace it with a strict left fold &lt;code&gt;foldl&#x27;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-of-laziness&quot;&gt;Summary of laziness&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More composable code&lt;&#x2F;li&gt;
&lt;li&gt;Get efficient results from combining high level functions&lt;&#x2F;li&gt;
&lt;li&gt;Short-circuiting like &lt;code&gt;&amp;amp;&amp;amp;&lt;&#x2F;code&gt; and &lt;code&gt;||&lt;&#x2F;code&gt; is no longer a special case&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Need to worry about space leaks&lt;&#x2F;li&gt;
&lt;li&gt;Exceptions can be hiding in many places&lt;&#x2F;li&gt;
&lt;li&gt;Unfortunately some bad functions like &lt;code&gt;foldl&lt;&#x2F;code&gt; still hanging around&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Side note&lt;&#x2F;strong&gt; There&#x27;s a major overlap with Python generators or Rust
iterators, but laziness in Haskell is far more pervasive than these
other approaches.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;&#x2F;h2&gt;
&lt;p&gt;Due to time constraints, I&#x27;m not going to be able to go into detail on
a bunch of other examples I wanted to talk about. Let me just throw
out some quick thoughts on them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parser-and-other-dsls&quot;&gt;Parser (and other) DSLs&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Operator overloading!&lt;&#x2F;li&gt;
&lt;li&gt;Abstract type classes like &lt;code&gt;Applicative&lt;&#x2F;code&gt; and &lt;code&gt;Alternative&lt;&#x2F;code&gt; a natural
fit, e.g.: &lt;code&gt;parseXMLElement &amp;lt;|&amp;gt; parseXMLText&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Able to reuse huge number of existing library functions,
e.g. &lt;code&gt;optional&lt;&#x2F;code&gt;, &lt;code&gt;many&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;General purpose &lt;code&gt;do&lt;&#x2F;code&gt;-notation is great&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Time Hour Minutes Seconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe AmPm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;AmPm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Am &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Pm

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parseAmPm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Parser Time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;parseAmPm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Time
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; decimal
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; decimal)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; decimal)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; optional ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;AM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Am&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;|&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;PM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Pm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;c&#x2F;o &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;queertypes&#x2F;status&#x2F;941064338848100352&quot;&gt;@queertypes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;advanced-techniques&quot;&gt;Advanced techniques&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Free monads&lt;&#x2F;li&gt;
&lt;li&gt;Monad transformer stacks&lt;&#x2F;li&gt;
&lt;li&gt;Lens, conduit, pipes, ...&lt;&#x2F;li&gt;
&lt;li&gt;Lots of ways to do things in Haskell!&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s a plus and a minus&lt;&#x2F;li&gt;
&lt;li&gt;Recommendation: choose a useful subset of Haskell and its libraries,
and define some best practices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Haskell combines a lot of uncommon features&lt;&#x2F;li&gt;
&lt;li&gt;Very few of those features are unique&lt;&#x2F;li&gt;
&lt;li&gt;Combining those features allows you to write code very differently
than in other languages&lt;&#x2F;li&gt;
&lt;li&gt;If you want readable, robust, easy to maintain code: I think it&#x27;s a
great choice&lt;&#x2F;li&gt;
&lt;li&gt;Be aware of the sharp edges: they do exist!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;q-a&quot;&gt;Q&amp;amp;A&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stack and Nightly breakage</title>
		<published>2017-12-07T00:00:00+00:00</published>
		<updated>2017-12-07T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/12/stack-and-nightly-breakage/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/12/stack-and-nightly-breakage/</id>
		<content type="html">&lt;p&gt;I&#x27;m sure a number of readers have already seen something about the
situation around Stack and Stackage Nightly&#x2F;GHC 8.2. I tried to
clarify how this happened on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;3624&quot;&gt;the relevant Github issue&lt;&#x2F;a&gt;,
plus the
&lt;a href=&quot;https:&#x2F;&#x2F;ghc.haskell.org&#x2F;trac&#x2F;ghc&#x2F;ticket&#x2F;14558&quot;&gt;GHC trac ticket&lt;&#x2F;a&gt;, but
thought I&#x27;d reshare as a blog post for others who are interested.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt; Right after publishing, I saw that Stack 1.6.1 was released, so you
should probably just run &lt;code&gt;stack upgrade&lt;&#x2F;code&gt;. Keep reading if you&#x27;re curious on the
bug.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;When the first releases of Stackage Nightly for GHC 8.2.1 started
coming out some months back, they did not work with Stack 1.5.0, due
to an issue with the &lt;code&gt;ghc.cabal&lt;&#x2F;code&gt; file on Hackage. The reason for this
is explained below. We made a point release (Stack 1.5.1) which worked
around the issue temporarily, until Stack 1.6 was released with the
complete fix.&lt;&#x2F;p&gt;
&lt;p&gt;In the interim, GHC 8.2.2 was released, and Stackage Nightly switched
over to it. Contrary to my initial claims: this was a &lt;em&gt;red herring&lt;&#x2F;em&gt;
and unrelated to anything.&lt;&#x2F;p&gt;
&lt;p&gt;On December 4, integer-gmp-1.0.1.0 was uploaded to Hackage, which
reintroduced all of the breakage we had with Stack 1.5.0. Since our
point release had a very targetted workaround (specifically for
&lt;code&gt;ghc.cabal&lt;&#x2F;code&gt;), it did not work around the same bug occurring for
&lt;code&gt;integer-gmp.cabal&lt;&#x2F;code&gt;. Therefore, all versions of Stack before 1.6 will
fail to build a Stackage release with GHC 8.2.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-workaround&quot;&gt;The workaround&lt;&#x2F;h2&gt;
&lt;p&gt;The best &amp;quot;workaround&amp;quot; is just a new release: Stack 1.6 was fortunately
already in release candidate mode, and as I type this up it&#x27;s going
through the standard release process. By the time I hit publish, the
workaround may be to run &lt;code&gt;stack upgrade&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If that&#x27;s not the case, you can upgrade to the release candidate by
running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;stack upgrade --binary-version 1.6.0.20171202
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;cabal-background&quot;&gt;Cabal background&lt;&#x2F;h2&gt;
&lt;p&gt;In order to understand the explanation, you should be aware of a few
different things that are all called Cabal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cabal-install, the build tool. This is not relevant to the
explanation below&lt;&#x2F;li&gt;
&lt;li&gt;Cabal the library. This is a normal Haskell library which Stack
depends on, and is used for (among other things) parsing cabal
files.&lt;&#x2F;li&gt;
&lt;li&gt;Cabal the file format. If you open up virtually any cabal file
you&#x27;ll see a &lt;code&gt;cabal-version: &amp;gt;= 1.10&lt;&#x2F;code&gt; looking field. This is stating
which version of the Cabal file format is being used. New versions
of Cabal-the-library may add new features to the Cabal file
format. The version of the format tracks the library version it was
released with, so that a cabal file stating &lt;code&gt;cabal-version: &amp;gt;= 1.24&lt;&#x2F;code&gt;
can only be parsed by Cabal-the-library 1.24 or later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There was an addition made to Cabal-the-file-format 2.0: a &lt;code&gt;^&amp;gt;=&lt;&#x2F;code&gt;
operator. This operator is not parseable by older versions of Cabal
the library (meaning: Cabal 1.24 or earlier). Stack 1.5 was built
against Cabal-the-library 1.24, and therefore cannot parse any Cabal
files using this new operator.&lt;&#x2F;p&gt;
&lt;p&gt;The Stackage build process prevents any such Cabal files from being
used yet to give tooling (like Stack) a chance to upgrade, something
I&#x27;ve requested of Hackage as well. However, there are some packages
which ship with GHC itself, and which Stackage has no control over in
the creation of a snapshot. This includes packages like &lt;code&gt;base&lt;&#x2F;code&gt;, &lt;code&gt;ghc&lt;&#x2F;code&gt;,
and &lt;code&gt;integer-gmp&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;original-breakage&quot;&gt;Original breakage&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s a short explanation (and some code to demonstrate it!) for the
original breakage with GHC 8.2.1 in the pull request:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;pull&#x2F;3304&#x2F;files&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;pull&#x2F;3304&#x2F;files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Prior to Stack 1.6, there was a bug where Stack would try to get some
metadata about libraries that shipped with GHC from their cabal files
instead of directly from the package database. Historically, this has
never been a problem, which is why it&#x27;s survived in Stack for so
long. The reason is that, historically, GHC-shipped packages did not
use bleeding-edge features in their cabal files.&lt;&#x2F;p&gt;
&lt;p&gt;When GHC 8.2.1 was released, the &lt;code&gt;ghc.cabal&lt;&#x2F;code&gt; file uploaded to Hackage
did something new: it used a feature of the newly released Cabal 2.0
file format (the &lt;code&gt;^&amp;gt;=&lt;&#x2F;code&gt; operator) and required the new Cabal 2.0
library to parse it. This occurred before Stack had a chance to
upgrade to Cabal-the-library 2.0, and for that matter before
cabal-install 2.0 was released. In other words: at the time the file
was placed on Hackage, no officially released version of any common
tool supported it.&lt;&#x2F;p&gt;
&lt;p&gt;For unrelated reasons, I&#x27;d already fixed this bug on master as part of
a refactoring. Strangely enough, that refactoring had to do with
problems with revisions. Thanks to the revision system, it&#x27;s not
possible to rely on cabal files on Hackage to tell you anything about
GHC-installed packages, since we can&#x27;t know for certain which revision
was used to build the package. (We&#x27;ll get to integer-gmp in a moment,
which is slightly worse in this regard.)&lt;&#x2F;p&gt;
&lt;p&gt;The behavior of Stack at this time with regard to GHC-shipped packages
was the following (and this is a bug):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the cabal file cannot be found: ignore the package entirely. This
is necessary for packages like &lt;code&gt;rts&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If the cabal file is found: try to parse it, and fail if the parse
fails.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was this second bullet which caused a problem. When we discovered
this, we released an emergency patch release of Stack to work around
this situation and simply ignore parse failures from &lt;code&gt;ghc.cabal&lt;&#x2F;code&gt;. We
did not embark on a bigger fix because:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A bigger fix would involve much more code change, introducing the
chance for regressions&lt;&#x2F;li&gt;
&lt;li&gt;We already had a fix on master, and knew that Stack 1.6 would be
released before GHC 8.4&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This went out the door, and all users who upgraded to Stack 1.5.1 were
able to use the new Stackage Nightly snapshots based on GHC 8.2.2.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;december-4-2017&quot;&gt;December 4, 2017&lt;&#x2F;h2&gt;
&lt;p&gt;One of the packages that ships with GHC 8.2 is
&lt;code&gt;integer-gmp-1.0.1.0&lt;&#x2F;code&gt;. Until December 4, this package was not uploaded
to Hackage. As a result, Stack 1.5.1 simply ignored the package
entirely, which worked fine. However, something we didn&#x27;t anticipate
happened:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Months after the GHC 8.2.1 release, &lt;code&gt;integer-gmp-1.0.1.0&lt;&#x2F;code&gt; was
uploaded to Hackage&lt;&#x2F;li&gt;
&lt;li&gt;The cabal file that was uploaded was manually modified to use
Cabal-the-format 2.0 features (again, the &lt;code&gt;^&amp;gt;=&lt;&#x2F;code&gt; operator).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can compare the
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;integer-gmp-1.0.1.0&#x2F;integer-gmp.cabal&quot;&gt;file on Hackage&lt;&#x2F;a&gt;
with the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ghc&#x2F;ghc&#x2F;blob&#x2F;ghc-8.2.2-release&#x2F;libraries&#x2F;integer-gmp&#x2F;integer-gmp.cabal&quot;&gt;file on Github&lt;&#x2F;a&gt;. It&#x27;s
unclear what the motivation was behind this modification, but this
modification is what broke Stack 1.5.1 and GHC 8.2.&lt;&#x2F;p&gt;
&lt;p&gt;Before this upload, the missing &lt;code&gt;integer-gmp.cabal&lt;&#x2F;code&gt; file was simply
ignored by Stack. Once it was uploaded, Stack (again, as a bug) tries
to parse it, fails, and gives up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;&#x2F;h2&gt;
&lt;p&gt;Obviously there was a bug in Stack that needed to be fixed, and has
been fixed. However, the irregularities around the &lt;code&gt;ghc.cabal&lt;&#x2F;code&gt; and
&lt;code&gt;integer-gmp.cabal&lt;&#x2F;code&gt; files are a little troubling, and make it
difficult to predict future behavior. Hopefully some new policies from
GHC HQ will address these concerns.&lt;&#x2F;p&gt;
&lt;p&gt;And while this case is a bug in Stack, I want to clarify a general
point. It is entirely expected that over time, older releases of Stack
will not be able to use newer Stackage snapshots. At some point in the
future, Stackage will allow Cabal 2.0-formatted cabal files into
snapshots, and then by design Stack 1.5 and earlier will be unable to
parse those files. That&#x27;s unfortunate, but expected. What&#x27;s unexpected
in this case was that&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;These cabal files slipped into a snapshot through the back door
(GHC&#x27;s package database) so quickly, before Stack 1.6 was out the
door&lt;&#x2F;li&gt;
&lt;li&gt;That actions taken post-GHC release (a new upload of
integer-gmp.cabal) could affect existing snapshots.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Both points will hopefully be hit both by the fixes that landed on
Stack 1.6 ensuring less eager parsing of cabal files, and changes in
GHC HQ policy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;There&#x27;s a bug in Stack, triggered by new behavior not seen before
by GHC&lt;&#x2F;li&gt;
&lt;li&gt;That bug affects reproducibility, because an upload to Hackage in
the future (or a revision for that matter) can break existing build
plans&lt;&#x2F;li&gt;
&lt;li&gt;This bug is fixed on master fully (AFAICT, we&#x27;ve added an
integration test to check for regressions)&lt;&#x2F;li&gt;
&lt;li&gt;Instead of putting out another emergency Stack 1.5 patch for
integer-gmp.cabal, we&#x27;re going to get Stack 1.6 out the door ASAP&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I hope that clarifies. This is definitely an unfortunate situation,
and I know it&#x27;s screwed up people&#x27;s development, so my apologies on
that front. I hope for all our sakes (mine included!) that the
situation is more stable going forward.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Future proofing test suites</title>
		<published>2017-11-12T00:00:00+00:00</published>
		<updated>2017-11-12T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/11/future-proofing-test-suites/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/11/future-proofing-test-suites/</id>
		<content type="html">&lt;p&gt;I&#x27;ll start with the specific case I&#x27;ve seen pop up a few times
recently, and then expand to the general. If you&#x27;re a package author
who has been affected by this, please note: I&#x27;m putting this
information into a blog post since it&#x27;s easier to state this once and
link to it rather than rewrite an explanation on lots of different bug
trackers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;hlint&quot;&gt;hlint&lt;&#x2F;a&gt; is a great tool for
getting advice on improving your Haskell codebase (another great Neil
Mitchell product). And as such tools go, hlint has new versions which
improve its ability to provide useful advice. This means that,
sometimes, code which triggered no hlint warnings previously may
suddenly present with such warnings under a new hlint version.&lt;&#x2F;p&gt;
&lt;p&gt;Twice recently in my Stackage curation, I&#x27;ve seen a number of test
suites fail, even though the code for those packages was
unmodified. It turns out that the upgrade to a new version of hlint
caused a previously successful test suite to now fail. Clearly the
code isn&#x27;t suddenly broken because a new version of hlint has been
released, but as far as the diagnostics of test suite failures are
concerned, that&#x27;s exactly what happened.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recommendation&quot;&gt;Recommendation&lt;&#x2F;h2&gt;
&lt;p&gt;I do strongly recommend projects use hlint to get code
improvements. And I&#x27;ve seen some great results with using it as part
of the CI process, such as on Stack. (For the record: it wasn&#x27;t my
idea and I didn&#x27;t implement it. I was just pleasantly surprised when
my PRs failed because I had some style errors.) However, making the
test suite for the entire package fail because of a new version of
hlint is too much. Therefore:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DO&lt;&#x2F;strong&gt; Have some way to run hlint from your CI process, if you
want these warnings to block PRs. There are two approaches I can
think of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The way Stack does it: have a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;blob&#x2F;46121be1b96465f1164e3f84cafa19c7369da9cc&#x2F;.travis.yml#L39&quot;&gt;separate part of the build matrix&lt;&#x2F;a&gt;
just for style errors. The cabal file for the project itself
knows nothing about hlint.&lt;&#x2F;li&gt;
&lt;li&gt;Via a test suite in your cabal file which is disabled by
default. Then: turn on that test suite with a flag from your CI
configuration.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DON&#x27;T&lt;&#x2F;strong&gt; Set up your package which is uploaded to Hackage&#x2F;built
by Stackage such that it will fail if a style-based error occurs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;general-recommendation&quot;&gt;General recommendation&lt;&#x2F;h2&gt;
&lt;p&gt;The general takeaway from this is: when you&#x27;re building your code on
CI, be as strict as you want. Set high standards, block PRs, call
master broken, for whatever trivial or non-trivial issues you deem
worthy. Turn on &lt;code&gt;-Wall -Werror&lt;&#x2F;code&gt;, respect hlint, error out if someone
uses tabs* or includes trailing whitespace. That&#x27;s all good.&lt;&#x2F;p&gt;
&lt;p&gt;* Cue necessary tabs-vs-spaces argument&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;However&lt;&#x2F;em&gt;, when you&#x27;re releasing your code elsewhere, make the tests
as lenient as possible on optional features. If the code fails to
build: that&#x27;s a problem. If the code builds, but returns incorrect
runtime results: that&#x27;s a problem. These should stop build systems
like Stackage from including your package. But stylistic issues, or
newly introduced warnings from the compiler, or myriad other issues,
should not trigger a failure for downstream consumers of your package.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Effective Ways to Get Help from Maintainers</title>
		<published>2017-10-23T00:00:00+00:00</published>
		<updated>2017-10-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/10/effective-ways-help-from-maintainers/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/10/effective-ways-help-from-maintainers/</id>
		<content type="html">&lt;p&gt;This blog post was previously titled &amp;quot;Manipulating Maintainers,&amp;quot; but
has been retitled to more accurately reflect what it&#x27;s about (with a
less cheeky tone). It&#x27;s about how to most effectively interact with
and request assistance from maintainers of open source projects, and
open source community members in general.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s an old &amp;quot;ha ha, only serious&amp;quot; joke. If you go to a Linux forum
and ask for help fixing your WiFi driver, everyone will ignore
you. If, instead, you say &amp;quot;Linux sucks, you can&#x27;t even get a f*&amp;amp;$ing
WiFi driver working!&amp;quot; thousands of people will solve the problem for
you.&lt;&#x2F;p&gt;
&lt;p&gt;This story is a great example of manipulating people, but it&#x27;s
obviously a negative take on it. I&#x27;d like to share some thoughts on
this from a much more positive standpoint, which will help you get
people to pay more attention, be more helpful, and—perhaps most
importantly—create a healthier open source community over all.&lt;&#x2F;p&gt;
&lt;p&gt;These items will appear in no particular order, and will almost all
fall into either the &lt;em&gt;attractor&lt;&#x2F;em&gt; or &lt;em&gt;obstacle&lt;&#x2F;em&gt; category. An attractor
is something you can do to make people want to participate with
you. An obstacle is something you should not do, which would prevent
people from interacting with you.&lt;&#x2F;p&gt;
&lt;p&gt;And it should go without saying, but I&#x27;ll say it anyway: this is an
opinionated list, written by one guy. I&#x27;m including in here things
that I personally care about, and things which friends and colleagues
have shared with me. No example is specific to any individual, so
don&#x27;t think I&#x27;m calling you out: I&#x27;m most certainly &lt;em&gt;not&lt;&#x2F;em&gt;. And some
people may disagree, or have other items for this list. Sharing such
differing thoughts would be very healthy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-waste-people-s-time&quot;&gt;Don&#x27;t waste people&#x27;s time&lt;&#x2F;h2&gt;
&lt;p&gt;This is my biggest one to be honest. Remember that for the most part,
people you interact with in open source settings are doing this in
their free time. Either because they love a project, they want to help
people, they want to change the world, or something else. You&#x27;re
asking for a slice of their lives. Make that slice as small as
possible.&lt;&#x2F;p&gt;
&lt;p&gt;The advice is vague, so let me follow up with some concrete examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File a good bug report.&lt;&#x2F;strong&gt; If you write an issue that says &amp;quot;my code
doesn&#x27;t compile,&amp;quot; and don&#x27;t include the error message, full code,
OS, compiler version, and other such things, people will have to
spend time prying it out of you. Be forthcoming with relevant
information.&lt;&#x2F;li&gt;
&lt;li&gt;In slight contradiction to that: &lt;strong&gt;be concise&lt;&#x2F;strong&gt;. Start off with the
most highly pertinent information. Make it clear what you&#x27;re trying
to do. If you have a 400 line error message, perhaps put it in an
lpaste or Gist and link to it.&lt;&#x2F;li&gt;
&lt;li&gt;Provide a &lt;strong&gt;minimal repro&lt;&#x2F;strong&gt;. &amp;quot;Here&#x27;s a link to my 1500 SLOC project
that doesn&#x27;t compile, kthxbye&amp;quot; is a bad start. As someone helping
you, I&#x27;m going to have to strip off the extraneous bits until I&#x27;m
staring the problem in the face. Why should I spend my time doing
that, when you—the person asking for help—could be?&lt;&#x2F;li&gt;
&lt;li&gt;Make sure to mention &lt;strong&gt;any custom configuration&lt;&#x2F;strong&gt;. If I spend 5 days
trying to fix an issue with your code not linking, and then you say
&amp;quot;oh, I&#x27;ve been trying out the prerelease linker, I forgot to mention
that, you think that could be the problem?&amp;quot; I&#x27;m going to be
annoyed. Don&#x27;t do that. Be forthcoming with all relevant info, and
call out in particular custom things on your system.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t fall into &lt;strong&gt;the XY problem&lt;&#x2F;strong&gt;. And don&#x27;t get offended if you
get accused of hitting the XY problem. Instead of trying to explain
what this problem is, I&#x27;ll just
&lt;a href=&quot;http:&#x2F;&#x2F;xyproblem.info&#x2F;&quot;&gt;provide a link&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;demonstrate-you-ve-tried&quot;&gt;Demonstrate you&#x27;ve tried&lt;&#x2F;h2&gt;
&lt;p&gt;You&#x27;ve been staring at your screen for the past 5 days. The code
hasn&#x27;t compiled. You have no idea why. You&#x27;re pulling out your hair at
this point (side note: bald is awesome). You finally, in a fit of
desperation, go to Stack Overflow and say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;m trying to make an HTTP request in Haskell and can&#x27;t figure it
out. Any advice?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Good luck. Not only is your question vague, but it sounds like you&#x27;re
asking for help on a homework assignment and are too lazy to do any
research. Make it clear that you&#x27;re not just getting someone else to
do your work, and are really deserving of assistance.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Below you&#x27;ll find a snippet of code I&#x27;ve been trying to get working
to make an HTTP PUT request and parse the response body as XML in a
streaming fashion. As you can see, I&#x27;m trying to connect the source
body to the &lt;code&gt;parseXML&lt;&#x2F;code&gt; function from &lt;code&gt;xml-conduit&lt;&#x2F;code&gt;, but I get the
error message below. If anyone could point me in the right
direction, I&#x27;d appreciate it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Make sure to include the import statements and language extensions
too, so that anyone reading can just copy-paste your example and get
the same error message. (I like using
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;tutorial&#x2F;stack-script&quot;&gt;reproducible Stack scripts&lt;&#x2F;a&gt;
for this.) You may notice an overlap with &lt;em&gt;minimal repro&lt;&#x2F;em&gt; from above:
that&#x27;s intentional.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;help-other-people&quot;&gt;Help other people&lt;&#x2F;h2&gt;
&lt;p&gt;If I see people answering questions on a mailing list or Stack
Overflow, I&#x27;m appreciative. I consider them a comrade-in-arms. And I
consider them assets to the community. They&#x27;ve earned my respect, I&#x27;m
indebted to them, and I want to entice them to continue. Honestly: all
of you helpers are awesome in my book. If one of those people asks a
question, I want to help more.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to all of the feelings I mentioned above, there&#x27;s also a
more basic one: if &lt;em&gt;this&lt;&#x2F;em&gt; person is having trouble, it&#x27;s probably not
the most basic, boring question. In reality, the person may be barely
a beginner, and may be asking beginner questions. But I know
statistically that just having that helpful person&#x27;s name associated
with the question increases the likelihood of it being interesting. In
other words: I&#x27;m nerd sniped.&lt;&#x2F;p&gt;
&lt;p&gt;This points out something which really applies to all of these
sections: people have memories. As soon as you start interacting with
the community, you&#x27;re building a reputation. You can change that
reputation over time (for better or worse), but you have to
acknowledge that it&#x27;s there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-be-rude&quot;&gt;Don&#x27;t be rude&lt;&#x2F;h2&gt;
&lt;p&gt;Compare:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for your great software, I really appreciate the time
you&#x27;ve taken to make it. I&#x27;d appreciate your help with...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ve been pulling my hair out trying to parse your documentation for
the past two days. You think you can help me make sense of it? I&#x27;m
trying to...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And even further:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since I&#x27;m stuck using your piece of s*&amp;amp;# software with crappy
documentation, the least you can do is help me overcome...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If your goal is to get someone to help you, I&#x27;d place a large wager
that the first approach will attract the most assistance. It doesn&#x27;t
matter if the other two approaches really do capture your current
mental state. Are you trying to vent at someone, or get help?&lt;&#x2F;p&gt;
&lt;p&gt;I recently had someone argue a few times that the tone of a question
shouldn&#x27;t matter. (In fact, those interactions were partially what
encouraged this blog post.) I argue that that&#x27;s not only naive, but
dangerous:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;re human beings, and we like being treated nicely. As I mentioned
above, open source community members are giving up a portion of
their lives to help strangers. You should make that sacrifice feel
as rewarding as possible.&lt;&#x2F;li&gt;
&lt;li&gt;Rude comments like this scare other people away. Encouraging people
to continue with them by rewarding them with a helpful answer has
the real possibility of scaring away more constructive community
members.&lt;&#x2F;li&gt;
&lt;li&gt;All of life is a series of choices between different things I can be
doing. If you make it miserable enough to interact with you, I may
very well choose &amp;quot;watch paint dry and see this jerk badmouth my
project in public&amp;quot; over &amp;quot;give this guy any more of my time.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Whether correct or not, being rude is a signal to me of other likely
tendencies. I&#x27;m likely to guess that someone rude is also selfish,
unwilling to minimize time wastage for others, and unlikely to
contribute back by helping people. If I have to make a snap
judgement on you based on a question and your tone of voice, a rude
tone is not going to help you.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I honestly haven&#x27;t found the best approach to this specific
problem. In some cases, a private message saying &amp;quot;your message would
be more well received if you modified it&amp;quot; can help. But if I&#x27;m honest,
by the time I think about writing such a message, I&#x27;ve basically
decided that this is a person not worth my time, and trying to
encourage him&#x2F;her to behave better isn&#x27;t worth it.&lt;&#x2F;p&gt;
&lt;p&gt;The situation is slightly different if someone has been in the
community for a while, and suddenly has an outburst of rudeness. I&#x27;m
not excusing it, but I am saying I&#x27;d be more willing to consider that
he&#x2F;she is having a bad day, or that the problem is really bad, instead
of &amp;quot;this person is just a jerk.&amp;quot; Also, the reverse is true: if you&#x27;ve
been rude to someone for the past 10 interactions, it may be very
difficult to convince them to help you on the 11th, even if the
rudeness disappears. (Overwhelming &lt;em&gt;niceness&lt;&#x2F;em&gt;, however, can help.)&lt;&#x2F;p&gt;
&lt;p&gt;Side note: I implied above that the project documentation sucks. That
may be the case. See &amp;quot;offer to help&amp;quot; for advice on pointing that out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;say-thank-you&quot;&gt;Say thank you&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll preface this one with a few caveats so I don&#x27;t get a flurry of
guilt-ridden &amp;quot;thank you&amp;quot; notes. Most people don&#x27;t say thank you in
open source. I rarely write a thank you note to a package author. I
don&#x27;t expect it, I&#x27;ve never met anyone who expects it, it is not
necessary.&lt;&#x2F;p&gt;
&lt;p&gt;When someone has received assistance on a mailing list, I get
happy. When that person responds with a sincere thank you, I get
happier. When I&#x27;m the person who did the helping, I&#x27;m even happier
still. It&#x27;s simple, it&#x27;s trivial, but it&#x27;s often missed. Most people
are only doing open source work to help others. Gratitude may be their
only reward.&lt;&#x2F;p&gt;
&lt;p&gt;Taking it a step farther: there have been a few times over the years
where, out of nowhere, I&#x27;ve received a very kind personal email
thanking me for work I&#x27;ve done. You can
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LambdaMom&quot;&gt;ask my wife&lt;&#x2F;a&gt; and she&#x27;ll confirm: it&#x27;s
truly touching to receive such messages.&lt;&#x2F;p&gt;
&lt;p&gt;I know I&#x27;ve had views of open source maintainers as being far beyond
the lowly likes of me in the past. I don&#x27;t think it&#x27;s generally
true. Most people are, at the end of the day, just people. And they
respond like any other people to kind words.&lt;&#x2F;p&gt;
&lt;p&gt;Though I have a feeling that Linus Torvalds may be a bit confused if
you pop him an email saying &amp;quot;love Linux, thanks!&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admit-if-you-re-new&quot;&gt;Admit if you&#x27;re new&lt;&#x2F;h2&gt;
&lt;p&gt;This one works one time per community. If you&#x27;re new, you don&#x27;t know
what you&#x27;re doing, and are asking for help, say straight out that
you&#x27;re new. It will get you some sympathy (unless you&#x27;re lying, then
people will hate you). It will get a more softball answer, and likely
some guides to places explaining how to interact better. For example:
if you come to the Yesod issue tracker and say &amp;quot;I&#x27;m new, I&#x27;m not sure
if this is the best place to ask about installing GHC,&amp;quot; you&#x27;ll likely
get pointed to an install page and Stack Overflow for further &amp;quot;please
help me&amp;quot; questions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;offer-to-help&quot;&gt;Offer to help&lt;&#x2F;h2&gt;
&lt;p&gt;This may be the first surprising piece of advice. Let&#x27;s say the docs
on my library suck. You &lt;em&gt;could&lt;&#x2F;em&gt; come in and say &amp;quot;help me solve X
because your docs suck.&amp;quot; And I might answer. Now consider this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was having trouble doing X with your library (thank you for it by
the way!). I&#x27;d be happy to prepare a documentation PR to help other
people in my situation, if you&#x27;d be able to guide me towards an
answer.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Whoa, what is this? Help someone and they&#x27;ll take away the dreaded
documentation writing task from my plate? Awesome, I&#x27;ll get right on
it!&lt;&#x2F;p&gt;
&lt;p&gt;In addition to docs, similar thoughts apply to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Offering to write test cases&lt;&#x2F;li&gt;
&lt;li&gt;Offering to add some missing functionality&lt;&#x2F;li&gt;
&lt;li&gt;Offering to answer people&#x27;s questions on other issues&#x2F;the mailing
list&#x2F;Stack Overflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The point is: convince the maintainer (or whoever) that giving time to
you is an investment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;give-money&quot;&gt;Give money&lt;&#x2F;h2&gt;
&lt;p&gt;This isn&#x27;t at all a universal one. And to be clear: I&#x27;m not asking for
it, if I have an envelope with unmarked bills on my doorstep tomorrow,
I&#x27;ll be weirded out.&lt;&#x2F;p&gt;
&lt;p&gt;Some people just need money. They like contributing to open source
work, but they have to pay the bills. If they&#x27;ve at all expressed a
willingness to accept money for their work (like setting up Flattr or
Patreon or whatever is popular these days), considering donating.&lt;&#x2F;p&gt;
&lt;p&gt;Consider how much of their time you&#x27;re taking. Consider how much of
your time they would be saving you. Consider what a typical software
developer hourly rate is. And then realize that buying someone a beer,
or even a nice dinner, is probably a cheap price to pay for an answer
to a question.&lt;&#x2F;p&gt;
&lt;p&gt;And for those who aren&#x27;t asking for any money, offering to buy the
beer&#x2F;coffee&#x2F;soda when you meet up at a conference is a nice way to
make this one a reality too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Posture</title>
		<published>2017-08-16T00:00:00+00:00</published>
		<updated>2017-08-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/08/posture/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/08/posture/</id>
		<content type="html">&lt;p&gt;About five years ago, I decided to start working out at home since I
wanted to get in better shape. About three years ago, I got more
serious about it as I realized my health was slipping (specifically,
recurrence of asthmatic symptoms after 20 years of being clear). But I
only started weight lifting 1.5 years ago, and the reason was simple:
back pain.&lt;&#x2F;p&gt;
&lt;p&gt;Like many people in our industry—our industry being the &amp;quot;sit in
front of a computer all day&amp;quot; industry—I suffered from chronic
lower back pain. I&#x27;d been having problems with it on or off since I
was a teenager (yeah, I was sitting in front of a computer then
too). But over the preceeding few years, it got significantly worse. I
had many episodes of waking up unable to get out of bed without
significant pain. I had a few cases of my spine turning S-shaped for
days on end, unable to stand up straight at all.&lt;&#x2F;p&gt;
&lt;p&gt;I have a strong family history of back pain. Like going bald, I&#x27;d
taken it as a given for many years that this would happen. I went to
an orthopedist, who prescribed painkillers. And that could have been
the rest of my life: regular pain, popping pills, waiting to see if
I&#x27;d kill my liver with the pills before something else got me. And
most likely, inactivity due to back pain could have led to plenty of
other health problems.&lt;&#x2F;p&gt;
&lt;p&gt;Today is a different story. I won&#x27;t claim that I&#x27;m totally back pain
free—problems still crop up from time to time. But the
debilitating level I had previously is gone. And when some negative
event occurs (like getting knocked down and back slammed by a wave
this Sunday), I&#x27;m far more resilient to the damage. I&#x27;m writing this
blog post since I strongly believe many of my friends, family,
colleagues, and general fellow programmers suffer terribly from back
pain, when they could greatly improve the situation. I&#x27;ll tell you
what I&#x27;ve done, and what I continue to do.&lt;&#x2F;p&gt;
&lt;p&gt;If you suffer from back pain, I strongly recommend you consider being
proactive about it. Feel free to take my experiences into account, but
also do your own research and determine what you think is your best
course of action. There is unfortunately—like most things in the
health world—quite a bit of contradictory advice out there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;two-pronged-approach&quot;&gt;Two pronged approach&lt;&#x2F;h2&gt;
&lt;p&gt;From my research, I decided that there were likely two things I could
do (outside of pill popping) that I could do to improve the situation
with my back:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Improve the muscles in my posterior chain (lower back, glutes,
hamstrings) to better support my spine&lt;&#x2F;li&gt;
&lt;li&gt;Change the way I was moving my back, though I didn&#x27;t really
understand yet how&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first bit is easy to explain. I&#x27;d been doing bodyweight workouts
at home until then, which—according to
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;&quot;&gt;the program I was following&lt;&#x2F;a&gt;, don&#x27;t
really offer a good alternative to the deadlift for posterior chain
work. That&#x27;s why I switched to
&lt;a href=&quot;https:&#x2F;&#x2F;stronglifts.com&#x2F;&quot;&gt;Stronglifts 5x5&lt;&#x2F;a&gt; and put a large emphasis
on the deadlift, also focusing on stabilizing my core a lot during the
squat.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll be honest: I threw my back out badly a few times on the squat. I
almost gave up. I&#x27;m glad I didn&#x27;t. I (finally) figured out how I was
misusing my back on the exercises, and now can squat and deadlift
almost twice the weight that had previously thrown my back out. I
consider it a huge success.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the muscle improvements, the other takeaway is:
&lt;strong&gt;lifting weights taught me how to use my back in a safer way&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;posture&quot;&gt;Posture&lt;&#x2F;h2&gt;
&lt;p&gt;But now on to the (for me) more complicated bit. I watched tons of
YouTube videos, read articles, browsed forums, and spoke with doctors
and chiropractors about proper posture. The problem is that there are
different schools of thought on what it means to stand or sit
correctly. From my reading, the most contentious point comes down to
pelvic tilt. To demonstrate visually:&lt;&#x2F;p&gt;
&lt;img alt=&quot;Pelvic tilt&quot; style=&quot;max-width:100%&quot; src=&quot;&#x2F;static&#x2F;pelvic-tilt.jpg&quot;&gt;
&lt;p&gt;There&#x27;s a basic question: should your pelvis tip slightly forward,
slightly backwards, or be neutral (perfectly vertical). As far as I
can tell, the most mainstream opinion is a neutral pelvis. I&#x27;m always
nervous to give anything close to health advice, especially contrary
to mainstream opinion, so instead I&#x27;ll say: I found a lot of success
with the &lt;a href=&quot;http:&#x2F;&#x2F;gokhalemethod.com&#x2F;&quot;&gt;Gokhale Method&lt;&#x2F;a&gt;, and specifically
Esther&#x27;s book &amp;quot;8 Steps to a Pain Free Back.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;The reasoning Esther uses to arrive at her conclusions is solid to
me. Analyzing the shape of the vertebrae, and specifically the L5-S1
joint, does make a good case for the pelvis needing to be slightly
anteverted. In addition, I buy her argument of the source of back
pain being the predominance of slouching introduced in the western
world in the earlier 20th century. The evidence of more uniform
posture among cultures unexposed to this slouching epidemic, and their
relative lack of back problems, is compelling.&lt;&#x2F;p&gt;
&lt;p&gt;I won&#x27;t try to describe the method here; her book and YouTube videos
do a better job than I ever could. I will, however, comment on some of
the takeaways that I try to keep in mind throughout the day:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the spine in a stretched position as much as possible&lt;&#x2F;li&gt;
&lt;li&gt;Stack the bones: try to ensure that your weight is being distributed
down your spinal column, through your pelvis, and down your legs,
instead of relying on your muscles or (worse) joints to keep you
stable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Keep in mind that this is not an overnight change. You&#x27;ll need to
practice better posture and get it to the point of muscle memory. I
think it&#x27;s worth every second of investment you can give it. It&#x27;s not
worth living your life in pain, afraid to move, and constantly doped
up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-now&quot;&gt;Why now?&lt;&#x2F;h2&gt;
&lt;p&gt;Two things happened this week that made me want to write this blog
post. I took my kids to the beach on Sunday, and as I mentioned above,
got knocked down hard by a wave, which twisted my back in a bad
angle. For the next few seconds that I was under water, absolute fear
went through my mind. &amp;quot;Oh no, did my back just go out? How am I going
to drive the kids home? How will I work this week? What if one of the
kids gets pulled under the water and I can&#x27;t save him&#x2F;her?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;The wave subsided, my feet touched the floor, I stood up... and
everything was fine. I know in my bones (hah!) that that kind of
impact would have put me out for a week just a few years ago. I&#x27;m
sitting at my desk typing this now, after having done a deadlift
session in the gym, and everything is fine.&lt;&#x2F;p&gt;
&lt;p&gt;Yesterday I took a trip to the doctor (not the topic of today&#x27;s
post). I sat in the patient&#x27;s chair in his office, and noticed
that—contrary to prior visits—I was sitting perfectly
upright. I hadn&#x27;t thought about it. The chair wasn&#x27;t really well
designed either: using the back support would have required leaning
back and no longer remaining straight. It was a minor victory, but
I&#x27;ll take it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Some Upcoming Crazy Thoughts</title>
		<published>2017-07-16T00:00:00+00:00</published>
		<updated>2017-07-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/07/some-upcoming-crazy-thoughts/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/07/some-upcoming-crazy-thoughts/</id>
		<content type="html">&lt;p&gt;I didn&#x27;t mention it on my blog, but I put it on Twitter, so it&#x27;s
probably not a surprise to most. About five months ago, we had a baby
boy (yay!). As you can imagine, new babies take a lot of energy,
especially when it&#x27;s your first baby of four to have colic. Many
nights were spent walking Lavi around the block singing. I&#x27;m actually
pretty lucky none of the neighbors called the cops, my singing
definitely counts as disturbing the peace.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;static&#x2F;lavi.jpeg&quot; style=&quot;max-width: 100%&quot;&gt;
&lt;p&gt;Pro tip to any new parents even a little bit superstitious: never say
“We&#x27;ve been through all of this before, this baby can&#x27;t surprise us.”&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I&#x27;m not wont to share personal anecdotes on this blog, but I
mention this because I&#x27;ve obviously been pretty distracted with baby
things. Fortunately, the baby is just about done with colic (just in
time to start teething of course). Between that extra energy drain
evaporating, having had lots of time to let my mind wander while
walking a crying baby, and a few other things I&#x27;ll detail at the end
of this post, I&#x27;ve gotten to mentally explore some crazier ideas.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve already been blogging a bit on fpcomplete.com about monad
transformers. Expect some similar things on streaming data and
polymorphism (perhaps) in the next few weeks. Also, I&#x27;ll probably talk
more about exceptions, though the thoughts there are less crazy and
more reaffirming previous things.&lt;&#x2F;p&gt;
&lt;p&gt;A good question is why am I bothering with this blog post at all. I
actually drafted most of it and then decided not to publish it for
about a week. My thinking here is I don&#x27;t want anyone taking my crazy
thoughts too seriously. I like to explore ideas, and I explore ideas
best by actually writing libraries and blog posts about them. In other
words, I throw things at the wall and see what sticks. I usually buy
into the idea completely for a bit to avoid second-guessing derailing
an idea, and then take a step back afterwards to see if I like it.&lt;&#x2F;p&gt;
&lt;p&gt;Besides having reduced keyboard time for the past five months, here
are some of the other stimuli leading to some of the ideas I&#x27;ll be
sharing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;ve spent considerably more effort on training. I&#x27;ve been doing
documentation and tutorial writing for a while, but I&#x27;ve had
multiple opportunities recently to train in a more direct
setting. This has helped remind me of some of the newcomer
experiences I&#x27;ve forgotten.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Similar to this, my time at LambdaConf earlier this year was
great. My conference experiences usually are either non-functional
programming conferences where I&#x27;m the Haskell anomaly, or advanced
functional crowds. The huge mixture of experience levels with FP and
Haskell at LambdaConf was wonderful and eye-opening (or perhaps
reopening).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;ve been working on a few projects where my major focus is on
review and debugging, which forces me to focus less on making it
easy to write code the first time, and more on writing code for
maintainability and robustness (yeah, vague terms, don&#x27;t beat me up
over it).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Most recently, I did a major 10-day-straight hacking fest on the
Stack code base, after not having seriously touched it for months
(and the parts in question for over a year). I got to play with
major refactorings and focuses on readability and future
extensibility.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;And in addition to all of this Haskell stuff, I&#x27;ve finally forced
myself to start learning a new language for the first time in ten
years. I went through quite the journey through programming
languages before I hit on Haskell, and since then I&#x27;ve been so happy
with it that I haven&#x27;t wanted to touch anything else. But in the
past half year, I&#x27;ve gotten into two languages to various extents:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PureScript This honestly wasn&#x27;t much of a learning experience,
since it&#x27;s close enough to Haskell. I think GHCJS is a great
project, and have enjoyed both Reflex and various React layers
in it. But the smaller output and strict nature of PureScript
make it something I wanted to experience for front end
development.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust As I said on Twitter: &amp;quot;Rust is the first language I&#x27;ve
learned in ten years (since Haskell) that both teaches new
concepts and does stuff Haskell can&#x27;t.&amp;quot; Rust is an interesting
language, promotes safety in a way that I like (the main reason
I love Haskell to be honest), and has a really well designed
community experience around it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Spiderman Principle</title>
		<published>2017-07-05T00:00:00+00:00</published>
		<updated>2017-07-05T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/07/the-spiderman-principle/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/07/the-spiderman-principle/</id>
		<content type="html">&lt;h4 id=&quot;with-great-power-comes-great-responsibility&quot;&gt;&lt;em&gt;With great power comes great responsibility&lt;&#x2F;em&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;I was
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;880637139574304769&quot;&gt;recently reminded&lt;&#x2F;a&gt;
of a bit of a mantra that I had at LambdaConf this year in
discussions, and I decided to share it here. I received a bunch of
questions like these (I&#x27;d share the originals, but I have a terrible
memory):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why is there no tutorial for doing X?&lt;&#x2F;li&gt;
&lt;li&gt;Why doesn&#x27;t a library like Y exist?&lt;&#x2F;li&gt;
&lt;li&gt;Why has no one created a mailing list&#x2F;discussion forum&#x2F;etc for topic
Z?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The answer to all of these is the same: &lt;strong&gt;because you haven&#x27;t done
it!&lt;&#x2F;strong&gt; And I don&#x27;t mean that in the plural &amp;quot;you&amp;quot; or figuratively. The
one and only reason why things don&#x27;t get done is because you,
personally, individually, have not done them.&lt;&#x2F;p&gt;
&lt;p&gt;This of course isn&#x27;t literally true. There&#x27;s a possibility that
someone else will step up to the plate first. And there are limited
numbers of hours in the day, and no one person can accomplish
everything. But this mindset is, in my opinion, the only correct one
to adopt if you want things to happen. It&#x27;s your responsibility to do
it; don&#x27;t wait for others to do it.&lt;&#x2F;p&gt;
&lt;p&gt;You may have some legitimate objections to this philosophy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How can I write a tutorial, I don&#x27;t understand how to accomplish
this?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go ahead and write it as best you can, and ask people to review
it. People are usually quite happy to provide corrections and
advice.&lt;&#x2F;li&gt;
&lt;li&gt;A streamlined way of doing this is to send a pull request to an
existing repo holding documentation (e.g.,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-lang&#x2F;haskell-lang#contributing-content&quot;&gt;haskell-lang&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Worst case scenario: ask questions. Encourage people to write up
answers. Volunteer to compose the answers into a coherent
document at the end. Even people not willing to participate in
writing a full tutorial themselves may be quite happy to answer
direct questions, especially knowing their work will be
preserved for others.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How can I write such a library, it&#x27;s beyond my capabilities?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You&#x27;d be surprised about that. Give it a shot. Worst case
scenario: it&#x27;ll be a learning experience and otherwise an epic
failure. Best case scenario: you succeed. Either way, it&#x27;s a
win-win situation.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe your desired functionality fits into an existing
library. Library authors tend to be quite happy to review and
accept pull requests, and contributing an extra function can be
less intimidating than writing a new library. (But please
consider
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;how-to-send-me-a-pull-request?preview=true&quot;&gt;opening an issue first&lt;&#x2F;a&gt;.)&lt;&#x2F;li&gt;
&lt;li&gt;And if you&#x27;re certain you&#x27;re not up to the task: try to
encourage others. You may not succeed. But try to make the case
for why this project is useful, interesting, necessary, or
whatever other adjectives you believe apply. Motivate people.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;I&#x27;m not a community leader, how can I encourage discussions?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s no such thing as an &amp;quot;official&amp;quot; community leader. There
are people with moderator access on some forums or control over
certain websites. But that&#x27;s not what makes someone a leader. If
people want to hear what you have to say and join the
conversation, you&#x27;re leading a conversation.&lt;&#x2F;li&gt;
&lt;li&gt;Besides, you don&#x27;t need to be a leader to start a discussion.&lt;&#x2F;li&gt;
&lt;li&gt;A slight retraction to all of this: if a topic has already been
beaten to death, it&#x27;s almost certainly not worth rehashing
it. Reraising controversial points constantly doesn&#x27;t help
anyone.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It doesn&#x27;t seem like the community agrees on this point, how can I advocate it?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Just because many people seem to be advocating X does not mean
that it is universally held. There are many reasons why X seems
to be the dominant viewpoint:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;People may be legitimately unaware of alternatives&lt;&#x2F;li&gt;
&lt;li&gt;The people who disagree with X all think it&#x27;s not worth
speaking against the &amp;quot;dominant&amp;quot; opinion&lt;&#x2F;li&gt;
&lt;li&gt;The people who believe X are simply more passionate about it
than those that don&#x27;t.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;So what if people disagree? Having healthy technical debate is a
&lt;em&gt;good thing&lt;&#x2F;em&gt;. There are at least three outcomes I can see from
such a debate:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You realize you were wrong&lt;&#x2F;li&gt;
&lt;li&gt;People disagreeing with you realize they were wrong&lt;&#x2F;li&gt;
&lt;li&gt;Both sides continue with their beliefs, but have a deeper
understanding of both their positions and the alternatives&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;But again, try to avoid beating a topic to death&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I don&#x27;t know if people outside the Haskell world experience this as
much as we do. But I&#x27;ve certainly seen a strong sentiment of &amp;quot;not
being worthy&amp;quot; or some other such idea. It&#x27;s rubbish. Join the
conversation, lead the way, make things happen. The world will be
better for it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Very Naive Overview of Exercise (Part 3)</title>
		<published>2017-06-15T00:00:00+00:00</published>
		<updated>2017-06-15T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/06/naive-overview-exercise/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/06/naive-overview-exercise/</id>
		<content type="html">&lt;p&gt;This blog post is part 3 of a series on nutrition and exercise. If you
haven&#x27;t seen them already, I recommend
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;reading part 1 now&lt;&#x2F;a&gt;,
which provides a general overview, and
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition&quot;&gt;part 2 detailing nutrition&lt;&#x2F;a&gt;. This
blog post will go into more details on exercise.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to break down exercise into three broad categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Resistance training&lt;&#x2F;li&gt;
&lt;li&gt;Cardio&lt;&#x2F;li&gt;
&lt;li&gt;Mobility&#x2F;flexibility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These categories can overlap. For example, a weighted squat could be
seen as both resistance training and mobility work. Circuit training
could be seen as cardio and resistance. But typically there are
distinct benefits for each categories, and fairly distinct activities
that achieve those goals.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;For the completely impatient&lt;&#x2F;strong&gt;, here are my recommendations on where
you should get started. I strongly encourage reading the rest of the
post so that these recommendations make sense and you can tweak them
for your own personal needs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Perform bodyweight exercises three days a week.&lt;&#x2F;strong&gt; A simple
routine will include exercises from the
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;squat-progression.html&quot;&gt;squat&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;push-up-progression.html&quot;&gt;pushup&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;pull-up-progression.html&quot;&gt;pullup&lt;&#x2F;a&gt;,
and
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;leg-raises-progression.html&quot;&gt;leg raise&lt;&#x2F;a&gt;
progressions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Run at least twice a week.&lt;&#x2F;strong&gt; I would focus on high-intensity
sprinting, such as running as fast as you can for 20 seconds,
resting for 40 seconds, and repeating for 5 sprints.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stay active regularly.&lt;&#x2F;strong&gt; Try to find excuses to get out and walk,
take a bike ride, go for a swim, or just play with your kids.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;health-vs-fitness&quot;&gt;Health vs fitness&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into the details, I want to talk about two related but
distinct terms. Definitions on these two terms vary quite a bit, but
I&#x27;d like to give my own simplified definitions based on the input of
many other sources:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Health&lt;&#x2F;strong&gt; is a measure of your ability to live life without
sickness, crippling weakness, premature death, or other debilitating
conditions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Fitness&lt;&#x2F;strong&gt; is a measure of your ability to perform tasks. In our
context, we&#x27;re talking about the ability to perform specific
physical feats, such as running a mile in a certain amount of time,
bench press a certain amount of weight, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What I&#x27;m trying to get across in these definitions is that health is about reaching a baseline where your body is not working against you. By contrast, fitness lets you push the boundaries of what you&#x27;re capable of.&lt;&#x2F;p&gt;
&lt;p&gt;Often times, these go hand in hand. Being able to run a mile in 15
minutes, for instance, is a good indication that you are not suffering
from any respiratory conditions, your bones are strong enough to
withstand the impact of running, you have decent lower body muscle
mass, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;However, these two concepts can and do diverge. The ability to
deadlift 300kg (660lbs) is not by any reasonable standard a
prerequisite for a healthy body, but certainly measures
fitness. Running a 4 minute mile is an amazing feat of prowess in
fitness, but doesn&#x27;t really tell me you&#x27;re healthier than the person
running an 8 minute mile.&lt;&#x2F;p&gt;
&lt;p&gt;I point this distinction out here because this series of posts is
intended to cover &lt;em&gt;health&lt;&#x2F;em&gt;, and using nutrition and exercise to
achieve it. It is very tempting to get caught up in numbers and goals
that measure fitness, while throwing health to the wind. For the most
trivial example of this: taking steroids to improve your powerlifting
numbers will certainly improve your fitness. However, I&#x27;d argue pretty
strongly against it, since it&#x27;s bad for your health.&lt;&#x2F;p&gt;
&lt;p&gt;All that said, there&#x27;s nothing wrong with pursuing fitness goals, and
as I mentioned in &lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;why-i-lift&quot;&gt;why I lift&lt;&#x2F;a&gt;, doing so can
be a lot of fun. Having something to compete against—even
yourself—is a huge motivator. Just make sure you&#x27;re not
sacrificing your health in the process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resistance-training&quot;&gt;Resistance training&lt;&#x2F;h2&gt;
&lt;p&gt;This is also known as &lt;em&gt;strength training&lt;&#x2F;em&gt;. Let&#x27;s rip off the
definition
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Strength_training&quot;&gt;straight from Wikipedia&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Strength training is a type of physical exercise specializing in the
use of resistance to induce muscular contraction which builds the
strength, anaerobic endurance, and size of skeletal muscles.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The term strength training tells us the &lt;em&gt;why&lt;&#x2F;em&gt;, whereas resistance
training hints more at how we achieve these goals. Resistance training
involves exerting your muscles against some external
resistance. Probably the most emblematic version of this is resisting
against gravity in the form of lifting weights, but we&#x27;ll see that
there are many other approaches available.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h3&gt;
&lt;p&gt;This could be my own personal experience that others have not felt,
but growing up I always had the impression that training for strength
was somehow &lt;em&gt;bad&lt;&#x2F;em&gt;. Lifting weights was a vain pursuit of bigger
muscles, and real health benefits only came from cardio like jogging.&lt;&#x2F;p&gt;
&lt;p&gt;If you never had these misconceptions, congratulations. I certainly
did. And in case others do as well, let me dispel them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Muscle mass has a &lt;strong&gt;protective effect on your body&lt;&#x2F;strong&gt;. For example,
if you have more muscle, you can withstand a larger impact.&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;re capable of moving larger weights, then &lt;strong&gt;day to day
activities are easier&lt;&#x2F;strong&gt;. For example, if you can deadlift 100kg,
then picking up your 30kg child is a much easier activity, and won&#x27;t
exhaust you as quickly.&lt;&#x2F;li&gt;
&lt;li&gt;Strength training doesn&#x27;t just increase muscle mass; it also
&lt;strong&gt;increases your bone density and strengthens your tendons&lt;&#x2F;strong&gt;. This
makes strength training a great way to &lt;strong&gt;fight off osteoporosis&lt;&#x2F;strong&gt;,
making it a vital activity for older people, and especially older
women. (Unfortunately, this is the group most likely to not bother
strength training.)&lt;&#x2F;li&gt;
&lt;li&gt;While strength training doesn&#x27;t burn as many calories as cardio, it
does encourage your body to use calories consumed to &lt;strong&gt;build and
maintain muscle mass instead of fat mass&lt;&#x2F;strong&gt;. This means you can get
away with eating some level of extra calories without gaining fat.&lt;&#x2F;li&gt;
&lt;li&gt;Because strength training uses up muscle glycogen, it can be a great
way to help &lt;strong&gt;control blood glucose levels&lt;&#x2F;strong&gt;. After a heavy training
session, your muscles will be primed to absorb glucose to rebuild
glycogen, instead of leaving the glucose in your blood to convert
into fat or (in the case of diabetics) simply harm your body with
toxic glucose levels.&lt;&#x2F;li&gt;
&lt;li&gt;Increased strength can &lt;strong&gt;help avoid injuries&lt;&#x2F;strong&gt;. Prior to 2016,
despite no longer being overweight and having a decent strength
base, I was constantly throwing out my back from normal day-to-day
activities (like sitting at a computer for too long). This was my
biggest motivation for getting into weight lifting that year, and my
back has been much happier since.&lt;&#x2F;li&gt;
&lt;li&gt;Strength training helps improve many &lt;strong&gt;health markers&lt;&#x2F;strong&gt;, like blood
lipid profiles (cholesterol) and hormone levels.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s a lot of benefits, and it&#x27;s far from a complete list. You may
not relate to all of the points above, but hopefully it makes the
point that strength training is not just for young guys wanting to
impress people with their biceps. Strength training is a vital
component of good health for everyone, regardless of age or gender.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mechanism&quot;&gt;Mechanism&lt;&#x2F;h3&gt;
&lt;p&gt;All strength&#x2F;resistance training fits into the same basic idea. You
want to move some part of your body by contracting a muscle. You want
to use some technique to make that contraction difficult so that your
muscle has to struggle. By challenging the muscle, you
trigger—through various pathways—your body to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make the muscle stronger&lt;&#x2F;li&gt;
&lt;li&gt;Increase toughness of the tendons&lt;&#x2F;li&gt;
&lt;li&gt;Increase bone density&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These benefits occur during &lt;em&gt;recovery&lt;&#x2F;em&gt;, or the time after you stop
exercising. This is important: if you keep exercising non-stop for
days on end, you will get &lt;em&gt;weaker&lt;&#x2F;em&gt;, not stronger. The formula then is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Perform exercise against resistance&lt;&#x2F;li&gt;
&lt;li&gt;Rest&#x2F;recover&lt;&#x2F;li&gt;
&lt;li&gt;Repeat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This kind of exercise is &lt;em&gt;anaerobic&lt;&#x2F;em&gt;, meaning &amp;quot;without air.&amp;quot; Because
resistance training is short bursts of heavy intensity, it mostly
relies upon glycogen for energy, which can be burned without
oxygen. This may seem to imply that resistance training has no
benefits on the cardiovascular (heart and lung) system, and doesn&#x27;t
help burn fat (which requires oxygen to break down). Neither of these
is true, however. During the recovery phase, your body will need to
rely on your fat stores to provide energy to rebuild muscles, which
will put demands on the cardiovascular system to provide additional
oxygen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stress&quot;&gt;Stress&lt;&#x2F;h3&gt;
&lt;p&gt;Last bit of theory here before we dive into how to do all of
this. Another way of looking at exercise is a &lt;em&gt;stress&lt;&#x2F;em&gt; we are applying
to our body. Stress has a bad rap, and for good reason: chronic
stress, such as we experience in our daily life from work and
continual electronic stimulation, is damaging. However, in small
doses, stress is wonderful for our body.&lt;&#x2F;p&gt;
&lt;p&gt;When we temporarily stress our body, it provides a stimulus for our
body to get better, so it is able to more easily handle the stress in
the future. Stressing our muscles causes them to get
stronger. Stressing our bones makes them more dense. And stressing our
cardiovascular system with extra oxygen demands makes our heart and
lungs more efficient.&lt;&#x2F;p&gt;
&lt;p&gt;Temporary stress with proper recovery is the very heart of exercise,
and will carry through to everything in this post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bodyweights&quot;&gt;Bodyweights&lt;&#x2F;h3&gt;
&lt;p&gt;OK, let&#x27;s actually talk about some exercises! The most easily
accessible form of resistance training is &lt;em&gt;body weight exercises&lt;&#x2F;em&gt;, or
&lt;em&gt;bodyweights&lt;&#x2F;em&gt;. The concept here is simple: use your own body and
gravity to provide a resistance for your muscles to exert against.&lt;&#x2F;p&gt;
&lt;p&gt;Probably the most famous example of this is the pushup. You are
pushing against the ground with your arm, shoulder, and chest muscles
to create enough force to move your body against gravity. Your own
body weight is working against your muscles.&lt;&#x2F;p&gt;
&lt;p&gt;If you read the word &amp;quot;pushup&amp;quot; and thought &amp;quot;I can&#x27;t do that,&amp;quot; no need
to worry. Bodyweight exercises usually follow some form of
&lt;em&gt;progression&lt;&#x2F;em&gt;, where you can start with easier forms of the exercise
and gradually move to more difficult versions. Taking a pushup as an
example, a progression may look something like:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Stand in front of a wall and push your body away from it&lt;&#x2F;li&gt;
&lt;li&gt;Put your hands on a table and push up from that position&lt;&#x2F;li&gt;
&lt;li&gt;Do pushups with your knees on the ground&lt;&#x2F;li&gt;
&lt;li&gt;A standard pushup, with only your feet and hands touching the
ground&lt;&#x2F;li&gt;
&lt;li&gt;Put your feet on a stool and push up&lt;&#x2F;li&gt;
&lt;li&gt;Put your feet high on a wall and perform a vertical pushup&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are other variations you can perform: changing the width of your
grip by putting your hands closer or farther apart to focus on
different muscles. You can also follow a one-arm pushup progression
instead of a vertical pushup progression. Vertical pushups put more
stress on your shoulder muscles, while one-arm pushups put more focus
on your chest muscles.&lt;&#x2F;p&gt;
&lt;p&gt;If all of this sounds confusing and a bit daunting, don&#x27;t worry. Some
very helpful people online have already created programs around
bodyweights. Some references:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;start-bodyweight-basic-routine.html&quot;&gt;StartBodyWeight.com&lt;&#x2F;a&gt;. I
did this program for about a year, and highly recommend it as a
starting point.&lt;&#x2F;li&gt;
&lt;li&gt;The
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;bodyweightfitness&#x2F;wiki&#x2F;kb&#x2F;recommended_routine&quot;&gt;r&#x2F;bodyweightfitness recommended routine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.marklauren.com&#x2F;&quot;&gt;Mark Lauren&#x27;s You Are Your Own Gym&lt;&#x2F;a&gt;,
which I also followed for a while&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;athleticmuscle.net&#x2F;calisthenics-for-beginners&#x2F;&quot;&gt;Calisthenics for Beginners&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of these routines follow the same basic principles: use compound
movements to target all of your major muscle groups, progressively
overload those muscles, and provide ample time for recovery. If those
terms are confusing, don&#x27;t worry, there are sections below dedicated
to explaining them.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re feeling overwhelmed or confused, let me remind of something
from the first post in this series: don&#x27;t let confusion get in your
way! These are all great routines, and doing something is better than
doing nothing. Pick something and do it for a few weeks, and after you
get comfortable, you&#x27;ll be ready to make a more informed decision
about how you want to proceed.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how bodyweight exercises stack up against alternatives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Requires little to no equipment, making it an easy method to start
with or use on the road&lt;&#x2F;li&gt;
&lt;li&gt;Less risk of injury vs free weights, since there&#x27;s no barbell trying
to crush you. (Notice I said &lt;em&gt;less&lt;&#x2F;em&gt;, not &lt;em&gt;none&lt;&#x2F;em&gt;. Be careful.)&lt;&#x2F;li&gt;
&lt;li&gt;Because you are working against your own body weight, reducing your
body fat makes your bodyweight exercises more successful. Typically,
practicioners of bodyweight routines will be leaner than weight
lifters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Increasing intensity is more complicated than simply adding more
weight to a bar&lt;&#x2F;li&gt;
&lt;li&gt;Some muscles groups are difficult to properly stress. While you can
get a pretty good shoulder workout with vertical pushups, it&#x27;s
difficult to develop your posterior chain (hamstrings, glutes, and
lower back) with bodyweights. This was the reason I started weight
lifting in the first place.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;weight-lifting&quot;&gt;Weight lifting&lt;&#x2F;h3&gt;
&lt;p&gt;Weight lifting is the act of moving some external weight against
gravity (or sometimes against friction and inertia). The category
breaks down broadly into machines and free weights. Free weights are
things like barbells, dumbells, and kettlebells. For those unfamiliar
with these terms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A barbell is a long metal bar (about 2 meters or 6 feet) that you
usually hold with both
hands.&lt;br&gt;&lt;img src=&quot;&#x2F;static&#x2F;exercise&#x2F;barbell.jpg&quot; width=&quot;300&quot;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A dumbbell is a shorter metal bar usually held in one hand&lt;br&gt;&lt;img src=&quot;&#x2F;static&#x2F;exercise&#x2F;dumbbell.png&quot; width=&quot;300&quot;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A kettlebell is a weight with a handle on the top&lt;br&gt;&lt;img src=&quot;&#x2F;static&#x2F;exercise&#x2F;kettlebell.png&quot; width=&quot;300&quot;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A machine is some kind of, well, machine&lt;br&gt;&lt;img src=&quot;&#x2F;static&#x2F;exercise&#x2F;machine.jpg&quot; width=&quot;300&quot;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Free weights have an advantage over machines in that they are
&lt;em&gt;unstable&lt;&#x2F;em&gt;. This means you need to use more muscle groups to keep
control of the weight. By contrast, a machine keeps the weight in more
a less a straight line, which takes some of the stress off of your
body. Additionally, machines are usually easier to learn to use and
less dangerous.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re too intimidated by free weights, by all means start right
away with machines. But if you avoid free weights indefinitely, you&#x27;re
limiting yourself significantly. I strongly recommend you get
comfortable with using a barbell. Start with low weights and build up
slowly. Focus on getting the movements correct (aka good form), and
slowly build up to heavy weights (where &lt;em&gt;heavy&lt;&#x2F;em&gt; is a personal
assessment of what is difficult for you).&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re going to pursue a machine-based routine, I&#x27;d recommend
speaking with one of the trainers at the gym you&#x27;re attending. I&#x27;m not
familiar with good machine-based routines available online, and it
will depend a lot on what equipment you have available.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to get started with free weights, there are two very
popular routines to consider:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stronglifts.com&#x2F;&quot;&gt;StrongLifts 5x5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;startingstrength.com&#x2F;&quot;&gt;Starting Strength&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you go to popular weight lifting forums, you&#x27;ll see a lot of
flamewars between these two routines. To cut through some of this:
Starting Strength was the original program, is designed by a coach
(Mark Rippetoe) with a huge amount of experience training individuals,
and was groundbreaking when first released. StrongLifts is basically a
variation of Starting Strength and doesn&#x27;t have as much experience to
back it up.&lt;&#x2F;p&gt;
&lt;p&gt;Based on that, it would seem that Starting Strength is the way to
go. I personally decided to go with StrongLifts, and my reasons were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It has a really nice smartphone app. Yes, I&#x27;m that shallow, but it
makes it dead simple to get started&lt;&#x2F;li&gt;
&lt;li&gt;StrongLifts uses a barbell row in place of a power clean. I agree
with the StrongLifts creator (Mehdi) that the latter is more
complicated to learn, and that the former is a great upper back
exercise missing from Starting Strength.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m sure these reasons sound shallow, and some people will be upset
with this. But the reality is: do whichever routine you want (or a
completely different one). As long as you&#x27;re lifting, you&#x27;re better
off.&lt;&#x2F;p&gt;
&lt;p&gt;And one word of warning from my own experience: don&#x27;t become so
obsessed with progressing through the program that you ignore your
body&#x27;s complaints. I trained to injury a few times because I ignored
pain and put on extra weight when I shouldn&#x27;t have. Don&#x27;t be stupid!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resistance-bands&quot;&gt;Resistance bands&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m not going to say much about these, since I haven&#x27;t really used
them. But I wanted to make it clear that there are drastically
different approaches to resistance training. Resistance bands are
pieces of rubber which you can stretch, and which become harder to
stretch the further you&#x27;ve pulled them. You can use them in place of
weights for many kinds of workouts. Your body doesn&#x27;t care what&#x27;s
causing the resistance. It just wants something to be resisting it.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a YouTube channel which I find very beginner-friendly, called
&amp;quot;Picture Fit.&amp;quot; Here are two videos I recommend watching that summarize
the three categories mentioned:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=xJBqbv8GRZ4&quot;&gt;Free Weights vs Body Weight&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=msEl6RO7OT8&quot;&gt;Can You Gain Muscle Mass with Resistance Bands?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;combine-them&quot;&gt;Combine them!&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve presented the information so far as a choice among
competitors. This is far from the case. Many of these techniques can
be combined to gain the advantages of each. For example, consider a
workout routine consisting of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bench press (free weight)&lt;&#x2F;li&gt;
&lt;li&gt;Pushups (body weight)&lt;&#x2F;li&gt;
&lt;li&gt;Seated press machine (machine, duh)&lt;&#x2F;li&gt;
&lt;li&gt;Overhead band (resistance bands)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s no reason to avoid mixing and matching. However, building your
own routine is a more advanced activity. When you&#x27;re getting started,
I recommend choosing one of the routines I linked to above and
sticking to it until you get comfortable with the exercises.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sets-and-reps&quot;&gt;Sets and reps&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s talk nomenclature. A rep is short for a repetition, and it
describes performing one complete exercise. For example, with a
pushup, a repetition consists of lowering your body to the ground and
raising yourself back up to the starting position.&lt;&#x2F;p&gt;
&lt;p&gt;A set is a collection repetitions performed without rest. For example,
a set may consist of 8 reps.&lt;&#x2F;p&gt;
&lt;p&gt;Often times, workout programs will be given in terms of sets and reps like so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pushups 3x8&lt;&#x2F;li&gt;
&lt;li&gt;Bench press 3x5&lt;&#x2F;li&gt;
&lt;li&gt;Overhead press 1xF&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Perform three sets of eight repetitions of pushups&lt;&#x2F;li&gt;
&lt;li&gt;Perform three sets of five repetitions of bench press&lt;&#x2F;li&gt;
&lt;li&gt;Perform one set of overhead press to failure (as many reps as you
can do)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You&#x27;ll also need to consider how long to rest between sets. Usually
your program will tell you this. Valid answers here can be as little
as 30 seconds and as much as 5 minutes. Typically different rest
periods will work your body in different ways: shorter rest gives more
endurance training, whereas longer rest gives more strength gains.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compound-vs-isolation&quot;&gt;Compound vs isolation&lt;&#x2F;h3&gt;
&lt;p&gt;Think of a bench press: you&#x27;re lying on your back with a barbell over
you. You bend your elbows, your wrist bends, and your shoulder joint
activates. You push back up using your chest muscles, your shoulder
muscles, and your arm muscles (tricpes in particular).&lt;&#x2F;p&gt;
&lt;p&gt;Now think of a bicep curl: you hold a dumbbell in your hand and you
bend your elbow.&lt;&#x2F;p&gt;
&lt;p&gt;The former is called a &lt;em&gt;compound movement&lt;&#x2F;em&gt;: it involves multiple
muscle groups moving mutiple joints in your body. The latter is an
&lt;em&gt;isolation exercise&lt;&#x2F;em&gt;: it targets just one muscle group via one joint.&lt;&#x2F;p&gt;
&lt;p&gt;Generally speaking, you&#x27;ll get better results by focusing on compound
movements. They stress the body more, and in more natural ways. They
lead to more balanced development of muscles. And they are more time
efficient: you work more muslces in less time.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not to say you should never use isolation exercises, but in my
opinion they should be considered &lt;em&gt;accessories&lt;&#x2F;em&gt; to main, compound
movement. Use them to help develop weak spots in your strength.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll notice that the routines I listed above all focus on compound
movements. That&#x27;s not by chance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;progressive-overload&quot;&gt;Progressive overload&lt;&#x2F;h3&gt;
&lt;p&gt;If you do 10 pushups a day for the rest of your life, after a certain
point you aren&#x27;t going to get stronger. In order to reap the full
benefits of strength training, you need to progressively overload your
muscles by increasing the stress&#x2F;stimulus. You can do this in multiple
ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Adding more weight to the bar&#x2F;machine&lt;&#x2F;li&gt;
&lt;li&gt;Doing more reps&lt;&#x2F;li&gt;
&lt;li&gt;Doing more sets&lt;&#x2F;li&gt;
&lt;li&gt;Changing the tempo (slower exercises are harder)&lt;&#x2F;li&gt;
&lt;li&gt;Changing the exercise you&#x27;re doing (full pushups vs knee pushups)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A good program will build in this kind of progressive overload, as do
the programs I linked to above. The basic idea is to avoid stagnating
by constantly challenging yourself to improve.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plate-math&quot;&gt;Plate math&lt;&#x2F;h3&gt;
&lt;p&gt;In order to modify the weight of a barbell, we can add extra weight to
it. These weights come in the form of &lt;em&gt;plates&lt;&#x2F;em&gt;, circular pieces of
metal—sometimes rubberized—that are put on the sides of
the bar.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re going to be doing barbell exercises, it&#x27;s important to get
comfortable with adding up weights, also known as &lt;em&gt;plate math&lt;&#x2F;em&gt;. I&#x27;ll
start with the metric system, since it&#x27;s easier to handle, and what I
use.&lt;&#x2F;p&gt;
&lt;p&gt;A standard barbell weighs 20kg. The plates you&#x27;ll put on the barbell must be balanced: you put the same amount on the left and right side. If you put a 10kg and 5kg weight on each side, you&#x27;ll end up with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;20kg bar&lt;&#x2F;li&gt;
&lt;li&gt;10kg times 2 (one per side) = 20kg&lt;&#x2F;li&gt;
&lt;li&gt;5kg times 2 (one per side) = 10kg&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Total&lt;&#x2F;strong&gt; 20+20+10=50kg&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I find it easiest in most cases to add up the weight per side of the
bar, double it, and add 20. So in the above example, I&#x27;d do &amp;quot;10 + 5 =
15, 15 * 2 = 30, 30 + 20 = 50.&amp;quot; This is just arithmetic, so don&#x27;t get
too hung up on it, and do what&#x27;s comfortable.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s do this in reverse. Suppose you&#x27;re planning on benching
70kg. In order to figure out what to put on the bar, you would do
this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;70kg - 20kg for the bar = 50kg in plates&lt;&#x2F;li&gt;
&lt;li&gt;50kg total plates &#x2F; 2 = 25kg in plates per side&lt;&#x2F;li&gt;
&lt;li&gt;Start finding the largest plates that will add up to your number. In
this case, you&#x27;re probably looking at a 20kg and 5kg.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Try not to just match the total weight, but also the plate
distribution. In other words, don&#x27;t put a 20kg on one side of the bar
and 4 5kg plates on the other. That will feel unbalanced. Most gyms
will have plates of size 20kg, 10kg, 5kg, 2.5kg, and 1.25kg. Some may
also have 25kg and 15kg.&lt;&#x2F;p&gt;
&lt;p&gt;You may also hear people say things like &amp;quot;squatting 2 plate,&amp;quot; or on
stranger parts of the internet, &amp;quot;2pl8.&amp;quot; This means you have 2 20kg
plates per side of the barbell. Why 20kg? Convention. Do the math,
I&#x27;ll give you the total weight for this at the end of this section.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;For you Americans&lt;&#x2F;strong&gt;, the numbers are slightly different. Instead of
a barbell weighing 20kg, it weights 45lbs, which is just slightly more
than 20kg (20.4kg). And the plates come in sizes of 45lbs, 35lbs,
25lbs, 10lbs, 5lbs, and 2.5lbs. As a developer, I love the power-of-2
system employed by the metric plates, but if you have to use imperial
measurements, just get used to doing the math.&lt;&#x2F;p&gt;
&lt;p&gt;This has the funny side-effect that if you say &amp;quot;I squatted 2 plate,&amp;quot;
it means something different between America and the rest of the
world. (Go ahead and figure out what that total pound value is.) The
numbers are close, but not exactly the same.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Answer: 2 plate is 100kg, or 225lbs.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;importance-of-proper-form&quot;&gt;Importance of proper form&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ll read this just about everywhere that discusses weight lifting,
but I&#x27;ll say it here too: using proper form on your lifts is
&lt;em&gt;absolutely crucial&lt;&#x2F;em&gt;. Using proper form will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure you are getting the full value from your workout&lt;&#x2F;li&gt;
&lt;li&gt;Help you avoid injuries&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you don&#x27;t end up in an embarassing video on YouTube&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two particular points of proper form that I want to point
out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The act of lowering the weight is known as the &lt;em&gt;eccentric portion&lt;&#x2F;em&gt;
of the exercise. It is common to see people lose control of the
weight during this portion. If you do this, you are hindering your
progress dramatically! Most of the muscle tearing that leads to
muscle regrowth occurs during the eccentric portion. Lowering the
weight in a controlled, steady pace is difficult, but well worth it.&lt;&#x2F;li&gt;
&lt;li&gt;Be sure to follow full range of motion. You&#x27;ll often hear people say
they don&#x27;t want to squat to parallel because it will injure their
knees. This is in fact a myth: squatting with insufficient depth
leads to muscular imbalances and injuries.
&lt;ul&gt;
&lt;li&gt;I&#x27;m well aware of the fact that I haven&#x27;t actually described how
to do a squat in this post; please see the linked routines above
that describe how to do a squat properly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;full-body-vs-splits&quot;&gt;Full body vs splits&lt;&#x2F;h3&gt;
&lt;p&gt;A full body workout is a routine that exercises all (or most) muscle
groups each day you train. A split routine somehow splits up days of
the week to specific muscle groups. There are many tradeoffs between
these two approaches, and I won&#x27;t be able to cover them all here. But
here&#x27;s a basic idea: you should always have a day of rest between
training a specific muscle group. But having too many rest days in
between is limiting your growth potential.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re going to work out three days a week, you can do a full body
routine each of those days and have 1 or 2 days of rest in between. By
contrast, if you&#x27;re going to work out 6 days a week, doing a full body
routine each day won&#x27;t give you any time to rest and recover.&lt;&#x2F;p&gt;
&lt;p&gt;The routines above are all full body routines. That&#x27;s probably the
right place to start; I would highly advise &lt;em&gt;against&lt;&#x2F;em&gt; strength
training for more than three days a week as a beginner. If you later
want to progress to more days of working out a week, you can consider
some kind of split. There are many preexisting routines based on
splits, and you can of course make your own.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I&#x27;ve found the PPL (Push&#x2F;Pull&#x2F;Leg) split approach to be
pretty good. The idea is to first separate out all lower-body&#x2F;leg
exercises to their own day. Then, of upper body exercises, break them
up by whether they push the weight away from your body (like a bench
press) or are pulling the weight toward your body (like a curl or
barbell row). This ends up pretty cleanly dividing up the upper body
muscle groups.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-to-eat&quot;&gt;How to eat&lt;&#x2F;h3&gt;
&lt;p&gt;If you&#x27;re just getting started with strength training, you don&#x27;t need
to worry too much about eating. Follow nutrition advice from the
previous post. If you&#x27;re trying to lose fat, eat at a caloric
deficit. When you&#x27;re initially going from untrained to trained, you
get to experience what are known as &amp;quot;noob gains,&amp;quot; which lifters treat
as the magical ability for your body to get stronger and leaner at the
same time.&lt;&#x2F;p&gt;
&lt;p&gt;Once you&#x27;re past that initial beginner phase, it gets harder to pull
this off. You&#x27;ll hear people talk about bulking and cutting, on the
premise that you need to eat extra food to fuel muscle growth (bulk),
and then go for a period of caloric deficit to burn off the extra fat
you gained (cut). Other approaches believe in trying for a recomp, or
body recomposition, consisting of careful balancing of calories to get
&lt;em&gt;just enough&lt;&#x2F;em&gt; to gain muscle and burn fat. Other approaches like Lean
Gains believe in &lt;em&gt;carb and calorie cycling&lt;&#x2F;em&gt;: eating more carbs and
calories on training days, and less carbs and calories on rest days.&lt;&#x2F;p&gt;
&lt;p&gt;This is all rocket science versus what we&#x27;re discussing here. I&#x27;m
mentioning it all so that you know you don&#x27;t need to freak out about
it. Remember, your goal is to get used to training, enjoy it, nail
down form, and get basic strength gains. If you decide to pursue
strength training more aggressively (like I have), there will be
plenty of time in the gym to read hundreds of articles on the right
way to eat. For now: eat healthy and lift heavy things.&lt;&#x2F;p&gt;
&lt;p&gt;Final note: be sure to get &lt;strong&gt;plenty of protein&lt;&#x2F;strong&gt; while strength
training. You&#x27;ll be using protein to rebuild your muscles after
working them in the gym. If you don&#x27;t have enough protein in your
diet, your body will be unable to recover.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;muscle-groups&quot;&gt;Muscle groups&lt;&#x2F;h3&gt;
&lt;p&gt;There are many different muscles in your body. However, when talking
about weight lifting, we usually break the body down into major muscle
groups. The basic breakdown often discussed is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Trapezius&lt;&#x2F;strong&gt;, or &lt;strong&gt;traps&lt;&#x2F;strong&gt;: muscles between shoulders and neck&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Deltoids&lt;&#x2F;strong&gt;, or &lt;strong&gt;delts&lt;&#x2F;strong&gt;: shoulder muscles&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Triceps&lt;&#x2F;strong&gt;: back of the arm muscles (used to extend your elbow)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Biceps&lt;&#x2F;strong&gt;: front of the arm muscles (used to bend&#x2F;flex your elbow)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Pectoralis&lt;&#x2F;strong&gt;, or &lt;strong&gt;pecs&lt;&#x2F;strong&gt;: chest muscles&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Latissimus&lt;&#x2F;strong&gt;, or &lt;strong&gt;lats&lt;&#x2F;strong&gt;: upper back&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Core&lt;&#x2F;strong&gt;: stomach and lower back stabilizing muscles. This includes
your &lt;strong&gt;abs&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Gluteus&lt;&#x2F;strong&gt;, or &lt;strong&gt;glutes&lt;&#x2F;strong&gt;: your butt muscles&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Quadriceps&lt;&#x2F;strong&gt;, or &lt;strong&gt;quads&lt;&#x2F;strong&gt;: front of the leg muscles (used to
extend your knee)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hamstrings&lt;&#x2F;strong&gt;: back of the leg muscles (used to bend&#x2F;flex your
knee)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You should get comfortable with identifying these muscle groups, and
at flexing the different muscle groups. Some exercises will say things
like &amp;quot;activate your glutes&amp;quot; or &amp;quot;stabilize with your lats.&amp;quot; Don&#x27;t worry
if you&#x27;re having trouble feeling your pecs or lats, working them out
will help.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure that, with whatever exercise routine you&#x27;re following,
you&#x27;re hitting all of this muscle groups at least once per week (and
ideally 2-3 times).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-of-resistance-training&quot;&gt;Summary of resistance training&lt;&#x2F;h3&gt;
&lt;p&gt;Wow, that was a lot! I honestly didn&#x27;t realize I had that much to say
on the subject of resistance training, and there&#x27;s still a lot more
worth saying. But hopefully this gives you a good place to start. In
sum:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Strength training is for everyone&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t forget to focus on health, not just pushing some numbers&lt;&#x2F;li&gt;
&lt;li&gt;Body weights are an easy way to get started and require little
equipment
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&#x2F;p&#x2F;start-bodyweight-basic-routine.html&quot;&gt;StartBodyweight.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If you have access to a gym and&#x2F;or weights, a weight lifting routine
can be a great approach
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stronglifts.com&#x2F;&quot;&gt;StrongLifts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Start light, get your form down, and progressively increase the load&lt;&#x2F;li&gt;
&lt;li&gt;Focus on compound movements, adding in isolation movements as
desired&lt;&#x2F;li&gt;
&lt;li&gt;Eat healthy, and be sure to get plenty of protein&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cardio&quot;&gt;Cardio&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll say right now that I know more about resistance training than
cardio and mobility, so these two sections will not be as detailed as
resistance training. (And after everything you just read through, you
may be relieved to hear that).&lt;&#x2F;p&gt;
&lt;p&gt;Cardio is also known as aerobic exercise. Aerobic means &amp;quot;with oxygen,&amp;quot;
and describes the energy system used during typical cardio
workouts. When you go for a 30 minutes jog, you&#x27;ll end up using fat as
a major energy source, which requires oxygen to break down. This
energy production is not as fast as glycogen, but we don&#x27;t need to
have the same level of explosive energy as we do with weight lifting.&lt;&#x2F;p&gt;
&lt;p&gt;Advantages of cardio:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It increases the efficiency of your respiratory system in order to
provide sufficient oxygen to your body&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It increases the efficiency of your circulatory system, also in
order to provide sufficient oxygen to your body&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It&#x27;s good for burning fat&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Because you can sustain cardio exercise for a longing period of
time than intense weight lifting, you can cumulatively burn more
calories&lt;&#x2F;li&gt;
&lt;li&gt;Since the primary energy source for cardio is fat, you&#x27;ll burn
fat directly, which you won&#x27;t do with weight lifting&lt;&#x2F;li&gt;
&lt;li&gt;Both of these points are more nuanced than I&#x27;ve implied, keep
reading for more&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Improvements to blood lipids (cholesterol)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Numerous other, less tangible benefits, like decreased chronic
stress&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also some downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Many forms of cardio (like jogging) put strains on our bones and
joints, which can lead to injury over time&lt;&#x2F;li&gt;
&lt;li&gt;You may have heard the meme &amp;quot;cardio kills your gains,&amp;quot; implying that
cardio destroys muscle mass. While the meme is certainly overplayed,
there&#x27;s no question that 30 minutes of cardio will not result in as
much muscle synthesis stimulation as 30 minutes of weight lifting.&lt;&#x2F;li&gt;
&lt;li&gt;Subjectively: it&#x27;s boring. Some people really love running or
biking. Others (like me) find it difficult to stay motivated for
longer cardio sessions. If you love cardio: great, keep doing it. If
this describes you, I&#x27;ll present an alternative below.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are many different ways you can perform cardio. Some of the most popular are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Running&#x2F;jogging&lt;&#x2F;li&gt;
&lt;li&gt;Cycling&lt;&#x2F;li&gt;
&lt;li&gt;Swimming&lt;&#x2F;li&gt;
&lt;li&gt;Eliptical (my personal favorite, due to signficantly lowered joint
impact)&lt;&#x2F;li&gt;
&lt;li&gt;Jumping rope&lt;&#x2F;li&gt;
&lt;li&gt;Stair climbing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cardio can be performed on a daily basis. There is far less concern of
overtraining like with weight training, since the exercise will not
break down your muscles to the same extent. Common durations for a
session range from 15 minutes to an hour. My recommendation: start off
with something you can manage easily, get used to the activity, and
then ramp it up over time.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t personally done this program, but I&#x27;ve heard good reviews of
the &lt;a href=&quot;http:&#x2F;&#x2F;www.c25k.com&#x2F;&quot;&gt;Couch to 5k&lt;&#x2F;a&gt; program, which trains you to
be able to run 5 kilometers (or just over 3 miles) in 9 weeks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;high-intensity-interval-training&quot;&gt;High Intensity Interval Training&lt;&#x2F;h3&gt;
&lt;p&gt;It may be slightly incorrect to include High Intensity Interval
Training, or HIIT, as a subheading within cardio, but I&#x27;ll explain my
motivation shortly. Cardio as described above is also known as Low
Intensity Steady State (LISS), where you keep to a mostly-fixed level
of exertion which can be maintained for a significant period of
time. By contrast, HIIT uses short bursts of high intensity exertion
for a shorter period of time.&lt;&#x2F;p&gt;
&lt;p&gt;A typical HIIT protocol may look like: perform a cycle of 8
sprints. For each sprint, run as fast as you possibly can for 20
seconds, and then rest for 10 seconds. (This specific protocol is
known as tabatas.) This full workout will take only 4 minutes, but as
I saw someone once describe it, &amp;quot;it&#x27;s 4 minutes of suck.&amp;quot; Also, since
HIIT is more physically taxing than LISS, you should take at least one
rest day between sessions.&lt;&#x2F;p&gt;
&lt;p&gt;Before getting into the physical comparison, I want to point out that
both HIIT and LISS are appealing. HIIT is anything but boring, and
it&#x27;s incredibly time efficient (imagine replacing a daily 30 minute
run with a 4 minute sprint 3 days a week). But it&#x27;s a hard workout. In
fact, it&#x27;s hard enough that I&#x27;d encourage people to &lt;em&gt;not&lt;&#x2F;em&gt; try to start
exercising with regular HIIT sessions, as it may encourage you to give
up. Instead, try a HIIT session interspersed with other workouts, and
only consider making it part of your routine when you&#x27;re confident
that you won&#x27;t give up. Remember, &lt;em&gt;any&lt;&#x2F;em&gt; exercise is better than &lt;em&gt;no&lt;&#x2F;em&gt;
exercise.&lt;&#x2F;p&gt;
&lt;p&gt;So, if HIIT is so very different than normal cardio, why did I include
it here? Because research is indicating that it can deliver on the
same benefits people try to get from LISS cardio:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;While you burn less energy &lt;em&gt;during workout&lt;&#x2F;em&gt; than with LISS, HIIT
triggers something known as Excess Post-exercise Oxygen Consumption
(EPOC), also known as the afterburn effect thanks to some spammy
infomercials. What this means is that you continue to burn energy at
a higher rate for about 48 hours after a HIIT session to recover.&lt;&#x2F;li&gt;
&lt;li&gt;Since this EPOC involves increased oxygen usage, it puts a stress on
the respiratory and cardiovascular system, providing similar health
benefits to those systems as LISS. (I encourage you to do the
research yourself on which form actually causes better adaptations.)&lt;&#x2F;li&gt;
&lt;li&gt;While you will use glycogen more than fat during a HIIT session, the
recover period will use more fat burning, resulting in plenty of fat
loss. (Again, please check out the research yourself.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, HIIT claims some advantages over LISS, like more
favorable hormonal responses and possibly better blood glucose
control.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Short story&lt;&#x2F;strong&gt;: there is a lot of positive to be said about HIIT, but
the science is not conclusive yet. If you want to try HIIT, and you
don&#x27;t believe you&#x27;ll be discouraged by the intensity, go for it.&lt;&#x2F;p&gt;
&lt;p&gt;To make my biases clear in this: I almost never do dedicated LISS
cardio sessions, but instead rely on HIIT for cardiovascular
health. It&#x27;s worked well for me, with improvements in my blood
pressure, pulse, and respiratory system (far less symptoms of
asthma). But given that HIIT is still considered somewhat less
established than LISS, I want it to be clear that I am &lt;em&gt;not&lt;&#x2F;em&gt;
advocating for anyone to stop standard cardio workouts.&lt;&#x2F;p&gt;
&lt;p&gt;You can do HIIT with lots of different exercises:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Running (sprinting)&lt;&#x2F;li&gt;
&lt;li&gt;Cycling&lt;&#x2F;li&gt;
&lt;li&gt;Eliptical (again, my favorite)&lt;&#x2F;li&gt;
&lt;li&gt;Swimming&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also similar programs, like circuit training, which involve
high intensity as well as weight lifting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;weight-lifting-for-cardio-health&quot;&gt;Weight lifting for cardio health?&lt;&#x2F;h3&gt;
&lt;p&gt;One other very interesting approach for overall strength and
cardiovascular health is presented in the book &amp;quot;Body by Science.&amp;quot; I&#x27;m
throwing this in here just to give a taste of how varied theories of
good exercise are, and to encourage you to continue research beyond
this naive overview.&lt;&#x2F;p&gt;
&lt;p&gt;Body by Science makes the bold claim that you can get &amp;quot;strength
training, body building, and complete fitness in 12 minutes a week.&amp;quot;
I&#x27;ll present a massively simplified version of what they claim, and
encourage you to read the book itself if you&#x27;re interested in more.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We can use just 5 big, compound weight lifting movements to target
all of the major muscles groups in the body.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s possible to perform each of these 5 movements for 90 seconds
continuously to fully exhaust the muscles and deplete their glycogen
stores. (5 * 90 seconds plus rest time is where the 12 minute claim
comes from.)&lt;&#x2F;li&gt;
&lt;li&gt;It takes approximately a week for your body to fully recover from
such an ordeal.&lt;&#x2F;li&gt;
&lt;li&gt;By fully exhausting the muscles, you send a trigger to your body to
increase your muscle mass so you&#x27;re more well prepared for the next
time this happens. This is because your body reads this event as a
fight-or-flight, life-or-death situation.&lt;&#x2F;li&gt;
&lt;li&gt;In order to provide energy to replenish glycogen and rebuild the
muscles, your body will have significant respiratory and
cardiovascular demands, which will cause improvements in those
systems (like HIIT).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve never done this program myself, but that&#x27;s mostly because I
actually enjoy my time in the gym, and don&#x27;t want to reduce it to just
15 minutes a week. At the very least, the book is a great read with
lots of valuable information.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;undoing-your-workout-with-food&quot;&gt;Undoing your workout with food&lt;&#x2F;h3&gt;
&lt;p&gt;This is a very common problem with people doing cardio: get on the
treadmill for 45 minutes, walk at a decent (but not particular
strenuous pace), and then get some kind of recovery smoothie (or
insert other food item here). Take a guess: how many calories did the
treadmill burn, and how many are in the smoothie?&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, for many people, the smoothie completely outweighs the
workout itself. Don&#x27;t fall into this trap! Figure out your nutrition,
and stick to it. Don&#x27;t convince yourself that you&#x27;re free to eat
whatever you want because you went for a run today. You&#x27;ll be undoing
all of your hard work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;move-slowly-often&quot;&gt;Move slowly, often&lt;&#x2F;h3&gt;
&lt;p&gt;Another idea to throw in is, outside of &amp;quot;exercise,&amp;quot; it&#x27;s a good idea
to simply be more active. Taking a nightly walk, taking the stairs
instead of the elevator, playing some easy sports, taking a break at
the office to step outside, or a dozen other tweaks you can make
throughout your day, all make you less sedentary. Sure, these
activities help you burn a few more calories. But I would
argue—as would many better authorities—that simply being
more active is a reward in and of itself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mobility-flexibility&quot;&gt;Mobility&#x2F;flexibility&lt;&#x2F;h2&gt;
&lt;p&gt;Flexibility measures the range of movement of a joint. Flexibility can
be improved with stretching. Given the sedentary lifestyles most of us
live today, we end up having reduced flexibility. While flexibility
and stretching typically have to do with the static range of motion of
our joints, mobility refers to our ability to effectively move our
joints.&lt;&#x2F;p&gt;
&lt;p&gt;An important distinction to make in these kinds of routines is
&lt;em&gt;dynamic&lt;&#x2F;em&gt; vs &lt;em&gt;static&lt;&#x2F;em&gt;. Dynamic movements will involve moving a joint
constantly. These are good to warm up before another exercise
session. By contrast, static stretches will hold your joints in a
fixed position. These can increase overall flexibility, but are
generally best saved for after a workout.&lt;&#x2F;p&gt;
&lt;p&gt;This is the area in this post I am least familiar with, so I&#x27;m not
going to go into much detail. Probably the most popular technique out
there right now for improving your flexibility and mobility is
Yoga. Many other people can give better advice than I can for getting
started with it.&lt;&#x2F;p&gt;
&lt;p&gt;One pair of programs I followed (for less time than I should have) for
mobility and flexibility are
&lt;a href=&quot;http:&#x2F;&#x2F;www.phraktured.net&#x2F;molding-mobility.html&quot;&gt;Molding Mobility&lt;&#x2F;a&gt;
and
&lt;a href=&quot;http:&#x2F;&#x2F;phraktured.net&#x2F;starting-stretching.html&quot;&gt;Starting Stretching&lt;&#x2F;a&gt;. I
found it much easier to grasp when I watched a set of Youtube videos
demonstrating them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=I3yTrhuwUJo&quot;&gt;Molding Mobility - Warmup Exercises&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Aoyy3bKtD84&quot;&gt;Molding Mobility - Joint Mobility&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=w1iXMvTMvBo&quot;&gt;Starting Stretching&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The idea with this order is to perform the dynamic mobility routine
first, perform any resistance training next, and then finally perform
static stretches at the end.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Thank you for making it through these three posts, I know I didn&#x27;t
make it easy. Hopefully they have provided you with lots of
information, a good idea of the terms at play, and encouragement to go
read more from better sources. And, of course, I hope you don&#x27;t just
make this an intellectual endeavor, but start taking control of your
health!&lt;&#x2F;p&gt;
&lt;p&gt;My recommendation for getting started with this: get your nutrition
improved, and to a place where you&#x27;re comfortable with your daily
eating routine. Try not to focus on a scale goal; focus on eating
better. Experiment, and find what works. Introduce some exercise. Make
sure you&#x27;re ultimately getting in exercise that both improves your
strength level, and improves your cardiovascular system.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this was useful. If you have questions, please send them to
me. I still haven&#x27;t decided if I&#x27;ll be making more health-related
posts. If this &lt;em&gt;is&lt;&#x2F;em&gt; something you&#x27;d like to see from me, please say
so, it&#x27;s more likely to happen with such feedback.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;Read part 1 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition&quot;&gt;Read part 2 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Very Naive Overview of Nutrition (Part 2)</title>
		<published>2017-06-14T00:00:00+00:00</published>
		<updated>2017-06-14T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/06/naive-overview-nutrition/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/06/naive-overview-nutrition/</id>
		<content type="html">&lt;p&gt;This blog post is part 2 of a series on nutrition and exercise. If you
haven&#x27;t seen it already, I recommend
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;reading part 1 now&lt;&#x2F;a&gt;. This
blog post will go into more details on nutrition.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;For the completely impatient&lt;&#x2F;strong&gt;, here are my recommendations on where you
should get started, in a priority-sorted list (start with #1, and add
more recommendations as you&#x27;re ready):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Avoid eating processed foods.&lt;&#x2F;strong&gt; For example: sweet potato with
butter?  OK. Potato chips? Avoid.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Eat protein at each meal.&lt;&#x2F;strong&gt; Protein helps you feel full longer,
helping avoid overeating.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reduce your sugar intake.&lt;&#x2F;strong&gt; Sugar is addictive, has significantly
negative health impacts, and encourages you to eat more than you
should at each meal.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Pay attention to hunger cues.&lt;&#x2F;strong&gt; Stop eating before you feel
&amp;quot;stuffed.&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Of course, I strongly recommend you read the rest of this blog post
for more details.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;Read part 1 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-exercise&quot;&gt;Read part 3 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nutrients&quot;&gt;Nutrients&lt;&#x2F;h2&gt;
&lt;p&gt;We need to get two different things from our food:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Essential nutrients&lt;&#x2F;li&gt;
&lt;li&gt;Energy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Essential nutrients are things that our body requires to live, and
cannot make itself. Energy is what powers us. Without either of these,
we die. You&#x27;ve probably heard of calories before. A calorie is a unit
of measurement for energy. Each person has different requirements for
both essential nutrients and calories, which we&#x27;ll get to shortly.&lt;&#x2F;p&gt;
&lt;p&gt;The thing is that these two requirements overlap significantly. For
example, Omega 3 fatty acids are an essential nutrient, but they also
provide energy. Therefore, it&#x27;s impossible to say something like &amp;quot;I&#x27;m
going to get all of my energy from carbohydrates,&amp;quot; since you&#x27;ll be
required to eat protein and fat as well.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let&#x27;s break down nutrients:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Macronutrients&lt;&#x2F;strong&gt;, aka &lt;strong&gt;macros&lt;&#x2F;strong&gt;, are either protein,
carbohydrates (carbs), or fat. All three of these provide some level
of energy (more on that later). As far as the essential aspects of
these are concerned:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Protein is made up of &lt;em&gt;amino acids&lt;&#x2F;em&gt;. There are 21 different
amino acids, of which 9 are &lt;em&gt;essential&lt;&#x2F;em&gt;. Amino acids are used
by your body for building most of its structure (muscles,
organs, bones).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There are two essential fatty acids: Omega 3 and
Omega 6. You&#x27;ve probably heard a lot about Omega 3. That&#x27;s
because our modern diets (for reasons I won&#x27;t get into) have a
much higher level of Omega 6 relative to Omega 3, which is
theorized to be a cause of many diseases via
inflammation. That means you likely don&#x27;t need to worry about
getting enough Omega 6, but may want to supplement Omega 3
(such as with fish oil pills).&lt;&#x2F;p&gt;
&lt;p&gt;Other than that, you don&#x27;t need to eat any fats. Your body can
create its own fat (via &lt;em&gt;de novo lipogensis&lt;&#x2F;em&gt;) for fat storage.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There are no essential carbs. Fiber is a form of carbs that
our bodies don&#x27;t break down well, and help with
digestion. Fiber also helps us feel full. But by saying it is
non-essential, my point is: you can eat a diet without any
carbs at all and survive. (Whether you should is a different
issue.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Micronutrients&lt;&#x2F;strong&gt; are vitamins and minerals. There are many of
these, and I&#x27;m not going to be getting into too many details here,
because it&#x27;s complicated, and I&#x27;m not all that familiar on the
details. You can supplement these with multivitamins. But much
better in my opinion is to eat real foods (as opposed to processed
foods) that give you a good variety of micronutrients. A good
general rule when choosing foods is: prefer foods which are dense in
micronutrients, meaning lots of vitamins and minerals per calorie of
food.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You also get calories from alcohol. I&#x27;m not going to discuss
that here; alcohol is completely unnecessary in your diet, and has
many negative impacts on health. I certainly enjoy a drink from time
to time, but if you&#x27;re drinking enough that the calorie impact of the
alcohol is meaningful, you&#x27;re sabotaging your health significantly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;calories&quot;&gt;Calories&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Unimportant side note:&lt;&#x2F;em&gt; One calorie is the amount of energy needed to
raise one gram of water one degree Celsius. When you read calories on
food, it&#x27;s actually talking about kilo-calories, or Calories (capital
C), or food calories. The point is: there are a thousand &amp;quot;real&amp;quot;
calories in a food calorie. I only mention this because it can be a
point of confusion. We&#x27;ll in general be talking about food calories,
and just referring to them as calories.&lt;&#x2F;p&gt;
&lt;p&gt;Each of the macronutrients provides a different amount of calories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fat: 9 calories&#x2F;gram&lt;&#x2F;li&gt;
&lt;li&gt;Carbs: 4 calories&#x2F;gram&lt;&#x2F;li&gt;
&lt;li&gt;Protein: 4 calories&#x2F;gram&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But these numbers don&#x27;t add up exactly as you&#x27;d expect. For example,
protein is harder to convert into usable energy than the other two,
and therefore it takes more energy to perform the breakdown. This is
called the &lt;em&gt;thermic effect of food&lt;&#x2F;em&gt;, and means that you&#x27;ll get less
net energy from 9 grams of protein than from 4 grams of fat or 9 grams
of carbs, even though in theory they should be the same.&lt;&#x2F;p&gt;
&lt;p&gt;This brings us to our first important point: during digestion, each
macronutrient follows a different metabolic pathway, and therefore can
have different effects on the body. We&#x27;ll cover the difference between
carbs and fat in a later section. For now, I want to point out that
protein is a suboptimal energy source. This greatly affects how we
want to consider protein as part of our diet (also in an upcoming
section).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;total-daily-energy-expenditure&quot;&gt;Total Daily Energy Expenditure&lt;&#x2F;h2&gt;
&lt;p&gt;Your body needs energy to operate. The total energy it needs on a
daily basis is the TDEE, or Total Daily Energy Expenditure. If you eat
more energy than this number, the excess will be stored as fat. If you
eat less, the difference will be taken from fat. This is known as
calories-in&#x2F;calories-out.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll see lots of debates online about this point. Here&#x27;s my personal
take: it&#x27;s a truism, but misses a lot of the point. Yes, if you eat a
lot more food, you&#x27;ll put on weight. But the situation is quite a bit
more complicated than this. The amount and type of food you eat
affects hormone levels that influence your energy expenditure and
hunger levels. And while my simplified model talks about adding and
losing fat, we have other body mass (glycogen and muscle) which will
be affected as well.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s my point in all of this? Yes, you should be aware of your
TDEE. Let it be a general guide (in addition to hunger signals) to how
much you should eat. But realize it&#x27;s an estimate, and that trying to
change it (such as by eating only 500 calories a day) will not
immediately result in losing the amount of fat you expect. Your body
may slow down its metabolism to compensate, you may cheat more often,
etc.&lt;&#x2F;p&gt;
&lt;p&gt;You can find lots of TDEE calculators online,
&lt;a href=&quot;https:&#x2F;&#x2F;tdeecalculator.net&#x2F;&quot;&gt;here&#x27;s one I find with a quick search&lt;&#x2F;a&gt;. Also,
one pound of body fat contains 3500 calories (7700 per kilogram), so
in theory, you&#x27;d need to eat at a calorie deficit of 500 calories per
day for a week to lose one pound of fat.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;protein-requirements&quot;&gt;Protein Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;Since, as we said above, protein isn&#x27;t a great source for energy, we
primarily want to include protein in our diet for its non-energy
aspects. This involves the &amp;quot;essential&amp;quot; bit about providing amino
acids. However, there&#x27;s another big benefit that comes from eating
protein: you tend to stay full longer when you eat protein. One
recommendation that I like to follow is to include a protein source in
every meal.&lt;&#x2F;p&gt;
&lt;p&gt;So then the question is: how much protein do you need? You&#x27;ll see lots
of values thrown around for this. For example, 1 gram of protein per
pound of bodyweight. That means, if you weigh 170 pounds (77kg for
those of us outside the US), you&#x27;d target 170 grams of protein per
day. But numbers really vary all over the place. Some standards place
this as a certain number of grams per pound of &lt;em&gt;lean&lt;&#x2F;em&gt; body weight
(meaning, ignoring your body fat). How much you need also varies with
what kind of activity you&#x27;re doing: if you&#x27;re trying to build muscle,
you&#x27;ll usually want to eat more protein.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d recommend doing some research yourself on how much protein you
need to get per day, I&#x27;m going to avoid making a recommendation. I
will, instead, try to debunk some myths:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you eat only 100% protein all day, you&#x27;re not going to grow super
muscles. Eventually,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Protein_poisoning&quot;&gt;you&#x27;ll die&lt;&#x2F;a&gt; from
something known as rabbit starvation.&lt;&#x2F;li&gt;
&lt;li&gt;That said, eating a high-protein diet, above the Recommended Daily
Allowance, isn&#x27;t going to send you into renal (kidney)
failure. Unless you have some preexisting condition, you&#x27;ll be able
to handle a fairly high protein level without issue.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One of the biggest downsides with protein is that it tends to be
relatively expensive (compare the cost of a steak vs a loaf of
bread). Also, different protein sources have different absorption
rates in the body. Finally, referring back to the essential amino
acids, not all protein sources are &lt;em&gt;complete&lt;&#x2F;em&gt;, especially not vegan
ones. (Complete here means it contains all 9 essential amino acids.)
If you&#x27;re eating animal products, you&#x27;re probably fine. With vegan
products, do a little more research on what you&#x27;re eating (hemp seed
and quinoa are both complete proteins).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;&#x2F;strong&gt; Get enough protein, and eat it at each meal to help you
stay full longer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;carbs-vs-fat&quot;&gt;Carbs vs fat&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, once you&#x27;re done putting protein into your diet, you&#x27;ll be
filling up the rest of your calories from carbs and fat. This is
probably one of the biggest areas where that issue of complication I
mentioned comes into play. If you want my simple recommendation: start
off by getting adequate protein and avoiding processed foods. In my
opinion, you&#x27;ll be getting 80% of the way to a great diet with just
those steps.&lt;&#x2F;p&gt;
&lt;p&gt;OK, you want to get into the details of carbs vs fat? I would say
that, first and foremost, a lot of the most sensational claims out
there are simply not true. Fat doesn&#x27;t clog your arteries. Carbs don&#x27;t
magically make you fat. Things are far more nuanced. I&#x27;m going to give
a list of benefits for each of these macronutrients.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Benefits of carbs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Since they are less calorically dense than fat, you can eat more of
them and get the same amount of calories&lt;&#x2F;li&gt;
&lt;li&gt;Carbs are part of what people often consider healthy foods, like
fruits, vegetables, legumes, and grains. (I encourage you to
especially research whether fruits and grains should be considered
healthy in general. I&#x27;d recommend moderating fruit intake due to
high sugar, and especially fructose, levels.)&lt;&#x2F;li&gt;
&lt;li&gt;Carbs tend to be the cheapest macronutrient available&lt;&#x2F;li&gt;
&lt;li&gt;Many high carb foods are also high fiber foods, which is good for
digestion and satiety&lt;&#x2F;li&gt;
&lt;li&gt;Carbs are broken down into glucose in the body, and stored in the
body as glycogen, which is a faster burning energy source than
fat. This makes carbs good for explosive activity (like weight
lifting or sprinting).&lt;&#x2F;li&gt;
&lt;li&gt;Unlike fats, carbs cannot be stored directly in the body as
fat. They need to first be converted to fat via a process called &lt;em&gt;de
novo lipogensis&lt;&#x2F;em&gt;, which loses some energy in the process. In other
words, 500 calories of excess carbs will result in less body fat vs
500 calories of excess fat.
&lt;ul&gt;
&lt;li&gt;That said, if you eat both fat and carbs in your diet, your body
will prefer to burn the carbs and store the fat, so given a fair
mix of both macronutrients, this won&#x27;t matter too much.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Benefits of fats&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fat tends to leave you feeling fuller longer, since digestion of fat
is slower. This is very likely the primary mechanism by which
low-carb diets help you lose weight.&lt;&#x2F;li&gt;
&lt;li&gt;If you almost completely eliminate carbs, your body will enter a
state called ketosis, where your liver generates &lt;em&gt;ketone bodies&lt;&#x2F;em&gt; for
your brain and other organs to run off of. This can have great fat
burning results, and can be used for treating some neurological
conditions (like epilepsy).&lt;&#x2F;li&gt;
&lt;li&gt;Eating insufficient fat can lead to hormonal imbalances, and the
so-called &amp;quot;starvation mode.&amp;quot; Having a high-fat low-carb diet can
allow you to eat less total calories without having your apetite
ramped up or your metabolism turned down.&lt;&#x2F;li&gt;
&lt;li&gt;If you eat primarily fat, your body gets better at turning fat into
usable energy. This doesn&#x27;t just apply to dietary fat, but to your
body fat too. This is sometimes referred to as being a &amp;quot;fat burner.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Glycogen (stored carbs) is very limited in capacity in the body. By
contrast, even extremely lean people have many tens of thousands of
calories available in fat. If your body is good at burning fat, it
can be a big advantage for endurance activities like marathon
running or cycling.&lt;&#x2F;li&gt;
&lt;li&gt;Fats taste good. Carbs can taste good too, but that usually depends
on the presence of sugar. Most people agree today that sugar is a
pretty dangerous substance for the body and should be avoided.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are clearly arguments in favor of both macronutrients. I&#x27;d argue
that it has been the obvious case throughout human history that we
have eaten diets high in carbs, high in fats, and high in both, and we
can survive well on any of them. I&#x27;ve personally used all kinds of
diets with good results.&lt;&#x2F;p&gt;
&lt;p&gt;There is one thing I&#x27;ve seen claimed that I think has a lot of logic
to it. Some of the most successful diets today seem to be based around
banning either carbs or fat. Perhaps the reason they work is that the
biggest reward foods—ice cream, potato chips, chocolate,
etc—are high in both carbs and fat. By allowing yourself large
quantities of food, but naturally avoiding these highly tempting and
easy-to-binge reward foods, it becomes much easier to adhere to a
diet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;My recommendation&lt;&#x2F;strong&gt; Unless you have some ethical or religious reason
guiding your eating, try out whatever popular diet plan appeals to
you. Give it a few weeks at least, ideally a few months, and see how
you respond. If you find that you&#x27;re constantly fighting cravings even
after trying the diet for a few weeks, consider trying something
else. And if you are not losing body fat, either the diet&#x27;s a bad one
(don&#x27;t fall for the ice cream diet!) or you&#x27;re not following it well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;glycogen-and-water-weight&quot;&gt;Glycogen and water weight&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned above that carbs get stored as glycogen. When your body
stores glycogen, it stores some water to go along with it. This is one
of the reasons why low carb diets have such amazing short term
results: when you first become fat adapted, you burn up your glycogen
stores quickly, and flush out that extra water (in your urine) at the
same time. You can lose a few pounds&#x2F;kilos in a few short days.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t fall into this all-too-common trap:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wow, I lost 3 pounds in my first week alone! This is great! If I
just continue like this for the next 2 months, I&#x27;ll lose 25 pounds
in no time!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then, when you of course can&#x27;t continue peeing out 2.5 pounds of water
per week and you eventually hit a weight loss plateu, you decide your
diet isn&#x27;t working and give up. In other words:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Be wary of the scale, it will lie to you!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intermittent-fasting&quot;&gt;Intermittent fasting&lt;&#x2F;h2&gt;
&lt;p&gt;Something popping up much more recently is intermittent fasting, where
you spend a certain number of hours per day not eating. Perhaps the
most common is the 16-8 fast: you fast 16 hours and only eat
for 8. That might sound rough, but when you realize that sleep is part
of this, and the schedule is &amp;quot;fit all of your eating into 11am-7pm or
similar&amp;quot;, it&#x27;s not too bad.&lt;&#x2F;p&gt;
&lt;p&gt;There are some theoretical health benefits of fasting on its own. Our
bodies can swing between catabolic (breaking down) and anabolic
(building up) phases, and there are advantages to both. If we&#x27;re
constantly stuffing our faces, our body never has to enter catabolism,
which can be detrimental.&lt;&#x2F;p&gt;
&lt;p&gt;But intermittent fasting has a much simpler motivator: it makes it
easier to eat within your TDEE if you don&#x27;t spend all day eating. And
during the part of the day you&#x27;re not eating, it&#x27;s much easier to
control yourself. At least for me, a simple binary on&#x2F;off switch for
&amp;quot;am I allowed to eat&amp;quot; is easy.&lt;&#x2F;p&gt;
&lt;p&gt;Do you have to do this? Absolutely not. But if you&#x27;re feeling like
trying something, go for it. If nothing else, convincing yourself that
you&#x27;re strong enough to go regularly without eating is a good
psychological barrier to overcome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;different-types-of-fat&quot;&gt;Different types of fat&lt;&#x2F;h2&gt;
&lt;p&gt;Saturated. Unsaturated. Monounsaturated. Polyunsaturated. Omegas. Trans.
What&#x27;s up with all of this? Well, it&#x27;s just chemistry. Fats are chains
of carbons. Each carbon can form four bonds, and hydrogen can form one
bond. So in theory, each carbon can bond to the carbon to its left,
the carbon to its right, and two hydrogens. If that happens, you have
a saturated fat. This is saturated because each carbon is fully
saturated by two hydrogens.&lt;&#x2F;p&gt;
&lt;p&gt;However, sometimes we&#x27;ll be missing hydrogens. Instead of binding to
two hydrogens, two carbons can form a double bond. Each of those
carbons will bond with one hydrogen and one other neighboring
carbon. When such a double bond forms, we have an unsaturated
fat. Because double bonds are more flexible, unsaturated fats melt
(turn liquid) at lower temperatures. That&#x27;s why saturated fats (like
butter) tend to be solid at room temperature, but unsaturated fats
(like olive oil) are liquid.&lt;&#x2F;p&gt;
&lt;p&gt;If a fat has just one double bond in it, it&#x27;s monounsaturated. If it
has more than one, it&#x27;s polyunsaturated. Two of these polyunsaturated
fats are special: omega 3 and omega 6 are differentiated by the
distance between the tail of the carbon chain and the first double
bond.&lt;&#x2F;p&gt;
&lt;p&gt;Trans fats are unsaturated fats which have been chemically altered to
make them solid at higher temperatures. This is done by hydrogenating
them. Because trans fats occur very rarely naturally, it seems that
our bodies are not particularly good at digesting them, with the
result being that they&#x27;re bad for our health. Basically: avoid trans
fats.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned above, both omega 3 and omega 6 are essential fatty
acids. We get plenty of omega 6, so you should try to get more omega&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Beyond that, what kind of fats should you go for? That&#x27;s a topic of
much debate. Up until recently, the answer would be to prefer
polyunsaturated vegetable oils. However, newer evidence points to
saturated fat not being the villain it was thought to be, and
vegetable oil in fact being dangerous. Monounsaturated
fats—especially olive oil—seem to be pretty well accepted
as being good for us.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I avoid vegetable oils and don&#x27;t avoid saturated fats. But
you&#x27;ll get lots of conflicting advice on this area. I recommend
reading up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;different-types-of-carbs&quot;&gt;Different types of carbs&lt;&#x2F;h2&gt;
&lt;p&gt;Simple. Complex. Sugar. Glucose. Fructose. Lactose. Starch. What
exactly are carbs? Time for some more chemistry!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Saccharide&lt;&#x2F;em&gt; is another term of carbohydrates. The &lt;em&gt;monosaccharides&lt;&#x2F;em&gt;
and &lt;em&gt;disaccharides&lt;&#x2F;em&gt; make up what we call the sugars. The most common
monosaccharides are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Glucose&lt;&#x2F;li&gt;
&lt;li&gt;Fructose&lt;&#x2F;li&gt;
&lt;li&gt;Galactose&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disaccharides are pairs of monosaccharides, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sucrose (table sugar) = glucose + fructose&lt;&#x2F;li&gt;
&lt;li&gt;Lactose (milk sugar) = galactose + fructose&lt;&#x2F;li&gt;
&lt;li&gt;Maltose = glucose + glucose&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Longer chains of saccharides form &lt;em&gt;polysaccharides&lt;&#x2F;em&gt;, such as starch (as
you&#x27;d find in potatos or rice) and cellulose. Cellulose gives plants
their structure and is indigestible (for the most part) to humans;
you&#x27;ve already seen it referred to here as dietary fiber. However,
some gut bacteria can digest fiber and generate molecules we &lt;em&gt;can&lt;&#x2F;em&gt;
digest.&lt;&#x2F;p&gt;
&lt;p&gt;When digesting, our body will break down carbohydrates into
monosaccharides so they can be absorbed in the large
intenstine. Because this breakdown takes time, the more &lt;em&gt;complex&lt;&#x2F;em&gt; the
carbohydrate (meaning the more saccharides are bound together), the
slower the digestion. This will leave you feeling full longer and
avoid a blood sugar spike.&lt;&#x2F;p&gt;
&lt;p&gt;When your blood sugar spikes, your body releases insulin to remove the
toxic levels of sugar from the blood and store it as glycogen and
fat. One working theory is that, when you eat a diet filled with
simple sugars, you bounce between sugar highs and sugar crashes, the
latter leaving you hungry and irritable, and reaching for that next
sugary snack. All this is to say: avoid simple sugars!&lt;&#x2F;p&gt;
&lt;p&gt;One method for measuring how quickly carbs are absorbed is the
&lt;em&gt;glycemic index&lt;&#x2F;em&gt; (GI), where a higher value means the food is more
quickly absorbed. By this standard, you should probably stick to low
GI foods, unless you have a specific reason to do otherwise (such as
some kind of athletic competition or muscle recovery... but that&#x27;s
complicated and you should do research on it before trying it out).&lt;&#x2F;p&gt;
&lt;p&gt;Of the three monosaccharides, glucose is the one that our body cells
can use directly. Fructose and galactose must be processed first by
the liver. There are some claims that having a high-fructose diet can
put undue strain on the liver, giving one reason why High Fructose
Corn Syrup has such a bad rap. This is also a reason why binge-eating
fruit—which is high in fructose—may not be a great idea.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;salt&quot;&gt;Salt&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m only putting in this section because people will ask. The story
with salt is, in my opinion, completely unclear. There are many
contradictory studies. If you have hypertension, general consensus is
to reduce salt. Beyond that, conventional wisdom says reducing salt is
a good thing, but many newer studies show that it has no benefit. And
also, if you&#x27;re going for a ketogenic diet, make sure to get plenty of
electrolytes, including salt, potassium, and magnesium.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-of-nutrition&quot;&gt;Summary of Nutrition&lt;&#x2F;h2&gt;
&lt;p&gt;Whew, that&#x27;s a lot of information! Let me try to simplify all of that
down into some practical advice.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid processed foods. They&#x27;re made up of the worst combination of
foods that basically everyone agrees will kill you: processed oils,
simple sugars and starches, chemicals, and excess salt. Honestly,
just following this one piece of advice is in my opinion the best
thing you can do for your health.&lt;&#x2F;li&gt;
&lt;li&gt;Eat plenty of protein, and try to get it with each meal.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t eat too many calories in the course of a day.&lt;&#x2F;li&gt;
&lt;li&gt;Balance your carbs and fats based on your calorie needs. Try out
variations of that balance and see what works for you.&lt;&#x2F;li&gt;
&lt;li&gt;Get sufficient omega 3s.&lt;&#x2F;li&gt;
&lt;li&gt;If necessary, supplement vitamins and minerals.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ll tie up this series in my next post, which will go into details on
exercise.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition-exercise&quot;&gt;Read part 1 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-exercise&quot;&gt;Read part 3 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Very Naive Overview of Nutrition and Exercise (Part 1)</title>
		<published>2017-06-13T00:00:00+00:00</published>
		<updated>2017-06-13T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/06/naive-overview-nutrition-exercise/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/06/naive-overview-nutrition-exercise/</id>
		<content type="html">&lt;p&gt;Some family and friends have been asking me to write up my thoughts on
the topic of nutrition and exercise. To give proper warning, I want to
say right from the beginning of this that I am &lt;em&gt;not&lt;&#x2F;em&gt; in any way a
qualified expert. I&#x27;m a computer programmer who was overweight and
unhealthy for most of my life until my mid-twenties, when I decided to
take control, did a bunch of reading, and have been (mostly) in shape
and far healthier since.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t want you to take anything I say as gospel; it&#x27;s not. Hopefully
this will give you ideas of where to start, topics worth researching,
and short-circuit some of the very self-defeating confusion that I
think most of us have suffered through. I&#x27;m not providing sources for
what I&#x27;m writing, partly because I want you to read up on topics
yourself, and mostly because I&#x27;m too lazy :).&lt;&#x2F;p&gt;
&lt;p&gt;This is something of a continuation on my post on
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;why-i-lift&quot;&gt;why I lift&lt;&#x2F;a&gt;, though in reality I started on
this post first. Also, I had originally intended to make one massive
post covering nutrition and exercise. Instead, I&#x27;m breaking this up
into three parts. This post will set the tone and give some background
information, and the following two posts will dive into each of
nutrition and exercise in more detail (though still as a &amp;quot;naive
overview&amp;quot;).&lt;&#x2F;p&gt;
&lt;p&gt;This post series is very off the beaten track for me, and I&#x27;m still
unsure if I&#x27;ll be writing more like it. If you &lt;em&gt;do&lt;&#x2F;em&gt; like it and want
to see more, or have some specific questions, please mention so in the
comments and I&#x27;ll be more likely to make future posts on these topics.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition&quot;&gt;Read part 2 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-exercise&quot;&gt;Read part 3 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;philosophy&quot;&gt;Philosophy&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve come up with the following philosophical points about health and
fitness, which guide my own decisions a lot:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Overcomplication is a major enemy. Should you follow a vegan diet, a
paleo diet, go ketogenic, or respect GI values? Should you run, jog,
sprint, lift weights, do bodyweights? This abundance of seemingly
contradictory advice is the most demotivating thing out there, and
prevents so many of us from getting healthy.&lt;&#x2F;li&gt;
&lt;li&gt;While these complications are real, you can get the vast majority of
benefits by following many simpler guidelines (I&#x27;ll talk about those
later) that almost everyone agrees on. Do the simple stuff first,
worry about the rocket science later.&lt;&#x2F;li&gt;
&lt;li&gt;If you read any nutrition study, odds are pretty high there&#x27;s
another study that shows the opposite result. Nutrition science is
greatly lacking in replication studies, so take everything you read
with a grain of salt (and yes, studies on salt are contradictory
too).&lt;&#x2F;li&gt;
&lt;li&gt;You&#x27;ll be best served by following basic guidelines, getting
comfortable with those, and then experimenting with different
approaches from that baseline. If you&#x27;re motivated to, go ahead and
spend a week or three on a vegan diet, on a keto diet, and anything
else you believe has a chance of working. Pay attention to how you
respond to it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;who-am-i&quot;&gt;Who am I?&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned this a bit in the why I lift post, but I want to give a
little more background here. Odds are pretty good that my baseline
level of health and fitness is lower than you, the reader. As a child
and young adult, I was overweight. I ate junk food constantly. I
hardly exercised. I had a few brief bouts where I lost some weight,
but it always came back within a year, and with a vengeance.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been programming since I was 10 years old. I spent hours on end
almost every day since then on a computer or playing video games. I
wasn&#x27;t quite at the stereotype of sitting in a darkened room eating
Cheetos and Mountain Dew, but I was pretty close.&lt;&#x2F;p&gt;
&lt;p&gt;Around the age of 25 (give or take a few years), I decided I had
enough. I was tired of being overweight. I was scared of developing
diabetes. I could barely sit at my desk for 10 minutes without back
pain. I woke up in the morning and had trouble getting out of bed. I
finally decided that bad health—at least in my case—wasn&#x27;t
a curse of genetics, but something I&#x27;d brought on myself, and only I
would be able to fix it.&lt;&#x2F;p&gt;
&lt;p&gt;So as you read these posts, I don&#x27;t want you to become discouraged and
think &amp;quot;well, this guy can do this, but &lt;em&gt;I&lt;&#x2F;em&gt; never could, I&#x27;m just your
average office worker.&amp;quot; It&#x27;s quite the opposite. If I&#x27;ve been able to
overcome a lifetime of bad habits and genetic predispositions to
negative health conditions, you can too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s useless to talk about &amp;quot;getting healthy&amp;quot; or &amp;quot;getting fit&amp;quot; without
some definition of what that means. Some people are going to have very
specific goals; for example, a power lifter may want to deadlift as
much weight as possible, even if the process shortens his&#x2F;her lifespan
by 10 years. If you have such specific goals, odds are this post isn&#x27;t
for you.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to guess that most people reading this will probably have
the same three goals, though their priorities among the goals will
differ:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lose fat&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Gain muscle&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Improve general health&#x2F;increase longevity&#x2F;feel better. This would
include improvements in things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cardiovascular function&lt;&#x2F;li&gt;
&lt;li&gt;Cholesterol levels&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was specific in my wording on those first two bullets. You may
&lt;em&gt;think&lt;&#x2F;em&gt; you want to lose weight, but you won&#x27;t be happy if you lose
weight in the form of muscle mass or (worse) organs. Similarly, you
may not think you want to gain muscle, but I&#x27;d argue that you do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More muscle = more calories burned, making fat loss easier&lt;&#x2F;li&gt;
&lt;li&gt;More muscle makes moving around in day to day life easier&lt;&#x2F;li&gt;
&lt;li&gt;You&#x27;ll look better (both men and women) with more muscle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Caveat: I&#x27;m not talking about bodybuilder levels here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nutrition-and-exercise&quot;&gt;Nutrition and Exercise&lt;&#x2F;h2&gt;
&lt;p&gt;Nutrition is what food you put into your body. Exercise is what
activities you do with your body. Based on the goals above, we need to
acknowledge that you need to address both nutrition and exercise to
address your goals. This is the first big mistake I&#x27;ll address in this
post.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you eat a bunch of junk food, almost no level of exercise you
perform will burn off the extra fat you&#x27;re gaining.&lt;&#x2F;li&gt;
&lt;li&gt;If you don&#x27;t do any exercise, your body will get weaker, regardless
of what you&#x27;re eating.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So this is important: you need to do both. Period. If you&#x27;re going to
pick one of them to start off with... I guess I&#x27;d say start with
nutrition, but it&#x27;s really a personal call. I&#x27;d recommend starting
with whatever you believe you&#x27;re more likely to stick with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;up-next&quot;&gt;Up next&lt;&#x2F;h2&gt;
&lt;p&gt;My next post will dive into details on the nutrition half of the
equation, and the following post will dive into exercise. If there are
enough questions raised in the comments in these three posts, I&#x27;ll
likely add a fourth Q&amp;amp;A post to this series.&lt;&#x2F;p&gt;
&lt;p&gt;And if you&#x27;re just desperate to read more now, don&#x27;t forget about my
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;why-i-lift&quot;&gt;why I lift&lt;&#x2F;a&gt; post.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-nutrition&quot;&gt;Read part 2 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;06&#x2F;naive-overview-exercise&quot;&gt;Read part 3 now&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to send me a pull request</title>
		<published>2017-06-06T00:00:00+00:00</published>
		<updated>2017-06-06T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/06/how-to-send-me-a-pull-request/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/06/how-to-send-me-a-pull-request/</id>
		<content type="html">&lt;p&gt;I find myself repeating a lot of the same comments in pull requests,
so I decided to put together a list of what I consider the most
important features of a good pull request. Other people will have
different feelings on some of these, but the points below are what
apply to my projects. If you have thoughts on things I&#x27;ve left out, or
reasons why you disagree with these points, please comment below.&lt;&#x2F;p&gt;
&lt;p&gt;Many of these points only make sense for source code, and even more
specifically for code written in Haskell. My content repos (like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;snoyman.com-content&quot;&gt;this site&#x27;s content&lt;&#x2F;a&gt;)
and non-Haskell repos (do I have any of those???) would be slightly
different.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt;: I&#x27;m &lt;em&gt;not&lt;&#x2F;em&gt; the maintainer of Stack, so the comments below do
not necessarily apply there. Stack has its own contribution rules, so
please don&#x27;t take my personal opinions here as relevant to that
project.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every top-level identifier exported from a library needs to have a
Haddock comment. It&#x27;s irrelevant if the identifier name is
completely self-commenting; a comment is still necessary. (These are
the comments that look like &lt;code&gt;-- | Describe what the function does&lt;&#x2F;code&gt;.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;My packages all follow PVP-style version numbers, and pull requests
should include bumps to the version number. For those unfamiliar:
PVP version numbers consistent of four components, A.B.C.D.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your change fixes a bug without modifying the API at all,
then bump D (1.2.3.4 becomes 1.2.3.5, or 1.2.3 becomes 1.2.3.1).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If your change adds something new to the API without changing
something that already exists, bump C (1.2.3.4 becomes 1.2.4).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you change the existing API (e.g., remove a function, change
semantics, modify a data type), bump either A or B (1.2.3.4
becomes either 1.3.0 or 2.0.0, depending on how big a change you
think this is).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;By the way, I&#x27;m unlikely to include a breaking change unless
you have a really good reason. I consider backwards
compatibility really important. Consider exporting a new
function and (optionally) deprecating the old one instead.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To elaborate on motivation for the previous point: I follow a policy
of releasing new code fairly quickly in most cases, as opposed to
batching up a number of changes. In that situation, it makes sense
for a PR to include the new version number immediately. Many other
projects work differently, and do &lt;em&gt;not&lt;&#x2F;em&gt; encourage contributors to do
version bumps.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Also, I sometimes forget to make a new release after merging a
PR. If I do forget, don&#x27;t be shy about pinging me to make a
release.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Include a &lt;code&gt;@since&lt;&#x2F;code&gt; annotation in each new identifier, including
the new version number you just bumped to. This is absolutely
vital for users of a library to properly specify lower bounds in
their dependencies easily.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t include &lt;code&gt;@since&lt;&#x2F;code&gt; for un-exported identifiers.&lt;&#x2F;li&gt;
&lt;li&gt;If you are exporting a pre-existing identifier that was previously not exported, include the &lt;code&gt;@since&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In other words: &lt;code&gt;@since&lt;&#x2F;code&gt; indicates when it was added to the
public API, &lt;em&gt;not&lt;&#x2F;em&gt; when it came into existence.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- | Download a JPEG image.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- @since 1.5.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;downloadJPEG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- ^ URL to download from
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m JPEG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Include a &lt;code&gt;ChangeLog.md&lt;&#x2F;code&gt; entry. If the project doesn&#x27;t have a
&lt;code&gt;ChangeLog.md&lt;&#x2F;code&gt;, create one. Odds are the content you write in the
changelog can be identical to the pull request description. This
is a huge end-user convenience. Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#b58900;&quot;&gt;## &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#cb4b16;&quot;&gt;1.5.2

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* Added the `downloadJPEG` function
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Slight exception to the above: if you&#x27;re making a doc-only PR, don&#x27;t bother
with a version bump, but instead add a ChangeLog entry with &lt;code&gt;## Unreleased&lt;&#x2F;code&gt;
and a description of the change.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Do not include unrelated changes in your PR, it makes it difficult
to review, more likely to get delayed, and more likely to conflict
with other changes. Include separate changes in separate PRs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Keep coding style consistent with the rest of the code. I&#x27;m not a
big stickler for coding style guidelines in general, but I &lt;em&gt;do&lt;&#x2F;em&gt;
consider it very jarring to have conflicting styles in the same
file, or even worse the same function.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Similar to the previous point: think hard before sending a pull
request to modify the style of code. Again, I&#x27;m not a big stickler
on coding style, and I consider style in general a pretty arbitrary
and unimportant aspect of the code. But that makes me even less
likely to want to spend my time reviewing and discussing changes
like whether records should be aligned. (For the record, I &lt;em&gt;don&#x27;t&lt;&#x2F;em&gt;
think they should be aligned, as it makes diffs noisier than
necessary.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you have a PR for addressing a typo, making a trivial fix, or
adding a straightforward feature: just send a PR without any prior
discussion. However, if you want to make a major overhaul, change
behavior, or break API compatibility: it&#x27;s worth opening an issue
first to discuss. I don&#x27;t like rejecting PRs or causing people to
waste their time, so I&#x27;d rather hash out details before you spend a
lot of time on something.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Don&#x27;t use partial functions. I&#x27;ve received lots of PRs which, for
example, use &lt;code&gt;fromJust&lt;&#x2F;code&gt; because &amp;quot;by analyzing the rest of the
code, you can tell it will always be a &lt;code&gt;Just&lt;&#x2F;code&gt; value and not
&lt;code&gt;Nothing&lt;&#x2F;code&gt;.&amp;quot; That doesn&#x27;t cut it for me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m lazy, and I don&#x27;t want to reason about the code. I want the
compiler to do it for me.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m stupid, and I don&#x27;t trust my own reasoning.&lt;&#x2F;li&gt;
&lt;li&gt;Such logic does not withstand future refactorings of the code,
making it fragile.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are definitely some exceptions to this rule, but odds are
pretty good your case won&#x27;t be one of them :).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Added test cases are always a good thing. They also make it easier
for me to understand &lt;em&gt;why&lt;&#x2F;em&gt; you&#x27;re writing this PR, and ensure I
don&#x27;t break your work in the future (remember from the previous
point: I&#x27;m stupid).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When submitting PRs to libraries (as opposed to an application like
haskellers.com):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep compatibility with older versions of dependencies whenever
possible. I try to keep as broad a range of potential package
versions as I can to help avoid &amp;quot;dependency hell.&amp;quot; (For the
record: dependency hell is not related to tooling in any way,
it&#x27;s an intrinsic aspect of having dependencies.)&lt;&#x2F;li&gt;
&lt;li&gt;In some cases, if you drop compatibility with a major version of
a dependency (e.g., change from &lt;code&gt;transformers &amp;gt;= 0.3&lt;&#x2F;code&gt; to
&lt;code&gt;transformers &amp;gt;= 0.4&lt;&#x2F;code&gt;), I may consider it a breaking change in
the library worthy of a major version bump.&lt;&#x2F;li&gt;
&lt;li&gt;Avoid adding dependencies. I personally am not of the opinion
that reducing the dependency footprint is &lt;em&gt;that&lt;&#x2F;em&gt; important, and
strongly believe that such behavior in general leads to Not
Invented Here (NIH) syndrome. However, since enough users of my
libraries &lt;em&gt;do&lt;&#x2F;em&gt; feel this way, it&#x27;s easier on me if you don&#x27;t
incur unnecessary dependencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why I lift</title>
		<published>2017-06-01T00:00:00+00:00</published>
		<updated>2017-06-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/06/why-i-lift/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/06/why-i-lift/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;WARNING&lt;&#x2F;strong&gt; Believe it or not, this post is about health and fitness,
not monad transformers.&lt;&#x2F;p&gt;
&lt;p&gt;Anyone following me on Twitter over the past year has probably noticed
that I&#x27;ve started weight lifting. At the request of some friends and
family, I&#x27;ve been meaning for a while to write up an in-depth blog
post on some topics around exercise and nutrition. But after some
discussions with others at LambdaConf last week, I decided to start
off with a much smaller blog post: why I started lifting, and why I
think most developers—or anyone with a desk job—should do
the same.&lt;&#x2F;p&gt;
&lt;p&gt;My background on this is, unfortunately, pretty standard these days.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I have a family history of medical conditions such as stroke,
cancer, and diabetes.&lt;&#x2F;li&gt;
&lt;li&gt;For the majority of my life, I&#x27;ve been significantly overweight, at
times bordering on obese. I&#x27;ve tried losing weight on many
occassions, but historically always gained it back.&lt;&#x2F;li&gt;
&lt;li&gt;Slightly more unusual: I have a specific injury (I fell down a
staircase onto my shoulder when I was 18) which required surgery and
can cause me issues when unattended.&lt;&#x2F;li&gt;
&lt;li&gt;And perhaps the one almost every reader will nod in agreement to: my
back used to go out regularly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;About five years ago, I decided to stop ignoring nagging health
issues, fight off the laziness, do research, and make myself
healthier. I&#x27;ve learned a lot in that time, much of which I hope to
share in an upcoming blog post. In this blog post, I just want to
motivate why I am so passionate about this topic now, and why I think
you should be too.&lt;&#x2F;p&gt;
&lt;p&gt;While the main focus here is on weight lifting, in the sense of going
to the gym and picking up heavy pieces of metal, I&#x27;d like to point out
that it&#x27;s hardly been an isolated activity in this journey. Highly
related changes have included:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Significant improvements to my nutrition (again, more on this in a
later post)&lt;&#x2F;li&gt;
&lt;li&gt;About three years of doing bodyweight workout routines (pushups,
bodyweight squats, pullups, etc)&lt;&#x2F;li&gt;
&lt;li&gt;Performing High Intensity Interval Training (HIIT), which can
basically be described as short bouts (~20 seconds) of intense
sprinting with quick recover periods (~40 seconds)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of the benefits I&#x27;ll list below are more generally about
&lt;em&gt;resistance training&lt;&#x2F;em&gt;, which will include bodyweight training,
resistance bands, and weight machines. If for some reason you really
don&#x27;t want to lift weights, consider those as good alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Despite many stereotypes out there, my comments here are not
targetted specifically at men. I believe that barring specific male
advantages (like spiking testosterone production), weight lifting is
just as important for women as for men. The points I list below are
gender neutral. If you read any of them and think they don&#x27;t apply to
women, I encourage you to rethink your stance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;we-have-more-control-than-we-think&quot;&gt;We have more control than we think&lt;&#x2F;h2&gt;
&lt;p&gt;I can&#x27;t speak universally, but I definitely know this for myself and a
number of people in my life. There&#x27;s a pervasive idea in the modern
world that our bodies just break down, and we need doctors and
medicine to fix them. While this is certainly the case sometimes, I
think we&#x27;ve often become overly reliant on pills, where lifestyle
changes could be more effective with less side effects.&lt;&#x2F;p&gt;
&lt;p&gt;Weight lifting and the other changes I mentioned are a way of taking
that control back.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strength-protects-us&quot;&gt;Strength protects us&lt;&#x2F;h2&gt;
&lt;p&gt;I think there&#x27;s often a negative stereotype of a &amp;quot;meathead&amp;quot; or similar
who trades in brain for brawn. Besides being contradicted by actual
correlative studies, this stereotype implies that strength isn&#x27;t an
inherently good thing for our bodies.&lt;&#x2F;p&gt;
&lt;p&gt;The main thing that got me to start going into the gym was my bad
back. I would wake up some mornings and be almost unable to move. It
would happen seemingly randomly. I also have a family history of this,
so I just assumed this would be a regular part of my life, and I would
pop ibuprofen as needed.&lt;&#x2F;p&gt;
&lt;p&gt;But then I started deadlifting. As I raised the weight (meaning I had
gotten stronger), an amazing thing happened: my back didn&#x27;t trouble me
as much. Focus on good posture, sitting correctly at my desk, and
regular heating of my back muscles have all contributed. But I believe
that the most important change I&#x27;ve made has been the deadlifts and,
to a slightly lesser extent, barbell squats.&lt;&#x2F;p&gt;
&lt;p&gt;I should also mention the negative side of lifting on this topic: if
you aren&#x27;t careful, you can injure yourself in the gym. I&#x27;ve
unfortunately done this. My advice—which is ripped off from
others—is to start off with very light weights and focus on
perfecting your form. Don&#x27;t &amp;quot;ego lift,&amp;quot; meaning don&#x27;t lift more weight
than you can handle to feel good about some number. Lift what you can
safely handle, and add weight as you get stronger and are ready for
it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;increased-muscle-mass-is-healthy&quot;&gt;Increased muscle mass is healthy&lt;&#x2F;h2&gt;
&lt;p&gt;If I had heard &amp;quot;increased muscle mass&amp;quot; 10 years ago, I probably would
have thought of some bodybuilder, and thought it was a vain pursuit of
aesthetic beauty. And while increased muscle mass can in fact be an
aesthetic feature, I believe the health benefits are even greater.&lt;&#x2F;p&gt;
&lt;p&gt;When we get sick, we&#x27;ll often lose muscle mass. Having a little extra
reserve prevents us from getting into danger levels. Increased body
mass also leads to increased caloric requirements. Meaning if you eat
a specific number of calories but have extra muscle on you, you won&#x27;t
put on as much fat.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nutrient-partitioning&quot;&gt;Nutrient partitioning&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve all heard back-and-forths over the past decade about whether
carbs are good or bad for us. I don&#x27;t want to get into that
now. However, I will say that elevated blood glucose levels are
clearly unhealthy, as is insulin insensitivity.&lt;&#x2F;p&gt;
&lt;p&gt;One of the great things about lifting weights is that it burns muscle
glycogen, your major body storage of carbohydrates. When you do this,
your muscles will quickly soak up the glucose in your bloodstream,
instead of it getting turned into fat or, worse, harming your body
organs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;psychologically-beneficial&quot;&gt;Psychologically beneficial&lt;&#x2F;h2&gt;
&lt;p&gt;We all have stress in our lives. Family, work, finances, and hundreds
of others. It can be difficult to cope with it.&lt;&#x2F;p&gt;
&lt;p&gt;Lifting weights is also a stress, but it&#x27;s a completely different kind
of stress. It&#x27;s physical (though sometimes a bit mentally terrifying
as well). And it&#x27;s short-term, instead of the really unhealthy,
cortisol-producing chronic stress many of us have.&lt;&#x2F;p&gt;
&lt;p&gt;But here&#x27;s the best part for me: lifting is an escape, in a way that
most other &amp;quot;leisure&amp;quot; activities (reading, watching TV, etc) are
not. When I&#x27;m doing a bench press, it is a simple battle between me
and gravity. There are no complex deadlocks to debug, no decisions
around corporate strategy to make, no challenges with children&#x27;s
education.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a heavy thing. I pick it up. I put it down. I do it again. Its
simplicity is its virtue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-productive&quot;&gt;More productive&lt;&#x2F;h2&gt;
&lt;p&gt;Far too many of us developers spend our entire lives on electronic
devices. We wake up and check Reddit&#x2F;Hacker News&#x2F;whatever. We watch
some TV or YouTube videos. We spend all day in an office (or, in my
case, home office) writing code or discussing issues on
Slack&#x2F;IRC&#x2F;whatever. We&#x27;re constantly answering emails on our
phones. And then when work is over, how many of us either play video
games, read Reddit some more, or work on hobby programming projects.&lt;&#x2F;p&gt;
&lt;p&gt;Far be it from me to tell people not to have open source development
they do outside of work (that would be pretty hypocritical). But
having &lt;em&gt;something&lt;&#x2F;em&gt; which is explicitly different from the rest of our
electronic activities is a much needed break, and at least for me
leads to better producitivity in the rest of my day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-challenge&quot;&gt;A new challenge&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned ego lifting above, and this section is certainly bordering
on it. But it&#x27;s also one of the things I enjoy the most about lifting:
it&#x27;s a constant new challenge. I can set new goals all the time:
increase the weight on my lifts, do more reps at the same weight, or
even modifying my tempo.&lt;&#x2F;p&gt;
&lt;p&gt;I need to regularly remind myself not to be stupid and push too
hard. And I also need to admit that I &lt;em&gt;have&lt;&#x2F;em&gt; done stupid things in the
gym in the past while trying to challenge myself. But if done safely,
the constant challenges can be invigorating, exciting, and fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;life-is-more-fun&quot;&gt;Life is more fun&lt;&#x2F;h2&gt;
&lt;p&gt;Speaking of fun: when you get stronger, life is just more fun. I have
four kids. They like to play (well, the three month old is slightly
less active than the others). They like to play physically. And the
fact that I can pick them up, toss them in the air, run around with
them, and even climb through play structures in the park makes that
play so much better.&lt;&#x2F;p&gt;
&lt;p&gt;Since lifting, I can play with them for longer, despite the fact that
they&#x27;ve all grown bigger and heavier. (Though I&#x27;ll admit that tossing
my 4 year old is significantly easier than tossing my 9 year old.) I
can&#x27;t imagine what life would be like if I was unable to do more than
a half-hearted game of catch for five minutes.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve never really been into sports, so I&#x27;m not using that as a
personal example. But I&#x27;d imagine those of you who do enjoy sports
will find much more enjoyment in it once you&#x27;ve increased your
strength and endurance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-how-to-use-our-bodies&quot;&gt;Learning how to use our bodies&lt;&#x2F;h2&gt;
&lt;p&gt;I remember reading a tutorial on deadlifting, and seeing the comment
that it teaches you the right way to lift objects. I now regularly
find myself, while moving objects around the house, naturally using
deadlift techniques and cues. This helps prevent injury, and makes me
a more useful person.&lt;&#x2F;p&gt;
&lt;p&gt;I have a genetic history that leads to an achilles tendon which is
overly short. This leads to such issues as toe-walking, foot pain
while standing, and lack of mobility&#x2F;flexibility. In line with the
comment above of taking control of our bodies, working on my squat has
drastically improved the situation with my tendon, leading to
improvements in all mentioned areas. (Though to be fair, I do still
have issues here.)&lt;&#x2F;p&gt;
&lt;p&gt;In order to lift correctly, you&#x27;ll need to learn how to tighten your
core, tighten your lats, engage your glutes. You&#x27;ll discover muscle
groups you can control that you didn&#x27;t know you could. You&#x27;ll need to
perfect your posture to nail down form.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t think of weight lifting as learning an isolated skill. It&#x27;s a
transferable activity with payoff in almost every aspect of your day
to day life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m hoping to dive into details in a later blog post, but if you want
to get started, my advice is: don&#x27;t overcomplicate! I have a theory
that a significant part of why so many people are unhealthy is the
confusion around the topic (think of the paradox of choice). Choose a
resistance activity and do it.&lt;&#x2F;p&gt;
&lt;p&gt;I personally think that &lt;a href=&quot;http:&#x2F;&#x2F;stronglifts.com&quot;&gt;StrongLifts 5x5&lt;&#x2F;a&gt; is a
great place to start with weight lifting. If you want to start with
bodyweights instead, I had a lot of success with the
&lt;a href=&quot;http:&#x2F;&#x2F;www.startbodyweight.com&quot;&gt;Start Bodyweight&lt;&#x2F;a&gt; program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-posts-like-this&quot;&gt;More posts like this?&lt;&#x2F;h2&gt;
&lt;p&gt;This blog post is obviously an anomaly versus most of my other
development-related posts. If this is something you like and would
enjoy more of, please let me know. Depending on interest in it and the
volume of posts on the topic, I may put the health and fitness posts
in a separate part of my site. Feedback welcome!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Playing with lens-aeson</title>
		<published>2017-05-29T00:00:00+00:00</published>
		<updated>2017-05-29T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/05/playing-with-lens-aeson/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/05/playing-with-lens-aeson/</id>
		<content type="html">&lt;p&gt;At LambdaConf last week, Tony Morris convinced me I should take
another stab at getting more comfortable with lens, and after chatting
with a few other people (including at least Chris Allen), I decided
that the
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;lens-aeson&quot;&gt;lens-aeson&lt;&#x2F;a&gt;&#x2F;JSON parsing
use case would be a good at forcing me to play with more of the lens
ecosystem than I have previously.&lt;&#x2F;p&gt;
&lt;p&gt;This is not a normal blog post for me. I&#x27;m not an expert (or even
competent) on the topic of lens. In fact, odds are no one should read
this blog post. Really consider it me thinking out loud, and
obnoxiously doing so on my blog. I&#x27;ll excuse the weird nature of this
by saying I&#x27;m running on little sleep, and I&#x27;m bored in an airport and
on an airplane.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Let&#x27;s start off with a simple JSON file containing color names and
values that looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[
    {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#f00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;},
    {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;,
	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a relatively simple file format, with an array of individual
objects, and each object having the same keys. We want to get the
names of all the colors from this, ignoring the values. Let&#x27;s start
off by implementing such a program using an explicit &lt;code&gt;FromJSON&lt;&#x2F;code&gt;
instance, which is probably the most obvious thing to do based on the
lens documentation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B

data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; { colorName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FromJSON Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  parseJSON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; withObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; eitherDecodeStrict&amp;#39; bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error e
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; map colorName colors
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is pretty straightforward: we define a data type &lt;code&gt;Color&lt;&#x2F;code&gt;, which
contains the fields we care about (here, just the name of the
color). Then we declare a &lt;code&gt;FromJSON&lt;&#x2F;code&gt; instance which parses out the
&lt;code&gt;color&lt;&#x2F;code&gt; key. In our &lt;code&gt;main&lt;&#x2F;code&gt; function, we read the raw bytes, and use
&lt;code&gt;eitherDecodeStrict&#x27;&lt;&#x2F;code&gt; to parse the JSON into a &lt;code&gt;Value&lt;&#x2F;code&gt; and then use
our &lt;code&gt;FromJSON&lt;&#x2F;code&gt; instance to convert that &lt;code&gt;Value&lt;&#x2F;code&gt; into a list of &lt;code&gt;Color&lt;&#x2F;code&gt;
values. We then apply &lt;code&gt;colorName&lt;&#x2F;code&gt; to each value in that list to
extract the name, and print the list.&lt;&#x2F;p&gt;
&lt;p&gt;That works, but it&#x27;s far from inspiring. We&#x27;re declaring a &lt;code&gt;Color&lt;&#x2F;code&gt;
datatype simply for the purpose of writing a typeclass instance. But
it feels pretty heavyweight to have to declare a data type and make a
typeclass instance for just one use site. Let&#x27;s try what I&#x27;d consider
the next most obvious approach: work directly on the &lt;code&gt;Value&lt;&#x2F;code&gt; data
type&#x27;s constructors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.HashMap.Strict &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HashMap

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; eitherDecodeStrict&amp;#39; bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error e
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; array) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
      colors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;forM array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
        case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
            case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;lookup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Didn&amp;#39;t find color key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; c) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return c
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Expected a String, got: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show v&amp;#39;
          _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Expected an object, got: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show v
      print colors
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Unexpected top level type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works, but is thoroughly unappetizing. We need to take into
account a lot of corner cases and explicitly handle looping over the
&lt;code&gt;Vector&lt;&#x2F;code&gt;. It&#x27;s unpleasant, and for a non-toy example, would be
downright tedious.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try to avoid the tedium, and if you read my intro paragraph, you
won&#x27;t be surprised to hear that the answer I&#x27;m proposing is
&lt;code&gt;lens-aeson&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code looks almost too short to work, but it produces exactly the
same output as before for our &lt;code&gt;colors.json&lt;&#x2F;code&gt; file. To see how it works:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t need to do any explicit parsing of our &lt;code&gt;ByteString&lt;&#x2F;code&gt;
value. &lt;code&gt;lens-aeson&lt;&#x2F;code&gt; contains a number of typeclasses for matching
JSON values, and provides instances for &lt;code&gt;ByteString&lt;&#x2F;code&gt;, &lt;code&gt;Text&lt;&#x2F;code&gt;, and
&lt;code&gt;String&lt;&#x2F;code&gt; that will perform an initial parse to a &lt;code&gt;Value&lt;&#x2F;code&gt; for you
automatically.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;^..&lt;&#x2F;code&gt; operator comes from the &lt;code&gt;lens&lt;&#x2F;code&gt; package, which is a synonym
for &lt;code&gt;toListOf&lt;&#x2F;code&gt;. As you might imagine, it converts &lt;em&gt;something&lt;&#x2F;em&gt; into a
list. Our &lt;code&gt;^..&lt;&#x2F;code&gt; operator will take the value on the left hand side
(&lt;code&gt;bs&lt;&#x2F;code&gt; here) and apply the &lt;code&gt;Fold&lt;&#x2F;code&gt; on the right to it, collecting the
results into a list.&lt;&#x2F;li&gt;
&lt;li&gt;Now we need to understand how we construct our &lt;code&gt;Fold&lt;&#x2F;code&gt;. We start off
with &lt;code&gt;values,&lt;&#x2F;code&gt; which will match a JSON array and provide all of the
values inside of it.&lt;&#x2F;li&gt;
&lt;li&gt;Next we compose with the &lt;code&gt;key &amp;quot;color&amp;quot;&lt;&#x2F;code&gt; &lt;code&gt;Fold&lt;&#x2F;code&gt;, which takes a
&lt;code&gt;Value&lt;&#x2F;code&gt;, checks that it is an &lt;code&gt;Object&lt;&#x2F;code&gt;, and looks up the given key,
in this case &lt;code&gt;&amp;quot;color&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Finally, we use the &lt;code&gt;_String&lt;&#x2F;code&gt; &lt;code&gt;Fold&lt;&#x2F;code&gt; to check that we have a string
value (as opposed to something like a number or a boolean) and
returns it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The behavior of this isn&#x27;t exactly identical to our previous
versions. In particular, if there are values in our array that don&#x27;t
match our requirements, they&#x27;ll simply be dropped instead of producing
an error. Whether this is acceptable for your case is up to you. And
I&#x27;m hoping that someone reading this post will provide a good example
of how to do the error-checking version with &lt;code&gt;lens-aeson&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;not-just-a-fold&quot;&gt;Not just a &lt;code&gt;Fold&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Above, I mentioned the term &lt;code&gt;Fold&lt;&#x2F;code&gt; many times. A &lt;code&gt;Fold&lt;&#x2F;code&gt; is one kind of
&lt;em&gt;optic&lt;&#x2F;em&gt; from the lens package, which &amp;quot;allows you to extract multiple
results from a container.&amp;quot; However, if you&#x27;re familiar with lens, you
may know that optics form a hierarchy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; An &lt;em&gt;optic&lt;&#x2F;em&gt; is a more general term that encompasses a lot of
the types in the lens package, like lenses, foldables, prisms,
traversables, isos, getters, etc. Because of how optics are
structured, they compose together nicely. And because of how the
typeclasses are structured, optics have a nice subtyping system, which
I&#x27;m hinting at here.&lt;&#x2F;p&gt;
&lt;p&gt;For example, a &lt;code&gt;Traversal&lt;&#x2F;code&gt; is a generalization of a &lt;code&gt;Fold&lt;&#x2F;code&gt; which also
allows us to &amp;quot;traverse over a structure and change out its contents
with monadic side-effects.&amp;quot; Our &lt;code&gt;values&lt;&#x2F;code&gt; &lt;code&gt;Fold&lt;&#x2F;code&gt; isn&#x27;t just a
&lt;code&gt;Fold&lt;&#x2F;code&gt;. It allows us to also update all of the values inside the
array, making it a valid &lt;code&gt;Traversal&lt;&#x2F;code&gt;. Let&#x27;s see how we can use that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
  let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[1,2,3]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs &amp;amp; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_Number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of reading our &lt;code&gt;ByteString&lt;&#x2F;code&gt; from a file, we&#x27;re now defining
our &lt;code&gt;bs&lt;&#x2F;code&gt; value in our Haskell code, giving it the JSON representation
of the array of numbers 1, 2, and 3.&lt;&#x2F;p&gt;
&lt;p&gt;We then take our &lt;code&gt;ByteString&lt;&#x2F;code&gt; and use the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; operator, which is
reverse function application. This means that we will apply whatever&#x27;s
on the right hand side of &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; to our &lt;code&gt;ByteString&lt;&#x2F;code&gt; on the left. Let&#x27;s
look at that function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_Number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;%~&lt;&#x2F;code&gt; operator will apply some modification function using a
&lt;code&gt;Setter&lt;&#x2F;code&gt;. And guess what: a &lt;code&gt;Traversal&lt;&#x2F;code&gt; is a generalization of a
&lt;code&gt;Setter&lt;&#x2F;code&gt;, so we can use a &lt;code&gt;Traversal&lt;&#x2F;code&gt;. As we said, &lt;code&gt;values&lt;&#x2F;code&gt; is a
&lt;code&gt;Traversal&lt;&#x2F;code&gt;. &lt;code&gt;_Number&lt;&#x2F;code&gt; is also a &lt;code&gt;Traversal&lt;&#x2F;code&gt;, so their composition
makes a &lt;code&gt;Traversal&lt;&#x2F;code&gt;. And then we apply our &lt;code&gt;+ 1&lt;&#x2F;code&gt; function inside of
it.&lt;&#x2F;p&gt;
&lt;p&gt;So to sum up, our &lt;code&gt;bs &amp;amp; values._Number %~ (+ 1)&lt;&#x2F;code&gt; expression will do
the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parse the raw bytestring value in &lt;code&gt;bs&lt;&#x2F;code&gt; into a JSON &lt;code&gt;Value&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Inspect that value and see if it&#x27;s an array&lt;&#x2F;li&gt;
&lt;li&gt;For each element in that array, check if it&#x27;s a number&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s a number, add 1 to it&lt;&#x2F;li&gt;
&lt;li&gt;Finally, take the newly created &lt;code&gt;Value&lt;&#x2F;code&gt; and render it back into a
bytestring value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s quite the power-to-weight ratio. I recommend writing the same
thing without lens for comparison.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;not-just-a-traversal&quot;&gt;Not just a &lt;code&gt;Traversal&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The same way a &lt;code&gt;Traversal&lt;&#x2F;code&gt; is a generalization of a &lt;code&gt;Fold&lt;&#x2F;code&gt;, a &lt;code&gt;Prism&lt;&#x2F;code&gt;
is a generalization of a &lt;code&gt;Traversal&lt;&#x2F;code&gt;. While a &lt;code&gt;Traversal&lt;&#x2F;code&gt; represents
the ability to look inside a value, find 0 or more values of a given
type, and either get them (the &lt;code&gt;Fold&lt;&#x2F;code&gt; power) or modify them (the
&lt;code&gt;Traversal&lt;&#x2F;code&gt; power), a &lt;code&gt;Prism&lt;&#x2F;code&gt; specificies that it will have &lt;em&gt;exactly&lt;&#x2F;em&gt;
0 or 1 values, and that, given one value of the target type, you
create the original type.&lt;&#x2F;p&gt;
&lt;p&gt;Did that sound confusing? I certainly think so. So let&#x27;s say it
another way: a &lt;code&gt;Prism&lt;&#x2F;code&gt; is an optic version of a data constructor. When
you have a sum type &lt;code&gt;Either a b&lt;&#x2F;code&gt;, you can always get exactly 0 or 1
&lt;code&gt;a&lt;&#x2F;code&gt; values (0 if the value is &lt;code&gt;Right&lt;&#x2F;code&gt;, 1 if the value is &lt;code&gt;Left&lt;&#x2F;code&gt;). And,
given an &lt;code&gt;a&lt;&#x2F;code&gt; value, you can always construct a value of type &lt;code&gt;Either a b&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Test.Hspec

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hspec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;constructs with _Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; re _Left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Either Int String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;constructs with _Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; re _Right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Either Int String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;traverses with _Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;amp; _Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Either Int String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;traverse can do nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;amp; _Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Either Int String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;folds with _Left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _Left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
  it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;folds with _Right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _Right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`shouldBe`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So apparently, if you&#x27;re totally bought in on the lens ecosystem,
you&#x27;re free to never use your data constructors again and just use
&lt;code&gt;re&lt;&#x2F;code&gt;. But anyway, we were dealing with JSON data; can we construct a
simple JSON value like this? Sure.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; re _Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;to (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;replicate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;re _Array
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;to&lt;&#x2F;code&gt; function converts a normal functions from &lt;code&gt;a&lt;&#x2F;code&gt; to &lt;code&gt;b&lt;&#x2F;code&gt; into an
optic that does the same thing, a &lt;code&gt;Getter a b&lt;&#x2F;code&gt;. More idiomatically (I
think), we&#x27;d actually use the type variables &lt;code&gt;s&lt;&#x2F;code&gt; and &lt;code&gt;a&lt;&#x2F;code&gt; and get &lt;code&gt;to :: (s -&amp;gt; a) -&amp;gt; Getter s a&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This was actually more detailed on lens itself than I intended to get
here, but since this blog post is just a forcing function for me to
explore things and not actually useful for anyone else in the world, I
guess that&#x27;s OK.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-random-fun&quot;&gt;More random fun&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, can I upper case all of the color names? Sure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs &amp;amp; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;toUpper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s get a bit trickier: can I create an &lt;em&gt;additional&lt;&#x2F;em&gt; field
&lt;code&gt;color-upper&lt;&#x2F;code&gt; with this upper cased version? I have no idea if this is
idiomatic lens code, but it certainly works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs &amp;amp; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;hm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hm &amp;amp; at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color-upper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
      (hm^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;folded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;toUpper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;re _String))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s a lot to unpack for me. First, I&#x27;m using &lt;code&gt;bs &amp;amp; values._Object %~ ...&lt;&#x2F;code&gt; to say &amp;quot;look inside the bytestring, treat it as JSON, look for
an array, and find every object in that array and treat it as a
&lt;code&gt;HashMap Text Value&lt;&#x2F;code&gt;, and modify each hashmap using the ...&amp;quot; It&#x27;s the
&lt;code&gt;...&lt;&#x2F;code&gt; that I find confusing.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we do &lt;code&gt;hm &amp;amp; at &amp;quot;color-upper&amp;quot; .~ ...&lt;&#x2F;code&gt;, which says &amp;quot;I want to set
the value in the hashmap at the key &lt;code&gt;color-upper&lt;&#x2F;code&gt; to the &lt;code&gt;Maybe Value&lt;&#x2F;code&gt;
value I&#x27;m giving you. Finally, we get our &lt;code&gt;Maybe Value&lt;&#x2F;code&gt; value with the
rest of that expression, which reads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;hm^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;folded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;toUpper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;re _String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This reads to me as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Take &lt;code&gt;hm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Give me the first value that succeeds (&lt;code&gt;^?&lt;&#x2F;code&gt;), or &lt;code&gt;Nothing&lt;&#x2F;code&gt; if no
value gets grabbed&lt;&#x2F;li&gt;
&lt;li&gt;Look up the &lt;code&gt;&amp;quot;color&amp;quot;&lt;&#x2F;code&gt; key&lt;&#x2F;li&gt;
&lt;li&gt;Flatten out that &lt;code&gt;Maybe Value&lt;&#x2F;code&gt; into just a &lt;code&gt;Value&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Check that it&#x27;s a string&lt;&#x2F;li&gt;
&lt;li&gt;Convert it to upper case&lt;&#x2F;li&gt;
&lt;li&gt;Wrap it back in a &lt;code&gt;String&lt;&#x2F;code&gt; constructor using &lt;code&gt;re _String&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By way of contrast, I can write the same functionality the non-lens way with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;hm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
  case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;lookup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; color) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;insert
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color-upper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;toUpper color))
      hm
    _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For me personally, I find this version easier to read, but I&#x27;m also a
lens usage novice. Maybe I just need to force myself to write
airplane-powered rambling lens blog posts more often (or maybe write
some real code).&lt;&#x2F;p&gt;
&lt;p&gt;Going for something much simpler, let&#x27;s just delete all of the &lt;code&gt;value&lt;&#x2F;code&gt;
keys:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs &amp;amp; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;indexed&quot;&gt;Indexed&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to play with indexed optics a bit. My goal had been to modify
the following code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Aeson.Lens
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs ^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So that it printed a pair of the index in the array that the color
appears at, and the color itself. Unfortunately, I couldn&#x27;t figure out
how to make that work. One thing I got was:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs ^@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; values
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this just keeps the entire object, not the string inside the
&lt;code&gt;color&lt;&#x2F;code&gt; key like I wanted. The following is a bit closer, but (1) it
keeps &lt;code&gt;Nothing&lt;&#x2F;code&gt; values in the result instead of just removing them
(like a &lt;code&gt;mapMaybe&lt;&#x2F;code&gt; would) and (2) doesn&#x27;t feel idiomatic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (bs ^@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; values) &amp;amp; each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I discovered the &lt;code&gt;pre&lt;&#x2F;code&gt; function, which let me do the following
with identical output to the former:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  bs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;colors.json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; bs ^@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pre (key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;_String)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It does seem like I&#x27;m likely missing something obvious to remove drop
the &lt;code&gt;Nothing&lt;&#x2F;code&gt; values and remove the &lt;code&gt;Maybe&lt;&#x2F;code&gt; wrapping entirely, but
unfortunately I couldn&#x27;t figure it out.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Worst Function in Conduit</title>
		<published>2017-05-07T00:00:00+00:00</published>
		<updated>2017-05-07T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/05/worst-function-in-conduit/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/05/worst-function-in-conduit/</id>
		<content type="html">&lt;p&gt;This blog post addresses a long-standing FIXME in the
conduit-combinators documentation, as well as
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bitemyapp&#x2F;status&#x2F;860919651957710849&quot;&gt;a question on Twitter&lt;&#x2F;a&gt;. This
blog post will assume familiarity with the Conduit streaming data
library; if you&#x27;d like to read up on it first, please
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;conduit&quot;&gt;check out the tutorial&lt;&#x2F;a&gt;. The
full executable snippet is at the end of this blog post, but we&#x27;ll
build up intermediate bits along the way. First, the
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;Stack&lt;&#x2F;a&gt; script header, import
statement, and some minor helper functions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Conduit

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;src10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i Int m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;src10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yieldMany [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;remaining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i o m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;remaining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lengthC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;= \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; liftIO (putStrLn (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Remaining: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show x))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;src10&lt;&#x2F;code&gt; just provides the numbers 1 through 10 as a source, and
&lt;code&gt;remaining&lt;&#x2F;code&gt; tells you how many values are remaining from
upstream. Cool.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s pretend that the Conduit libraries completely forgot to
provide a &lt;code&gt;drop&lt;&#x2F;code&gt; function. That is, a function that will take an &lt;code&gt;Int&lt;&#x2F;code&gt;
and discard that many values from the upstream. We could write one
ourselves pretty easily:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i o m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;dropSink cnt
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink (cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Bonus points to readers: this function is inefficient in the case
that upstream has less than &lt;code&gt;cnt&lt;&#x2F;code&gt; values, optimize it.)&lt;&#x2F;p&gt;
&lt;p&gt;This function will drop a certain number of elements from upstream, so
the next component we monadically bind with can pick it up. Let&#x27;s see
how that looks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;goodDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;goodDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All well and good. But notice two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I called this &lt;code&gt;dropSink&lt;&#x2F;code&gt;. Why sink?&lt;&#x2F;li&gt;
&lt;li&gt;I stressed that we had to monadically bind. Why?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Well, there&#x27;s another formulation of this drop function. Instead of
letting the next monadically bound component pick up remaining values,
we could &lt;em&gt;pass the remaining values downstream&lt;&#x2F;em&gt;. Fortunately it&#x27;s
really easy to implement this function in terms of &lt;code&gt;dropSink&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i i m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;dropTrans cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapC id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(For more meaningless bonus points, feel free to implement this
without &lt;code&gt;dropSink&lt;&#x2F;code&gt;, or for a greater challenge, implement &lt;code&gt;dropSink&lt;&#x2F;code&gt;
in terms of &lt;code&gt;dropTrans&lt;&#x2F;code&gt;.) Anyway, this function can be used easily as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;goodDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;goodDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Many may argue that this is more natural. To some extent, it mirrors
the behavior of &lt;code&gt;take&lt;&#x2F;code&gt; more closely, as &lt;code&gt;take&lt;&#x2F;code&gt; passes the initial
values downstream. On the other hand, &lt;code&gt;dropTrans&lt;&#x2F;code&gt; cannot &lt;em&gt;guarantee&lt;&#x2F;em&gt;
that the values will be removed from the stream; if instead of
&lt;code&gt;dropTrans 5 .| remaining&lt;&#x2F;code&gt; I simply did &lt;code&gt;dropTrans 5 .| return ()&lt;&#x2F;code&gt;,
then the &lt;code&gt;dropTrans&lt;&#x2F;code&gt; would never have a chance to fire, since
execution is driven from downstream. Also, as demonstrated, it&#x27;s
really easy to capture this transformer behavior from the sink
behavior; the other way is trickier.&lt;&#x2F;p&gt;
&lt;p&gt;My point here is that we have two legitimate definitions of a
function. And from my experience, different people expect different
behavior for the function. In fact, some people (myself included)
intuitively expect different behavior &lt;em&gt;depending on the circumstance&lt;&#x2F;em&gt;!
This is what earns &lt;code&gt;drop&lt;&#x2F;code&gt; the title of worst function in conduit.&lt;&#x2F;p&gt;
&lt;p&gt;To make it even more clear how bad this is, let&#x27;s see how you can
misuse these functions unintentionally.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;badDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code looks perfectly reasonable, and if we just replaced
&lt;code&gt;dropSink&lt;&#x2F;code&gt; with &lt;code&gt;dropTrans&lt;&#x2F;code&gt;, it would be correct. But instead of
saying, as expected, that we have 5 values remaining, this will
print 0. The reason: &lt;code&gt;src10&lt;&#x2F;code&gt; yields 10 values to
&lt;code&gt;dropSink&lt;&#x2F;code&gt;. &lt;code&gt;dropSink&lt;&#x2F;code&gt; drops 5 of those and leaves the remaining 5
untouched. But &lt;code&gt;dropSink&lt;&#x2F;code&gt; never itself yields a value downstream, so
&lt;code&gt;remaining&lt;&#x2F;code&gt; receives nothing.&lt;&#x2F;p&gt;
&lt;p&gt;Because of the type system, it&#x27;s slightly trickier to misuse
&lt;code&gt;dropTrans&lt;&#x2F;code&gt;. Let&#x27;s first do the naive thing of just assuming it&#x27;s
&lt;code&gt;dropSink&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;GHC does not like this one bit:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;error:
    • Couldn&amp;#39;t match type ‘Int’ with ‘Data.Void.Void’
      Expected type: ConduitM () Data.Void.Void IO ()
        Actual type: ConduitM () Int IO ()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is that &lt;code&gt;runConduit&lt;&#x2F;code&gt; expects a pipeline where the final
output value is &lt;code&gt;Void&lt;&#x2F;code&gt;. However, &lt;code&gt;dropTrans&lt;&#x2F;code&gt; has an output value of
type &lt;code&gt;Int&lt;&#x2F;code&gt;. And if it&#x27;s yielding &lt;code&gt;Int&lt;&#x2F;code&gt;s, so must &lt;code&gt;remaining&lt;&#x2F;code&gt;. This is
definitely an argument in favor of &lt;code&gt;dropTrans&lt;&#x2F;code&gt; being the better
function: the type system helps us a bit. (It&#x27;s also an argument in
favor of keeping
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;04&#x2F;generalizing-type-signatures&quot;&gt;the type signature of &lt;code&gt;runConduit&lt;&#x2F;code&gt; as-is&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;However, it&#x27;s still possible to accidentally screw things up in bigger
pipelines, e.g.:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (sinkList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; liftIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code may look a bit contrived, but in real-world Conduit code
it&#x27;s not at all uncommon to deeply nest these components in such a way
that the error would not be present. You may be surprised to hear that
the output of this program is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Remaining: 0
[6,7,8,9,10]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason is that the &lt;code&gt;sinkList&lt;&#x2F;code&gt; is downstream from &lt;code&gt;dropTrans&lt;&#x2F;code&gt;, and
grabs all of its output. &lt;code&gt;dropTrans&lt;&#x2F;code&gt; itself will drain all output from
&lt;code&gt;src10&lt;&#x2F;code&gt;, leaving nothing behind for &lt;code&gt;remaining&lt;&#x2F;code&gt; to grab.&lt;&#x2F;p&gt;
&lt;p&gt;The Conduit libraries use the &lt;code&gt;dropSink&lt;&#x2F;code&gt; variety of function. I wish
there was a better approach here that felt more intuitive to
everyone. The closest I can think of to that is deprecating &lt;code&gt;drop&lt;&#x2F;code&gt; and
replacing it with more explicitly named &lt;code&gt;dropSink&lt;&#x2F;code&gt; and &lt;code&gt;dropTrans&lt;&#x2F;code&gt;,
but I&#x27;m not sure how I feel about that (feedback welcome, and other
ideas &lt;em&gt;certainly&lt;&#x2F;em&gt; welcome).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Full code&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;--stack --resolver lts-8.12 script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Conduit

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i o m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;dropSink cnt
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink (cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i i m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;dropTrans cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink cnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapC id

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;src10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i Int m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;src10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yieldMany [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;remaining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i o m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;remaining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; lengthC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;= \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; liftIO (putStrLn (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Remaining: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show x))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;goodDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;goodDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;badDropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropSink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;goodDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;goodDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;badDropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; src10
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (dropTrans &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; remaining)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (sinkList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; liftIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Good drop sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  goodDropSink
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bad drop sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  badDropSink
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Good drop trans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  goodDropTrans
  putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bad drop trans&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
  badDropTrans
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Full output&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Good drop sink
Remaining: 5
Bad drop sink
Remaining: 0
Good drop trans
Remaining: 5
Bad drop trans
Remaining: 0
[6,7,8,9,10]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Stackage&#x27;s no-revisions (experimental) field</title>
		<published>2017-04-27T00:00:00+00:00</published>
		<updated>2017-04-27T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/04/stackages-no-revisions-field/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/04/stackages-no-revisions-field/</id>
		<content type="html">&lt;p&gt;I&#x27;m announcing a new, experimental field in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;blob&#x2F;1be82f516d5c3c4f276c8119bbae018034a42b25&#x2F;build-constraints.yaml#L3979&quot;&gt;&lt;code&gt;build-constraints.yaml&lt;&#x2F;code&gt; file for Stackage&lt;&#x2F;a&gt;. For
those not familiar with Hackage revisions, let me give a quick rundown
of how things work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When you upload a package to Hackage, your tarball includes a .cabal
file&lt;&#x2F;li&gt;
&lt;li&gt;That .cabal file gets included in the index tarball containing all
.cabal files&lt;&#x2F;li&gt;
&lt;li&gt;From the Hackage website, package maintainers and Hackage Trustees
are able to edit some metadata about a package, like its dependency
bounds&lt;&#x2F;li&gt;
&lt;li&gt;When such an edit takes place, a new .cabal file is added at the end
of the index tarball with the updated content&lt;&#x2F;li&gt;
&lt;li&gt;It is the responsibility of tooling (like cabal, Stack, and the
Stackage build tools) to—when extracting a package&#x27;s
tarball—replace the original .cabal file with the correct
version, usually the newest version available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When a Stackage build runs, until now it would always take the most
recent revision of a .cabal file and use that for bounds checking (and
other activities). Then, when creating a snapshot, it would include a
hash of the revision of the .cabal file it used. That hash is in turn
used by Stack to ensure that—when building a package from a
snapshot—it uses the same revision for reproducibility.&lt;&#x2F;p&gt;
&lt;p&gt;(Sound complicated? It kind of is.)&lt;&#x2F;p&gt;
&lt;p&gt;OK, all that said: what&#x27;s the problem? Well, there are some
disagreements in certain cases about whether a revision to a package&#x27;s
.cabal file should have occurred. An unwanted revision can create
undesired work for the package author. After this situation arose a
few times, I discussed with some involved parties, and came up with
the &lt;code&gt;no-revisions&lt;&#x2F;code&gt; field. Its purpose is really simple:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the Stackage build tool is choosing which .cabal file revision
to use, if a package is present in the &lt;code&gt;no-revisions&lt;&#x2F;code&gt; list, then the
original revision is used. Otherwise, the newest revision is used.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt; Someone pointed out that this &amp;quot;unwanted work&amp;quot; description
was pretty vague. To clarify, here&#x27;s an example situation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Package author Alice uploads package &lt;code&gt;foo&lt;&#x2F;code&gt;, and depends on &lt;code&gt;bar &amp;gt;= 2.3&lt;&#x2F;code&gt; (with no upper bounds). The latest version of &lt;code&gt;bar&lt;&#x2F;code&gt; on Hackage
is 2.3.&lt;&#x2F;li&gt;
&lt;li&gt;Hackage Trustee Bob adds an upper so that, now, &lt;code&gt;foo&lt;&#x2F;code&gt; depends on
&lt;code&gt;bar &amp;gt;= 2.3 &amp;amp;&amp;amp; &amp;lt; 2.4&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Package author Charlie uploads &lt;code&gt;bar-2.4&lt;&#x2F;code&gt; to Hackage.&lt;&#x2F;li&gt;
&lt;li&gt;Alice checks on her Git repo and sees that the current &lt;code&gt;foo&lt;&#x2F;code&gt; code
is compatible with &lt;code&gt;bar-2.4&lt;&#x2F;code&gt;, so does nothing.&lt;&#x2F;li&gt;
&lt;li&gt;Meanwhile, Stackage discovers the upper bounds and files a bug
report for Alice to remove the upper bound (that she&#x27;s not aware
of).&lt;&#x2F;li&gt;
&lt;li&gt;Alice needs to log in to Hackage and remove the upper bound (or at
least relax it).&lt;&#x2F;li&gt;
&lt;li&gt;Alternatively, with &lt;code&gt;no-revisions&lt;&#x2F;code&gt; in place, Alice could initially
put &lt;code&gt;foo&lt;&#x2F;code&gt; in the &lt;code&gt;no-revisions&lt;&#x2F;code&gt; list, and then Bob&#x27;s changes would
be ignored completely by Stackage.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is an opt-in field, so people who want the current behavior need
not do anything. This change will transparently work for Stack, since
it will simply respect the hash of the .cabal file. And since there
may be some negative ramifications of this change I haven&#x27;t
considered, I&#x27;m calling this feature experimental and asking for
feedback if this causing anyone some issues.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this change will let people who are using the Stack and
Stackage toolchain work with less interference, with less friction
occurring with Hackage Trustees making version bounds modifications.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell Success Stories</title>
		<published>2017-04-24T00:00:00+00:00</published>
		<updated>2017-04-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/04/haskell-success-stories/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/04/haskell-success-stories/</id>
		<content type="html">&lt;p&gt;I&#x27;ve probably blogged, spoken, Tweeted, and commented on a variation
on this theme many times in the past, so please excuse me for being a
broken record. This is important.&lt;&#x2F;p&gt;
&lt;p&gt;I think we have a problem in the Haskell community. We all know that
using Haskell to create a simple web service, a CRUD app, a
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;pdxleif&#x2F;status&#x2F;855302710928613376&quot;&gt;statically linked command line tool&lt;&#x2F;a&gt;,
or a dozen other things is not only possible, but commonplace,
trivial, and not even noteworthy. So we don&#x27;t bother commenting when
we create
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;wai-middleware-crowd&quot;&gt;general purpose reverse proxy tools&lt;&#x2F;a&gt;
with
&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;fpco&#x2F;wai-crowd&#x2F;&quot;&gt;prebuilt Docker images&lt;&#x2F;a&gt; for
auth-enabling arbitrary webapps. It&#x27;s boring. Unfortunately, &lt;strong&gt;people
outside our community don&#x27;t know this&lt;&#x2F;strong&gt;. By not bothering to talk
about this (for us) boring topic, we&#x27;re hiding away the fact that
Haskell is a practical language for creating real things.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we like to talk about
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;01&#x2F;safe-prelude-a-thought-experiment&quot;&gt;better preludes&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;01&#x2F;foldable-mapm-maybe-and-recursive-functions&quot;&gt;optimizing common functions&lt;&#x2F;a&gt;,
or
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;12&#x2F;beware-of-readfile&quot;&gt;dangers in our standard libraries&lt;&#x2F;a&gt;. I&#x27;m
picking on myself here with these examples, but my comments apply far
more generally.&lt;&#x2F;p&gt;
&lt;p&gt;I know personally at least 10-15 Haskell success stories that have
never been talked about publicly. And I have to apologize for not
leading by example here; unfortunately most of my work in the past few
years has either been under NDA, or been of absolutely no interest to
people outside the Haskell community (usually open source
infrastructure and libraries). So I&#x27;m hoping to inspire others to step
up to the plate.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not trying to tell anyone to stop talking about the things we find
interesting. I just want to point out that just because we, within the
Haskell community, may not find a &amp;quot;I launched a web service, and it&#x27;s
running, and it&#x27;s not as buggy as we would have expected v1 to be&amp;quot;
kind of blog post noteworthy, I think others &lt;em&gt;will&lt;&#x2F;em&gt;. These kinds of
blog posts are also a much easier way to get started talking publicly
about Haskell, since not all of us can explain zygohistomorphic
prepomorphisms (I know I certainly can&#x27;t).&lt;&#x2F;p&gt;
&lt;p&gt;As I was batting the idea for this post around with
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;LambdaMom&quot;&gt;my wife&lt;&#x2F;a&gt; last night, she pointed out
that, most likely, the people best suited to write these kinds of
posts may not have dedicated blogs at all right now. If you fall into
that category, but would still be interested in writing up a post
about your Haskell success story, I&#x27;d like to offer assistance. I&#x27;m
happy to let guests write posts on the
&lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&quot;&gt;Yesod blog&lt;&#x2F;a&gt;. Articles may also be
relevant to &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&quot;&gt;haskell-lang.org&lt;&#x2F;a&gt;. And we&#x27;ve
run Haskell experience reports on
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&quot;&gt;FP Complete&#x27;s website&lt;&#x2F;a&gt; many times in the
past.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this time around this message had a bit of a different twist,
and maybe can hit a different group of readers.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Generalizing Type Signatures</title>
		<published>2017-04-20T00:00:00+00:00</published>
		<updated>2017-04-20T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/04/generalizing-type-signatures/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/04/generalizing-type-signatures/</id>
		<content type="html">&lt;p&gt;In each of the following, which is the best version of the type
signature (assume &lt;code&gt;Monad m&lt;&#x2F;code&gt; context)?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m a  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mapM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mapM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;runConduit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Void m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;runConduit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM i  o    m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In each of these cases, the second, more generalized version of the
signature can easily be provided, but the question is, should it be? I
know of the following arguments:&lt;&#x2F;p&gt;
&lt;p&gt;Pro generalized:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why would we artificially limit the generality of our functions?&lt;&#x2F;li&gt;
&lt;li&gt;Having to sprinkle a bunch of &lt;code&gt;void&lt;&#x2F;code&gt;s around is a code smell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Against generalized:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It can allow accidental bugs to slip in by unintentionally ignoring
values&lt;&#x2F;li&gt;
&lt;li&gt;In some cases, the generalized version has
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2017&#x2F;01&#x2F;foldable-mapm-maybe-and-recursive-functions&quot;&gt;worse performance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I don&#x27;t think these points bring anything new to the table: it seems
to me that these trade-offs are fairly well understood, even if not
talked about explicitly often. The other thing I&#x27;d observe is that,
ignoring the issue of performance, this is just a rehashing of the
much more general argument of explicit vs implicit. We can all
acknowledge that with liberal application of &lt;code&gt;void&lt;&#x2F;code&gt; and similar
functions, it&#x27;s always possible to rewrite code relying on the
generalized version to use the specialized version. The question comes
down to that annoying need for throwing in &lt;code&gt;void&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;How do we determine whether we should use generalized or specialized
functions? I&#x27;m starting to follow this procedure:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If there&#x27;s a performance concern, let that take precedence. Having
accidentally slower code due to a desire to make code shorter&#x2F;more
beautiful is a bad trade-off.&lt;&#x2F;li&gt;
&lt;li&gt;If there&#x27;s no performance issue (like with &lt;code&gt;runConduit&lt;&#x2F;code&gt;), it&#x27;s a
completely subjective decision. The facts I&#x27;d look for are examples
of bugs people run into with the generalized version.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;On the bug front, I think it&#x27;s important to point out that, in my
experience, the bugs are less likely to appear during initial code
writing, but during code review and refactoring. When you write
something like &lt;code&gt;when foo getLine&lt;&#x2F;code&gt;, you&#x27;ve probably gone through the
thought process &amp;quot;I&#x27;m just trying to give the user a chance to hit
&amp;lt;ENTER&amp;gt;, and I&#x27;m intentionally ignoring whatever the user entered.&amp;quot;
But during refactoring that may not be so obvious, and some ignored
user input may be surpring. By contrast, &lt;code&gt;when foo (void getLine)&lt;&#x2F;code&gt;
stands out more blatantly.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, in comparing this to the general discussion of explicit vs implicit, I want to point out that there&#x27;s no &amp;quot;one right answer&amp;quot; here. This falls into the same category of &amp;quot;do I define a typeclass&#x2F;interface?&amp;quot;, which is always a judgement call. You can give general guidelines, but I think we can all agree that both extremes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Never define a typeclass for any purpose&lt;&#x2F;li&gt;
&lt;li&gt;Define every single function to be a member of a typeclass&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Are ridiculous oversimplifications that we should not advocate. Same
thing applies here: there are times when a generalized type signature
makes sense, and times when it doesn&#x27;t.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conduit&quot;&gt;Conduit&lt;&#x2F;h2&gt;
&lt;p&gt;As an aside, if anyone is wondering where this random blog post came
from, while working on a presentation on Conduit and Yesod, I
revisited
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;issues&#x2F;283&quot;&gt;an issue from a few months ago&lt;&#x2F;a&gt;
about deprecating older type synonyms
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;pull&#x2F;307&quot;&gt;PR now available&lt;&#x2F;a&gt;),
and was reminded of the ongoing debate around which of the following
is the correct &lt;code&gt;runConduit&lt;&#x2F;code&gt; signature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConduitM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- today
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConduitM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i    o    m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- most general
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConduitM Void Void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- standardize on Void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConduitM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()   ()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;   m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- standardize on unit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The current situation of &lt;code&gt;()&lt;&#x2F;code&gt; for input and &lt;code&gt;Void&lt;&#x2F;code&gt; for output has been
around for a while, and originated with discussions around the
conduit&#x2F;pipes dichotomy. (And in fact,
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-8.11&#x2F;pipes-4.3.2&#x2F;Pipes.html#t:Effect&quot;&gt;pipes today has the same split&lt;&#x2F;a&gt;.)
I&#x27;m not convinced that the split between input and output is a great
thing, so the arguments in favor of each of these signatures seem to
be:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Backwards compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Generalize, avoiding any need for explicit conversion ever, and
avoid the &lt;code&gt;()&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Void&lt;&#x2F;code&gt; debate entirely
&lt;ul&gt;
&lt;li&gt;Note that we won&#x27;t &lt;em&gt;really&lt;&#x2F;em&gt; avoid the debate entirely, since
other parts of conduit will still need to indicate &amp;quot;nothing
upstream&amp;quot; or &amp;quot;nothing downstream&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Most explicit about what we&#x27;re doing: we guarantee that there will
never be any real values yielded from upstream, or yielded
downstream. You can look through the conduit codebase for usages of
&lt;code&gt;absurd&lt;&#x2F;code&gt; to see this play out.&lt;&#x2F;li&gt;
&lt;li&gt;More explicit, but less cognitive overhead of learning about
&lt;code&gt;Void&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I think for now I&#x27;m leaning towards (1), as backwards compat has been
a big guiding principle for me, but the debate is still raging for me.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Enough with Backwards Compatibility</title>
		<published>2017-04-01T00:00:00+00:00</published>
		<updated>2017-04-01T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/04/enough-with-backwards-compatibility/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/04/enough-with-backwards-compatibility/</id>
		<content type="html">&lt;p&gt;To get things started correctly, I&#x27;d like to define backwards
compatibility as the following:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maintaining the invariant that, amongst successive versions of a
library or tool, software using that library or tool continues to
build and execute with matching semantics (though perhaps different
performance characteristics).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is some wiggle room for defining if a change is properly
backwards compatible. If we introduce a new identifier which conflicts
with an old one, this may break a build, but most people accept this
as &amp;quot;backwards compatible enough.&amp;quot; Also, fixing a bug in an
implementation may, in some cases,
&lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;1172&#x2F;&quot;&gt;break something&lt;&#x2F;a&gt;. But let&#x27;s ignore the subtle
cases, and instead just focus on the big picture: I released some new
library, and it changed the type signature of a function, tweaked a
data type, or significantly altered runtime behavior.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s just cut to the chase: striving for backwards compatibility is
stupid, and we should stop doing it. I&#x27;m going to demonstrate why.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-doesn-t-stop-bugs&quot;&gt;It doesn&#x27;t stop bugs&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take as an assumption that you&#x27;re actually writing proper
changelogs for your libraries (seriously, please write proper
changelogs for your libraries). If so, there&#x27;s no reason why backwards
compatibility is useful for preventing bugs.&lt;&#x2F;p&gt;
&lt;p&gt;When you are using a library, you&#x27;re responsible for keeping up to
date with new versions. When a new version of any dependency comes
out, it&#x27;s your sworn duty and sacred obligation to thoroughly review
the changelog and ensure that any changes that may affect you are
addressed in your code. It&#x27;s just the bare minimum of good code
maintenance.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll leave as a given that everyone is using some version of Semantic
Versioning (SemVer), so breaking changes will never accidentally
affect their code bases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-time-well-spent&quot;&gt;It&#x27;s time well spent!&lt;&#x2F;h2&gt;
&lt;p&gt;This may sound like a lot of time invested on a maintainers
part. While it certainly takes some effort, this is an investment in
your future, not just an expenditure. Requiring this maintenance level
from library authors is a great forcing function:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It proves you&#x27;re serious about maintaining your code. When I&#x27;m
choosing between different libraries for a task, the library with
regular updates to address changes in dependencies is always the
higher quality one.&lt;&#x2F;li&gt;
&lt;li&gt;Conversely, a lack of frequent updates tells you that you shouldn&#x27;t
trust a piece of code. Bitrot is no joke; code gets bad over time!
Having something that forces you to change code regularly is the
best way to avoid bitrot.&lt;&#x2F;li&gt;
&lt;li&gt;It properly penalizes you for using too many
dependencies. Encouraging decreased dependencies is a great way to
avoid dependency problems!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;failure-cases&quot;&gt;Failure cases&lt;&#x2F;h2&gt;
&lt;p&gt;I want to take as a case example two well-known cases of well
maintained backwards compatibility, and demonstrate how destructive it
is.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;java&quot;&gt;Java&lt;&#x2F;h3&gt;
&lt;p&gt;Java is well known as an ecosystem that prefers stability over
elegance, and we can see that this has led to a completely dead,
non-viable platform. When generics were added to Java, they had the
choice to either break their existing containers APIs, or add a brand
new API. As we know, they made the foolish choice to introduce a brand
new API, creating clutter (we &lt;em&gt;hate&lt;&#x2F;em&gt; clutter!).&lt;&#x2F;p&gt;
&lt;p&gt;But worse: it allowed old code to continue to run unmodified. How can
we trust that that code is any good if no one has been forced to
update it to newer APIs? They wasted a great opportunity for a quality
forcing function on the entire ecosystem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sqlite3&quot;&gt;sqlite3&lt;&#x2F;h3&gt;
&lt;p&gt;Once again seriously: sqlite3 is probably the most
&lt;a href=&quot;http:&#x2F;&#x2F;sqlite.org&#x2F;capi3ref.html&quot;&gt;well designed C API&lt;&#x2F;a&gt; I&#x27;ve ever seen,
and by far the best low-level database API I&#x27;ve seen. Everything seems
great with it.&lt;&#x2F;p&gt;
&lt;p&gt;But unfortunately, a few functions were misdesigned. For example, the
&lt;code&gt;sqlite3_prepare&lt;&#x2F;code&gt; function was designed in such a way, leading to
degraded error reporting behavior. To rectify this situation, the
author made the (misguided) decision to introduce a new API,
&lt;code&gt;sqlite3_prepare_v2&lt;&#x2F;code&gt;, with a different type signature, which allows
for better error reporting. (You can
&lt;a href=&quot;http:&#x2F;&#x2F;sqlite.org&#x2F;capi3ref.html#sqlite3_prepare&quot;&gt;read the details yourself&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;This allows existing programs to continue to compile and run
unmodified, even allowing them to upgrade to newer sqlite3 versions to
get performance and stability enhancements. What a disaster!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s nothing forcing programmers to use the newer, better API&lt;&#x2F;li&gt;
&lt;li&gt;The API just &lt;em&gt;looks&lt;&#x2F;em&gt; ugly. Who in the world wants a &lt;code&gt;_v2&lt;&#x2F;code&gt; suffix?
Terrible!&lt;&#x2F;li&gt;
&lt;li&gt;Someone might accidentally use the old version of the
function. Sure, it&#x27;s well documented in the API docs to use the new
one, but unlike changelogs, no one actually reads API docs. Even in
a language like Haskell with a deprecation mechanism it wouldn&#x27;t
matter, since everyone just ignores warnings.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Obviously, the right decision was to create a new major version of
sqlite (sqlite4), rename all of the functions, update the changelog,
and force everyone to update their codebases. Why the author didn&#x27;t
see this is beyond me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamically-typed-languages&quot;&gt;Dynamically typed languages&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you go ahead and make a breaking change to a library in a
dynamically typed language. Obviously all of your users should just
read the changelog and update their code appropriately. There&#x27;s no
compiler to enforce things of course, so it&#x27;s more likely that things
will fail at runtime. That&#x27;s fine, if you&#x27;re using a dynamically typed
language you deserve to have your code break.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;statically-typed&quot;&gt;Statically typed&lt;&#x2F;h2&gt;
&lt;p&gt;The story with statically typed languages is—as
always—better. There are two kinds of breaking changes we should
discuss.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changed-type-signature&quot;&gt;Changed type signature&lt;&#x2F;h3&gt;
&lt;p&gt;Or more broadly: things that lead to a compiler error. I don&#x27;t even
understand why people talk about these. The compiler tells you exactly
what you need to do. This is redundant information with the changelog!
How dense can you be! Just try to compile your code and fix things. It
couldn&#x27;t be easier. I can&#x27;t even right now.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;semantic-change&quot;&gt;Semantic change&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes a function keeps its signature but changes its behavior,
leading to code which will compile but behave differently. Sure,
that&#x27;s bad, but if you&#x27;re too lazy to read the changelog and
meticulously go through your codebase to see if you&#x27;re affected in any
way, you shouldn&#x27;t be writing software.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope we can put this silly discussion to bed already. Break APIs!
Not only does it lead to more beautiful libraries, but the forced
breakage is good for the ecosystem. I hope the software engineering
community can finally start to take responsibility for doing proper
software maintenance.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Better Exception Messages</title>
		<published>2017-02-16T00:00:00+00:00</published>
		<updated>2017-02-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/02/better-exception-messages/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/02/better-exception-messages/</id>
		<content type="html">&lt;h1 id=&quot;better-exception-messages&quot;&gt;Better exception messages&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s write a really silly, highly inefficient (my favorite kind!) program that
connects to multiple HTTP servers and sends a very simple request. Using the
network package, this is really straightforward:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --install-ghc --resolver lts-8.0 runghc --package network -- -Wall -Werror
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Network       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(PortNumber), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;connectTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.IO     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hClose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hPutStrLn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)]
dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    [ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;10.0.0.138&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    ]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forM dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(host, port) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; connectTo host (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; port)
    forM_ handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hPutStrLn h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &#x2F; HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    forM_ handles hClose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have our destinations. We open a connection to each of them, send our data,
and then close the connection. You may have plenty of objections to how I&#x27;ve
written this: we shouldn&#x27;t be using &lt;code&gt;String&lt;&#x2F;code&gt;, shouldn&#x27;t we flush the &lt;code&gt;Handle&lt;&#x2F;code&gt;,
etc. Just ignore that for now. I&#x27;m going to run this on my local system, and
get the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ .&#x2F;foo.hs 
foo.hs: connect: does not exist (Connection refused)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Riddle me this: which of the destinations above did the connection fail for?
Answer: without changing our program, we have no idea. And that&#x27;s the point of
this blog post: all too often in the Haskell world, we get error messages from
a program without nearly enough information to debug it. &lt;code&gt;Prelude.undefined&lt;&#x2F;code&gt;,
&lt;code&gt;Prelude.read: no parse&lt;&#x2F;code&gt;, and &lt;code&gt;Prelude.head: empty list&lt;&#x2F;code&gt; are all infamous
examples where a nice stack trace would save lots of pain. I&#x27;m talking about
something slightly different.&lt;&#x2F;p&gt;
&lt;p&gt;When you throw an exception in your code, whether it be via &lt;code&gt;throwIO&lt;&#x2F;code&gt;,
returning &lt;code&gt;Left&lt;&#x2F;code&gt;, using &lt;code&gt;fail&lt;&#x2F;code&gt;, or using &lt;code&gt;error&lt;&#x2F;code&gt;, please &lt;em&gt;give us some
context&lt;&#x2F;em&gt;. During development, it&#x27;s a pain to have to dive into the code, add
some trace statements, figure out what the actual problem is, and then remove
the trace statements. When running in production, that extra information can be
the difference between a two-minutes operations level fix (like opening a port
in the firewall) versus a multi-hour debugging excursion.&lt;&#x2F;p&gt;
&lt;p&gt;Concretely, here&#x27;s an example of how I&#x27;d recommend collecting more information
from &lt;code&gt;connectTo&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --install-ghc --resolver lts-5.10 runghc --package network -- -Wall -Werror
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; DeriveDataTypeable #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IOException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;throwIO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Typeable     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Network           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HostName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(PortNumber), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;connectTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.IO         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hClose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hPutStrLn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConnectException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConnectException HostName PortID IOException
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Exception ConnectException

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;connectTo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO Handle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;connectTo&amp;#39; host port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; connectTo host port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`catch`
    \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; throwIO (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConnectException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; host port e)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)]
dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    [ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;10.0.0.138&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    ]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forM dests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(host, port) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; connectTo&amp;#39; host (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PortNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; port)
    forM_ handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hPutStrLn h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GET &#x2F; HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\r\n\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    forM_ handles hClose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the &lt;code&gt;ConnectException&lt;&#x2F;code&gt; datatype provides plenty of information about
the context that &lt;code&gt;connectTo&#x27;&lt;&#x2F;code&gt; was called from (in fact, &lt;em&gt;all&lt;&#x2F;em&gt; available
information). If I run this program, the problem is immediately obvious:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ .&#x2F;bar.hs 
bar.hs: ConnectException &amp;quot;localhost&amp;quot; (PortNumber 80) connect: does not exist (Connection refused)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My web server isn&#x27;t running locally on port 80. My ops team can now go kick the
nginx&#x2F;Warp process or do whatever other magic they need to do to get things
running. All without bothering me at 2am :)&lt;&#x2F;p&gt;
&lt;p&gt;You may be thinking that this extra data type declaration is a lot of
boilerplate overhead. While it does add some tedium, the benefit of being able
to not only catch the exact exception we care about, but also easily extract
the relevant context information, can pay off in completely unexpected ways in
the future. I highly recommend it.&lt;&#x2F;p&gt;
&lt;p&gt;Since no Haskell blog post about exceptions is complete without it, let me
cover some controversy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I know some people absolutely hate runtime exceptions. This point is
orthogonal: however you decide to report exceptions to your users (&lt;code&gt;Left&lt;&#x2F;code&gt;,
&lt;code&gt;ExceptT&lt;&#x2F;code&gt;, impure exceptions, etc), be kind to them and provide this extra
context information.&lt;&#x2F;li&gt;
&lt;li&gt;There are some problems with the approach I gave above regarding hierarchical
exceptions. I&#x27;m specifically &lt;em&gt;not&lt;&#x2F;em&gt; diving into the details of hierarchical
exceptions right now, since it&#x27;s a complex topic that deserves its own
dedicated post.&lt;&#x2F;li&gt;
&lt;li&gt;Similar to the above point, it&#x27;s a fair question whether you should group all
exceptions together in one type with lots of data constructors for a
package&#x2F;module, or create lots of separate datatypes. Again, proper design of
an exception type really deserves its own post. FWIW, in http-client, I
elected to have an &lt;code&gt;HttpException&lt;&#x2F;code&gt; type with lots of data constructors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, I left it out for brevity, but including a &lt;code&gt;displayException&lt;&#x2F;code&gt; method in
your &lt;code&gt;Exception&lt;&#x2F;code&gt; instance can allow programs to display much more user-friendly
error messages to end users.&lt;&#x2F;p&gt;
&lt;p&gt;While nothing I&#x27;ve said here is revolutionary, it&#x27;s a small tweak to a library
author&#x27;s development style that can have a profound impact on users of the
library, both at the dev level and those running the executable itself.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hackage Security and Stack</title>
		<published>2017-02-14T00:00:00+00:00</published>
		<updated>2017-02-14T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/02/hackage-security-stack/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/02/hackage-security-stack/</id>
		<content type="html">&lt;p&gt;Back in 2015, there were two proposals made for securing package
distribution in Haskell. The Stackage team proposed and implemented a
solution using HTTPS and Git, which was then used as the default in
Stack. Meanwhile, the Hackage team moved ahead with
hackage-security. Over the past few weeks, I&#x27;ve been working on moving
Stack over to hackage-security (more on motivation below). The current
status of the overall hackage-security roll-out is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hackage is now providing the relevant data for hackage-security (the
01-index.tar file and signature files)&lt;&#x2F;li&gt;
&lt;li&gt;cabal-install will move over to hackage-security in its next release&lt;&#x2F;li&gt;
&lt;li&gt;The FP Complete Hackage mirror is using hackage-security (and in
particular
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hvr&#x2F;hackage-mirror-tool&quot;&gt;Herbert&#x27;s hackage-mirror-tool&lt;&#x2F;a&gt;)
to run its
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;09&#x2F;updated-hackage-mirroring&quot;&gt;S3-backed mirror&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;On the master branch, Stack defaults to using hackage-security for
downloading package metadata. We may even
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;tree&#x2F;drop-git-index&quot;&gt;remove support for Git-based indices entirely&lt;&#x2F;a&gt;,
but that&#x27;s a discussion for another day.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One upside to this is more reliable package index download time. We
have had complaints from some firewalled users of slow Git clone time,
so this is a good thing. We&#x27;re still planning on maintaining the
Git-based package indices for people using them (to my knowledge they
are still being used by Nix, and all-cabal-metadata is still used to
power a lot of the information on stackage.org).&lt;&#x2F;p&gt;
&lt;p&gt;However, there&#x27;s one significant downside I&#x27;ve encountered in the
current implementation that I want to discuss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;Quick summary of how hackage-security works: there is a &lt;code&gt;01-index.tar&lt;&#x2F;code&gt;
file, the contents of which I&#x27;ll discuss momentarily. This is the file
which is downloaded by Stack&#x2F;cabal-install when you &amp;quot;update your
index.&amp;quot; It is signed by a cryptographic algorithm specified within the
hackage-security project, and whenever a client does an update, it
must verify the signature. In theory, when that signature is verified,
we know that the contents of the &lt;code&gt;01-index.tar&lt;&#x2F;code&gt; file are unmodified.&lt;&#x2F;p&gt;
&lt;p&gt;Within this file are two (relevant) kinds of files: the &lt;code&gt;.cabal&lt;&#x2F;code&gt; files
for every upload to Hackage (including revisions), and &lt;code&gt;.json&lt;&#x2F;code&gt; files
containing metadata about the package tarballs
themselves. Importantly, this includes a SHA256 checksum and the size
of the tarball. Using these already-validated-to-be-correct JSON
files, we can download and verify a package tarball, even over an
insecure connection.&lt;&#x2F;p&gt;
&lt;p&gt;The alternative Git-based approach that the Stackage team proposed has
an almost-identical JSON file concept in the all-cabal-hashes
repo. Originally, these were generated by downloading tarballs from
https:&#x2F;&#x2F;hackage.haskell.org (note the HTTPS). However, a number of
months back it became known that the connection between the CDN in
front of Hackage and Hackage itself was not TLS-secured, and therefore
reliance on HTTPS was not possible. We now rely on the JSON files
provided by hackage-security to generate the JSON files used in the
Git repo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;With that background, the bug is easy to describe: sometimes the
&lt;code&gt;.json&lt;&#x2F;code&gt; files are missing from the &lt;code&gt;01-index.tar&lt;&#x2F;code&gt; file. This was
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-server&#x2F;issues&#x2F;488&quot;&gt;originally opened in April 2016&lt;&#x2F;a&gt;
(for Americans: on tax day no less), and then
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;issues&#x2F;183&quot;&gt;I rediscovered the issue three weeks ago&lt;&#x2F;a&gt;
when working on Stack.&lt;&#x2F;p&gt;
&lt;p&gt;Over the weekend, another &lt;code&gt;.json&lt;&#x2F;code&gt; file went missing, resulting in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hvr&#x2F;hackage-mirror-tool&#x2F;issues&#x2F;2&quot;&gt;the FP Complete mirror not receiving updates&lt;&#x2F;a&gt;
until I
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hvr&#x2F;hackage-mirror-tool&#x2F;pull&#x2F;3&quot;&gt;manually updated the list of missing index files&lt;&#x2F;a&gt;.
Due to the inability to securely generate the &lt;code&gt;.json&lt;&#x2F;code&gt; file in the
&lt;code&gt;all-cabal-hashes&lt;&#x2F;code&gt; Git repo without the file existing upstream, that
file is now missing in &lt;code&gt;all-cabal-hashes&lt;&#x2F;code&gt;, causing downstream issues
to the Nix team.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-manifests&quot;&gt;How it manifests&lt;&#x2F;h2&gt;
&lt;p&gt;There are a number of outcomes to be aware of from this issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The FP Complete mirror, and any other mirror using Herbert&#x27;s tool,
will sometimes stop updating if a new JSON file is missing. This is
an annoyance for end users, and a frustration for the mirror
maintainers. Fortunately, updating the mirror tool code with the
added index isn&#x27;t too heavy a burden. Unfortunately, due to the lack
of HTTPS between Hackage and its CDN, there&#x27;s no truly secure way to
do this update.&lt;&#x2F;li&gt;
&lt;li&gt;End users cannot currently use packages securely if they are
affected by this bug. You can
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;hackage-mirror-tool&#x2F;blob&#x2F;c58d3fe3ab893e57346130bae2e5906c0efedc4a&#x2F;src&#x2F;IndexShaSum.hs#L161&quot;&gt;see the full list&lt;&#x2F;a&gt;
at the time of writing this post.&lt;&#x2F;li&gt;
&lt;li&gt;Stack has had code in place to reject indices that do not provide
complete signature cover for a long while (I &lt;em&gt;think&lt;&#x2F;em&gt; since its
initial release). Unfortunately, this code cannot be turned on for
hackage-security (which is how I discovered this bug in the first
place). We can implement a new functionality with weaker
requirements (refuse to download a package that is missing signature
information), but ideally we could use the more strict semantics.&lt;&#x2F;li&gt;
&lt;li&gt;The Nix team cannot rely on hashes being present in
&lt;code&gt;all-cabal-hashes&lt;&#x2F;code&gt;. I can&#x27;t speak to the Nix team internal
processes, and cannot therefore assess how big an impact that is.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Overall, I&#x27;m still very happy that we&#x27;ve moved Stack over to
hackage-security:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It fixed an immediate problem for users behind a firewall, which we
otherwise would have needed to work around with new code
(downloading a Git repo snapshot). Avoiding writing new code is
always a win :).&lt;&#x2F;li&gt;
&lt;li&gt;Layering the HTTPS&#x2F;Git-based security system on top of
hackage-security doesn&#x27;t make things more secure, it just adds two
layers for security holes to exist in instead of one. From a
security standpoint, if Hackage is providing a security mechanism,
it makes sense to leverage it directly. Said another way: if it
turns out that hackage-security is completely insecure, our
Git-based layer would have been vulnerable anyway since it relied on
hackage-security.&lt;&#x2F;li&gt;
&lt;li&gt;By moving both Stack and cabal-install over to hackage-security for
client access, we&#x27;ll be able to test that code more thoroughly,
hopefully resulting in a more reliable security mechanism for both
projects to share
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;hackage-security&#x2F;issues&#x2F;184&quot;&gt;small example of such stress-testing&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Stack has always maintained compatibility with some form of non-Git
index, so we&#x27;ve always had two code paths for index updates. As
hinted at above, this change opens the door to removing the
Git-based code path. And removing code is almost as good as avoiding
writing new code.&lt;&#x2F;li&gt;
&lt;li&gt;I would still feel more comfortable with the security of Hackage if
HTTPS was used throughout, if only as a level of sanity in case all
else fails. I hope that in the future the connection between Hackage
and its CDN switches from insecure to secure. I also hope that
cabal-install is still planning on moving over to using HTTPS for
its downloads.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stackage design choices: making Haskell curated package sets</title>
		<published>2017-01-23T00:00:00+00:00</published>
		<updated>2017-01-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/stackage-design-choices/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/stackage-design-choices/</id>
		<content type="html">&lt;p&gt;This post is going to talk about some of the design choices made over
the years around the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage#readme&quot;&gt;Stackage project&lt;&#x2F;a&gt;, a curated
package set for Haskell. While many of these points will be Haskell-
and Stackage-specific, I think the ideas would translate well to other
languages interested in created curated package sets. This blog post
was inspired by a short discussion on Twitter, which made it clear
that I&#x27;d never really shared design thoughts on the Stackage project:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;@snoyberg&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;iElectric&quot;&gt;@iElectric&lt;&#x2F;a&gt; sounds like you&amp;#39;ve put already a lot of thought into that. would luv to learn more about!&lt;&#x2F;p&gt;&amp;mdash; Haskell Dev (@haskdev) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;haskdev&#x2F;status&#x2F;821085009763246081&quot;&gt;January 16, 2017&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async src=&quot;&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;In understanding why Stackage is the way it is today, it will be
important to take into account:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The goals of the project&lt;&#x2F;li&gt;
&lt;li&gt;The historical circumstances when decisions were made&lt;&#x2F;li&gt;
&lt;li&gt;Social pressures in the community agitating for specific decisions&lt;&#x2F;li&gt;
&lt;li&gt;Inertia in the project making significant changes difficult&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apologies in advance, this turned out longer than I&#x27;d intended.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h2&gt;
&lt;p&gt;Before Stackage, the most common way to find a set of libraries to use
in a Haskell project was using cabal-install&#x27;s dependency solver,
based on bounds information specified by authors. There were certainly
some efforts at creating curated package sets previously (Haskell
Platform provided a limited set; the Yesod Platform provided a full
set of packages for the Yesod Web Framework; various Linux distros had
binary packages). But I think it&#x27;s fair to say that the vast majority
of people writing Haskell code were using dependency solving.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to get into the argument of dependency solving vs
curation here. I will simply say that for many people - myself
included - having official combinations of packages which are known to
compile together, and which can be given to end users and teammates on
a project, was very appealing. This was the motivation for my
&lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;11&#x2F;stable-vetted-hackage&quot;&gt;initial Stackage call for participation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While the primary goal - create curated package sets - is obvious, the
secondary goals are not. In fact, many of them only really became
clear to me in 20-20 hindsight:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Require as little maintenance as possible. Stackage should be as
much an automated process as can be created, since human time is a
valuable, scarce resource. In other words: I&#x27;m lazy :).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Require as little change in behavior from package authors as
possible. In my opinion, the only reasonable way to bootstrap a
project is to make it trivial for people to participate. The barrier
to entry for Stackage had to be minimal.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Even past the &amp;quot;bootstrapping&amp;quot; phase, a nice quality of &lt;em&gt;any&lt;&#x2F;em&gt;
system is requiring little effort on the part of
users. Therefore, even today, where Stackage is arguably
successful and well-established, this goal still applies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It needed to work well with existing tooling. In 2012, the Stack
project hadn&#x27;t even been dreamt up yet, so figuring out a way to
work with cabal-install (via the cabal.config file) was
vital. Compatibility with cabal-install is still a nice thing today,
but not nearly as vital as it was then.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We need to maximize the number of packages that can be included in
a single snapshot. The two ways in which two packages can be
incompatible are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is an actual incompatibility in the API, such as a
function being removed or its type signature changed in a new
release of a dependency.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There is a stated upper or lower bound in a package which
precludes a build plan, but the code itself would actually
compile. (This is the case &lt;code&gt;--allow-newer&lt;&#x2F;code&gt; is designed for.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;initial-choices&quot;&gt;Initial choices&lt;&#x2F;h3&gt;
&lt;p&gt;Based on these goals, I created the initial version of Stackage. While
many decisions came into play (e.g., what file format should we use to
let package authors submit packages?), I&#x27;m going to focus on the
interesting choices that fell out of the goals above, and which today
may be noteworthy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As I&#x27;d learnt from maintaining Yesod, many Windows users in
particular were using the Haskell Platform (HP), and trying to
specify different versions of packages from what HP provided could
cause problems. Therefore, it was important to keep compatibility
with the Haskell Platform set of packages. This resulted in multiple
builds of Stackage: a &amp;quot;current GHC&amp;quot;, &amp;quot;previous GHC&amp;quot;, and &amp;quot;Haskell
Platform superset.&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We should always try to take the latest available version of a
package, as it may include bug fixes, feature enhancements, and
generally because the Haskell community loves the bleeding edge
:). However, there would be cases where a new version of a package
caused enough breakage to warrant holding it back, so some concept
of enforced upper bounds was necessary too.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It was theoretically possible to ignore version bound information
in cabal files, and instead ensure compatibility based on
compiling and running test suites. However, this would have some
serious downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Users would have regularly needed to run builds with
&lt;code&gt;--allow-newer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If there were non-API-breaking semantic changes in a package, a
version bound was present to avoid those changes, and there was
no test suite to cover that behavior, ignoring bounds would
cause those semantic changes to slip in (in my experience, this
is an exceedingly rare case, but it can happen)&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s arguably very confusing behavior that a package set
specifies versions of packages which claim to be incompatible
with each other&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Therefore, version bounds needed to be respected. However...&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Due to the frequency of overly restrictive version bounds and
trivial compatibility patches which were slow to make it upstream,
Stackage allowed for locally modified packages. That means that, for
example, Stackage snapshot &lt;code&gt;foo&lt;&#x2F;code&gt; could have a different set of code
associated with &lt;code&gt;mtl-2.2.1&lt;&#x2F;code&gt; than what Hackage reports. Note that
this feature was more aggressive than Hackage cabal file revisions,
in that it allowed the code itself to change, not just the cabal
file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These decisions lasted for (IIRC) about a year, and were overall
successful at letting Stackage become a thriving project. I was soon
able to &lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2014&#x2F;08&#x2F;deprecating-yesod-platform&quot;&gt;shut down the Yesod Platform initiative&lt;&#x2F;a&gt;
in favor of Stackage,
which was a huge relief for me. At this point, outside of the Yesod
community, I think Stackage was viewed mostly as a &amp;quot;ecosystem-wide CI
system&amp;quot; than something for end users. It wasn&#x27;t until Stack defaulted
to Stackage snapshots that end users en masse started using Stackage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;changes-over-time&quot;&gt;Changes over time&lt;&#x2F;h2&gt;
&lt;p&gt;Stackage today is quite a bit different from the above decisions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I eventually dropped the Haskell Platform superset. There was a
time when that package set wasn&#x27;t updated, and the complication of
trying to find a compatible set of packages on top of it was simply
too high. In addition, HP included a version of aeson with a
significant security hole (DoS attack with small inputs), and
continuing to supply such a package set was not something I felt
comfortable doing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Due to the burden of maintaining bleeding-edge Stackages for
multiple GHC versions - both on myself as the curator and on package
authors - I also dropped support for older GHC releases. Instead, I
introduced LTS Haskell, which keeps compatibility with older GHCs
without adding (significant) package author burden.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When working on the GPS Haskell collaboration, I removed support for
locally modified packages. This was done due to requests from the
Hackage and Haskell Platform maintainers, who wanted a single
definition of a package. With this change, unresponsive package
maintainers can really hold things up in Stackage. However, this
overall led to a number of simplifications in code, and ultimately
allowed for better binary cache support in Stack. So despite the
initial pain, I think this was a good change.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Hackage revisions make it possible for a package set to contain
packages which are no longer compatible by their latest cabal
files. Therefore, we needed to add support to Stackage to track
which version of a cabal file was included in a snapshot, not just
the version of the package itself. I only mention this here because
it weakens our previous decision to respect cabal file constraints
due to avoiding user confusion.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We have an expanded team! I&#x27;m happy to say that I am now one of five
Stackage curators, and no longer have to either handle all the work
myself, or make unilateral decisions. In other words, I get to share
the blame with others :). Many thanks to Adam Bergmark, Dan Burton,
Jens Petersen, and our newest member, Luke Murphy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;changes-to-consider-today&quot;&gt;Changes to consider today&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, this post has turned out way longer than I&#x27;d expected,
apologies for this. I guess there was more decision making that
occurred than I&#x27;d realized. Anyway, I hope that gives some context for
where things are at today. Which brings us to the original discussion
that brought this whole blog post into existence: should we be
changing anything about Stackage? Here are some changes either
proposed by others or that I&#x27;ve thought of, and some remarks.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The curator team overall has been pretty lax about booting packages
that block newer versions of dependencies. There have definitely
been calls for us to be more proactive about that, and aggressively
kick out packages that are holding back dependencies.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pros: Stackage Nightly will live up to its bleeding edge mission
statement more effectively, we&#x27;ll overall have less incidental
pain on package authors who are staying up to date with their
dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cons: it will decrease the number of packages in Stackage
Nightly for end users, and adds extra burden on package authors
to be more quick to respond to requests.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;As a relaxed version of the above: be stricter with package authors,
but only in the case of cabal file upper bounds. The argument here
is stronger, since the work required is fairly minimal, and - at
least in my experience - waiting for relaxed upper bounds is what
takes up a lot of the time when curating. An extreme version of this
is demanding that
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;haskdev&#x2F;status&#x2F;820932892385808384&quot;&gt;upper bounds just be removed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Or an interesting alternative to that: should Stackage simply ignore
constraints in cabal files entirely? It would be fairly easy to
extend Stack to recognize a flag in snapshots to say &amp;quot;ignore the
constraints when building,&amp;quot; or even make that the default behavior.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pros: less time spent on bounds issues, Stackage doesn&#x27;t get
held back by trivial version bounds issues, for PVP bounds
enthusiasts could encourage people to add bounds during upload
more often (not sure of that).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cons: cabal users with Stackage snapshots wouldn&#x27;t have as nice
a time, it could be confusing for users, and if the upper bounds
are in place due to semantic changes we won&#x27;t catch it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since GPS Haskell isn&#x27;t happening, we could add back the ability for
the Stackage curator team to modify packages (both cabal files and
source files). I think the pros and cons of this were pretty well
established above, I&#x27;m not going to repeat it here.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;People have asked for running multiple nightly lines with different
GHC versions.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pros: instead of haven&#x27;t slightly outdated LTS versions for
older GHCs, we&#x27;d have bleeding edge all over again.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cons: we&#x27;d need new naming schemes for snapshots, a lot more
work for the curator team, and potentially a lot more work for
package authors who would need to maintain further GHC
compatibility with their most recent releases.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;ve had some private discussions around this, and thought I should share the
idea here. Right now, Stackage requires that any package added must be
available on Hackage. A number of newer build systems have been going the route
of allowing packages to be present only in a Git repository. Stack has built-in
support for specifying such locations, but snapshots do not support it. Should
we add support to Stackage to allow packages to be pulled from places besides
Hackage?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pros: knocks down another barrier to entry for publishing packages.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cons: Stackage snapshots will not automatically work with cabal-install
anymore, extra work to be done to make this functional, and some issues
around determining who owns a package name need to be worked out.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are likely other changes that I haven&#x27;t mentioned, feel free to
raise them in the comments below. Also, if anyone really wants to
follow up on these topics, the best place to do that is
&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;forum&#x2F;stackage&quot;&gt;the Stackage mailing list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Follow up on mapM_</title>
		<published>2017-01-19T00:00:00+00:00</published>
		<updated>2017-01-19T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/follow-up-mapm/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/follow-up-mapm/</id>
		<content type="html">&lt;p&gt;This is a short follow-up to my
&lt;a href=&quot;&#x2F;blog&#x2F;2017&#x2F;01&#x2F;foldable-mapm-maybe-and-recursive-functions&quot;&gt;blog post about mapM_ and Maybe&lt;&#x2F;a&gt;. Roman
Cheplyaka &lt;a href=&quot;http:&#x2F;&#x2F;disq.us&#x2F;p&#x2F;1f5uz82&quot;&gt;started a discussion&lt;&#x2F;a&gt; on that
post, and ultimately we came up with the following implementation of
&lt;code&gt;mapM_&lt;&#x2F;code&gt; which works for all &lt;code&gt;Foldable&lt;&#x2F;code&gt;s and avoids the
non-tail-recursive case for &lt;code&gt;Maybe&lt;&#x2F;code&gt; as desired:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mapM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Applicative m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Foldable f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;mapM_ f a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    go (toList a)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; pure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    go [x] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- here&amp;#39;s the magic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    go (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;xs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f x *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; go xs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why is this useful? If you implement &lt;code&gt;mapM_&lt;&#x2F;code&gt; directly in terms of
&lt;code&gt;foldr&lt;&#x2F;code&gt; or &lt;code&gt;foldMap&lt;&#x2F;code&gt;, there is no way to tell that you are currently
looking at the last element in the structure, and therefore will
always end up with the equivalent of &lt;code&gt;f x *&amp;gt; pure ()&lt;&#x2F;code&gt; in your expanded
code. By contrast, with explicit pattern matching on the list-ified
version, we can easily pattern match with &lt;code&gt;go [x]&lt;&#x2F;code&gt; and avoid &lt;code&gt;*&amp;gt; pure ()&lt;&#x2F;code&gt; bit, thereby making tail recursion possible.&lt;&#x2F;p&gt;
&lt;p&gt;Some interesting things to note:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;() &amp;lt;$ f x&lt;&#x2F;code&gt; instead of &lt;code&gt;f x *&amp;gt; pure ()&lt;&#x2F;code&gt; or &lt;code&gt;f x &amp;gt;&amp;gt; return ()&lt;&#x2F;code&gt;
seemed to make no difference for tail recursion purposes.&lt;&#x2F;li&gt;
&lt;li&gt;As a result of that, we still need to have the &lt;code&gt;()&lt;&#x2F;code&gt;-specialized type
signature I describe in the previous blog post, there doesn&#x27;t seem
to be a way around that.&lt;&#x2F;li&gt;
&lt;li&gt;As you can see from the benchmark which I
&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;2239e7601306371058ca0e5650dfcd2d&quot;&gt;unceremoniously ripped off from Roman&lt;&#x2F;a&gt;,
there do not appear to be cases where this version has more memory
residency than &lt;code&gt;mapM_&lt;&#x2F;code&gt; from &lt;code&gt;base&lt;&#x2F;code&gt;. Roman had raised the concern
that the intermediate list may involve extra allocations, though it
appears that GHC is smart enough to avoid them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are the results. Notice the significantly higher residency
numbers for &lt;code&gt;base&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;   5000      roman          36,064 bytes
   5000    michael          36,064 bytes
   5000       base          36,064 bytes
  50000      roman          36,064 bytes
  50000    michael          36,064 bytes
  50000       base         133,200 bytes
 500000      roman          44,384 bytes
 500000    michael          44,384 bytes
 500000       base       2,354,216 bytes
5000000      roman          44,384 bytes
5000000    michael          44,384 bytes
5000000       base      38,235,176 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My takeaway from all of this: it&#x27;s probably too late to change the
type signature of &lt;code&gt;mapM_&lt;&#x2F;code&gt; and &lt;code&gt;forM_&lt;&#x2F;code&gt; in &lt;code&gt;base&lt;&#x2F;code&gt;, but this alternative
implementation is a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;mono-traversable&#x2F;pull&#x2F;121&quot;&gt;good fit for mono-traversable&lt;&#x2F;a&gt;. Perhaps
there are some rewrite rules that could be applied in &lt;code&gt;base&lt;&#x2F;code&gt; to get
the benefits of this implementation as well.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Completely tangential, but: as long as I&#x27;m linking to pull requests
based on blog posts, I&#x27;ve
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;mono-traversable&#x2F;pull&#x2F;120&quot;&gt;put together a PR&lt;&#x2F;a&gt;
for classy-prelude and conduit-combinators that gets rid of
generalized I&#x2F;O operations, based on my
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;12&#x2F;beware-of-readfile&quot;&gt;readFile blog post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>safe-prelude: a thought experiment</title>
		<published>2017-01-16T00:00:00+00:00</published>
		<updated>2017-01-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/safe-prelude-a-thought-experiment/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/safe-prelude-a-thought-experiment/</id>
		<content type="html">&lt;p&gt;This blog post is to share a very rough first stab at a new prelude I
played around with earlier this month. I haven&#x27;t used it in any
significant way, and haven&#x27;t spent more than a few hours on it
total. I wrote it because I knew it was the only way to get the idea
out of my head, and am sharing it in case anyone finds the idea
intriguing or useful.&lt;&#x2F;p&gt;
&lt;p&gt;The project is available
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;safe-prelude#readme&quot;&gt;on Github at snoyberg&#x2F;safe-prelude&lt;&#x2F;a&gt;,
and I&#x27;ve
&lt;a href=&quot;&#x2F;static&#x2F;safe-prelude&#x2F;SafePrelude.html&quot;&gt;uploaded the Haddocks for easier reading&lt;&#x2F;a&gt;
(though, be warned, they aren&#x27;t well organized at all). The rest of
this post is just a copy of the &lt;code&gt;README.md&lt;&#x2F;code&gt; file for the project.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is a thought experiment in a different point in the alternative
prelude design space. After my
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;12&#x2F;beware-of-readfile&quot;&gt;blog post on readFile&lt;&#x2F;a&gt;,
I realized I was unhappy with the polymorphic nature of &lt;code&gt;readFile&lt;&#x2F;code&gt; in
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;classy-prelude&quot;&gt;classy-prelude&lt;&#x2F;a&gt;. Adding
that with
&lt;a href=&quot;http:&#x2F;&#x2F;lorepub.com&#x2F;post&#x2F;2016-12-17-Haskell-Pitfalls&quot;&gt;Haskell Pitfalls&lt;&#x2F;a&gt;
I&#x27;ve been itching to try something else. I have a lot of hope for the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-foundation&#x2F;foundation#readme&quot;&gt;foundation project&lt;&#x2F;a&gt;,
but wanted to play with this in the short term.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choices&quot;&gt;Choices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No partial functions, period. If a function can fail, its return
type must express that. (And for our purposes: &lt;code&gt;IO&lt;&#x2F;code&gt; functions with
runtime exceptions are &lt;em&gt;not&lt;&#x2F;em&gt; partial.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Choose best in class libraries and promote them. &lt;code&gt;bytestring&lt;&#x2F;code&gt; and
&lt;code&gt;text&lt;&#x2F;code&gt; fit that bill, as an example. Full listing below.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Regardless of the versions of underlying libraries, this package
will always export a consistent API, so that CPP usage should be
constrained to just inside this package.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use generalization (via type classes) when they are well
established. For example: &lt;code&gt;Foldable&lt;&#x2F;code&gt; and &lt;code&gt;Traversable&lt;&#x2F;code&gt; yes,
&lt;code&gt;MonoFoldable&lt;&#x2F;code&gt; no.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Controversial&lt;&#x2F;em&gt; Avoid providing list-specific functions. This
connects to the parent point. Most of the time, I&#x27;d argue that
lists are &lt;em&gt;not&lt;&#x2F;em&gt; the correct choice, and instead a &lt;code&gt;Vector&lt;&#x2F;code&gt;
should be used. There is no standard for sequence-like
typeclasses (though many exist), so we&#x27;re not going to
generalize. But we&#x27;re also not going to use a less efficient
representation.&lt;&#x2F;p&gt;
&lt;p&gt;I was torn on this, but decided in favor of leaving out
functions initially, on the basis that it&#x27;s easier to add
something in later rather than remove it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Encourage qualified imports with a consistent naming scheme. This is
a strong departure from classy-prelude, which tried to make it
unnecessary to use qualified imports. I&#x27;ll save my feelings about
qualified imports for another time, this is just a pragmatic choice
given the other constraints.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Export any non-conflicting and not-discouraged names from this
module that make sense, e.g. &lt;code&gt;ByteString&lt;&#x2F;code&gt;, &lt;code&gt;Text&lt;&#x2F;code&gt;, or &lt;code&gt;readIORef&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;&#x2F;h2&gt;
&lt;p&gt;This list may fall out of date, so check the &lt;code&gt;.cabal&lt;&#x2F;code&gt; file for a
current and complete listing. I&#x27;m keeping this here to include
reasoning for some libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bytestring&lt;&#x2F;code&gt; and &lt;code&gt;text&lt;&#x2F;code&gt;, despite some complaints, are clearly the
most popular representation for binary and textual data,
respectively&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;containers&lt;&#x2F;code&gt; and &lt;code&gt;unordered-containers&lt;&#x2F;code&gt; are both commonly used. Due
to lack of generalization, this library doesn&#x27;t expose any functions
for working with their types, but they are common enough that adding
the dependency just for exposing the type name is worth it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;safe-exceptions&lt;&#x2F;code&gt; hides the complexity of asynchronous exceptions,
and should be used in place of &lt;code&gt;Control.Exception&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transformers&lt;&#x2F;code&gt; and &lt;code&gt;mtl&lt;&#x2F;code&gt; are clear winners in the monad transformer
space, at least for now&lt;&#x2F;li&gt;
&lt;li&gt;While young, &lt;code&gt;say&lt;&#x2F;code&gt; has been very useful for me in avoiding
interleaved output issues&lt;&#x2F;li&gt;
&lt;li&gt;Others without real competitors: &lt;code&gt;deepseq&lt;&#x2F;code&gt;, &lt;code&gt;semigroups&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Packages I considered but have not included yet:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stm&lt;&#x2F;code&gt; is an obvious winner, and while I use it constantly, I&#x27;m not
convinced everyone else uses it as much as I do. Also, there are some
questions around generalizing its functions (e.g., &lt;code&gt;atomically&lt;&#x2F;code&gt; could
be in &lt;code&gt;MonadIO&lt;&#x2F;code&gt;), and I don&#x27;t want to make that decision yet.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stm-chans&lt;&#x2F;code&gt; falls into this category too&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;async&lt;&#x2F;code&gt; is an amazing library, and in particular the &lt;code&gt;race&lt;&#x2F;code&gt;,
&lt;code&gt;concurrently&lt;&#x2F;code&gt;, and &lt;code&gt;Concurrently&lt;&#x2F;code&gt; bits are an easy win. I&#x27;ve left
it out for now due to questions of generalizing to
&lt;code&gt;MonadBaseControl&lt;&#x2F;code&gt; (see &lt;code&gt;lifted-async&lt;&#x2F;code&gt; and its &lt;code&gt;.Safe&lt;&#x2F;code&gt; module)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Similar argument applies to &lt;code&gt;monad-unlift&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I didn&#x27;t bother with exposing the &lt;code&gt;Vector&lt;&#x2F;code&gt; type... because which one
would I expose? The &lt;code&gt;Vector&lt;&#x2F;code&gt; typeclass? Boxed &lt;code&gt;Vector&lt;&#x2F;code&gt;? Unboxed? I
could do the classy-prelude thing and define &lt;code&gt;type UVector = Data.Vector.Unboxed.Vector&lt;&#x2F;code&gt;, but I&#x27;d rather not do such renamings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qualified-imports&quot;&gt;Qualified imports&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the recommend qualified imports when working with safe-prelude.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;bytestring&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;bytestring&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;BL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;containers&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Map.Strict &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Map
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;containers&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;unordered-containers&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.HashMap.Strict &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HashMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; &amp;quot;unordered-containers&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.HashSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HashSet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Foldable.mapM_, Maybe, and recursive functions</title>
		<published>2017-01-10T00:00:00+00:00</published>
		<updated>2017-01-10T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/foldable-mapm-maybe-and-recursive-functions/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/foldable-mapm-maybe-and-recursive-functions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; This content originally appeared on &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolofhaskell.com&#x2F;user&#x2F;snoyberg&#x2F;general-haskell&#x2F;basics&#x2F;foldable-mapm-maybe-and-recursive-functions&quot;&gt;School of Haskell&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;commit&#x2F;11877684b3adb7ca422ae5000fab1ebeb3fbe142&quot;&gt;run into this issue myself&lt;&#x2F;a&gt;,
and seen others hit it too. Let&#x27;s start off with some very simple
code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sayHi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sayHi mname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sayHi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s nothing amazing about this code, it&#x27;s pretty straight-forward
pattern matching Haskell. And at some point, many Haskellers end up
deciding that they don&#x27;t like the explicit pattern matching, and
instead want to use a combinator. So the code above might get turned
into one of the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Foldable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hiHelper &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;hiHelper name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; name

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sayHi1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sayHi1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybe (return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) hiHelper

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sayHi2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sayHi2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapM_ hiHelper

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    sayHi1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    sayHi2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- or often times this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    forM_ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Charlie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) hiHelper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The theory is that all three approaches (&lt;code&gt;maybe&lt;&#x2F;code&gt;, &lt;code&gt;mapM_&lt;&#x2F;code&gt;, and
&lt;code&gt;forM_&lt;&#x2F;code&gt;) will end up being identical. We can fairly conclusively state
that &lt;code&gt;forM_&lt;&#x2F;code&gt; will be the exact same thing as &lt;code&gt;mapM_&lt;&#x2F;code&gt;, since
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-7.14&#x2F;base-4.9.0.0&#x2F;src&#x2F;Data-Foldable.html#forM_&quot;&gt;it&#x27;s just &lt;code&gt;mapM_&lt;&#x2F;code&gt; flipped&lt;&#x2F;a&gt;. So
the question is: will the &lt;code&gt;maybe&lt;&#x2F;code&gt; and &lt;code&gt;mapM_&lt;&#x2F;code&gt; approaches do the same
thing? In this case, the answer is yes, but let&#x27;s spice it up a bit
more. First, the &lt;code&gt;maybe&lt;&#x2F;code&gt; version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc exec -- ghc -with-rtsopts -s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
uncons (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;xs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (x, xs)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;printChars idx str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybe (return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(c, str&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    when (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`mod` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Character #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show c
    printChars (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) str&amp;#39;) (uncons str)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can compile and run this by saving to a &lt;code&gt;Main.hs&lt;&#x2F;code&gt; file and running
&lt;code&gt;stack Main.hs &amp;amp;&amp;amp; .&#x2F;Main&lt;&#x2F;code&gt;. On my system, it prints out the following
memory statistics, which from the maximum residency you can see runs
in constant space:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;   2,200,270,200 bytes allocated in the heap
         788,296 bytes copied during GC
          44,384 bytes maximum residency (2 sample(s))
          24,528 bytes maximum slop
               1 MB total memory in use (0 MB lost due to fragmentation)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While constant space is good, the usage of &lt;code&gt;maybe&lt;&#x2F;code&gt; makes this a bit
ugly. This is a common time to use &lt;code&gt;forM_&lt;&#x2F;code&gt; to syntactically clean
things up. So let&#x27;s give that a shot:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc exec -- ghc -with-rtsopts -s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
uncons (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;xs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (x, xs)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;printChars idx str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forM_ (uncons str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(c, str&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    when (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`mod` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Character #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show c
    printChars (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) str&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code is arguablycleaner and easier to follow. However, when I run
it, I get the following memory stats:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;   3,443,468,248 bytes allocated in the heap
     632,375,152 bytes copied during GC
     132,575,648 bytes maximum residency (11 sample(s))
       2,348,288 bytes maximum slop
             331 MB total memory in use (0 MB lost due to fragmentation)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how max residency has balooned up from 42kb to 132mb! And if
you increase the size of the generated list, that number grows. In
other words: we have &lt;em&gt;linear&lt;&#x2F;em&gt; memory usage instead of constant,
clearer something we want to avoid.&lt;&#x2F;p&gt;
&lt;p&gt;The issue is that the implementation of &lt;code&gt;mapM_&lt;&#x2F;code&gt; in &lt;code&gt;Data.Foldable&lt;&#x2F;code&gt; is
not tail recursive, at least for the case of &lt;code&gt;Maybe&lt;&#x2F;code&gt;. As a result,
each recursive call ends up accumulating a bunch of &amp;quot;do nothing&amp;quot;
actions to perform after completing the recursive call, which all
remain resident in memory until the entire list is traversed.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, solving this issue is pretty easy: write a tail-recursive
version of &lt;code&gt;forM_&lt;&#x2F;code&gt; for &lt;code&gt;Maybe&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc exec -- ghc -with-rtsopts -s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
uncons (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;xs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (x, xs)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;forM_Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
forM_Maybe (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x) f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f x

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;printChars idx str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forM_Maybe (uncons str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(c, str&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    when (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`mod` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Character #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show c
    printChars (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) str&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This implementation once again runs in constant memory.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s one slight difference in the type of &lt;code&gt;forM_Maybe&lt;&#x2F;code&gt; and &lt;code&gt;forM_&lt;&#x2F;code&gt;
specialized to &lt;code&gt;Maybe&lt;&#x2F;code&gt;. The former takes a second argument of type &lt;code&gt;a -&amp;gt; m ()&lt;&#x2F;code&gt;, while the latter takes a second argument of type &lt;code&gt;a -&amp;gt; m b&lt;&#x2F;code&gt;. This difference is unfortunately necessary; if we try to get back
the original type signature, we have to add an extra action to wipe
out the return value, which again reintroduces the memory leak:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM_Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;forM_Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
forM_Maybe (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x) f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try swapping in this implementation into the above program, and once
again you&#x27;ll get your memory leak.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mono-traversable&quot;&gt;mono-traversable&lt;&#x2F;h2&gt;
&lt;p&gt;Back in 2014, I raised this same issue
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;mono-traversable&#x2F;issues&#x2F;28&quot;&gt;about the mono-traversable library&lt;&#x2F;a&gt;,
and ultimately decided to change the type signature of the &lt;code&gt;omapM_&lt;&#x2F;code&gt;
function to the non-overflowing demonstrated above. You can see that
this in fact works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc exec --package mono-traversable -- ghc -with-rtsopts -s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.MonoTraversable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;oforM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;])
uncons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
uncons (x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;xs) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (x, xs)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;printChars idx str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; oforM_ (uncons str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(c, str&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    when (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`mod` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Character #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show c
    printChars (idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) str&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; printChars &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we&#x27;d hope, this runs in constant memory.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Conflicting Module Names</title>
		<published>2017-01-05T00:00:00+00:00</published>
		<updated>2017-01-05T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/conflicting-module-names/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/conflicting-module-names/</id>
		<content type="html">&lt;p&gt;It&#x27;s
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;issues&#x2F;416&quot;&gt;the oldest open issue on the Stackage repo&lt;&#x2F;a&gt;,
and a topic I&#x27;ve discussed more times than I can remember over the
years. Hackage enforces that &lt;em&gt;package names&lt;&#x2F;em&gt; are unique (so that no
one else can claim the name &lt;code&gt;conduit&lt;&#x2F;code&gt;, for instance), but does nothing
to ensure unique &lt;em&gt;module names&lt;&#x2F;em&gt; (so someone else could write a package
named &lt;code&gt;my-conduit&lt;&#x2F;code&gt; with a module named &lt;code&gt;Data.Conduit&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;For the record, I think Hackage&#x27;s position here is not only a good
one, but the only logical one it could have made. I&#x27;m not even hinting
at wanting to change that. Please don&#x27;t read this blog post in that
way at all.&lt;&#x2F;p&gt;
&lt;p&gt;Usually, conflicting module names do not negatively affect us, at
least when working on project code with a proper &lt;code&gt;.cabal&lt;&#x2F;code&gt; file. In my
made-up example above, I would explicitly state that I depend on
&lt;code&gt;conduit&lt;&#x2F;code&gt; and not list &lt;code&gt;my-conduit&lt;&#x2F;code&gt;, and when my code imports
&lt;code&gt;Data.Conduit&lt;&#x2F;code&gt;, Stack+Cabal+GHC can all work together to ensure that
the correct module is used.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt; Since I&#x27;ve already written some of the code for stackage-curator to
detect this, I generated a &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;snoyberg&#x2F;c5044f390d22200fcee37c894a853719&quot;&gt;list of all conflicting module
names&lt;&#x2F;a&gt; to
give an idea of what we&#x27;re looking at.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;(If you&#x27;re already convinced that conflicting module names are a
problem, you may want to skip straight to &amp;quot;the solution.&amp;quot; This section
is fairly long and detailed.)&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, there are still some downsides to having the same
module name appear in different packages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt; Suppose I&#x27;m reading a tutorial that includes the
line &lt;code&gt;import Control.Monad.Reader&lt;&#x2F;code&gt;. I look at the
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;lts&#x2F;docs&quot;&gt;Stackage doc list by module&lt;&#x2F;a&gt;
and discover:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;FkeC6ak.png&quot; alt=&quot;monads-tf and mtl&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If I&#x27;m not familiar with the Haskell ecosystem, I&#x27;m unlikely to
know that &lt;code&gt;mtl&lt;&#x2F;code&gt; is far
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;mtl#reverse-dependencies&quot;&gt;more&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;monads-tf#reverse-dependencies&quot;&gt;popular&lt;&#x2F;a&gt;
than &lt;code&gt;monads-tf&lt;&#x2F;code&gt; and choose the latter.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;runghc&#x2F;ghci&lt;&#x2F;strong&gt; We&#x27;re not always working on project
code. Sometimes we&#x27;re just writing a script. Sometimes we&#x27;re
playing with an idea in GHCi. What if I &lt;code&gt;import System.FilePath.Glob&lt;&#x2F;code&gt; in a GHCi prompt when I have both the
&lt;code&gt;filemanip&lt;&#x2F;code&gt; and &lt;code&gt;Glob&lt;&#x2F;code&gt; packages installed?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;doctests&lt;&#x2F;strong&gt; Similar to the previous point: even when you run
doctests from inside the context of a project, they don&#x27;t
typically know which packages can be used, and conflicting module
names can
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yesodweb&#x2F;wai&#x2F;issues&#x2F;579&quot;&gt;cause the tests to fail&lt;&#x2F;a&gt;. What&#x27;s
especially bad about this is that an unrelated action (like
running &lt;code&gt;stack build async-dejafu&lt;&#x2F;code&gt;) can suddenly make your tests
start to fail when they previously succeeded.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Custom Setup.hs&lt;&#x2F;strong&gt; Suppose you&#x27;re writing a cabal package that
uses a custom &lt;code&gt;Setup.hs&lt;&#x2F;code&gt; file and imports some additional
modules. To pick a concrete example that just happened: the
&lt;code&gt;executable-hash&lt;&#x2F;code&gt; package has a &lt;code&gt;Setup.hs&lt;&#x2F;code&gt; file which -
indirectly - imports &lt;code&gt;Crypto.Hash.SHA1&lt;&#x2F;code&gt;. And there&#x27;s an explicit
dependency on &lt;code&gt;cryptohash&lt;&#x2F;code&gt; in the &lt;code&gt;.cabal&lt;&#x2F;code&gt; file, which one may
naively infer means we&#x27;re safe. However, when &lt;code&gt;uuid-1.3.13&lt;&#x2F;code&gt; moved
from cryptonite to a few other packages (including
cryptohash-sha1), building &lt;code&gt;executable-hash&lt;&#x2F;code&gt; when &lt;code&gt;uuid&lt;&#x2F;code&gt; was
already installed became a build error. And like the previous
point, this is essentially a non-deterministic race condition.&lt;&#x2F;p&gt;
&lt;p&gt;Since I was a backup maintainer for &lt;code&gt;executable-hash&lt;&#x2F;code&gt;, I
implemented two fixes:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;executable-hash&#x2F;commit&#x2F;91ee923513b6464a49f02fdc0738202e7b4a907a&quot;&gt;adding an explicit &lt;code&gt;PackageImport&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;executable-hash&#x2F;commit&#x2F;e93af5ed6e1e46efc876ab008bd48574c761780c&quot;&gt;using the new custom-setup feature in Cabal-1.24&lt;&#x2F;a&gt;. While
custom-setup is definitely the way to go with this, and it&#x27;s a
great addition to Cabal, not everyone is using the newest version
of Cabal, Stack is only just now adding support for this, and not
all packages will update to support this immediately.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Better tooling&lt;&#x2F;strong&gt; It would be great if tooling could
automatically determine which packages to install based on the
imports list, to avoid the need for a lot of manual and redundant
statements of dependencies. We&#x27;re considering
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;issues&#x2F;2805#issuecomment-263075097&quot;&gt;doing this in the upcoming &lt;code&gt;stack script&lt;&#x2F;code&gt; command&lt;&#x2F;a&gt;. But
how will Stack know which &lt;code&gt;Control.Monad.Reader&lt;&#x2F;code&gt; to use?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;While we know that we can&#x27;t have fully unique module names without a
lot of buy-in from package authors, we can get pretty close, with
&lt;em&gt;canonical&lt;&#x2F;em&gt; locations for a module. We&#x27;ve already implemented this to
some extent in Stackage to resolve problem (3) listed above. We now
have the ability to list some packages as &lt;em&gt;hidden&lt;&#x2F;em&gt; in a Stackage
snapshot. This means that, after installing the package, the Stackage
build system will &lt;em&gt;hide&lt;&#x2F;em&gt; the package, so that its modules won&#x27;t be
available for import. By adding &lt;code&gt;async-dejafu&lt;&#x2F;code&gt; to the hidden list, the
warp doctest suite no longer has the ambiguity issue when running.&lt;&#x2F;p&gt;
&lt;p&gt;After dealing with the cryptohash-sha1 fallout earlier this week, I
realized that this solution can generalize to solve a large swath of
the problems described above. Here&#x27;s how I see it working:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We introduce a new constraint in the Stackage build process: every
module name must be present in only one &lt;em&gt;exposed&lt;&#x2F;em&gt; (that is,
non-hidden) package.&lt;&#x2F;li&gt;
&lt;li&gt;When &lt;code&gt;stack build&lt;&#x2F;code&gt; registers a package, it automatically hides it if
the snapshot lists it as hidden.&lt;&#x2F;li&gt;
&lt;li&gt;On the stackage.org module list, modules from a hidden package are
explicitly marked as hidden (or, if we want to be more extreme, we
just hide them entirely).&lt;&#x2F;li&gt;
&lt;li&gt;With the upcoming &lt;code&gt;stack script&lt;&#x2F;code&gt; command, when finding a package for
a given imported module, we only pay attention to non-hidden
modules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This doesn&#x27;t fully solve the problems above. For example, if a user
just Googles &lt;code&gt;Control.Monad.Reader&lt;&#x2F;code&gt;, they&#x27;ll still possibly get
confusing documentation. But I think this is a huge step in the right
direction.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Functors, Applicatives, and Monads</title>
		<published>2017-01-03T00:00:00+00:00</published>
		<updated>2017-01-03T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2017/01/functors-applicatives-and-monads/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2017/01/functors-applicatives-and-monads/</id>
		<content type="html">&lt;p&gt;This content originally appeared on
&lt;a href=&quot;https:&#x2F;&#x2F;www.schoolofhaskell.com&#x2F;user&#x2F;snoyberg&#x2F;general-haskell&#x2F;basics&#x2F;functors-applicative-functors-and-monads&quot;&gt;School of
Haskell&lt;&#x2F;a&gt;.
Thanks for Julie Moronuki for encouraging me to update&#x2F;republish, and for all
of the edits&#x2F;improvements.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Code snippets below can be run using the &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;Stack build
tool&lt;&#x2F;a&gt;, by saving to a file &lt;code&gt;Main.hs&lt;&#x2F;code&gt; and
running with &lt;code&gt;stack Main.hs&lt;&#x2F;code&gt;. More information is available in the &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;tutorial&#x2F;stack-script&quot;&gt;How to
Script with Stack tutorial&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start off with a very simple problem. We want to let a user input his&#x2F;her
birth year, and tell him&#x2F;her his&#x2F;her age in the year 2020.
Using the function &lt;code&gt;read&lt;&#x2F;code&gt;, this is really simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In 2020, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; read year)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you run that program and type in a valid year, you&#x27;ll get the right result.
However, what happens when you enter something invalid?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Please enter your birth year
hello
main.hs: Prelude.read: no parse
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is that the user input is coming in as a &lt;code&gt;String&lt;&#x2F;code&gt;, and &lt;code&gt;read&lt;&#x2F;code&gt; is
trying to parse it into an &lt;code&gt;Integer&lt;&#x2F;code&gt;. But not all &lt;code&gt;String&lt;&#x2F;code&gt;s are valid
&lt;code&gt;Integer&lt;&#x2F;code&gt;s. &lt;code&gt;read&lt;&#x2F;code&gt; is what we call a &lt;strong&gt;partial function&lt;&#x2F;strong&gt;, meaning that under
some circumstances it will return an error instead of a valid result.&lt;&#x2F;p&gt;
&lt;p&gt;A more resilient way to write our code is to use the &lt;code&gt;readMaybe&lt;&#x2F;code&gt; function, which
will return a &lt;code&gt;Maybe Integer&lt;&#x2F;code&gt; value. This makes it clear with the types
themselves that the parse may succeed or fail. To test this out, try running
the following code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- We use explicit types to tell the compiler how to try and parse the
    -- string.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    print (readMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;1980&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    print (readMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    print (readMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    print (readMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;two-thousand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So how can we use this to solve our original problem? We need to now determine
if the result of &lt;code&gt;readMaybe&lt;&#x2F;code&gt; was successful (as &lt;code&gt;Just&lt;&#x2F;code&gt;) or failed (a &lt;code&gt;Nothing&lt;&#x2F;code&gt;).
One way to do this is with pattern matching:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided an invalid year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In 2020, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;decoupling-code&quot;&gt;Decoupling code&lt;&#x2F;h2&gt;
&lt;p&gt;This code is a bit coupled; let&#x27;s split it up to have a separate function for
displaying the output to the user and another separate function for
calculating the age.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided an invalid year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In 2020, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearToAge year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
            case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing
                Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (yearToAge year)
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code does exactly the same thing as our previous version. But the
definition of &lt;code&gt;maybeAge&lt;&#x2F;code&gt; in &lt;code&gt;main&lt;&#x2F;code&gt; looks pretty repetitive to me.
We check if the parse year is &lt;code&gt;Nothing&lt;&#x2F;code&gt;. If it&#x27;s &lt;code&gt;Nothing&lt;&#x2F;code&gt;, we return
&lt;code&gt;Nothing&lt;&#x2F;code&gt;. If it&#x27;s &lt;code&gt;Just&lt;&#x2F;code&gt;, we return &lt;code&gt;Just&lt;&#x2F;code&gt;, after applying the function
&lt;code&gt;yearToAge&lt;&#x2F;code&gt;. That seems like a lot of line noise to do something simple. All we
want is to conditionally apply &lt;code&gt;yearToAge&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functors&quot;&gt;Functors&lt;&#x2F;h2&gt;
&lt;p&gt;Fortunately, we have a helper function to do just that. &lt;code&gt;fmap&lt;&#x2F;code&gt;, or &lt;strong&gt;functor
mapping&lt;&#x2F;strong&gt;, will apply some function over the value contained by a &lt;strong&gt;functor&lt;&#x2F;strong&gt;.
&lt;code&gt;Maybe&lt;&#x2F;code&gt; is one example of a functor; another common one is a list. In the case
of &lt;code&gt;Maybe&lt;&#x2F;code&gt;, &lt;code&gt;fmap&lt;&#x2F;code&gt; does precisely what we described above. So we can replace
our code with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided an invalid year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In 2020, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearToAge year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap yearToAge (readMaybe yearString)
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our code definitely got shorter, and hopefully a bit clearer as well. Now it&#x27;s
obvious that all we&#x27;re doing is applying the &lt;code&gt;yearToAge&lt;&#x2F;code&gt; function over the
contents of the &lt;code&gt;Maybe&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;So what &lt;em&gt;is&lt;&#x2F;em&gt; a functor? It&#x27;s some kind of container of values. In &lt;code&gt;Maybe&lt;&#x2F;code&gt;, our
container holds zero or one values. With lists, we have a container for zero or
more values. Some containers are even more exotic; the &lt;code&gt;IO&lt;&#x2F;code&gt; functor is actually
providing an action to perform in order to retrieve a value. The only thing
functors share is that they provide some &lt;code&gt;fmap&lt;&#x2F;code&gt; function which lets you modify
their contents.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-notation&quot;&gt;do-notation&lt;&#x2F;h2&gt;
&lt;p&gt;We have another option as well: we can use &lt;code&gt;do&lt;&#x2F;code&gt;-notation. This is the same way
we&#x27;ve been writing &lt;code&gt;main&lt;&#x2F;code&gt; so far. That&#x27;s because- as we
mentioned in the previous paragraph- &lt;code&gt;IO&lt;&#x2F;code&gt; is a functor as well. Let&#x27;s see how
we can change our code to not use &lt;code&gt;fmap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided an invalid year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In 2020, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearToAge year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; year

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    yearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            yearInteger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe yearString
            return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearToAge yearInteger
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside the &lt;code&gt;do-&lt;&#x2F;code&gt;block, we have the &lt;strong&gt;slurp operator&lt;&#x2F;strong&gt; &lt;code&gt;&amp;lt;-&lt;&#x2F;code&gt;. This
operator is special for &lt;code&gt;do&lt;&#x2F;code&gt;-notation and is used to pull a value out of its
wrapper (in this case, &lt;code&gt;Maybe&lt;&#x2F;code&gt;). Once we&#x27;ve extracted the value, we can
manipulate it with normal functions, like &lt;code&gt;yearToAge&lt;&#x2F;code&gt;. When we complete our
&lt;code&gt;do&lt;&#x2F;code&gt;-block, we have to return a value wrapped up in that container again. That&#x27;s
what the &lt;code&gt;return&lt;&#x2F;code&gt; function does.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;do&lt;&#x2F;code&gt;-notation isn&#x27;t available for all &lt;code&gt;Functor&lt;&#x2F;code&gt;s; it&#x27;s a special feature reserved
only for &lt;code&gt;Monad&lt;&#x2F;code&gt;s. &lt;code&gt;Monad&lt;&#x2F;code&gt;s are an extension of &lt;code&gt;Functor&lt;&#x2F;code&gt;s that provide a
little extra power. We&#x27;re not really taking advantage of any of that extra
power here; we&#x27;ll need to make our program more complicated to demonstrate
it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dealing-with-two-variables&quot;&gt;Dealing with two variables&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s kind of limiting that we have a hard-coded year to compare against. Let&#x27;s
fix that by allowing the user to specify the &amp;quot;future year.&amp;quot; We&#x27;ll start off
with a simple implementation using pattern matching and then move back to &lt;code&gt;do&lt;&#x2F;code&gt;-notation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
            case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing
                Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
                    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing
                        Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear)
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK, it gets the job done... but it&#x27;s very tedious. Fortunately, &lt;code&gt;do&lt;&#x2F;code&gt;-notation makes this kind of code really simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
            futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe futureYearString
            return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff futureYear birthYear
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is very convenient: we&#x27;ve now slurped our two values in our &lt;code&gt;do&lt;&#x2F;code&gt;-notation.
If either parse returns &lt;code&gt;Nothing&lt;&#x2F;code&gt;, then the entire &lt;code&gt;do&lt;&#x2F;code&gt;-block will return
&lt;code&gt;Nothing&lt;&#x2F;code&gt;. This demonstrates an important property about &lt;code&gt;Maybe&lt;&#x2F;code&gt;: it provides
&lt;strong&gt;short circuiting&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Without resorting to other helper functions or pattern matching, there&#x27;s no way
to write this code using just &lt;code&gt;fmap&lt;&#x2F;code&gt;. So we&#x27;ve found an example of code that
requires more power than &lt;code&gt;Functor&lt;&#x2F;code&gt;s provide, and &lt;code&gt;Monad&lt;&#x2F;code&gt;s provide that power.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;partial-application&quot;&gt;Partial application&lt;&#x2F;h2&gt;
&lt;p&gt;But maybe there&#x27;s something else that provides enough power to write our
two-variable code without the full power of &lt;code&gt;Monad&lt;&#x2F;code&gt;. To see what this might be,
let&#x27;s look more carefully at our types.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re working with two values: &lt;code&gt;readMaybe birthYearString&lt;&#x2F;code&gt; and &lt;code&gt;readMaybe futureYearString&lt;&#x2F;code&gt;. Both of these values have the type &lt;code&gt;Maybe Integer&lt;&#x2F;code&gt;. And we
want to apply the function &lt;code&gt;yearDiff&lt;&#x2F;code&gt;, which has the type &lt;code&gt;Integer -&amp;gt; Integer -&amp;gt; Integer&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we go back to trying to use &lt;code&gt;fmap&lt;&#x2F;code&gt;, we&#x27;ll seemingly run into a bit of a
problem. The type of &lt;code&gt;fmap&lt;&#x2F;code&gt;- specialized for &lt;code&gt;Maybe&lt;&#x2F;code&gt; and &lt;code&gt;Integer&lt;&#x2F;code&gt;- is
&lt;code&gt;(Integer -&amp;gt; a) -&amp;gt; Maybe Integer -&amp;gt; Maybe a&lt;&#x2F;code&gt;. In other words, it takes a
function that takes a single argument (an &lt;code&gt;Integer&lt;&#x2F;code&gt;) and returns a value of
some type &lt;code&gt;a&lt;&#x2F;code&gt;, takes a second argument of a &lt;code&gt;Maybe Integer&lt;&#x2F;code&gt;, and gives back a
value of type &lt;code&gt;Maybe a&lt;&#x2F;code&gt;. But our function- &lt;code&gt;yearDiff&lt;&#x2F;code&gt;- actually takes two
arguments, not one. So &lt;code&gt;fmap&lt;&#x2F;code&gt; can&#x27;t be used at all, right?&lt;&#x2F;p&gt;
&lt;p&gt;Not true. This is where one of Haskell&#x27;s very powerful features comes
into play. Any time we have a function of two arguments, we can also look at is
as a function of one argument which returns a &lt;strong&gt;function&lt;&#x2F;strong&gt;. We can make this
more clear with parentheses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;yearDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;yearDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So how does that help us? We can look at the &lt;code&gt;fmap&lt;&#x2F;code&gt; function as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then when we apply &lt;code&gt;fmap&lt;&#x2F;code&gt; to &lt;code&gt;yearDiff&lt;&#x2F;code&gt;, we end up with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fmap yearDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s pretty cool. We can apply &lt;em&gt;this&lt;&#x2F;em&gt; to our &lt;code&gt;readMaybe futureYearString&lt;&#x2F;code&gt; and
end up with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fmap yearDiff (readMaybe futureYearString) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Maybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s certainly very interesting, but it doesn&#x27;t help us. We need to somehow
apply this value of type &lt;code&gt;Maybe (Integer -&amp;gt; Integer)&lt;&#x2F;code&gt; to our &lt;code&gt;readMaybe birthYearString&lt;&#x2F;code&gt; of type &lt;code&gt;Maybe Integer&lt;&#x2F;code&gt;. We can do this with &lt;code&gt;do&lt;&#x2F;code&gt;-notation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            yearToAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap yearDiff (readMaybe futureYearString)
            birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
            return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearToAge birthYear
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can even use &lt;code&gt;fmap&lt;&#x2F;code&gt; twice and avoid the second slurp:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            yearToAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap yearDiff (readMaybe futureYearString)
            fmap yearToAge (readMaybe birthYearString)
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we don&#x27;t have a way to apply our &lt;code&gt;Maybe (Integer -&amp;gt; Integer)&lt;&#x2F;code&gt; function to
our &lt;code&gt;Maybe Integer&lt;&#x2F;code&gt; directly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applicative-functors&quot;&gt;Applicative functors&lt;&#x2F;h2&gt;
&lt;p&gt;And now we get to our final concept: applicative functors. The idea is simple:
we want to be able to apply a function which is &lt;em&gt;inside&lt;&#x2F;em&gt; a functor to a value
inside a functor. The magic operator for this is &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt;. Let&#x27;s
see how it works in our example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            fmap yearDiff (readMaybe futureYearString)
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In fact, the combination of &lt;code&gt;fmap&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt; is so common that we have a
special operator, &lt;code&gt;&amp;lt;$&amp;gt;&lt;&#x2F;code&gt;, which is a synonym for &lt;code&gt;fmap&lt;&#x2F;code&gt;. That means we can make
our code just a little prettier:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe futureYearString
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the distinction between &lt;code&gt;&amp;lt;$&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt;. The former uses a function
which is &lt;em&gt;not&lt;&#x2F;em&gt; wrapped in a functor, while the latter applies a function which
is wrapped up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-we-don-t-need-monads&quot;&gt;So we don&#x27;t need Monads?&lt;&#x2F;h2&gt;
&lt;p&gt;So if we can do such great stuff with functors and applicative functors, why do
we need monads at all? The terse answer is &lt;strong&gt;context sensitivity&lt;&#x2F;strong&gt;: with a
monad, you can make decisions on which processing path to follow based on
previous results. With applicative functors, you have to always apply the same
functions.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s give a contrived example: if the future year is less than the birth year,
we&#x27;ll assume that the user just got confused and entered the values in reverse,
so we&#x27;ll automatically fix it by reversing the arguments to &lt;code&gt;yearDiff&lt;&#x2F;code&gt;.  With
&lt;code&gt;do&lt;&#x2F;code&gt;-notation and an if statement, it&#x27;s easy:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
    case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear

main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
            futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe futureYearString
            birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
            return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$
                if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff birthYear futureYear
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff futureYear birthYear
    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Implement &lt;code&gt;fmap&lt;&#x2F;code&gt; using &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;return&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Applicative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;*&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Applicative&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Prelude &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Prelude

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Applicative m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;... ... = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;FIXME

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Good job!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        _ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Try again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot; role=&quot;tablist&quot; aria-multiselectable=&quot;true&quot;&gt;
&lt;div class=&quot;panel panel-default&quot;&gt;
&lt;div class=&quot;panel-heading&quot; role=&quot;tab&quot;&gt;
&lt;h4 class=&quot;panel-title&quot;&gt;
&lt;a role=&quot;button&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#exerciseOne&quot; aria-expanded=&quot;true&quot; aria-controls=&quot;collapseOne&quot;&gt;
Show Solution
&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;exerciseOne&quot; class=&quot;panel-collapse collapse&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;panel-body&quot;&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;myFmap function wrappedValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; wrappedValue

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; myFmap (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How is &lt;code&gt;return&lt;&#x2F;code&gt; implemented for the &lt;code&gt;Maybe&lt;&#x2F;code&gt; monad? Try replacing &lt;code&gt;return&lt;&#x2F;code&gt;
with its implementation in the code above.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;returnMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;FIXME

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; returnMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Correct!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Incorrect, please try again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot; role=&quot;tablist&quot; aria-multiselectable=&quot;true&quot;&gt;
&lt;div class=&quot;panel panel-default&quot;&gt;
&lt;div class=&quot;panel-heading&quot; role=&quot;tab&quot;&gt;
&lt;h4 class=&quot;panel-title&quot;&gt;
&lt;a role=&quot;button&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#exerciseTwo&quot; aria-expanded=&quot;true&quot; aria-controls=&quot;collapseTwo&quot;&gt;
Show Solution
&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;exerciseTwo&quot; class=&quot;panel-collapse collapse&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;panel-body&quot;&gt;
&lt;p&gt;&lt;code&gt;return&lt;&#x2F;code&gt; is simply the &lt;code&gt;Just&lt;&#x2F;code&gt; constructor. This gets defined as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yearDiff&lt;&#x2F;code&gt; is really just subtraction. Try to replace the calls to
&lt;code&gt;yearDiff&lt;&#x2F;code&gt; with explicit usage of the &lt;code&gt;-&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter your birth year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    birthYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please enter some year in the future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    futureYearString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe futureYearString
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readMaybe birthYearString
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- BEGIN CODE TO MODIFY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff birthYear futureYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff futureYear birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- END CODE TO MODIFY
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    displayAge maybeAge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot; role=&quot;tablist&quot; aria-multiselectable=&quot;true&quot;&gt;
&lt;div class=&quot;panel panel-default&quot;&gt;
&lt;div class=&quot;panel-heading&quot; role=&quot;tab&quot;&gt;
&lt;h4 class=&quot;panel-title&quot;&gt;
&lt;a role=&quot;button&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#exerciseThree&quot; aria-expanded=&quot;true&quot; aria-controls=&quot;collapseThree&quot;&gt;
Show Solution
&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;exerciseThree&quot; class=&quot;panel-collapse collapse&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;panel-body&quot;&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It&#x27;s possible to write an applicative functor version of the
auto-reverse-arguments code by modifying the &lt;code&gt;yearDiff&lt;&#x2F;code&gt; function. Try to do
so.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Applicative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;$&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;*&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;FIXME

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yearDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Correct!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please try again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot; role=&quot;tablist&quot; aria-multiselectable=&quot;true&quot;&gt;
&lt;div class=&quot;panel panel-default&quot;&gt;
&lt;div class=&quot;panel-heading&quot; role=&quot;tab&quot;&gt;
&lt;h4 class=&quot;panel-title&quot;&gt;
&lt;a role=&quot;button&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#exerciseFour&quot; aria-expanded=&quot;true&quot; aria-controls=&quot;collapseFour&quot;&gt;
Show Solution
&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;exerciseFour&quot; class=&quot;panel-collapse collapse&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;panel-body&quot;&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;yearDiff futureYear birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now try to do it without modifying &lt;code&gt;yearDiff&lt;&#x2F;code&gt; directly, but by
using a helper function which is applied to &lt;code&gt;yearDiff&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Text.Read &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Applicative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;$&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;*&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;displayAge maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; maybeAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You provided invalid input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;In that year, you will be: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show age

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;yearDiff futureYear birthYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; futureYear &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; birthYear
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;yourHelperFunction f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; yourHelperFunction yearDiff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Correct!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Please try again&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot; role=&quot;tablist&quot; aria-multiselectable=&quot;true&quot;&gt;
&lt;div class=&quot;panel panel-default&quot;&gt;
&lt;div class=&quot;panel-heading&quot; role=&quot;tab&quot;&gt;
&lt;h4 class=&quot;panel-title&quot;&gt;
&lt;a role=&quot;button&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#exerciseFive&quot; aria-expanded=&quot;true&quot; aria-controls=&quot;collapseFive&quot;&gt;
Show Solution
&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;&#x2F;div&gt;
&lt;div id=&quot;exerciseFive&quot; class=&quot;panel-collapse collapse&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;panel-body&quot;&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;yourHelperFunction f x y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f x y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; otherwise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f y x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Beware of readFile</title>
		<published>2016-12-22T00:00:00+00:00</published>
		<updated>2016-12-22T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/12/beware-of-readfile/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/12/beware-of-readfile/</id>
		<content type="html">&lt;p&gt;Right off the bat, the title of this blog post is ambiguous. In normal
Haskell usage, there are in fact 5 different, commonly used &lt;code&gt;readFile&lt;&#x2F;code&gt;
functions: for &lt;code&gt;String&lt;&#x2F;code&gt;, for strict and lazy &lt;code&gt;Text&lt;&#x2F;code&gt;, and for strict
and lazy &lt;code&gt;ByteString&lt;&#x2F;code&gt;. &lt;code&gt;String&lt;&#x2F;code&gt; and lazy &lt;code&gt;Text&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;ByteString&lt;&#x2F;code&gt; suffer
from problems of lazy I&#x2F;O, which I&#x27;m not going to be talking about at
all today. I&#x27;m instead focused on the problems of character encoding
that exist in the &lt;code&gt;String&lt;&#x2F;code&gt; and strict&#x2F;lazy &lt;code&gt;Text&lt;&#x2F;code&gt; variants. For the
record, these problems apply equally to &lt;code&gt;writeFile&lt;&#x2F;code&gt; and a number of
other functions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt; See the &lt;a href=&quot;https:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;12&#x2F;beware-of-readfile&#x2F;#real-world-failures&quot;&gt;end of this blog post&lt;&#x2F;a&gt;, where
I&#x27;ve begun collecting real-life examples where this I&#x2F;O behavior is
problematic.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start off with a simple example. Try running the following
program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 --install-ghc runghc --package text

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;#39;utf-8&amp;#39;&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;\
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;\&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;שלום&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;¡&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Hola&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For most people out there, this will generate a &lt;code&gt;test.html&lt;&#x2F;code&gt; file
which, when opened in your browser, displays the phrase Hello in
English, Hebrew, and Spanish. Now watch what happens when I run the
same program with a modified environment variable on Linux:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ .&#x2F;Main.hs
# Everything&amp;#39;s fine
$ env LC_CTYPE=en_US.iso88591 .&#x2F;Main.hs
Main.hs: test.html: commitBuffer: invalid argument (invalid character)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This behavior is
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-7.14&#x2F;base-4.9.0.0&#x2F;System-IO.html#g:23&quot;&gt;very clearly documented in &lt;code&gt;System.IO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
namely that GHC will follow system-specific rules to determine the
appropriate character encoding rules, and open up &lt;code&gt;Handle&lt;&#x2F;code&gt;s with that
character encoding set.&lt;&#x2F;p&gt;
&lt;p&gt;This behavior makes a lot of sense for the special standard handles of
&lt;code&gt;stdin&lt;&#x2F;code&gt;, &lt;code&gt;stdout&lt;&#x2F;code&gt;, and &lt;code&gt;stderr&lt;&#x2F;code&gt;, where we need to interact with the
user and make sure the console receives bytes that it can display
correctly. However, I&#x27;m also going to claim the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In exactly 0 cases in my Haskell career have I desired the character
encoding guessing functionality of the textual &lt;code&gt;readFile&lt;&#x2F;code&gt; functions&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Have you ever needed the behavior of Prelude.readFile, which chooses its character encoding based on environment variables?&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;811624134174183424&quot;&gt;December 21, 2016&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async src=&quot;&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;The reason is fairly simple: when reading and writing files, I&#x27;m
almost always dealing with some file format. The first code example
above demonstrates one example of this: writing an HTML file. JSON and
XML work similarly. Config files are another example where the
system&#x27;s locale settings should be irrelevant. In fact, I&#x27;m hard
pressed to come up with a case where I &lt;em&gt;want&lt;&#x2F;em&gt; the current behavior of
respecting the system&#x27;s locale settings.&lt;&#x2F;p&gt;
&lt;p&gt;In my ideal world, we end up with the following functions for working
with files:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- strict byte string, no lazy I&#x2F;O!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFileUtf8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m Text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFileUtf8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap (decodeUtf8With lenientDecode) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readFile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- maybe include a non-lenient variant that throws exceptions or
-- returns an Either value on bad character encoding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;writeFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;writeFileUtf8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;writeFileUtf8 fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeFile fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; encodeUtf8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- conduit, pipes, streaming, etc, can handle the too-large-for-memory
-- case
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For those unaware: lenient here means that if there is a character
encoding error, it will be replaced with the Unicode replacement
character. The default behavior of &lt;code&gt;decodeUtf8&lt;&#x2F;code&gt; is to throw an
exception. I can save my (very large) concerns about that behavior for
another time.&lt;&#x2F;p&gt;
&lt;p&gt;Files are inherently binary data, we shouldn&#x27;t hide that. We should
also make it convenient for people to do the very common task of
reading and writing textual data with UTF-8 character encoding.&lt;&#x2F;p&gt;
&lt;p&gt;Since a blog post is always better if it includes a meaningless benchmark, let me oblige. I put together an overly simple benchmark comparing different ways to read a file. The code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-7.14 exec --package criterion -- ghc -O2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Criterion.Main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;S
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Lazy     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Encoding       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Encoding.Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lenientDecode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.IO             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TIO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Lazy.Encoding  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Lazy.IO        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TLIO

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Downloaded from: http:&#x2F;&#x2F;www.gutenberg.org&#x2F;cache&#x2F;epub&#x2F;345&#x2F;pg345.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FilePath
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pg345.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; defaultMain
    [ bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Data.Text.IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TIO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Data.Text.Lazy.IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TLIO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Data.ByteString.readFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Data.ByteString.Lazy.readFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;strict decodeUtf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;decodeUtf8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;strict decodeUtf8With lenientDecode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;decodeUtf8With lenientDecode) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;lazy decodeUtf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;decodeUtf8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    , bench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;lazy decodeUtf8With lenientDecode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; nfIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fmap (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;decodeUtf8With lenientDecode) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;readFile fp
    ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run this, I used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;$ .&#x2F;bench.hs &amp;amp;&amp;amp; .&#x2F;bench --output bench.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Yes, you can run a Stack script to compile that script. I only
discovered this trick recently.)&lt;&#x2F;p&gt;
&lt;p&gt;Here are the graphical results, full textual results are available
below:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;beware-of-readfile-bench.png&quot; alt=&quot;Benchmark Results&quot; style=&quot;max-width:100%&quot;&gt;
&lt;p&gt;Unsurprisingly, &lt;code&gt;String&lt;&#x2F;code&gt; I&#x2F;O is the slowest, and &lt;code&gt;ByteString&lt;&#x2F;code&gt; I&#x2F;O is
the fastest (since no character encoding overhead is involved). I
found three interesting takeaways here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lazy I&#x2F;O variants were slightly faster, likely because there was no
memory buffer copying involved&lt;&#x2F;li&gt;
&lt;li&gt;Lenient and non-lenient decoding were just about identical in
performance, which is nice to know&lt;&#x2F;li&gt;
&lt;li&gt;As I predicted, the I&#x2F;O functions from the &lt;code&gt;text&lt;&#x2F;code&gt; package are
significantly slower than using &lt;code&gt;bytestring&lt;&#x2F;code&gt;-based I&#x2F;O and then
decoding. I found similar results in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;say#readme&quot;&gt;say package&lt;&#x2F;a&gt;, and believe it is
inherent in &lt;code&gt;Handle&lt;&#x2F;code&gt;-based character I&#x2F;O, which involves copying all
data through a buffer of &lt;code&gt;Word32&lt;&#x2F;code&gt; values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;My recommendation to all&lt;&#x2F;strong&gt;: never use &lt;code&gt;Prelude.readFile&lt;&#x2F;code&gt;,
&lt;code&gt;Data.Text.IO.readFile&lt;&#x2F;code&gt;, &lt;code&gt;Data.Text.Lazy.IO.readFile&lt;&#x2F;code&gt;, or
&lt;code&gt;Data.ByteString.Lazy.readFile&lt;&#x2F;code&gt;. Stick with &lt;code&gt;Data.ByteString.readFile&lt;&#x2F;code&gt;
for known-small data, use a streaming package (e.g, &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;conduit&quot;&gt;conduit&lt;&#x2F;a&gt;) if your choice for large
data, and handle the character encoding yourself. And apply this to
&lt;code&gt;writeFile&lt;&#x2F;code&gt; and other file-related functions as well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;benchmarking String
time                 8.605 ms   (8.513 ms .. 8.720 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 8.719 ms   (8.616 ms .. 8.889 ms)
std dev              354.9 μs   (236.1 μs .. 535.2 μs)
variance introduced by outliers: 18% (moderately inflated)

benchmarking Data.Text.IO
time                 3.735 ms   (3.701 ms .. 3.763 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 3.703 ms   (3.680 ms .. 3.726 ms)
std dev              76.23 μs   (62.41 μs .. 97.13 μs)

benchmarking Data.Text.Lazy.IO
time                 2.995 ms   (2.949 ms .. 3.050 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 3.026 ms   (2.998 ms .. 3.071 ms)
std dev              109.3 μs   (81.86 μs .. 158.8 μs)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Data.ByteString.readFile
time                 218.1 μs   (215.1 μs .. 221.6 μs)
                     0.992 R²   (0.987 R² .. 0.996 R²)
mean                 229.2 μs   (221.0 μs .. 242.5 μs)
std dev              34.36 μs   (24.13 μs .. 48.99 μs)
variance introduced by outliers: 90% (severely inflated)

benchmarking Data.ByteString.Lazy.readFile
time                 162.8 μs   (160.7 μs .. 164.7 μs)
                     0.999 R²   (0.998 R² .. 0.999 R²)
mean                 164.3 μs   (162.7 μs .. 165.9 μs)
std dev              5.481 μs   (4.489 μs .. 6.557 μs)
variance introduced by outliers: 30% (moderately inflated)

benchmarking strict decodeUtf8
time                 1.283 ms   (1.265 ms .. 1.307 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 1.285 ms   (1.274 ms .. 1.303 ms)
std dev              46.84 μs   (35.27 μs .. 67.71 μs)
variance introduced by outliers: 25% (moderately inflated)

benchmarking strict decodeUtf8With lenientDecode
time                 1.298 ms   (1.287 ms .. 1.309 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 1.290 ms   (1.280 ms .. 1.298 ms)
std dev              29.77 μs   (24.26 μs .. 36.97 μs)
variance introduced by outliers: 11% (moderately inflated)

benchmarking lazy decodeUtf8
time                 589.2 μs   (581.3 μs .. 599.8 μs)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 596.7 μs   (590.9 μs .. 605.2 μs)
std dev              22.43 μs   (16.87 μs .. 28.83 μs)
variance introduced by outliers: 30% (moderately inflated)

benchmarking lazy decodeUtf8With lenientDecode
time                 598.1 μs   (591.0 μs .. 607.4 μs)
                     0.998 R²   (0.994 R² .. 0.999 R²)
mean                 594.7 μs   (588.3 μs .. 602.4 μs)
std dev              24.20 μs   (17.06 μs .. 39.94 μs)
variance introduced by outliers: 33% (moderately inflated)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;real-world-failures&quot;&gt;Real world failures&lt;&#x2F;h2&gt;
&lt;p&gt;This is a list of examples of real-world problems caused by
the behavior described in this blog post. It&#x27;s by far not an
exhaustive list, just examples that I&#x27;ve noticed. If you&#x27;d like to
include others here, please
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;snoyman.com-content&#x2F;edit&#x2F;master&#x2F;posts&#x2F;beware-of-readfile.md&quot;&gt;send me a pull request&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sol&#x2F;hpack&#x2F;pull&#x2F;142&quot;&gt;hpack failures on AppVeyor&#x2F;Windows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;5nmmgv&#x2F;how_to_pipe_unicode_to_a_process_using_conduit&#x2F;&quot;&gt;Unexpected failure with conduit+sinkHandle+Docker&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;pull&#x2F;2867&quot;&gt;stack new can fail when character encoding isn&#x27;t
UTF-8&lt;&#x2F;a&gt; (and &lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;msg&#x2F;yesodweb&#x2F;ZyWLsJOtY0c&#x2F;aejf9E7rCAAJ&quot;&gt;mailing list discussion&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Call for new Stackage Curator</title>
		<published>2016-12-19T00:00:00+00:00</published>
		<updated>2016-12-19T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/12/call-for-new-stackage-curator/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/12/call-for-new-stackage-curator/</id>
		<content type="html">&lt;p&gt;On behalf of the Stackage curators, I&#x27;m putting out a call for a
volunteer to join the team. The Stackage curators are responsible for
the day-to-day management of the Stackage project: merging PRs,
managing builds, reporting bounds issues and build or test failures,
and every once in a while making a judgement call on when to bump to
newer package versions.&lt;&#x2F;p&gt;
&lt;p&gt;The curator team currently consists of Adam Bergmark, Dan Burton, Jens
Petersen, and me. The processes we follow are documented in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stackage&#x2F;blob&#x2F;master&#x2F;CURATORS.md&quot;&gt;the curator guide&lt;&#x2F;a&gt;. We
each rotate shifts, taking one week at a time on duty. Overall, the
workload is light and straightforward: usually less than 30 minutes a
day.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re putting out this call for a new volunteer since we&#x27;ve been
running as a four-person show for a while now, and want to make sure
we&#x27;re getting our processes well documented enough for newcomers to
easily come up to speed on the process. While we are currently asking
for just one new addition to the team, if there are multiple
enthusiastic candidates, we will definitely consider expanding the
team further.&lt;&#x2F;p&gt;
&lt;p&gt;Joining the curator team is a great way to both contribute to the
Haskell ecosystem, and to become more familiar with how things
work. You&#x27;ll also get an opportunity to interact (albeit in brief
discussions) with many package maintainers in the Haskell community.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re interested in applying, please send a message to the
&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;forum&#x2F;stackage&quot;&gt;Stackage mailing list&lt;&#x2F;a&gt;
or, if you prefer applying privately,
&lt;a href=&quot;mailto:michael@snoyman.com&quot;&gt;send me an email&lt;&#x2F;a&gt; and I&#x27;ll pass the
message along to the rest of the team.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>An extra benefit of open sourcing</title>
		<published>2016-12-13T00:00:00+00:00</published>
		<updated>2016-12-13T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/12/extra-benefit-of-open-sourcing/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/12/extra-benefit-of-open-sourcing/</id>
		<content type="html">&lt;p&gt;This isn&#x27;t any deep thought, and I&#x27;m sure others have mentioned it
before. But I haven&#x27;t seen it called out explicitly, so I thought it
was worth getting it down.&lt;&#x2F;p&gt;
&lt;p&gt;Recently I was working on a customer project which required a specific
feature
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stack-docker-image-build&quot;&gt;generate a Docker image with some libraries precompiled into it&lt;&#x2F;a&gt;). I&#x27;ll
probably blog more about the specific case later, and give credit at
that time to the company that gave permission for the code to be open
sourced.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out this is a problem that various FP Complete engineers have
solved for customers (and internal purposes) a few times
already. Creating a single open-source tool that can be shared among
projects is a clear win, and plays to all the strengths of open source
software. (And in this case, the initial version was
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;stack-docker-image-build&#x2F;blob&#x2F;v0.1.0.0&#x2F;app&#x2F;Main.hs&quot;&gt;really simple to implement&lt;&#x2F;a&gt;,
so it was almost a no brainer.)&lt;&#x2F;p&gt;
&lt;p&gt;Not long after I released that first version, I needed to update some
Docker image build code for a &lt;em&gt;different&lt;&#x2F;em&gt; customer, who until now had
been using a custom solution. So I moved them over to the new tool,
added some features that they needed, and got to the goal of a working
Docker image quicker than expected. Yay code sharing! And now others
can take advantage of this work, and contribute patches that both
projects using it will be able to take advantage of.&lt;&#x2F;p&gt;
&lt;p&gt;However, these are all the standard benefits of open sourcing. In this
process, I rediscovered something I&#x27;ve seen happen multiple times:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;When you&#x27;re forced to separate out a tool or library, you create a
more general solution, and make your code more maintainable in the
long run.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you write a &amp;quot;throw-away&amp;quot; tool or a &amp;quot;internal&amp;quot; library, odds are
you won&#x27;t think very hard about an extensible interface. You may embed
assumptions into its design. And then the code will sit in a
closed-source codebase for months or years, likely without anyone
touching it in the interim. When it turns out one of your assumptions
was wrong, or the interface needs to be extended, it&#x27;s often times
much harder than updating a general purpose tool or library.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not to say that everything that &lt;em&gt;can&lt;&#x2F;em&gt; be generalized &lt;em&gt;should&lt;&#x2F;em&gt;
be generalized and open sourced. There are some thing which are so
specific to a project that it&#x27;s unlikely that any other use case will
exist. Or that the cognitive overhead of figuring out a good interface
is simply not warranted.&lt;&#x2F;p&gt;
&lt;p&gt;But for those sweet-spot cases where the overhead of doing something
general isn&#x27;t too high, you have the prerogative to open source, and
there&#x27;s likely at least one other person or project in the world who
can use it, you&#x27;ll often thank yourself in the future for having taken
out the time to open source it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell Documentation, 2016 Update</title>
		<published>2016-11-28T00:00:00+00:00</published>
		<updated>2016-11-28T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/11/haskell-documentation-2016-update/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/11/haskell-documentation-2016-update/</id>
		<content type="html">&lt;p&gt;I&#x27;ve blogged, Tweeted, and conversed about Haskell documentation quite
a bit in the past. Following up on
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2015&#x2F;05&#x2F;thousand-user-haskell-survey&quot;&gt;tooling issues&lt;&#x2F;a&gt;,
all available evidence tells me that improving the situation for
documentation in Haskell is the next
&lt;a href=&quot;&#x2F;blog&#x2F;2016&#x2F;11&#x2F;spreading-the-gospel-of-haskell#attacking-haskell39s-flaws&quot;&gt;obstacle we need to knock down&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This blog post will cover:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Where I think the biggest value is to be had in improving Haskell
documentation&lt;&#x2F;li&gt;
&lt;li&gt;Status of various initiatives I&#x27;ve been involved in (and boy do I
walk away red-faced from this)&lt;&#x2F;li&gt;
&lt;li&gt;Recommendations for how others can best contribute&lt;&#x2F;li&gt;
&lt;li&gt;A basic idea of what actions I - and others at FP Complete - have
been taking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intermediate-docs&quot;&gt;Intermediate docs&lt;&#x2F;h2&gt;
&lt;p&gt;In my opinion, the sore spot for Haskell overall is &lt;em&gt;intermediate&lt;&#x2F;em&gt;
docs. (Yes, that&#x27;s vague, bear with me momentarily.) I&#x27;m going to
posit that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Beginners are currently well served by introductory Haskell books,
and most recently by
&lt;a href=&quot;http:&#x2F;&#x2F;haskellbook.com&#x2F;&quot;&gt;Haskell Programming from First Principles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Once you have a solid basis in intermediate concepts, it&#x27;s much
easier to jump into libraries and academic papers and understand
what&#x27;s going on&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To me, intermediate means you already know the basics of Haskell
syntax, monads, and common typeclasses, but aren&#x27;t really familiar
with any non-base libraries, concurrency, or exception handling. The
goal of intermediate documentation is to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Teach &lt;em&gt;which&lt;&#x2F;em&gt; libraries to use, &lt;em&gt;when&lt;&#x2F;em&gt; to use them, and &lt;em&gt;how&lt;&#x2F;em&gt; to use them&lt;&#x2F;li&gt;
&lt;li&gt;Give a guide on structuring Haskell programs&lt;&#x2F;li&gt;
&lt;li&gt;Educate on important techniques, including those mentioned above, as
well as issues around lazy evaluation and other common stumbling
blocks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Many of us who have learned Haskell over the past many years have
probably picked up these topics sporadically. While some people will
want to plow ahead in that kind of haphazard approach, my belief is
that the vast majority of users want to be more guided through the
process. We&#x27;ll get to the Haskell Syllabus and opinionated vs
unopinionated content a bit later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;previous-efforts&quot;&gt;Previous efforts&lt;&#x2F;h2&gt;
&lt;p&gt;It turns out, as I&#x27;m quite embarassed to admit, that I&#x27;ve essentially
tried reinventing the same intermediate docs concept multiple times,
first with
&lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2012&#x2F;03&#x2F;start-mezzo-haskell&quot;&gt;MezzoHaskell&lt;&#x2F;a&gt;,
and then with
&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;msg&#x2F;commercialhaskell&#x2F;Ou00AvRdDTU&#x2F;7BtgTUrTSCQJ&quot;&gt;the Commercial Haskell doc initiative&lt;&#x2F;a&gt;. You
may also include &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolofhaskell.com&#x2F;&quot;&gt;School of Haskell&lt;&#x2F;a&gt;
in that list too, but I&#x27;m going to treat it separately.&lt;&#x2F;p&gt;
&lt;p&gt;These initiatives never took off. A pessimistic view is that
Haskellers are simply uninterested in contributing to such a shared
body of intermediate-level docs. I actually believed that for a bit,
but recent activity has convinced me otherwise. I think these previous
initiatives failed due to an unsatisfactory user experience. These
initiatives required people to go to an infrequently used Github repo
to view docs, which no one was doing. A few months back, a new option
presented itself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-lang-s-documentation&quot;&gt;haskell-lang&#x27;s documentation&lt;&#x2F;h2&gt;
&lt;p&gt;For those who haven&#x27;t seen it, you should check out the
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;libraries&quot;&gt;libraries page&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;documentation&quot;&gt;documentation page&lt;&#x2F;a&gt; on the
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;&quot;&gt;haskell-lang.org&lt;&#x2F;a&gt; site. I believe this
hits the nail on the head in many different ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It directly addresses a common user question: which are the best
libraries to use for a certain task? The libraries page gives this
answer (though it can certainly be improved and expanded!)&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re able to curate the documentation as a community. Providing a
list of recommended documents on this site gives a reader more
confidence than simply Googling and hoping the author knows what
he&#x2F;she is talking about&lt;&#x2F;li&gt;
&lt;li&gt;The collaboration is done via pull requests on markdown files. I&#x27;ve
&lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&#x2F;2015&#x2F;08&#x2F;thoughts-on-documentation&quot;&gt;discussed previously&lt;&#x2F;a&gt;
why I think this is a far better collaboration technique than Wikis
or other options.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of requiring all docs live within the haskell-lang.org
repository, documents can be embedded from elsewhere. For example,
I&#x27;ve
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit#readme&quot;&gt;written a conduit tutorial&lt;&#x2F;a&gt;
in the conduit repository, and
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;conduit&quot;&gt;embedded its content on haskell-lang.org&lt;&#x2F;a&gt;
via
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-lang&#x2F;haskell-lang&#x2F;blob&#x2F;master&#x2F;static&#x2F;tutorial&#x2F;package-conduit.url&quot;&gt;a simple inclusion mechanism&lt;&#x2F;a&gt;. This
allows authors to maintain their documentation individually, but
provide users with a central location to find these kinds of
documents. (I&#x27;d encourage other sites to take advantage of this
transclusion technique, getting quality content into user hands is
the goal!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;haskell-lang tries to host only &amp;quot;uncontroversial&amp;quot;
documentation. Documents explaining how to use a library are pretty
straightforward. Recommending libraries like bytestring, text, and
vector are all pretty well accepted. And for cases where multiple
libraries are used, we link to both.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve merged all of the content I wrote in MezzoHaskell and the
Commercial Haskell doc initiative into haskell-lang.org where it
fit. However, there was still some more controversial content left,
such as
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;11&#x2F;exceptions-best-practices-haskell&quot;&gt;exceptions best practices&lt;&#x2F;a&gt;,
which I know many people disagree with me about. Also, I&#x27;d like to be
able to tell a user looking for a solution, &amp;quot;yes, there are multiple
libraries around, I recommend &lt;strong&gt;X&lt;&#x2F;strong&gt;.&amp;quot; Neither of these belong on a
community site like haskell-lang, so for those...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-opinionated-content&quot;&gt;More opinionated content&lt;&#x2F;h2&gt;
&lt;p&gt;This is where alternative sites thrive. Since I&#x27;m collaborating with
others at FP Complete on this, and actively using this in
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;training&quot;&gt;training courses&lt;&#x2F;a&gt;, I&#x27;ve put
together a
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;haskell-syllabus&quot;&gt;Haskell Syllabus page&lt;&#x2F;a&gt;
page. This is where I&#x27;ll tell someone &amp;quot;you should do X, even though
others disagree with me.&amp;quot; I won&#x27;t enumerate the contentious decisions
here (odds are someone else will ultimately make such a list on my
behalf).&lt;&#x2F;p&gt;
&lt;p&gt;And if you disagree with this? Write a new syllabus! I think it would
be a healthy thing if we could get to the point as a community where
we could have multiple recommended, opinionated syllabuses, and link
to them with a short description for each one. This may sound at odds
with some of my previous statements, so let me clarify:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When there&#x27;s an obviously best choice, tell the user to use it&lt;&#x2F;li&gt;
&lt;li&gt;When most users will be best with one choice, and another option is
available, mention it as a footnote&lt;&#x2F;li&gt;
&lt;li&gt;When multiple options are available and there&#x27;s no way to know which
the user will want, break down and give them all the information
they need. But...&lt;&#x2F;li&gt;
&lt;li&gt;Try to make that happen as infrequently - and as late in the
learning process - as possible! If we could have a &amp;quot;you&#x27;ve completed
Beginner Haskell, please choose between one of the following,&amp;quot; and
explain the difference between &amp;quot;FP Complete&#x27;s course&amp;quot; vs (for
example) &amp;quot;lens-first Haskell&amp;quot;, that would be a good trade-off.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My thoughts on this are still evolving, and will likely change in the
future as I get more feedback from users.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-style&quot;&gt;Writing style&lt;&#x2F;h2&gt;
&lt;p&gt;Another big change I&#x27;ve made over the years is writing style. I wrote
the Yesod book in a very prose-heavy manner, focusing on explaining
details with words, and using concise, to-the-point code
examples. Many users have given me feedback to push me in a different
direction. Instead, I&#x27;ve recently been writing trying to write in a
very different, and thankfully easier to write, style:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Short explanation of what the thing is I&#x27;m talking about and when
you&#x27;d use it&lt;&#x2F;li&gt;
&lt;li&gt;Synopsis: medium sized code snippet to give a flavor (I used this in
the Yesd book too, and stole the idea straight from Perl docs)&lt;&#x2F;li&gt;
&lt;li&gt;A series of increasingly complex examples, with the bare minimum
amount of content around it to explain what&#x27;s going on&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;d put this style into a hybrid of tutorial and cookbook, and think
it works well overall. I&#x27;ve only heard positives so far versus
previous styles, so that&#x27;s encouraging. Some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;http-client&quot;&gt;http-client tutorial&lt;&#x2F;a&gt;
fits this well, since there are no deep concepts to explain&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;conduit&quot;&gt;conduit&lt;&#x2F;a&gt; has a bit more
explanation, but is still mostly code examples&lt;&#x2F;li&gt;
&lt;li&gt;At the other end,
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;tutorial&#x2F;primitive-haskell&quot;&gt;Primitive Haskell&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;11&#x2F;covariance-contravariance&quot;&gt;Covariance and Contravariance&lt;&#x2F;a&gt;
and much more concept-heavy, and therefore still have a significant
chunk of prose&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m taking this approach because I think it&#x27;s what most users
want. Some important points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Not all users are the same! There will almost certainly be users who
would prefer a different style of docs. Given enough user feedback
and manpower to write docs, it would be great to cater to all
tastes, but it&#x27;s best right now to focus on the highest demand&lt;&#x2F;li&gt;
&lt;li&gt;API docs are still necessary, and are completely orthogonal to
tutorials. A tutorial doesn&#x27;t document each API call, an
API-call-level explanation doesn&#x27;t give enough breadth, and
certainly users need more than just the type signatures.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-you-can-do&quot;&gt;What you can do&lt;&#x2F;h2&gt;
&lt;p&gt;After all of that, my recommendation on how to get involved is pretty
simple:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pick a library that doesn&#x27;t have a good tutorial&lt;&#x2F;li&gt;
&lt;li&gt;Write a tutorial&lt;&#x2F;li&gt;
&lt;li&gt;Submit a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-lang&#x2F;haskell-lang#contributing-content&quot;&gt;PR to haskell-lang&lt;&#x2F;a&gt;
to include the content&lt;&#x2F;li&gt;
&lt;li&gt;Alternatively: get the Markdown file included in the project&#x27;s repo
instead, and include the remote file instead&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;linking-to-libraries&quot;&gt;Linking to libraries&lt;&#x2F;h2&gt;
&lt;p&gt;haskell-lang has a nifty feature. If you visit
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;vector&quot;&gt;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;vector&lt;&#x2F;a&gt;,
it will display the vector documentation it has. But if you visit a
package like
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;stm&quot;&gt;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;stm&lt;&#x2F;a&gt;
which doesn&#x27;t (yet) have a tutorial on haskell-lang, it will
automatically redirect you to the
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;stm&quot;&gt;Stackage package page&lt;&#x2F;a&gt;. When
giving out links to people on the internet, I recommend using the
haskell-lang.org&#x2F;library&#x2F;XXX link.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When a tutorial is available, the haskell-lang page is great&lt;&#x2F;li&gt;
&lt;li&gt;When a tutorial isn&#x27;t available, the doc building on Stackage is
still the most reliable around&lt;&#x2F;li&gt;
&lt;li&gt;In addition, Stackage docs properly link to docs built in the same
Stackage snapshot, making the cross linking more reliable&lt;&#x2F;li&gt;
&lt;li&gt;When present, Stackage gives preference to the &lt;code&gt;README.md&lt;&#x2F;code&gt; files in
a package, which are generally more useful than the description
fields.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;school-of-haskell&quot;&gt;School of Haskell&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d be remiss in not mentioning School of Haskell here. As far as I&#x27;m
concerned, School of Haskell is great platform for an individual to
write content without any collaboration. However, for all of the cases
I&#x27;m describing here, some kind of easy collaboration (via pull
requests) is a huge win. Opening things up more with pull requests,
README.md files, and embedding content into multiple external sites
seems like the best option today (until someone comes up with
something better!).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell for Dummies</title>
		<published>2016-11-23T00:00:00+00:00</published>
		<updated>2016-11-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/11/haskell-for-dummies/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/11/haskell-for-dummies/</id>
		<content type="html">&lt;p&gt;There was an image that made the rounds a while ago.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;static&#x2F;haskell-as-seen-by.png&quot; alt=&quot;Haskell as seen by other language fans&quot; style=&quot;max-width:100%&quot;&gt;
&lt;p&gt;The joke being: haha, Haskell is only for super-geniuses like
Einstein. There&#x27;s lots to complain about in this chart, but I&#x27;m going
to pick on the lower-right corner. Specifically:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Haskellers don&#x27;t use Haskell because we think we&#x27;re Einstein. We use
Haskell because we know we aren&#x27;t.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When I speak to Haskellers, the general consensus is: &amp;quot;I&#x27;m not smart
enough to write robust code in a language like Python.&amp;quot; We&#x27;re not
using Haskell because we&#x27;re brilliant; we&#x27;re using Haskell because we
know we need a language that will protect us from ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I should acknowledge that Haskell does have a steeper
learning curve for most programmers. But this is mostly to do with
unfamiliarity: Haskell is significantly different from languages like
Python, Ruby, and Java, whereas by contrast those languages are all
relatively similar to each
other. &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;documentation&quot;&gt;Great&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;haskellbook.com&#x2F;&quot;&gt;educational&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;haskell-syllabus&quot;&gt;material&lt;&#x2F;a&gt; helps with
this.&lt;&#x2F;p&gt;
&lt;p&gt;You should set your expectations appropriately: it will take you
longer to learn Haskell, but it&#x27;s worth it. Personally, I use Haskell
because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It gives me the highest degree of confidence that I&#x27;ll write my
program correctly, due to its strong, static typing&lt;&#x2F;li&gt;
&lt;li&gt;It has great support for modern programming techniques, like
functional programming and green-thread-based concurrency&lt;&#x2F;li&gt;
&lt;li&gt;I can write more maintainable code in it than other languages&lt;&#x2F;li&gt;
&lt;li&gt;It has a great set of
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;libraries&quot;&gt;libraries&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s got great performance characteristics for high-level code, and
allows low-level performance tweaking when needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m certainly leaving off a lot of points here, my goal isn&#x27;t to be
comprehensive. Instead, I&#x27;d like to dispel with this notion of the
Haskeller super-genius. We Haskellers don&#x27;t believe it. We know why
we&#x27;re using a language like Haskell: to protect us from ourselves.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Spreading the Gospel of Haskell</title>
		<published>2016-11-22T00:00:00+00:00</published>
		<updated>2016-11-22T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/11/spreading-the-gospel-of-haskell/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/11/spreading-the-gospel-of-haskell/</id>
		<content type="html">&lt;p&gt;Yesterday I fired off two tweets about the state of Haskell evangelism:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I&amp;#39;d hoped by now we&amp;#39;d be out spreading the gospel of Haskell&amp;#39;s awesome features. Instead, we&amp;#39;re fighting about the same broken things.&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;800585540177432576&quot;&gt;November 21, 2016&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Haskell is by far the best language on the market today. It&amp;#39;s so sad to see it not gaining traction because of unimportant details.&lt;&#x2F;p&gt;&amp;mdash; Michael Snoyman (@snoyberg) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;800586069863301120&quot;&gt;November 21, 2016&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;script async src=&quot;&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;But simply complaining about the state of things, instead of actually
proposing a way to make things better, is a waste of 280
characters. So I&#x27;d like to expand on where I think we, the Haskell
community, can do better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attacking-haskell-s-flaws&quot;&gt;Attacking Haskell&#x27;s Flaws&lt;&#x2F;h2&gt;
&lt;p&gt;As the Twitter discussion yesterday pointed out, there are undoubtedly
flaws in Haskell. Every language has flaws. Haskell is blessed to also
have some of the greatest strengths in any programming language
available today: beautiful concurrency, a powerful &lt;em&gt;and&lt;&#x2F;em&gt; useful type
system, a plethora of real-world libraries, and (as of recently)
pretty good tooling and educational resources.&lt;&#x2F;p&gt;
&lt;p&gt;At FP Complete, we often talk about the &lt;strong&gt;attractors&lt;&#x2F;strong&gt; and
&lt;strong&gt;obstacles&lt;&#x2F;strong&gt; (thanks to our CEO, Aaron Contorer, for this great prism
to view things). Using that terminology: Haskell is chock-full of
attractors. The problem is the obstacles which prevent Haskell from
taking off. I&#x27;m going to claim that, at this point, we need to do very
little as far as making Haskell more attractive, but instead need to
collectively knock down obstacles preventing its success.&lt;&#x2F;p&gt;
&lt;p&gt;Obstacles can be a great many things, some of which you may have
categorized as &amp;quot;missing attractors.&amp;quot; Let me give some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Missing IDE tooling. For some people, this is a deal-breaker, and
will prevent them from using Haskell.&lt;&#x2F;li&gt;
&lt;li&gt;A missing library. Again, if someone needs to access, say, MS SQL
Server, and a library doesn&#x27;t exist, this is an obstacle to
adoption. (Yes, that person could go ahead and write the library
him&#x2F;herself. If you think that&#x27;s the right response, you probably
shouldn&#x27;t be reading this blog post.)&lt;&#x2F;li&gt;
&lt;li&gt;Lack of a tutorial&#x2F;example&#x2F;cookbook for a specific problem
domain. Yes, someone could struggle through reading API docs until
&amp;quot;it clicks.&amp;quot; If that&#x27;s your answer: also probably shouldn&#x27;t be
reading this post.&lt;&#x2F;li&gt;
&lt;li&gt;Lack of support for an OS&#x2F;architecture.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The important thing about obstacles is that they are not
universal. For most of us, lack of support for Haiku OS will not
prevent us from using Haskell. Those of us who have been using Haskell
for years have decided that the obstacles of bad tooling weren&#x27;t
enough to deter us from the great language features. And so on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prioritizing&quot;&gt;Prioritizing&lt;&#x2F;h2&gt;
&lt;p&gt;Many people in the Haskell community have been chipping away at random
obstacles (or adding random attractors) for years now, on a hobbyist
basis. If that&#x27;s all you want to do, more power to you, and
enjoy. What I&#x27;m doing here is making a call for a more concerted,
organized effort into knocking down these obstacles to Haskell
adoption.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d say that we can measure how high a priority an obstacle-destroying
action is based on two criteria:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How difficult it will be to accomplish&lt;&#x2F;li&gt;
&lt;li&gt;How big an impact it will have on Haskell adoption&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I would call easy actions with big impact &lt;em&gt;low hanging fruit&lt;&#x2F;em&gt;, and
recommend we focus on those actions for now. In other words, while
improving GHC compile times may have a big impact, it&#x27;s also difficult
to accomplish. Similarly, changing the Haskell logo from purple to
blue is easy to accomplish, but doesn&#x27;t have much impact.&lt;&#x2F;p&gt;
&lt;p&gt;So my set of easy to do and big impact things entirely come down to
&lt;em&gt;spreading the word&lt;&#x2F;em&gt;. I would say our biggest and easiest knocked-down
obstacles are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Someone&#x27;s never heard of Haskell&lt;&#x2F;li&gt;
&lt;li&gt;Someone&#x27;s heard of Haskell, but doesn&#x27;t know why it&#x27;s relevant&lt;&#x2F;li&gt;
&lt;li&gt;Someone&#x27;s well aware of Haskell, but thinks it will be hard to start
with&lt;&#x2F;li&gt;
&lt;li&gt;Someone&#x27;s already tried Haskell and run into problems (like
Dependency Hell), and doesn&#x27;t realize we&#x27;ve solved them&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So what does this entail? Here are my suggestions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write a blog post about how you solved a problem in Haskell&lt;&#x2F;li&gt;
&lt;li&gt;Give a talk at a conference on what problems Haskell is particularly
good at solving (my money goes to concurrency on this)&lt;&#x2F;li&gt;
&lt;li&gt;Put together a screencast on Haskell&lt;&#x2F;li&gt;
&lt;li&gt;Encourage a non-Haskeller to go through the
&lt;a href=&quot;http:&#x2F;&#x2F;haskellbook.com&#x2F;&quot;&gt;Haskell Book&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;haskell-syllabus&quot;&gt;Haskell Syllabus&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The intention here to show the world that Haskell is ready to help
them, and that it&#x27;s easy to get started now. Many of us at FP Complete
have been putting out
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;11&#x2F;comparative-concurrency-with-haskell&quot;&gt;such&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;10&#x2F;static-compilation-with-stack&quot;&gt;posts&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;09&#x2F;practical-haskell-simple-file-mirror-1&quot;&gt;for&lt;&#x2F;a&gt;
a
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;08&#x2F;bitrot-free-scripts&quot;&gt;while&lt;&#x2F;a&gt;. I&#x27;m
asking others to join in the fun and help give Haskell adoption a
kick-start.&lt;&#x2F;p&gt;
&lt;p&gt;One final request: if you&#x27;ve gotten this far, odds are you agree that
we need to encourage users to take the most-likely-to-succeed route to
Haskell, be that with tooling, training, library installation, or
library selection. We&#x27;ve put a lot of effort into making
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&quot;&gt;haskell-lang.org&lt;&#x2F;a&gt; the destination for that
goal. Hopefully haskell.org can converge on this goal in the future,
but for now it&#x27;s very likely to just present another obstacle. When
you tell people to get started with Haskell, I strongly recommend
linking to
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Haskell&#x27;s Missing Concurrency Basics</title>
		<published>2016-11-16T00:00:00+00:00</published>
		<updated>2016-11-16T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/11/haskells-missing-concurrency-basics/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/11/haskells-missing-concurrency-basics/</id>
		<content type="html">&lt;p&gt;I want to discuss two limitations in standard Haskell libraries around
concurrency, and discuss methods of improving the status quo. Overall,
Haskell&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;async&quot;&gt;concurrency&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;stm&quot;&gt;story&lt;&#x2F;a&gt; is - in my opinion - the
best in class versus any other language I&#x27;m aware of, at least for the
single-machine use case. The following are two issues that I run into
fairly regularly and are a surprising wart:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;putStrLn&lt;&#x2F;code&gt; is not thread-safe&lt;&#x2F;li&gt;
&lt;li&gt;Channels cannot be closed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let me back up these claims, and then ask for some feedback on how to
solve them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;putstrln-is-not-thread-safe&quot;&gt;&lt;code&gt;putStrLn&lt;&#x2F;code&gt; is not thread-safe&lt;&#x2F;h2&gt;
&lt;p&gt;The example below is, in my opinion, a prime example of beautiful
concurrency in Haskell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi, I&amp;#39;m worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show num

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mapConcurrently worker [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, it&#x27;s beautiful until you see the (abridged) output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Hi, HIiH&amp;#39;HH,imii , ,,I w  &amp;#39;IoIIm&amp;#39;r&amp;#39;&amp;#39; mkmmw e  owrwwro ookr#rrek2kkre
ee rrr# H  3#i##
4,51
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Your mileage may vary of course. The issue here is that
&lt;code&gt;Prelude.putStrLn&lt;&#x2F;code&gt; works on &lt;code&gt;String&lt;&#x2F;code&gt;, which is a lazy list of &lt;code&gt;Char&lt;&#x2F;code&gt;s,
and in fact sends one character at a time to &lt;code&gt;stdout&lt;&#x2F;code&gt;. This is clearly
&lt;em&gt;not&lt;&#x2F;em&gt; what we want. However, at the same time, many Haskellers -
myself included - consider &lt;code&gt;String&lt;&#x2F;code&gt;-based I&#x2F;O a bad choice anyway. So
let&#x27;s replace this with &lt;code&gt;Text&lt;&#x2F;code&gt;-based I&#x2F;O:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pack
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi, I&amp;#39;m worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show num

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mapConcurrently worker [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, if you run this (at least via &lt;code&gt;runghc&lt;&#x2F;code&gt;), the results
are the same. If you
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-7.9&#x2F;text-1.2.2.1&#x2F;src&#x2F;Data.Text.IO.html#hPutStr&quot;&gt;look at the implementation of &lt;code&gt;Data.Text.IO.hPutStr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
you&#x27;ll see that there are different implementations of that function
depending on the buffering straregy of the &lt;code&gt;Handle&lt;&#x2F;code&gt; we&#x27;re writing
to. In the case of &lt;code&gt;NoBuffering&lt;&#x2F;code&gt; (which is the default with GHCi and
&lt;code&gt;runghc&lt;&#x2F;code&gt;), this will output one character at a time (just like
&lt;code&gt;String&lt;&#x2F;code&gt;), whereas &lt;code&gt;LineBuffering&lt;&#x2F;code&gt; and &lt;code&gt;BlockBuffering&lt;&#x2F;code&gt; have batch
behavior. You can see this with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.IO

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pack
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi, I&amp;#39;m worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show num

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    hSetBuffering stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;LineBuffering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mapConcurrently worker [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While better, this still isn&#x27;t perfect:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;Hi, I&amp;#39;m worker #4Hi, I&amp;#39;m worker #5Hi, I&amp;#39;m worker #1


Hi, I&amp;#39;m worker #4Hi, I&amp;#39;m worker #5Hi, I&amp;#39;m worker #1


Hi, I&amp;#39;m worker #4Hi, I&amp;#39;m worker #5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, because
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;haddock&#x2F;lts-7.9&#x2F;text-1.2.2.1&#x2F;src&#x2F;Data.Text.IO.html#hPutStrLn&quot;&gt;newlines are written to stdout separately from the message&lt;&#x2F;a&gt;,
these kinds of issues happen too frequently. This can be worked around
too by using &lt;code&gt;putStr&lt;&#x2F;code&gt; instead and manually appending a newline
character:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.IO

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStr
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pack
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi, I&amp;#39;m worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    hSetBuffering stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;LineBuffering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mapConcurrently worker [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can avoid the buffering-dependent code in the text package
and use &lt;code&gt;ByteString&lt;&#x2F;code&gt; output, which has the advantage of automatically
using this append-a-newline logic for small-ish &lt;code&gt;ByteString&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;pack
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi, I&amp;#39;m worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show num

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mapConcurrently worker [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this has the downside of assuming a certain character
encoding, which may be different from the encoding of the &lt;code&gt;Handle&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What I&#x27;d like&lt;&#x2F;strong&gt; I would like a function &lt;code&gt;Text -&amp;gt; IO ()&lt;&#x2F;code&gt; which -
regardless of buffering strategy - appends a newline to the &lt;code&gt;Text&lt;&#x2F;code&gt;
value and sends the entire chunk of data to a &lt;code&gt;Handle&lt;&#x2F;code&gt; in a
thread-safe manner. Ideally it would account for character encoding
(though assuming UTF8 may be an acceptable compromise for most use
cases), and it would be OK if very large values are occassionally
compromised during output (due to the &lt;code&gt;write&lt;&#x2F;code&gt; system call not
accepting the entire chunk at once).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What I&#x27;d recommend today&lt;&#x2F;strong&gt; In a number of my smaller
applications&#x2F;scripts, I&#x27;ve become accustomed to defining a &lt;code&gt;say = BS.hPutStrLn stdout . encodeUtf8&lt;&#x2F;code&gt;. I&#x27;m tempted to add this to a
library - possibly even &lt;code&gt;classy-prelude&lt;&#x2F;code&gt; - along with either
reimplementing &lt;code&gt;print&lt;&#x2F;code&gt; as &lt;code&gt;print = say . T.pack . show&lt;&#x2F;code&gt; (or providing
an alternative to &lt;code&gt;print&lt;&#x2F;code&gt;). I&#x27;ve also considered replacing the &lt;code&gt;putStrLn&lt;&#x2F;code&gt; in
&lt;code&gt;classy-prelude&lt;&#x2F;code&gt; with this implementation of &lt;code&gt;say&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, I&#x27;m hoping others have some better thoughts on this, because
I don&#x27;t really find these solutions very appealing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-closable-channels&quot;&gt;Non-closable channels&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s implement a very simple multi-worker application with
communication over a &lt;code&gt;Chan&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forever&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Encoding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;encodeUtf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; encodeUtf8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Chan Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker chan num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forever &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readChan chan
    say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; concat
        [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show num
        , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show i
        ]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    chan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newChan
    mapConcurrently (worker chan) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`concurrently`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        mapM_ (writeChan chan) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Yes, I used the aforementioned &lt;code&gt;say&lt;&#x2F;code&gt; function.)&lt;&#x2F;p&gt;
&lt;p&gt;This looks all well and good, but check out the end of the output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; thread blocked indefinitely &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; an &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MVar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; operation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You see, the worker threads have no way of knowing that there are no more &lt;code&gt;writeChan&lt;&#x2F;code&gt; calls incoming, so they continue to block. The runtime system notes this, and sends them an async exception to kill them. This is &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;06&#x2F;async-exceptions-stm-deadlocks&quot;&gt;a really bad idea for program structure&lt;&#x2F;a&gt; as it can easily lead to deadlocks. Said more simply:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.sli.mg&#x2F;eX0QY1.jpg&quot; alt=&quot;If you rely on exceptions for non-exceptional cases, you&#x27;re gonna have a bad time&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Instead, the workers should have some way of knowing that the channel
is closed. This is a common pattern in other languages, and one I
think we should borrow. Implementing this with STM isn&#x27;t too bad
actually, and can easily have an &lt;code&gt;IO&lt;&#x2F;code&gt;-based API if desired:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Applicative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;|&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.STM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Encoding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;encodeUtf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; encodeUtf8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; a) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TVar Bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newTCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TCChan a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
newTCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newTChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newTVar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;False

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;closeTCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TCChan a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;closeTCChan (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; _ var) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeTVar var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;True

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;writeTCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TCChan a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;writeTCChan (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; chan var) val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    closed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTVar var
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; closed
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Could use nicer exception types, or return a Bool to
        -- indicate if writing failed
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Wrote to a closed TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeTChan chan val

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readTCChan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TCChan a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Maybe a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
readTCChan (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TCChan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; chan var) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTChan chan) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;|&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        closed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTVar var
        check closed
        return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TCChan Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker chan num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    loop
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        mi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTCChan chan
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
                say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; concat
                    [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show num
                    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show i
                    ]
                loop

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    chan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newTCChan
    mapConcurrently (worker chan) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`concurrently` do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        mapM_ (writeTCChan chan) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
        closeTCChan chan
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately, this problem has a preexisting solution: the
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;package&#x2F;stm-chans&quot;&gt;stm-chans package&lt;&#x2F;a&gt;, which
provides closable and bounded channels and queues. Our problem above
can be more easily implemented with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.23 --install-ghc runghc --package async --package text --package stm-chans
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.STM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.STM.TMQueue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text.Encoding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;encodeUtf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;S8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; encodeUtf8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TMQueue Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;worker q num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    loop
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        mi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readTMQueue q
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Nothing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Just&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
                say &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; concat
                    [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Worker #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show num
                    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; received value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, show i
                    ]
                loop

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newTMQueueIO
    mapConcurrently (worker q) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;`concurrently` do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        mapM_ (atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeTMQueue q) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]
        atomically &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; closeTMQueue q
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;What I&#x27;d like&lt;&#x2F;strong&gt; The biggest change needed here is just to get
knowledge of this very awesome &lt;code&gt;stm-chans&lt;&#x2F;code&gt; package out there
more. That could be with blog posts, or even better with links from
the &lt;code&gt;stm&lt;&#x2F;code&gt; package itself. A step up from there could be to include
this functionality in the &lt;code&gt;stm&lt;&#x2F;code&gt; package itself. Another possible
niceity would be to add a non-STM API for these - whether based on STM
or MVars internally - for more ease of use. I may take a first step
here by simply depending on and reexporting &lt;code&gt;stm-chans&lt;&#x2F;code&gt; from
&lt;code&gt;classy-prelude&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What I&#x27;d recommend&lt;&#x2F;strong&gt; Probably pretty obvious: use &lt;code&gt;stm-chans&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Like the previous point though, I&#x27;m interested to see how other people
have approached this problem, since I haven&#x27;t heard it discussed much
in the past. Either others haven&#x27;t run into this issue as frequently
as I have, everyone already knows about &lt;code&gt;stm-chans&lt;&#x2F;code&gt;, or there&#x27;s some
other solution people prefer.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Designing APIs for Extensibility</title>
		<published>2016-11-03T00:00:00+00:00</published>
		<updated>2016-11-03T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility/</id>
		<content type="html">&lt;p&gt;This is an old bit of content that I wrote, and I&#x27;m relocating to this
blog for posterity. I&#x27;ve actually been using this technique in
practice to a large extent over the past few libraries with settings
I&#x27;ve written, and overall like it. But it&#x27;s definitely opinionated,
your mileage may vary.&lt;&#x2F;p&gt;
&lt;p&gt;Every time you make a breaking change in your API, it means that- potentially-
one or more of your users will need to change his&#x2F;her code to adapt. Even if
this update is trivial, it adds friction to the code maintenance process. On
the other hand, we don&#x27;t want to be constrained by bad design choices early on
in a project, and sometimes a breaking API change is the best option.&lt;&#x2F;p&gt;
&lt;p&gt;The point of this document, however, is to give you a third option: design your
APIs from the outset to be extensible. There are common techniques employed in
the Haskell world to make APIs that are resilient to changing feature-sets, and
by employing them early on in your design process, you can hopefully avoid the
painful choices between a better API and happy users.&lt;&#x2F;p&gt;
&lt;p&gt;Almost all techniques start with implementation hiding. Guidelines here are
simple: don&#x27;t expose anything non-public. For example, if you write a number of
helper functions, you may not want to start off by exposing them, since you&#x27;re
then telling users that these are good, stable functions to be relied upon.
Instead, use explicit export lists on your modules and only include functions
that are intended for public consumption.&lt;&#x2F;p&gt;
&lt;p&gt;More important- and more tricky- than functions are data constructors. In many
cases, you want to avoid exposing the internals of your data types to users, to
allow you to expand on them in the future. A common use case for this is some
kind of a data type providing configuration information. Consider that you&#x27;re
going to communicate with some web services, so you write up the following API:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;module MyAPI
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(..)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;makeAPICall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where

data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    { apiKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Text
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;makeAPICall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO Bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The way your users will access this will be something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;makeAPICall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    { apiKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; myAPIKey
    , hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;www.example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    } myFoo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now suppose a user points out that, in some cases, the standard port 80 is
&lt;em&gt;not&lt;&#x2F;em&gt; used for the API call. So you add a new field &lt;code&gt;port :: Int&lt;&#x2F;code&gt; to your
&lt;code&gt;Settings&lt;&#x2F;code&gt; constructor. This will break your user&#x27;s code, since the &lt;code&gt;port&lt;&#x2F;code&gt;
field will not be set.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, a more robust way of specifying your API will look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#859900;&quot;&gt;module MyAPI
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkSettings
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setHostName
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;makeAPICall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where

data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    { apiKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Text
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- | Create a @Settings@ value. Uses default value for host name.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- ^ API Key
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;mkSettings key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Settings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    { apiKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; key
    , hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;www.example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setHostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;setHostName hn s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; s { hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hn }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;makeAPICall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO Bar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now your user code will instead look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;makeAPICall (mkSettings myAPIKey) myFoo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the following benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The user is not bothered to fill in default values (in this case, the hostname).&lt;&#x2F;li&gt;
&lt;li&gt;Extending this API to allow for more fields in the future is trivial: add a new &lt;code&gt;set*&lt;&#x2F;code&gt; function. Internally, you&#x27;ll add a field to &lt;code&gt;Settings&lt;&#x2F;code&gt; and set a default value in &lt;code&gt;mkSettings&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One thing to note: please do &lt;em&gt;not&lt;&#x2F;em&gt; expose the field accessors directly. If you
want to provide getter functions in addition to setters, write them explicitly,
e.g.:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getHostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Settings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;getHostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; hostName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason for this is that by exposing field accessors, users will be able to write code such as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(mkSettings myAPIKey) { hostName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;www.example.org&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This ties your hand for future internal improvements, since you are now
required to keep a field of name &lt;code&gt;hostName&lt;&#x2F;code&gt; with type &lt;code&gt;Text&lt;&#x2F;code&gt;. By just using
&lt;code&gt;set&lt;&#x2F;code&gt; and &lt;code&gt;get&lt;&#x2F;code&gt; functions, you can change your internal representation
significantly and still provide a compatibility layer.&lt;&#x2F;p&gt;
&lt;p&gt;For those of you familiar with other languages: this is in fact quite similar
to the approach taken in Java or C#. Just because Java does it doesn&#x27;t mean
it&#x27;s wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this advice is different to, and intended to supersede, &lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;book&#x2F;settings-types&quot;&gt;the settings
type approach&lt;&#x2F;a&gt;. Projects like Warp
which previously used that settings type approach are currently migrating to
this more extensible approach.&lt;&#x2F;p&gt;
&lt;p&gt;Also, while settings have been used here as a motivating example, the same
advice applies to other contexts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;internal-modules&quot;&gt;Internal modules&lt;&#x2F;h2&gt;
&lt;p&gt;One downside of implementation hiding is that it can make it difficult for
users to do things you didn&#x27;t intend for them to do with your API. You can
always add more functionality on demand, but the delay can be a major nuissance
for users. A compromise solution in the Haskell community is to provide a
&lt;code&gt;.Internal&lt;&#x2F;code&gt; module for your project which exports not-quite-public components.
For example, in wai, the &lt;code&gt;Response&lt;&#x2F;code&gt; constructors are exposed in a
&lt;code&gt;Network.Wai.Internal&lt;&#x2F;code&gt; module. Normally, users are supposed to use smart
constructors like &lt;code&gt;responseFile&lt;&#x2F;code&gt;, but occasionally they&#x27;ll want more
fine-grained control.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>New Conduit Tutorial</title>
		<published>2016-10-13T00:00:00+00:00</published>
		<updated>2016-10-13T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/10/new-conduit-tutorial/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/10/new-conduit-tutorial/</id>
		<content type="html">&lt;p&gt;A few weeks back I
&lt;a href=&quot;http:&#x2F;&#x2F;www.snoyman.com&#x2F;blog&#x2F;2016&#x2F;09&#x2F;proposed-conduit-reskin&quot;&gt;proposed a reskin of conduit&lt;&#x2F;a&gt;
to make it easier to learn and use. The proposal overall got broad
support, and therefore I went ahead with it. I then spent some time
(quite a bit more than expected) updating the conduit tutorial to use
this new reskin. If you&#x27;re interested in conduit or streaming data in
Haskell, please take a look at the new version.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;conduit&quot;&gt;haskell-lang version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;Raw Github version&lt;&#x2F;a&gt;
(if you want to send a PR)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thanks to all who provided feedback. Also, if you want to provide some
more feedback, there&#x27;s one more Github issue open up:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit&#x2F;issues&#x2F;283&quot;&gt;RFC: Stop using the type synonyms in library type signatures&lt;&#x2F;a&gt;. Please
feel free to share your opinions&#x2F;add a reaction&#x2F;start a flame war.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, the flame war comment is a joke. Please don&#x27;t take that one
literally.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Proposed conduit reskin</title>
		<published>2016-09-23T00:00:00+00:00</published>
		<updated>2016-09-23T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/09/proposed-conduit-reskin/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/09/proposed-conduit-reskin/</id>
		<content type="html">&lt;p&gt;In a few different conversations I&#x27;ve had with people, the idea of
reskinning some of the surface syntax of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;conduit#readme&quot;&gt;conduit library&lt;&#x2F;a&gt; has come
up, and I wanted to share the idea here. I call this &amp;quot;reskinning&amp;quot;
since all of the core functionality of conduit would remain unchanged
in this proposal, we&#x27;d just be changing operators and functions a bit.&lt;&#x2F;p&gt;
&lt;p&gt;The idea here is: conduit borrowed the operator syntax of &lt;code&gt;$$&lt;&#x2F;code&gt;, &lt;code&gt;=$&lt;&#x2F;code&gt;
and &lt;code&gt;$=&lt;&#x2F;code&gt; from enumerator, and it made sense at the beginning of its
lifecycle. However, for quite a while now conduit has evolved to the
point of having a unified type for &lt;code&gt;Source&lt;&#x2F;code&gt;s, &lt;code&gt;Conduit&lt;&#x2F;code&gt;s, and &lt;code&gt;Sink&lt;&#x2F;code&gt;s,
and the disparity of operators adds more confusion than it may be
worth. So without further ado, let&#x27;s compare a few examples of conduit
usage between the current skin:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Conduit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Conduit.Binary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CB

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- copy files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    runResourceT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;CB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sourceFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;source.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sinkFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dest.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- sum some numbers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runIdentity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; enumFromToC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sumC

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- print a bunch of numbers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    enumFromToC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapC (* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; takeWhileC (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapM_C print
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With a proposed reskin:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Conduit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Conduit.Binary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CB

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- copy files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    runConduitRes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;CB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;sourceFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;source.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sinkFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dest.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- sum some numbers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduitPure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; enumFromToC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; sumC

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- print a bunch of numbers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    runConduit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; enumFromToC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapC (* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; takeWhileC (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mapM_C print
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This reskin is easily defined with this module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; FlexibleContexts #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;module Conduit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;2
    ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Conduit
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Conduit2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Conduit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;hiding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;($$)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(=$)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;($=)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(=$=)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;infixr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(.|) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Monad m
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM a b m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
     -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM b c m r
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM a c m r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(.|) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fuse

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;runConduitPure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ConduitM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Void Identity r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;runConduitPure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runIdentity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;runConduitRes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadBaseControl IO m
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ConduitM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ResourceT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m) r
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; m r
runConduitRes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runResourceT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runConduit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To put this in words:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;$=&lt;&#x2F;code&gt;, &lt;code&gt;=$&lt;&#x2F;code&gt;, and &lt;code&gt;=$=&lt;&#x2F;code&gt; operators - which are all synonyms
of each other - with the &lt;code&gt;.|&lt;&#x2F;code&gt; operator. This borrows intuition from
the Unix shell, where the pipe operator denotes piping data from one
process to another. The analogy holds really well for conduit, so
why not borrow it? (We call all of these operators &amp;quot;fusion.&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;Get rid of the &lt;code&gt;$$&lt;&#x2F;code&gt; operator - also known as the &amp;quot;connect&amp;quot; or
&amp;quot;fuse-and-run&amp;quot; operator - entirely. Instead of having this
two-in-one action, separate it into &lt;code&gt;.|&lt;&#x2F;code&gt; and &lt;code&gt;runConduit&lt;&#x2F;code&gt;. The
advantage is that no one needs to think about whether to use &lt;code&gt;.|&lt;&#x2F;code&gt; or
&lt;code&gt;$$&lt;&#x2F;code&gt;, as happens today. (Note that &lt;code&gt;runConduit&lt;&#x2F;code&gt; is available in the
conduit library today, it&#x27;s just not very well promoted.)&lt;&#x2F;li&gt;
&lt;li&gt;Now that &lt;code&gt;runConduit&lt;&#x2F;code&gt; is a first-class citizen, add in some helper
functions for two common use cases: running with &lt;code&gt;ResourceT&lt;&#x2F;code&gt; and
running a pure conduit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The goals here are to improve consistency, readability, and intuition
about the library. Of course, there are some downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s a slight performance advantage (not benchmarked recently
unfortunately) to &lt;code&gt;foo $$ bar&lt;&#x2F;code&gt; versus &lt;code&gt;runConduit $ foo =$= bar&lt;&#x2F;code&gt;,
since the former combines both sets of actions into one. We may be
able to gain some of this back with GHC rewrite rules, but my
experience with rewrite rules in conduit has been less than
reliable.&lt;&#x2F;li&gt;
&lt;li&gt;Inertia: there&#x27;s a lot of code and material out there using the
current set of operators. While we don&#x27;t need to ever remove (or
even deprecate) the current operators, having two ways of writing
conduit code in the wild can be confusing.&lt;&#x2F;li&gt;
&lt;li&gt;Conflicting operator: doing a
&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;lts-7.0&#x2F;hoogle?q=.%7C&quot;&gt;quick Hoogle search&lt;&#x2F;a&gt;
reveals that the parallel package already uses &lt;code&gt;.|&lt;&#x2F;code&gt;. We could choose
a different operator instead
(&lt;a href=&quot;https:&#x2F;&#x2F;www.stackage.org&#x2F;lts-7.0&#x2F;hoogle?q=%7C.&quot;&gt;&lt;code&gt;|.&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for instance
seems unclaimed), but generally I get nervous any time I&#x27;m defining
new operators.&lt;&#x2F;li&gt;
&lt;li&gt;For simple cases like &lt;code&gt;source $$ sink&lt;&#x2F;code&gt;, code is now quite a few keystrokes
longer: &lt;code&gt;runConduit $ source .| sink&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Code wise, this is a trivial change to implement. Updating docs to
follow this new convention wouldn&#x27;t be too difficult either. The
question is: is this a good idea?&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Monads are like Lannisters</title>
		<published>2016-09-12T00:00:00+00:00</published>
		<updated>2016-09-12T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/09/monads-are-like-lannisters/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/09/monads-are-like-lannisters/</id>
		<content type="html">&lt;p&gt;As many people are likely aware, monads (incorrectly) have a bad rap
in the programming community for being difficult to learn. A string of
extremely flawed monad tutorials based on analogies eventually led to
a
&lt;a href=&quot;https:&#x2F;&#x2F;byorgey.wordpress.com&#x2F;2009&#x2F;01&#x2F;12&#x2F;abstractsion-intuition-and-the-monad-tutorial-fallacy&#x2F;&quot;&gt;blog post by Brent Yorgey&lt;&#x2F;a&gt;
about the flaws of this analogy-based approach. And we&#x27;ve seen
&lt;a href=&quot;http:&#x2F;&#x2F;haskellbook.com&#x2F;&quot;&gt;great&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;blog.sigfpe.com&#x2F;2006&#x2F;08&#x2F;you-could-have-invented-monads-and.html&quot;&gt;learning&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;documentation&quot;&gt;materials&lt;&#x2F;a&gt; on Haskell and
monads.&lt;&#x2F;p&gt;
&lt;p&gt;However, I&#x27;m disappointed to see the analogy-based route
disappear. Based on a
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&#x2F;status&#x2F;773892889868963841&quot;&gt;recent Twitter poll&lt;&#x2F;a&gt;
I ran, which is held to the highest levels of scientific and
statistical scrutiny, it&#x27;s obvious that there is very high demand for
a rigorous analogy-based monad tutorial. I claim that the flaw in all
previous analogy based tutorials is lack of strong pop culture
references. Therefore, I&#x27;m happy to announce the definitive guide to
monads: Monads are like Lannisters.&lt;&#x2F;p&gt;
&lt;p&gt;Spoiler alert: if you haven&#x27;t completed book 5 or season 6 of Haskell
yet, there &lt;em&gt;will&lt;&#x2F;em&gt; be spoilers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prereqs&quot;&gt;Prereqs&lt;&#x2F;h2&gt;
&lt;p&gt;The examples below will all be Haskell scripts that can be run with
the Stack build tool. Please
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;get-started&quot;&gt;grab Stack to play along&lt;&#x2F;a&gt;. Copy-paste
the full example into a file like &lt;code&gt;foo.hs&lt;&#x2F;code&gt; and then run it with &lt;code&gt;stack foo.hs&lt;&#x2F;code&gt;. (This uses Stack&#x27;s
&lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2016&#x2F;08&#x2F;bitrot-free-scripts&quot;&gt;script interpreter support&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hear-me-roar&quot;&gt;Hear me roar&lt;&#x2F;h2&gt;
&lt;p&gt;Many people believe that the Lannister house words are &amp;quot;A Lannister
always pays his debts&amp;quot; (or her debts of course). We&#x27;ll get to that
line in a moment. This belief however is false: the &lt;em&gt;true&lt;&#x2F;em&gt; Lannister
house words are &lt;strong&gt;Hear me roar&lt;&#x2F;strong&gt;. So let&#x27;s hear a Lannister roar:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Roar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Tywin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Cersei
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Jaime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Tyrion
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Roaring is clearly an &lt;em&gt;output&lt;&#x2F;em&gt;, and therefore it makes sense that our
action is an &lt;code&gt;IO&lt;&#x2F;code&gt; action. But roaring doesn&#x27;t really do much besides
making sound, so its return is the empty value &lt;code&gt;()&lt;&#x2F;code&gt;. In our &lt;code&gt;main&lt;&#x2F;code&gt;
function, we use &lt;code&gt;do&lt;&#x2F;code&gt; notation to roar multiple times. But we can just
as easily use the &lt;code&gt;replicateM_&lt;&#x2F;code&gt; function to replicate a monadic action
multiple times and discard (that&#x27;s what the &lt;code&gt;_&lt;&#x2F;code&gt; means) the results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;roar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Roar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; roar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;tyrion-the-scholar&quot;&gt;Tyrion, the scholar&lt;&#x2F;h2&gt;
&lt;p&gt;As we all know, Tyrion is a prolific scholar, consuming essentially
any book he can get his hands on (we&#x27;ll discuss some other consumption
next). Fortunately, monads are there to back him up, with the &lt;code&gt;Reader&lt;&#x2F;code&gt;
monad. Let&#x27;s say that Tyrion is doing some late night research on wine
production (epic foreshadowment) in various kingdoms, and wants to
produce a total:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Map
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad.Trans.Reader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Maybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fromMaybe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Kingdom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WineCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;WineData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Map Kingdom WineCount

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tyrionResearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Reader WineData Int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tyrionResearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mnorth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; asks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;lookup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;north&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    mriverlands &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; asks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;lookup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;riverlands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fromMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mnorth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; fromMaybe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; mriverlands

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runReader tyrionResearch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;fromList
    [ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;north&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;riverlands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;reach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    , (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dorne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
    ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While Tyrion may have chosen inferior kingdoms for wine production, it
does not take away from the fact that the &lt;code&gt;Reader&lt;&#x2F;code&gt; type has allowed
him access to data without having to explicitly pass it around. For an
example this small (no dwarf joke intended), the payoff isn&#x27;t
great. But &lt;code&gt;Reader&lt;&#x2F;code&gt; is one of the simplest monads, and can be quite
useful for larger applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tyrion-the-drinker&quot;&gt;Tyrion, the drinker&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s try another one. We all know that Tyrion also likes to &lt;em&gt;drink&lt;&#x2F;em&gt;
wine, not just count it. So let&#x27;s use our &lt;code&gt;Reader&lt;&#x2F;code&gt; monad to give him
access to a bottle of wine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;However&lt;&#x2F;em&gt;, unlike reading data from a book, drinking from a bottle
actually changes the bottle. So we have to leave our pure &lt;code&gt;Reader&lt;&#x2F;code&gt;
world and get into the &lt;code&gt;ReaderT IO&lt;&#x2F;code&gt; world instead. Also known as
&lt;em&gt;monad transformers&lt;&#x2F;em&gt;. (Unfortunately I don&#x27;t have time now for a full
post on it, but consider: &lt;strong&gt;Transformers: Monads in Disguise&lt;&#x2F;strong&gt;.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replicateM_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad.Trans.Reader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad.IO.Class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent.Chan

data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Wine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Wine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Bottle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Chan Wine

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drink &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MonadIO m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bottle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;drink bottle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; liftIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Wine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; readChan bottle
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Now I&amp;#39;m slightly drunker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tyrionDrinks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ReaderT Bottle IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tyrionDrinks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ReaderT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; drink

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Get a nice new bottle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    bottle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; newChan

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- Fill up the bottle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    replicateM_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; writeChan bottle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Wine

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- CHUG!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    runReaderT tyrionDrinks bottle
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;a-lannister-always-pays-his-debts&quot;&gt;A Lannister always pays his debts&lt;&#x2F;h2&gt;
&lt;p&gt;What is a debt, but receiving something from another and then
returning it? Fortunately, there&#x27;s a monad for that too: the &lt;code&gt;State&lt;&#x2F;code&gt;
monad. It lets us take in some value, and then give it back - perhaps
slightly modified.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad.Trans.State

type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Sword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;String

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;State Sword Sword
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;forge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Ice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; get
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- do our Valyrian magic, and...

    -- Repay our debt to Brienne
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    put &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Oathkeeper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- And Tywin gets a sword too!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Widows Wail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;killNedStark &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO Sword
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;killNedStark &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Off with his head!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Ice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    origSword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; killNedStark

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (forTywin, forBrienne) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; runState forge origSword

    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Tywin received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forTywin
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Jaime gave Brienne: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forBrienne
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not exactly justice, but the types have been satisfied! A monad always
pays its debts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;throwing&quot;&gt;Throwing&lt;&#x2F;h2&gt;
&lt;p&gt;Monads are also useful for dealing with exceptional cases:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Exception
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Typeable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;JaimeException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ThrowBranFromWindow
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Exception JaimeException

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;jaime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;jaime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Did anyone see us?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    answer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; getLine
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; answer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Good&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; throwIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;ThrowBranFromWindow

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; jaime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;killing&quot;&gt;Killing&lt;&#x2F;h2&gt;
&lt;p&gt;And thanks to asynchronous exceptions, you can also kill other threads
with monads.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Exception
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Typeable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;JaimeException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Defenestrate
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Typeable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Exception JaimeException

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bran &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bran &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; handle onErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forever &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I&amp;#39;m climbing a wall!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    threadDelay &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100000
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;onErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SomeException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    onErr ex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Oh no! I&amp;#39;ve been killed by: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; show ex

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;jaime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ThreadId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;jaime thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    threadDelay &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Oh, he saw us&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    throwTo thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Defenestrate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    threadDelay &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;300000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Problem solved&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; forkIO bran
    jaime thread
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exercise for the reader: modify &lt;code&gt;bran&lt;&#x2F;code&gt; so that he properly recovers
from that exception and begins warging instead. (WARNING:
&lt;a href=&quot;https:&#x2F;&#x2F;haskell-lang.org&#x2F;library&#x2F;safe-exceptions&quot;&gt;don&#x27;t recover from async exceptions in practice&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exiting&quot;&gt;Exiting&lt;&#x2F;h2&gt;
&lt;p&gt;You can also exit your entire process with monads.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.Exit

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tommen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tommen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Oh, my dear wife!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    exitFailure

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; tommen
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;passing-the-baton-of-reign&quot;&gt;Passing the baton of reign&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve seen Lannisters pass the baton of reign from family member to family member. We&#x27;ve also seem them ruthlessly destroy holy insitutions and have their private, internal affairs exposed. As it turns out, we can do all of that with some explicit &lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Evaluation_order_and_state_tokens&quot;&gt;state token&lt;&#x2F;a&gt; manipulation!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;usr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;env stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- stack --resolver lts-6.15 --install-ghc runghc

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; MagicHash #-}
{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; UnboxedTuples #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;GHC.Prim
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;GHC.Types

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;joffrey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;joffrey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Look at your dead father&amp;#39;s head Sansa!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Oh no, poisoned!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tommen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;tommen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I&amp;#39;m in love!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    putStrLn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;*Swan dive*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cersei &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;cersei &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; undefined &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;-- season 7 isn&amp;#39;t out yet

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;unIO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RealWorld &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; (# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RealWorld&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #)
unIO (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; f

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;IO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$ \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;s0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
  case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; unIO joffrey s0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
    (# s1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;
      case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; unIO tommen s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
        (# s2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt; #) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
          unIO cersei s2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;honorable-mentions&quot;&gt;Honorable mentions&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s much more to be done with this topic, and there were other
ideas besides Lannisters for this post. To give some mention for other
ideas:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There&#x27;s plenty of other Lannister material to work with (skinning
animals, Jaime and Cersei affairs, or Tyrion proclivities). But I
had to draw the line somewhere (both for length of post and topics I
felt like discussing...). Feel free to comment about other ideas.&lt;&#x2F;li&gt;
&lt;li&gt;One of my favorites: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;00Syssiphus&#x2F;status&#x2F;774240234766819332&quot;&gt;monads are like onions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Monads are &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;GabrielG439&#x2F;status&#x2F;774234282323697664&quot;&gt;just your opinion, man&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;they&#x27;re like Gargoyles, they decorate the public facing interface
of important landmarks in Haskell-land.&amp;quot;
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tritlo&#x2F;status&#x2F;774235047780032512&quot;&gt;link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Personally, I was going to go with a really terrible &amp;quot;monads are like
printers&amp;quot; based on them taking plain paper in and spitting out printed
pages, but Lannisters was a lot more fun. Also, I&#x27;m sure there&#x27;s
&lt;em&gt;something&lt;&#x2F;em&gt; great to be done with presidential candidates, at the very
least &lt;code&gt;throwTo opponent Insult&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;&#x2F;h2&gt;
&lt;p&gt;Since I&#x27;m sure &lt;em&gt;someone&lt;&#x2F;em&gt; is going to get upset about this: YES, this
post is meant entirely as parody, and should not be used for actually
learning anything except some random details of Game of Thrones, and
perhaps a bit of Haskell syntax. Please use the learning materials I
linked at the beginning for actually learning about Haskell and
monads. And my real advice: don&#x27;t actually &amp;quot;learn monads,&amp;quot; just start
using Haskell and you&#x27;ll pick them up naturally.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using AppVeyor for Haskell+Windows CI</title>
		<published>2016-08-31T00:00:00+00:00</published>
		<updated>2016-08-31T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;UPDATE August 2018&lt;&#x2F;strong&gt; As pointed out by Mark Wotton, the instructions below were out of date (see &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2018&#x2F;06&#x2F;sed-a-debugging-story&quot;&gt;Sed: A Debugging Story&lt;&#x2F;a&gt; for more information). I&#x27;ve updated the contents below, but for future readers: please see the more up-to-date AppVeyor configuration on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;blob&#x2F;stable&#x2F;doc&#x2F;appveyor.yml&quot;&gt;Stack&#x27;s Github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t think I ever documented this before, so just a quick post to get this
out there. Many of us working on open source Haskell libraries already use
&lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; for doing continuous integration builds of
our software. Some time ago they added support for OS X, making it possible to
cover Linux and OS X with multiple configurations on their systems. For any
project with a &lt;a href=&quot;https:&#x2F;&#x2F;docs.haskellstack.org&#x2F;en&#x2F;stable&#x2F;yaml_configuration&#x2F;&quot;&gt;stack.yaml
file&lt;&#x2F;a&gt;, this can be
easily achieved using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.haskellstack.org&#x2F;en&#x2F;stable&#x2F;GUIDE&#x2F;#travis-with-caching&quot;&gt;Stack recommended Travis
configuration&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, this leaves Windows testing out, which is unfortunate, because Windows is likely to be the most common build to fail. Fortunately, &lt;a href=&quot;https:&#x2F;&#x2F;www.appveyor.com&#x2F;&quot;&gt;AppVeyor&lt;&#x2F;a&gt; provides a similar experience to Travis, but for Windows. In order to get set up, just:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sign in with their web interface and add your Github repo&lt;&#x2F;li&gt;
&lt;li&gt;Add an &lt;code&gt;appveyor.yml&lt;&#x2F;code&gt; to your project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here&#x27;s a simple file I&#x27;ve used on a few projects with succeess:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;off

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;before_test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;# http:&#x2F;&#x2F;help.appveyor.com&#x2F;discussions&#x2F;problems&#x2F;6312-curl-command-not-found
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;set PATH=C:\Program Files\Git\mingw64\bin;%PATH%

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;curl -sS -ostack.zip -L --insecure http:&#x2F;&#x2F;www.stackage.org&#x2F;stack&#x2F;windows-i386
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;7z x stack.zip stack.exe

clone_folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;STACK_ROOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;sr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;# Override the temp directory to avoid sed escaping issues
    # See https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;cabal&#x2F;issues&#x2F;5386
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;TMP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;tmp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839496;&quot;&gt;&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;test_script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;stack setup &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;# The ugly echo &amp;quot;&amp;quot; hack is to avoid complaints about 0 being an invalid file
# descriptor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;echo &amp;quot;&amp;quot; | stack --no-terminal test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Downloads the Stack zip file&lt;&#x2F;li&gt;
&lt;li&gt;Unpacks the stack.exe executable&lt;&#x2F;li&gt;
&lt;li&gt;Changes the &lt;code&gt;STACK_ROOT&lt;&#x2F;code&gt; to deal with Windows long path issues&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;stack setup&lt;&#x2F;code&gt; to get a toolchain&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;stack --no-terminal test&lt;&#x2F;code&gt; to build your package and run the test suites&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You&#x27;re free to modify this in any way you want, e.g., add in &lt;code&gt;--bench&lt;&#x2F;code&gt; to build
benchmarks, add &lt;code&gt;--pedantic&lt;&#x2F;code&gt; to fail on warnings, etc. If you have more system
library dependencies, you&#x27;ll need to consult the AppVeyor docs to see how to
install them. And in our use cases for Stack, we found that using the AppVeyor
caching functionality made builds unreliable (due to the large size of the
cache). You may want to experiment with turning it back on, since this setup is
&lt;em&gt;slow&lt;&#x2F;em&gt; (it downloads and installs a full GHC toolchain and builds all library
dependencies each time).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Restarting this blog</title>
		<published>2016-08-24T00:00:00+00:00</published>
		<updated>2016-08-24T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2016/08/restarting-this-blog/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2016/08/restarting-this-blog/</id>
		<content type="html">&lt;p&gt;Just a minor note: I&#x27;m planning on starting up this blog again, with some
personal thoughts - likely still mostly around programming and Haskell - that
don&#x27;t fit in the other blogs that I contribute to (&lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&quot;&gt;Yesod Web
Framework&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&quot;&gt;FP
Complete&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t have a clear list of topics I&#x27;m going to be covering, but I&#x27;ll likely
be sharing some thoughts on running engineering teams and startups effectively.
If you have something you&#x27;d like me to cover, please &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;snoyberg&quot;&gt;Tweet it to
me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>XSLT Rant Explained</title>
		<published>2012-04-09T00:00:00+00:00</published>
		<updated>2012-04-09T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2012/04/xslt-rant-explained/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2012/04/xslt-rant-explained/</id>
		<content type="html">&lt;p&gt;My previous blog post got a bit more attention than I&#x27;d anticipated. I hadn&#x27;t
really intended it as more than a place to link to and let the XSLT people I
work with know that the language isn&#x27;t representative of functional languages.
However, a number of people have asked for more details. That&#x27;s the purpose of
this post.&lt;&#x2F;p&gt;
&lt;p&gt;Before getting into the claims of my post itself, let me address some of the
counter-claims I saw in some of the discussions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XSLT isn&#x27;t &lt;em&gt;functional&lt;&#x2F;em&gt;, it&#x27;s &lt;em&gt;declarative&lt;&#x2F;em&gt;.&lt;&#x2F;b&gt; I can agree with this distinction, and think the XSLT world needs to accept it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;XSLT is actually very concise.&lt;&#x2F;strong&gt; No, it&#x27;s not. XPath- the query language used by XSLT- is incredibly concise, and I have no issue with it. In fact, when designing &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;xml-conduit&quot;&gt;xml-conduit&lt;&#x2F;a&gt;, Aristid and I designed the combinators after XPath.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;XSLT 2.0 fixes a lot of this stuff.&lt;&#x2F;strong&gt; XSLT 2.0 is just lipstick on a hog. It changes none of the underlying problems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One last bit of explanation: I don&#x27;t think most people realize the level to
which XSLT is used in some projects. When used as a client-side technology to
convert some simple XML into simple HTML, XSLT can work just fine. I &lt;em&gt;still&lt;&#x2F;em&gt;
think it&#x27;s a horrible language, but it&#x27;s passable. The real problem is that
&lt;em&gt;XSLT doesn&#x27;t scale&lt;&#x2F;em&gt;. Here&#x27;s the issue I was alluding to in my previous blog
post. The DITA-OT has some code that looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&amp;lt;!-- Copy @id attributes verbatim --&amp;gt;
&amp;lt;xsl:template match=&amp;quot;@id&amp;quot;&amp;gt;
    &amp;lt;xsl:attribute name=&amp;quot;id&amp;quot; select=&amp;quot;.&amp;quot;&#x2F;&amp;gt;
&amp;lt;&#x2F;xsl:template&amp;gt;

&amp;lt;xsl:template match=&amp;quot;some-element&amp;quot;&amp;gt;
    &amp;lt;xsl:apply-templates select=&amp;quot;@id&amp;quot;&#x2F;&amp;gt; &amp;lt;!-- Applies the default template to the ID attribute --&amp;gt;
    &amp;lt;!-- A bunch more ugly code --&amp;gt;
&amp;lt;&#x2F;xsl:template&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, one of my coworkers unwittingly added:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&amp;lt;!-- Some special case requires printing out the attributes verbatim. --&amp;gt;
&amp;lt;xsl:template match=&amp;quot;@*&amp;quot;&amp;gt;
    &amp;lt;xsl:if test=&amp;quot;$some-special-case&amp;quot;&amp;gt;
        &amp;lt;xsl:value-of select=&amp;quot;.&amp;quot;&#x2F;&amp;gt;
    &amp;lt;&#x2F;xsl:if&amp;gt;
&amp;lt;&#x2F;xsl:template&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That second block says to print out the raw value of the attribute in question.
The problem is, it overrides the definition of the @id template in the first
block, and now all the ids for some-element are being printed out verbatim,
which is &lt;em&gt;not&lt;&#x2F;em&gt; what we wanted!&lt;&#x2F;p&gt;
&lt;p&gt;So which of those code blocks is wrong? Both of them. You shouldn&#x27;t be
polluting the global namespace with these kinds of specific templates, they
each should have been put in their own &lt;code&gt;mode&lt;&#x2F;code&gt;. But I have two points here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XSLT&lt;&#x2F;code&gt; is encouraging people to write bad code by using a global namespace by default.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s horribly difficult to find a bug like this. This project is well over 8000 lines of XSLT code, spread across some 40 files. It took me an hour to debug this. Sure, the people writing the original code wrote it badly, but a language shouldn&#x27;t punish maintainers like this!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The issue here is one that many XSLT proponents contend is a strength: you can
go ahead and modify the behavior of existing templates in a later file. This
can actually be very convenient. Imagine you&#x27;re converting DocBook to HTML, and
you have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&amp;lt;xsl:template match=&amp;quot;para&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;
        &amp;lt;xsl:apply-templates&#x2F;&amp;gt;
    &amp;lt;&#x2F;p&amp;gt;
&amp;lt;&#x2F;xsl:template&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now you decide that you would like to change this so that a &lt;code&gt;para&lt;&#x2F;code&gt; tag is
always given a &lt;code&gt;class&lt;&#x2F;code&gt; of &lt;code&gt;paragraph&lt;&#x2F;code&gt; in the HTML. You can go ahead and write a
customization:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&amp;lt;xsl:template match=&amp;quot;para&amp;quot;&amp;gt;
    &amp;lt;p class=&amp;quot;paragraph&amp;quot;&amp;gt;
        &amp;lt;xsl:apply-templates&#x2F;&amp;gt;
    &amp;lt;&#x2F;p&amp;gt;
&amp;lt;&#x2F;xsl:template&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And all of the existing code will automatically use this new template. I won&#x27;t
argue that this isn&#x27;t convenient. It certainly is. But it flies in the face of
all good engineering practice. Suddenly, I have no idea what an
&lt;code&gt;apply-templates&lt;&#x2F;code&gt; will do. I describe this as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have no idea what a single line of code will do without analyzing every
other line of code in your program.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are plenty of ways to do this properly in real programming languages. In
my Haskell-based DITA processing code, for example, there is a setting allowing
you to specify specific handling for individual elements. Then in the calling
code, you are explicitly calling into a function for which you don&#x27;t know what
the output will necessarily be. Everything is properly namespaced and
segregated, and you can know by looking at the code in front of you just how
it&#x27;s going to be dispatched.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m out of time for now, but if anyone wants to see examples of XML processing
done right, let me know. I will say that for some of my company&#x27;s newer
products, I&#x27;ve completely reimplemented DITA-to-HTML transforms, and it&#x27;s
likely a tenth of the size of the DITA-OT&#x27;s HTML transforms.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Open Letter to XSLT Fans</title>
		<published>2012-04-05T00:00:00+00:00</published>
		<updated>2012-04-05T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2012/04/xslt-rant/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2012/04/xslt-rant/</id>
		<content type="html">&lt;p&gt;Dear XSLT fans,&lt;&#x2F;p&gt;
&lt;p&gt;Please don&#x27;t insist on calling your bastard child of a language &amp;quot;functional.&amp;quot; Just because it got one thing sort-of right (immutable data), doesn&#x27;t mean that it in any way represents a real functional language.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not even talking about the hideously verbose syntax, or the completely obtuse data model. The fact that you can&#x27;t know what any single line of code does without reviewing &lt;strong&gt;every other line in the program&lt;&#x2F;strong&gt; makes this language an abomination.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t believe me? Ask me for examples, I&#x27;ll prove it. But anyone who&#x27;s used XSLT for multi-file projects likely knows I&#x27;m right.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and the fact that you can call a language functional when it &lt;em&gt;lacks first class functions&lt;&#x2F;em&gt; makes my eye twitch. I&#x27;m tempted to upload a video of my eye twitching just to prove it.&lt;&#x2F;p&gt;
&lt;p&gt;Sincerely,
A Haskell programmer who spends an inordinate amount of time debugging bad XSLT.&lt;&#x2F;p&gt;
&lt;p&gt;PS: I would gladly write a program in Java, or C++, or likely assembly, over XSLT any day. Those languages may have issues, but they&#x27;re sane tools. XSLT is just fundamentally broken.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Dysfunctional Programming: FindMimeFromData</title>
		<published>2012-03-22T00:00:00+00:00</published>
		<updated>2012-03-22T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2012/03/ie-mimetype-png/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2012/03/ie-mimetype-png/</id>
		<content type="html">&lt;p&gt;I&#x27;ve been a bit torn about what exactly to put on this blog. Short comments go
to Google+. Anything Haskell related goes to the &lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&quot;&gt;Yesod blog&lt;&#x2F;a&gt;.
So what goes here?&lt;&#x2F;p&gt;
&lt;p&gt;For now, I&#x27;ve decided to start a series on dysfunctional programming. In other
words, horror stories from the non-Haskell world.&lt;&#x2F;p&gt;
&lt;p&gt;Today&#x27;s tale begins with a strange bug report. One of our clients says that all
of the CSS changes we put on their server have suddenly disappeared. Which is
especially strange, because I don&#x27;t have any write access to their production
server. There were two aspects to this report: bullets were missing, and the
title image didn&#x27;t display in IE. By the way, there&#x27;s a separate title image,
provided by the client, for each publication.&lt;&#x2F;p&gt;
&lt;p&gt;Forget about the bullets for now, that one wasn&#x27;t interesting. The title image
was truly a conundrum. I started off by loading the output in Chrome. No
problem. Internet Explorer? Red X. At first I thought it was a URL mangling
issue. But when I tried moving the title image to a simple path on the system
and loading it up, it &lt;em&gt;still&lt;&#x2F;em&gt; displayed as a red X.&lt;&#x2F;p&gt;
&lt;p&gt;I started a local Warp server and accessed the site from there. No problem.&lt;&#x2F;p&gt;
&lt;p&gt;So... the file itself is correct, and the name of the file isn&#x27;t the problem.
What&#x27;s the issue? I spent a good 30 minutes looking for PNG bugs in IE.
Unfortunately, with IE&#x27;s sordid history of PNG bugs, it was like looking for a
needle in a haystack. However, I saw one off-hand comment:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Try right-clicking the image, choosing properties, and look at the type.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I tried it and, sure enough, the type was &amp;quot;Unknown,&amp;quot; not &amp;quot;PNG&amp;quot;. So it turns out
that when served from a web server, IE was delivered the correct mimetype via a
response header. But when opening from the local filesystem, it needs to detect
the mimetype automatically.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at a file extension is too simple. IE needs to outsmart us. The
solution?
&lt;a href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;ie&#x2F;ms775147%28v=vs.85%29.aspx&quot;&gt;FindMimeFromData&lt;&#x2F;a&gt;.
This wonderfully constructed function inspects the contents of the file in
question and determines the mimetype. For example, this nifty little program
will print the mimetype of the title.png file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;#include &amp;lt;urlmon.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char* argv[])
{
    char buff[256];
    LPWSTR out;

    FILE *in = fopen(&amp;quot;title.png&amp;quot;, &amp;quot;rb&amp;quot;);

    fread(buff, 1, 256, in);

    FindMimeFromData(NULL, NULL, buff, 256, NULL, FMFD_DEFAULT, &amp;amp;out, 0);

    printf(&amp;quot;%ls\n&amp;quot;, out);

    return 0;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result? &lt;code&gt;image&#x2F;pjpeg&lt;&#x2F;code&gt; of course! Never mind that that&#x27;s an invalid mimetype, but the Win32 function is giving the &lt;strong&gt;wrong mimetype for a PNG file&lt;&#x2F;strong&gt;!!! I&#x27;m not quite certain how Microsoft screwed this up so royally. There&#x27;s a very explicit set of bytes at the beginning of the file indicating that it&#x27;s a PNG, and &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;imagesize-conduit&quot;&gt;imagesize-conduit&lt;&#x2F;a&gt; detects it just fine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;import Data.Conduit
import Data.Conduit.Binary
import Data.Conduit.ImageSize

main :: IO ()
main = do
    f &amp;lt;- runResourceT $ sourceFile &amp;quot;title.png&amp;quot; $$ sinkImageInfo
    print f
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In other words: Internet Explorer, since version 4, can&#x27;t even display some
simple images.&lt;&#x2F;p&gt;
&lt;p&gt;I had to tell the client that we have no workaround, and they need to either
&amp;quot;fix&amp;quot; their perfectly valid PNG or always serve their content from a webserver.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>First Post</title>
		<published>2012-01-31T00:00:00+00:00</published>
		<updated>2012-01-31T00:00:00+00:00</updated>
		<link href="https://www.snoyman.com/blog/2012/01/first-post/" type="text/html"/>
		<id>https://www.snoyman.com/blog/2012/01/first-post/</id>
		<content type="html">&lt;p&gt;Most of my blogging still occurs on the &lt;a href=&quot;http:&#x2F;&#x2F;www.yesodweb.com&#x2F;blog&quot;&gt;Yesod blog&lt;&#x2F;a&gt;. This blog will be home for posts that are not necessarily Yesod or Haskell related.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
